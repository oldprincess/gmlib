#include <gmlib/sm3/internal/sm3_common.h>
#include <cstring>
#include <stdexcept>

using namespace sm3::internal::common;

void test_sm3_common()
{
    Sm3CTX ctx;
    sm3_init(&ctx);
    std::uint8_t  digest[SM3_DIGEST_SIZE];
    std::size_t   block_num, process_n;

    std::uint8_t msg0[485]    = {0x22,0x7a,0xef,0xca,0xab,0xeb,0xa8,0xb4,0xd7,0x49,0x39,0x94,0x86,0x36,0x8b,0x80,0x74,0xa2,0xaa,0x3f,0xd8,0xfc,0x0c,0x4d,0x5b,0x8e,0x05,0x24,0x1f,0xe6,0xda,0x5d,0x29,0xd5,0xd4,0x6d,0xaa,0xdd,0x6b,0x75,0xbd,0x7e,0x4c,0x12,0xf4,0x7a,0x37,0xc3,0x0c,0x7c,0x33,0x5d,0x49,0xcf,0xa1,0x82,0x25,0x07,0x1b,0x32,0xca,0x0d,0xaa,0x86,0xc0,0x95,0x0a,0x17,0x28,0xa7,0x88,0x57,0x56,0xc8,0x83,0x17,0x46,0x75,0x2b,0x48,0xd3,0xaf,0xb9,0x84,0xf3,0x5c,0x2a,0x45,0x4b,0x17,0x40,0xed,0x28,0x1b,0x42,0x84,0x65,0x6f,0xd2,0x26,0x17,0x7e,0x96,0xa0,0x00,0x53,0x7f,0xd6,0x58,0xa2,0xb0,0xc3,0x88,0x46,0x21,0xc2,0x90,0x65,0x7e,0xc9,0x03,0x2a,0xf4,0xfb,0xd2,0x3f,0xe0,0xa7,0xf2,0xc2,0x2b,0xd2,0x9b,0x75,0xeb,0xa9,0x44,0x93,0x5f,0xf3,0x10,0x8e,0xa9,0xae,0x6d,0xd0,0x24,0x73,0xbc,0x1d,0x00,0xf7,0x0b,0xef,0x7d,0xbf,0x6d,0x22,0x60,0xc2,0x25,0x47,0x69,0x28,0x7e,0xf3,0x67,0x48,0xaa,0x91,0xd0,0xad,0xaf,0x57,0xf7,0x86,0x59,0xe9,0x16,0x31,0x08,0x38,0x52,0x2b,0x95,0xd2,0xb4,0x7c,0xcc,0x66,0x94,0x2e,0xfa,0x94,0x4c,0x0c,0x1a,0xa8,0x04,0x39,0xbe,0x43,0xd8,0x85,0x1e,0xb4,0x1e,0xd0,0x38,0x32,0x18,0x69,0xfe,0x08,0x0f,0x9f,0xe3,0x2e,0xae,0x83,0x8f,0x95,0xde,0xa4,0xee,0x69,0x67,0xfb,0x5c,0x4c,0xc3,0xa5,0xee,0x58,0x02,0x5e,0x80,0xf3,0xb5,0xe2,0x9c,0xe6,0x58,0xe1,0xed,0x97,0x3a,0xa9,0xa6,0x4c,0x11,0xac,0x0f,0x96,0x2d,0xbc,0xe2,0x4d,0x7f,0x24,0x62,0x9b,0x02,0xae,0x91,0x4d,0xea,0x28,0xba,0x20,0xa3,0xe9,0xe1,0x8e,0x0b,0x64,0x6e,0x80,0x8a,0x1c,0x0c,0x8e,0xcc,0x9d,0xc3,0xa2,0x93,0x99,0xac,0x4e,0x4d,0xf2,0x49,0x30,0x66,0x30,0xa6,0xd7,0xc2,0xb6,0xda,0x69,0x5a,0x7f,0x94,0x99,0x21,0x1a,0xcd,0x53,0xee,0x45,0x11,0x00,0x0b,0xcd,0xc7,0x33,0xb7,0x54,0xc0,0xdf,0xaa,0xf4,0x9e,0x22,0x02,0x96,0xe4,0xd4,0xb9,0x72,0xe6,0xf2,0xa4,0x91,0x49,0x80,0x4c,0xeb,0x32,0x15,0xcb,0xc5,0x61,0xdc,0x41,0x11,0x51,0x58,0x72,0xd0,0x68,0xce,0x8f,0xc5,0x6f,0xfe,0x39,0xbb,0xdf,0x47,0xc4,0x2b,0xbe,0xd9,0x0d,0xf4,0x01,0x22,0x40,0xc1,0xdd,0x2f,0x8f,0xca,0x57,0x25,0xbb,0xd2,0x18,0x41,0xde,0x9d,0xed,0x96,0x6f,0xdb,0x4f,0x47,0x38,0xcf,0x70,0x30,0x3f,0xe1,0x9a,0x1f,0xfc,0x3c,0x92,0x12,0x70,0xfc,0x85,0x74,0x13,0xf6,0xe6,0x66,0x53,0xa2,0xaa,0x5d,0x59,0x99,0x18,0xa0,0x57,0xfd,0x8a,0x66,0x29,0xd2,0x57,0x85,0xb6,0x49,0xd0,0x67,0x1d,0x11,0xc2,0x4d,0xd0,0x0e,0x6b,0x96,0x0d,0xe5,0x1b,0x82,0x15,0xcb,0x50,0x53,0x9e,0x16,0x1f,0xff,0x30,0xf3,0x1f,0xf4,0x08,0x4b,0x14,0xbd,0xdb,0xe3,0xb9,0xd1,0xf0,0x10,0xdb,0x24,0x10,0x93,0x41,0xb9,0x52,0xae,0xd9,0xec,0x48,0x47,0x1f,0x30,0x6f,0xdd,0x5b,0x55,0x84,0xae,0x8c};
    std::uint8_t digest0[32] = {0x6a,0x36,0x2f,0x68,0x35,0xbf,0xd7,0x45,0x7a,0xc8,0x9e,0x9e,0xbd,0x6e,0x0d,0x9f,0x47,0xbb,0x84,0xc8,0xa2,0xfe,0xc3,0x6b,0x92,0x61,0x62,0x94,0x3d,0x00,0x5f,0x4b};
    sm3_reset(&ctx);
    block_num = sizeof(msg0) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg0, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg0 + process_n,
                        sizeof(msg0) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest0, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg1[111]    = {0x1b,0x24,0xa4,0x2a,0xfa,0x28,0xa5,0xf6,0x81,0xbd,0x6a,0xb0,0x17,0x5d,0xca,0xcf,0x29,0xd8,0x66,0x50,0xfe,0x3d,0x09,0xfe,0xa2,0x0f,0x79,0xe0,0x9f,0x6d,0x18,0xdf,0x83,0xee,0xd6,0x35,0x8f,0x4a,0x58,0x85,0xf4,0xcc,0x94,0x6c,0x95,0x35,0x68,0x56,0x68,0xea,0xa5,0xe4,0x90,0x83,0x20,0xc3,0x71,0xb4,0xda,0xb8,0x59,0x37,0x8a,0x15,0x26,0xac,0x70,0xc3,0xb1,0x6f,0xce,0x89,0xe6,0x67,0x09,0xcc,0xc3,0x68,0x4b,0xf7,0xdd,0xd4,0xc5,0xca,0xc7,0x46,0xfb,0x85,0x40,0xfa,0x09,0x14,0xf3,0x23,0x19,0x60,0xb1,0x7c,0x21,0xfc,0xd6,0x10,0x39,0x31,0xa3,0x0d,0x9b,0x09,0x04,0x01,0x23};
    std::uint8_t digest1[32] = {0x64,0x7a,0x6b,0x0e,0x8a,0x26,0xba,0xe5,0x78,0xa7,0xb9,0xca,0xe8,0xe3,0x0f,0x6f,0xdb,0xe7,0x7e,0x34,0x2c,0x96,0x7d,0x47,0x0f,0xe8,0x83,0x4d,0xd4,0x68,0x33,0x89};
    sm3_reset(&ctx);
    block_num = sizeof(msg1) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg1, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg1 + process_n,
                        sizeof(msg1) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest1, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg2[357]    = {0xe3,0x95,0x20,0x09,0xe0,0xf9,0x47,0x83,0x00,0x31,0x64,0xd2,0x4b,0xe3,0xe7,0x66,0x44,0x47,0x9e,0x99,0xc7,0x7c,0x22,0x25,0x1a,0x35,0x21,0x8e,0x38,0xeb,0x14,0xa4,0x22,0xd6,0xc9,0x79,0x19,0x96,0xac,0x71,0x7a,0x7f,0x1a,0xa2,0x1c,0x96,0x36,0x12,0x3f,0x76,0xa8,0x28,0xe3,0xe8,0x88,0xd8,0xbb,0x6d,0xc6,0x9b,0x94,0x17,0xbb,0xc3,0x89,0x07,0x3f,0x5e,0x66,0xd7,0x54,0x24,0xc5,0xd9,0xf1,0xce,0x77,0x41,0xb1,0x96,0xeb,0x41,0xb3,0x5e,0x5f,0x54,0x82,0x61,0xe9,0xf2,0xf0,0x98,0x65,0x95,0xd9,0xee,0xb2,0xe5,0x27,0x0e,0xc6,0x31,0xe9,0x6b,0x78,0x7b,0xfc,0x6b,0xac,0x66,0xee,0xcd,0xcd,0x6a,0x9f,0xaf,0x39,0x6c,0x38,0xc6,0x08,0xc7,0x19,0xf2,0xc3,0xe9,0x04,0x77,0x6a,0xc9,0x80,0xf4,0x1a,0x2b,0x5e,0xc7,0x8f,0x02,0x67,0x28,0x2d,0x0f,0xbd,0x38,0x6c,0xa3,0x20,0xd8,0xb4,0x86,0x20,0xc8,0x2e,0x5d,0xc2,0xca,0x7b,0x77,0xc2,0x44,0x95,0xe4,0x33,0xc5,0x60,0x2c,0x81,0x59,0x52,0xfa,0x99,0x65,0x30,0xb3,0xeb,0xb9,0x66,0xfd,0x75,0x26,0xdb,0x8c,0xf9,0xcc,0xe2,0xa2,0xca,0x18,0xfb,0x0b,0x8d,0xbe,0x2d,0xc6,0xaf,0xc8,0x22,0x65,0x19,0xab,0xa2,0x8f,0xc9,0xbc,0x19,0xdc,0xe5,0x0b,0x53,0xe2,0x79,0xf0,0x60,0x7e,0xa8,0x9d,0xff,0x30,0x65,0xe8,0x4a,0x63,0xfd,0x77,0xe2,0xcf,0x6d,0xa0,0x44,0x60,0x04,0x76,0x2c,0x93,0x2c,0x09,0x1b,0x68,0x7d,0x6a,0x94,0x3a,0x39,0x3a,0x48,0x5d,0x33,0xbd,0xaa,0x35,0xe9,0x62,0xf0,0x17,0x3c,0x67,0x3e,0x61,0x15,0x12,0x1b,0x02,0xa9,0xc2,0xbb,0x5d,0x9b,0x4f,0x86,0x07,0xf7,0x20,0xbf,0x02,0x0a,0x33,0x1b,0x59,0x41,0xca,0x1b,0xc3,0xcd,0x0a,0x17,0xab,0x5f,0x7c,0x70,0x07,0xae,0x53,0x40,0xcc,0xbc,0xc1,0xc2,0x21,0xb3,0xa2,0xcb,0x27,0x30,0x8e,0x6a,0x51,0x5c,0x88,0x41,0x1a,0x86,0x8f,0x3c,0x8d,0xc8,0x7c,0xb9,0xa8,0xaa,0x36,0x19,0xb3,0x71,0x0f,0x61,0x2c,0x34,0x4f,0x2a,0xab,0xee,0x11,0x3a,0xf7,0x26,0xc0,0x9c,0x80,0xe5,0xd9,0x31,0x13,0x69,0x93,0x62,0xfe,0xeb,0xfa,0x0b,0x02,0x37,0x6a,0xd4,0x72,0xd3,0xf0,0x6d};
    std::uint8_t digest2[32] = {0xbf,0xb8,0x19,0x65,0xff,0xff,0xeb,0xf5,0x82,0x75,0x1a,0x7f,0xa6,0xc1,0x0a,0xd4,0x56,0x02,0x68,0x5e,0x9b,0x08,0x1b,0xe2,0x19,0x0d,0xc8,0x67,0x22,0xb7,0xb1,0x01};
    sm3_reset(&ctx);
    block_num = sizeof(msg2) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg2, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg2 + process_n,
                        sizeof(msg2) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest2, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg3[285]    = {0xd0,0x11,0x10,0xab,0x1f,0x2c,0x93,0xd6,0x16,0xf0,0xca,0xff,0xd4,0xee,0x78,0xf8,0x3a,0x0d,0x6f,0x85,0x9a,0xe1,0x41,0x0b,0x9c,0xdb,0x15,0x0d,0x6d,0xfa,0xe4,0xa2,0x5a,0x0a,0xb8,0x23,0xbc,0x90,0x2c,0x3b,0x26,0xc6,0x8d,0x8c,0x10,0x74,0xed,0x55,0xac,0xd4,0x41,0xb9,0x1e,0xde,0x9e,0x84,0x09,0x3d,0x96,0x0f,0x9f,0x26,0xe7,0x08,0x72,0xa1,0x99,0x36,0xa2,0x67,0xb5,0xb7,0x0e,0x83,0x13,0x44,0x89,0x07,0xe0,0x1c,0x83,0xb1,0xbc,0x05,0x34,0x66,0x36,0x20,0x3a,0x4d,0xdb,0x08,0x28,0x36,0xf7,0x9b,0x7e,0xf5,0x5c,0x1f,0x03,0x1e,0x2d,0x84,0x02,0xdf,0x4c,0xb3,0x13,0xa9,0x17,0x5d,0xf6,0xa7,0x80,0x08,0xd2,0x5a,0x1b,0x46,0x22,0x0d,0xfd,0x20,0x0c,0x5f,0x33,0xa1,0x02,0xd7,0xe9,0xc1,0xbb,0xaa,0xb0,0xaa,0xf5,0xbe,0xba,0x8f,0xb2,0x70,0xe7,0x6b,0xee,0x55,0x04,0xb1,0x3b,0xa8,0x24,0xbd,0xc6,0x6a,0x91,0xea,0x08,0xa8,0x45,0xc3,0x7f,0x0d,0x28,0xcc,0x6b,0x56,0x7e,0x47,0x86,0x14,0x93,0x68,0xab,0xf3,0x07,0x44,0xae,0xdc,0x9e,0xc7,0x3d,0x16,0x90,0x02,0x1c,0x9e,0x5f,0x48,0x1a,0xb8,0x67,0x8a,0x1c,0xc6,0x62,0x3a,0xbe,0x8a,0x38,0xd6,0xce,0x62,0xb8,0x8b,0xb3,0xdc,0x69,0x55,0x69,0xfe,0xd5,0x24,0x48,0x20,0x98,0x50,0x4a,0x59,0x5d,0x22,0x46,0x9f,0x63,0x06,0x15,0xa9,0x91,0x45,0xfd,0xec,0x92,0xe5,0xea,0x09,0xfa,0x08,0xaf,0x53,0x3a,0x44,0x07,0x39,0x2b,0xb1,0xbc,0xbe,0x10,0x80,0x6c,0xd8,0x17,0xa5,0x24,0x52,0x43,0x85,0x58,0x0b,0x8f,0x6f,0x7e,0x80,0x8d,0x29,0x94,0x82,0xf6,0xd2,0xc1,0x04,0x12,0x20,0x9b,0x51,0x0e,0x5f,0x51,0x45,0x59,0x25,0x67,0xec,0x1b,0xb1,0xf1};
    std::uint8_t digest3[32] = {0xc7,0xf8,0xe0,0x5e,0xd3,0xdb,0xf6,0xc0,0xb6,0xcd,0x38,0x89,0x47,0x79,0x1f,0x9b,0xe3,0x6f,0xff,0x5c,0x92,0x89,0x69,0x23,0x56,0x4f,0x7a,0x28,0x8a,0x50,0x48,0x30};
    sm3_reset(&ctx);
    block_num = sizeof(msg3) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg3, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg3 + process_n,
                        sizeof(msg3) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest3, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg4[333]    = {0xca,0x95,0x6c,0x6d,0xf7,0xa0,0x1f,0x1c,0x49,0x26,0xb0,0xb6,0x7e,0x1b,0x38,0x6e,0x1c,0x71,0x4e,0x7a,0x36,0xd3,0x1a,0xf9,0xc2,0x24,0x9b,0x89,0x6c,0x95,0xd7,0x37,0x78,0x81,0x25,0x0e,0xbe,0xb6,0x4a,0xca,0x16,0xa4,0xe4,0x77,0x5b,0xeb,0x3b,0x11,0x15,0x00,0x15,0xaf,0x24,0xf9,0x9e,0x19,0xf6,0x0d,0xec,0xdd,0xf6,0x83,0xfa,0x80,0x4d,0x21,0x65,0x79,0x40,0xd8,0xe5,0x3f,0x9b,0xb0,0x7a,0xa3,0xc3,0xc7,0xbd,0x8d,0x79,0x82,0x6d,0xd4,0x21,0x02,0xbd,0x66,0x00,0x2d,0x50,0xd6,0xa9,0x67,0x24,0x0b,0x2d,0x32,0x4b,0x0e,0x01,0x06,0x18,0x27,0x3e,0x10,0xb9,0x39,0x0e,0x3a,0x2a,0xc9,0x36,0xad,0x46,0x1c,0x58,0x75,0xb8,0x60,0x89,0xab,0xdf,0xe7,0x68,0x47,0x9c,0x94,0xd5,0xa3,0x0a,0x6a,0x8b,0xb2,0x2d,0xfa,0xff,0x6f,0xd1,0xba,0xb0,0x34,0x92,0x67,0x68,0x6e,0x79,0xef,0x2b,0x5c,0x37,0xb3,0x68,0x7d,0x01,0xb3,0xa6,0xa2,0xb9,0x15,0xb5,0x7f,0x40,0x1f,0x99,0xb7,0x79,0xe9,0x7f,0xb8,0xe5,0xce,0xb2,0xec,0xf1,0xd4,0xdb,0x24,0x07,0x28,0xc6,0x94,0x2b,0x83,0x37,0x93,0x25,0x7f,0x6c,0x7e,0xf2,0x9d,0x58,0x06,0x1a,0x80,0x0b,0xb8,0xc1,0x69,0xfd,0x0c,0x1c,0x0c,0xcc,0x50,0xeb,0x9a,0x94,0xc7,0xba,0x0d,0x34,0x40,0x30,0xbf,0x3d,0x20,0x8c,0xf3,0x19,0xb0,0xfa,0xeb,0xe6,0x88,0x6c,0x90,0x48,0xfc,0x4b,0x54,0xf7,0x09,0x96,0xa5,0x32,0xb7,0x8c,0xd0,0xe7,0x60,0x75,0x18,0xd6,0x7a,0x32,0x5c,0x97,0x8a,0xa8,0x13,0x58,0xb7,0x68,0xc0,0x9e,0xb9,0x55,0x62,0x35,0x66,0x51,0xd8,0x4b,0x6b,0xeb,0x9b,0x0c,0x1f,0xf0,0x45,0xee,0xe8,0xef,0xcf,0x32,0x16,0xe0,0xe0,0xe6,0xe1,0x60,0xb7,0x7a,0xb8,0x0f,0x5f,0x2c,0xd5,0xb3,0x9b,0x6a,0xb7,0xab,0x47,0xb5,0x18,0xf5,0xb0,0x1e,0x59,0x5f,0x5f,0x43,0xde,0xa9,0x2a,0xc5,0x82,0xfa,0xe6,0xf3,0x1a,0x5a,0xeb,0x8e,0x9a,0xaf,0x70,0x84,0x8c,0xc3,0xd9,0x12,0xe7,0x72,0x28,0xf2,0x0d,0xec,0xd4,0x24};
    std::uint8_t digest4[32] = {0x3a,0x87,0xcd,0x6d,0x21,0x82,0xe1,0xa6,0x17,0x43,0x5d,0xe8,0x04,0x31,0x46,0xc4,0xa7,0x66,0x69,0xe8,0x97,0xaa,0x68,0x39,0x43,0x0b,0xb4,0x18,0x0f,0x73,0x36,0x71};
    sm3_reset(&ctx);
    block_num = sizeof(msg4) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg4, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg4 + process_n,
                        sizeof(msg4) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest4, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg5[378]    = {0xe2,0x17,0x9a,0x9b,0x7f,0x5c,0xdf,0x01,0xde,0x01,0x37,0xd0,0xed,0x76,0xc2,0x20,0xbf,0x8c,0x1b,0xb8,0xa5,0x99,0xae,0xdd,0x05,0x10,0xd5,0x27,0x44,0x55,0xf9,0x81,0xeb,0x9a,0xa0,0x86,0x49,0x11,0xfa,0x32,0x55,0x68,0x30,0xd8,0x80,0x44,0x9a,0x4d,0xd6,0x2d,0xe6,0x24,0x91,0xa0,0x14,0x98,0xb5,0xba,0xba,0x44,0x3a,0xe7,0x80,0x0f,0xb5,0x0e,0xb9,0xbe,0x9e,0x5c,0x73,0x0e,0x69,0xaf,0x6f,0x1d,0x8c,0xfc,0xff,0x46,0x0f,0xaa,0x0c,0x5e,0x6e,0x94,0x5f,0x02,0x1b,0xca,0xdb,0x67,0xf7,0xc8,0x53,0xab,0xc3,0xd4,0x84,0xa4,0x04,0x55,0x28,0xbb,0xfc,0x58,0x81,0x05,0x3f,0xc3,0xb6,0x3b,0x50,0x6c,0x56,0x8b,0xd8,0x0d,0x7b,0x28,0x85,0x30,0x41,0x13,0xcd,0x69,0xba,0x70,0x22,0x6d,0xbe,0x09,0x27,0x70,0x68,0x65,0xcc,0x8b,0x56,0x58,0x10,0x27,0x7e,0x70,0xb4,0x59,0xbe,0x74,0x9c,0x78,0x0c,0x8d,0x27,0x92,0xdd,0xae,0xc2,0x55,0x74,0xb0,0x45,0x60,0x45,0x2a,0x8c,0x26,0xe5,0x09,0x51,0x04,0x82,0x31,0xa9,0xb3,0x26,0x7f,0xac,0xae,0x49,0xb9,0xbc,0x52,0x29,0x47,0x68,0x68,0x54,0x44,0x19,0x9f,0x8c,0x2c,0xb8,0xb0,0x7a,0xe2,0x10,0xd0,0x9f,0xfe,0x59,0xde,0x8e,0x65,0xc3,0x97,0x5c,0x3b,0xf2,0xc9,0xd4,0x87,0x09,0xbc,0xe2,0x12,0xe6,0x94,0xb8,0x60,0x05,0x6f,0xc4,0xe0,0xe2,0xea,0x70,0xc5,0x81,0x6d,0x11,0xa8,0x02,0x99,0xcc,0xbf,0xe1,0xf7,0x38,0xc9,0x21,0x34,0x12,0xb1,0x34,0x42,0x65,0xe1,0xea,0x69,0x6a,0x18,0xaa,0xf9,0x8c,0x2b,0xac,0x05,0x42,0xaf,0xd3,0xfa,0xd1,0xf2,0xbf,0xc7,0x39,0xcd,0xfd,0x2e,0xcf,0x64,0x85,0xbb,0xa0,0x45,0x08,0x56,0x2d,0x0f,0x15,0xf8,0xf1,0x5b,0x69,0x8c,0x7f,0xc4,0x7f,0xd9,0xc9,0xa9,0x1f,0x8e,0x2e,0x86,0xdc,0x3a,0x72,0x81,0x37,0xa8,0x64,0x5c,0x89,0x66,0xa3,0x48,0x3b,0x9b,0x78,0x35,0x5f,0xa4,0x3f,0x17,0x6c,0xcf,0x3f,0x01,0x07,0x5c,0xac,0x14,0x11,0x10,0x5b,0x9b,0x72,0xb4,0x90,0xca,0xdd,0x51,0x49,0xd8,0x9b,0x6f,0x32,0x0b,0x12,0x67,0x8d,0xd6,0x2c,0xa9,0x27,0x86,0x2d,0x15,0x18,0x26,0x70,0x86,0x1e,0x15,0x1f,0xe6,0xb6,0xc8,0x07,0x10,0x9f,0xd3,0x0f,0x61,0x37,0xa0,0xbf,0x37,0xc3,0x81,0xb0,0x03,0x98,0x00,0x5d,0x1f};
    std::uint8_t digest5[32] = {0x68,0x3e,0x7e,0x97,0x9d,0x42,0xd4,0x91,0x74,0x0a,0xe5,0x43,0x11,0x6b,0x56,0xfd,0xdf,0x10,0x12,0x3e,0xc4,0xc8,0x02,0x60,0x45,0xb4,0xec,0xc4,0x19,0xd6,0xdb,0x9c};
    sm3_reset(&ctx);
    block_num = sizeof(msg5) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg5, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg5 + process_n,
                        sizeof(msg5) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest5, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg6[72]    = {0x07,0x3e,0xd2,0x2e,0x83,0x4d,0x47,0x83,0x0e,0x2e,0x28,0x28,0x38,0x0c,0xc3,0x39,0x2e,0xb4,0xab,0xca,0xc6,0x51,0x67,0x8e,0x0c,0x38,0x5b,0x48,0x1e,0x6f,0xc6,0xcd,0xc3,0xcf,0x18,0xc2,0x50,0x97,0x84,0xa3,0xbb,0x68,0xd3,0x1e,0x99,0x67,0xaf,0xe6,0x59,0x2c,0xa0,0x70,0x27,0x62,0x03,0x3c,0x69,0x08,0xe7,0x3b,0xc8,0xb4,0x19,0xa3,0x81,0x7d,0x1d,0xe7,0x27,0x5c,0xc9,0x0b};
    std::uint8_t digest6[32] = {0xf9,0x4c,0x9f,0xc0,0xa7,0x4a,0x70,0x01,0xc7,0xba,0xf9,0xd9,0xc4,0xfe,0xaf,0x8e,0x7c,0xa6,0x3a,0x5d,0x9e,0xba,0xa3,0x42,0x56,0xca,0x23,0xf8,0x97,0x36,0xe7,0x72};
    sm3_reset(&ctx);
    block_num = sizeof(msg6) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg6, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg6 + process_n,
                        sizeof(msg6) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest6, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg7[238]    = {0xa0,0xfe,0x85,0xc8,0xd1,0x32,0xd5,0x84,0xfe,0x6f,0x1c,0x06,0x7b,0xd3,0xba,0xdb,0xfe,0xa7,0xc6,0x39,0xd9,0x79,0x6e,0x03,0xed,0x09,0xc6,0x6f,0x8b,0x80,0xc7,0x9d,0x3c,0x9c,0xa3,0x3c,0x02,0x01,0x76,0x00,0xde,0x1a,0xa2,0xf8,0xe6,0x2b,0x72,0xaf,0x74,0x1d,0x6a,0xb7,0x60,0x2a,0xce,0x7c,0xa0,0x55,0x33,0x94,0x9f,0x34,0xbc,0xe3,0xbd,0x46,0xa6,0xbb,0x2d,0x5e,0x14,0x4d,0xc1,0xb7,0x53,0xfb,0x0f,0x3a,0x53,0xf8,0x21,0xfb,0xea,0xac,0x6a,0xc0,0xfd,0xab,0x37,0x31,0xf0,0xe0,0xd5,0xf2,0x2b,0x51,0xbf,0x04,0x68,0x50,0x53,0xf2,0x76,0xfe,0xb3,0x95,0xa3,0x5f,0x28,0x08,0x2d,0xe5,0xaf,0xa6,0x06,0xef,0xa9,0x3c,0xee,0xcb,0x79,0xb2,0xb7,0x42,0x8a,0x8f,0xaf,0x74,0xe1,0x11,0xb2,0xa6,0x21,0x8b,0x4d,0x2f,0x93,0x8d,0x08,0x92,0x04,0x7b,0x02,0x8f,0x63,0xb4,0x93,0x8e,0x1e,0x26,0xbd,0x2c,0x2c,0x43,0x8c,0x93,0x54,0xa1,0x63,0xa5,0x27,0xf2,0xcb,0x95,0x67,0xc3,0x1c,0xc2,0xf8,0x1b,0xb8,0x91,0x9c,0x04,0x52,0x41,0x8e,0x19,0x71,0x49,0x00,0x71,0x54,0x77,0x84,0x17,0x6d,0x8a,0x24,0xbe,0xfd,0x24,0x3b,0x00,0xb6,0xbd,0x4a,0xae,0x88,0xb2,0xca,0x7a,0xe9,0x59,0xb6,0x95,0xef,0xf9,0xee,0xa3,0x8c,0x57,0x84,0xf6,0x38,0xe1,0xe7,0x6b,0x7e,0x68,0xa9,0x68,0xd0,0x7a,0xd7,0xb7,0x18,0x49,0x4f,0x28,0x88,0x59,0x2a,0x37,0x53,0x33,0x4a,0x1e};
    std::uint8_t digest7[32] = {0xa8,0x16,0xb6,0x56,0xdc,0xe0,0x4c,0x82,0x72,0x0f,0x5a,0xe4,0x02,0xef,0x8c,0x47,0x3e,0x44,0x7a,0x56,0xe0,0x76,0xa1,0xeb,0xb6,0xc7,0x77,0x0c,0x89,0x02,0x26,0xa4};
    sm3_reset(&ctx);
    block_num = sizeof(msg7) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg7, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg7 + process_n,
                        sizeof(msg7) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest7, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg8[81]    = {0x03,0xa3,0x2f,0x3c,0xd0,0x8d,0x43,0xb8,0x61,0x01,0x7f,0x03,0xae,0xc3,0x6d,0xff,0x2e,0xa3,0x20,0x30,0x31,0xab,0x0c,0x58,0xa3,0xae,0x06,0xf8,0x99,0xdb,0x6a,0xa8,0xa9,0xa1,0x7e,0xb0,0x8f,0xd5,0xa7,0x7f,0xe8,0x9a,0x36,0x0a,0x30,0x20,0x56,0x37,0xc6,0x65,0x20,0xe3,0x0b,0x8a,0x42,0xc2,0x19,0xb0,0x10,0xd6,0x9d,0x69,0x79,0xc0,0x98,0x9e,0x03,0xcc,0x6d,0xd7,0x35,0x22,0x7e,0x3d,0x09,0xe2,0xff,0x86,0xaa,0x56,0x77};
    std::uint8_t digest8[32] = {0x4a,0x78,0xb7,0x2d,0x16,0xb0,0xf5,0x13,0x01,0xd4,0x97,0x75,0x82,0xb5,0x78,0x7c,0xf2,0xf7,0x91,0x61,0x83,0xc1,0x62,0x0d,0x80,0x5b,0xe5,0x27,0x91,0x7d,0xda,0x2e};
    sm3_reset(&ctx);
    block_num = sizeof(msg8) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg8, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg8 + process_n,
                        sizeof(msg8) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest8, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg9[158]    = {0xc8,0x95,0xf3,0x0b,0x4b,0xc6,0x58,0x5f,0x3c,0x24,0x1b,0xd1,0x68,0x88,0x16,0xc6,0xa0,0xe9,0xe8,0x84,0x66,0x07,0x92,0x71,0x8e,0x20,0xe3,0xac,0x3a,0xa9,0x56,0x11,0xb5,0x28,0x93,0xb7,0xf8,0x6c,0xae,0xe6,0x59,0x7c,0xf1,0xba,0xa1,0xf9,0xa9,0xf8,0x08,0x8c,0x98,0x76,0x45,0x3b,0x98,0xd6,0xff,0x62,0xf8,0x8b,0xb3,0x40,0xc4,0xe4,0xcd,0xb4,0xf1,0x10,0xc4,0x78,0x7c,0x62,0xb0,0x2f,0x06,0xf4,0xe1,0xa7,0x7b,0x55,0x88,0x6c,0x01,0xe8,0x20,0x86,0x3a,0x00,0x5c,0x60,0xab,0x2b,0x9f,0x7a,0xce,0xf3,0x15,0x58,0xe5,0xdf,0xe7,0x2b,0xc4,0xa0,0xb1,0x1f,0xc3,0x85,0x7d,0x6f,0x39,0xa7,0xae,0xd8,0x3f,0x3c,0x06,0xcb,0xa4,0x89,0x77,0xe4,0x64,0x6c,0xe1,0x04,0x87,0x64,0x16,0xd8,0x9c,0xd5,0xdb,0x34,0x3d,0x87,0x5e,0x2e,0x39,0x68,0x4a,0x6c,0xf7,0x9b,0xac,0x6e,0x21,0xf6,0x93,0xfd,0xb5,0xd1,0x4a,0xe7,0x8e,0xea,0xec,0x88};
    std::uint8_t digest9[32] = {0x82,0x53,0x09,0x7d,0x23,0x7a,0xf7,0x0a,0x74,0xa8,0x16,0x1a,0x2a,0x65,0x2c,0x09,0x5c,0x8a,0x8e,0x62,0xaa,0x6a,0x1b,0xb6,0xa7,0x31,0x39,0xa6,0xdd,0x8e,0x28,0x23};
    sm3_reset(&ctx);
    block_num = sizeof(msg9) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg9, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg9 + process_n,
                        sizeof(msg9) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest9, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg10[442]    = {0x94,0x4f,0x51,0x7a,0x27,0x59,0x78,0xef,0x32,0x60,0xe5,0x00,0xc3,0x06,0xb0,0x23,0xf9,0xb1,0x2b,0xc8,0x12,0x82,0xe8,0x9f,0x7c,0x66,0xb2,0xfb,0x64,0xeb,0xd1,0x97,0xfe,0x5c,0xbf,0x2e,0x93,0x6b,0x53,0x63,0x28,0x08,0x79,0x47,0xa6,0xf7,0xf2,0xb5,0x4d,0x49,0x13,0x89,0x6a,0xd1,0xb0,0x5c,0x7a,0xbf,0x74,0x35,0x95,0xf7,0x67,0xe0,0x66,0x39,0x74,0x30,0x82,0x42,0xea,0xd9,0xa0,0xf8,0x54,0x25,0xcc,0x06,0x3a,0x7c,0xdf,0x7e,0x88,0x98,0xa7,0x49,0x33,0xdb,0x04,0x72,0xda,0xd6,0x1d,0xc8,0x85,0xb3,0x92,0x96,0x62,0x8d,0x7d,0xf3,0x0d,0x4b,0x8b,0xbe,0xc0,0x55,0xe1,0x52,0xe2,0x73,0x82,0xf3,0x50,0xb6,0x0a,0x96,0xc0,0x55,0x46,0x0c,0x7a,0x95,0x40,0x74,0xa5,0x7a,0xda,0x24,0xe7,0xde,0x95,0x81,0x0d,0xd5,0xf8,0xef,0x3e,0x1a,0x39,0x38,0xcb,0x17,0x05,0x1c,0x32,0x74,0x36,0x98,0x54,0xdf,0x31,0xfd,0x42,0xde,0x61,0xc9,0x60,0x47,0xdd,0x05,0xae,0xf9,0xbf,0xc7,0xa0,0x38,0x36,0x76,0x9c,0x0d,0xb5,0xb9,0x93,0x32,0x04,0x43,0x87,0x80,0x08,0x56,0xc6,0x4d,0x38,0xd6,0x33,0xcf,0x4d,0x78,0x14,0xa0,0x5f,0x16,0x61,0xb4,0x7e,0x8a,0x46,0xa4,0x1b,0x2f,0x10,0xf2,0xf7,0x48,0x6c,0x60,0xd2,0x0b,0x89,0x96,0x1f,0xaa,0xb7,0x85,0x0f,0xa2,0xc6,0x7d,0x63,0x7b,0xe3,0xe1,0x91,0x65,0x06,0xcf,0xea,0x2a,0x00,0x75,0xd7,0xd9,0xfa,0x74,0xdc,0xca,0x81,0x6c,0x9d,0x33,0x71,0xc1,0x10,0xc1,0xd8,0xad,0x60,0x19,0x7d,0x18,0x44,0x78,0x21,0xac,0xd1,0x86,0xac,0x60,0xbf,0xfc,0x3f,0xeb,0x63,0x6f,0xb5,0x11,0x83,0x2e,0x98,0x5a,0x53,0x36,0x78,0x16,0x64,0xa2,0x21,0xbb,0x0c,0x4a,0x15,0x24,0x03,0xf7,0x2a,0x57,0x65,0x82,0xbc,0xaa,0xac,0xf0,0x63,0x25,0xb4,0x29,0x21,0x58,0x23,0x2e,0xb6,0xff,0xf6,0xf6,0xba,0xc5,0x36,0x5a,0xef,0x60,0xa3,0x97,0x22,0xbd,0xe8,0x87,0xf7,0xac,0x60,0xbf,0xe8,0x1a,0xef,0x22,0x9c,0xf6,0x1a,0xef,0x9e,0x72,0xec,0x71,0xc2,0x34,0xf9,0xd1,0xbd,0x53,0x06,0xba,0xfe,0x24,0x14,0xed,0x6c,0x00,0xd4,0x47,0x5a,0x05,0x1d,0x27,0xd0,0x35,0x7f,0x6f,0x76,0x29,0x62,0xad,0xe5,0x7d,0xdc,0xb8,0xcd,0x0d,0x46,0x67,0x75,0x10,0xa1,0xde,0xcd,0xa9,0xf8,0x12,0x0d,0x9e,0x3e,0x0d,0xb3,0x52,0xe3,0xd9,0x37,0xdd,0x83,0x86,0xa0,0xbb,0x2f,0xd6,0x33,0x88,0x84,0x0a,0xc1,0x5e,0xb5,0x61,0x4f,0x84,0xcd,0x0d,0x7c,0x17,0xf0,0xd6,0xfb,0xe9,0x24,0xd1,0xb1,0xad,0xc9,0x63,0x00,0x1e,0x58,0xed,0x7f,0xef,0xf8,0xaf,0x5a,0x4f,0x64,0x3a,0x79,0xb1,0xac,0x8f,0x8a,0x8b,0x88,0xf2,0x72,0x21,0xe5,0x11};
    std::uint8_t digest10[32] = {0xfe,0x59,0x7b,0x9e,0x9b,0xa3,0x0b,0x64,0x9a,0xae,0xd4,0x8a,0xba,0xb9,0x89,0xd8,0xd7,0x65,0x91,0xd6,0xa4,0xc3,0x0c,0x3a,0x2b,0xb4,0x36,0x5a,0xa9,0x24,0x0a,0x65};
    sm3_reset(&ctx);
    block_num = sizeof(msg10) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg10, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg10 + process_n,
                        sizeof(msg10) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest10, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg11[39]    = {0x71,0x71,0xd7,0xeb,0x62,0x5b,0x5d,0x62,0xb7,0xf4,0x3a,0x1b,0xbb,0x39,0x92,0x7e,0x36,0x21,0x4d,0x18,0x0e,0x6c,0x2d,0xaa,0xea,0x4a,0xee,0xe0,0x7d,0x11,0x47,0xc9,0x71,0x84,0x99,0x44,0x03,0xa7,0xd0};
    std::uint8_t digest11[32] = {0x17,0x90,0x0e,0x23,0x78,0x26,0x27,0x5a,0x0c,0xf8,0x2f,0x66,0xb6,0x24,0x15,0x9d,0xe5,0x1d,0xf1,0x81,0x0d,0xb6,0x80,0x3e,0x7b,0x37,0xeb,0x76,0xfd,0xa4,0xcc,0x20};
    sm3_reset(&ctx);
    block_num = sizeof(msg11) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg11, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg11 + process_n,
                        sizeof(msg11) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest11, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg12[142]    = {0xeb,0x4e,0x29,0x4c,0x20,0x68,0x60,0x25,0xf9,0x2b,0xf6,0xe0,0x53,0x52,0x29,0x09,0xc6,0xaf,0x36,0x5b,0xe3,0xad,0x3b,0x8a,0x31,0xa6,0x3f,0xf8,0x2a,0xbb,0x3a,0x04,0xef,0xdb,0xdc,0x3e,0xe4,0xbc,0xad,0x3c,0x1c,0x0f,0x3b,0xee,0xf1,0x7e,0x65,0xdb,0x5a,0x6d,0x07,0x78,0x28,0xbc,0x90,0x97,0xc7,0xcc,0x62,0x83,0xe9,0x37,0x25,0x1d,0xae,0x80,0x37,0xfc,0x75,0xb7,0x52,0x20,0x32,0x7a,0xe9,0x5a,0x92,0xd3,0x22,0x2d,0x46,0x46,0x4a,0x5c,0x8a,0x1e,0x7a,0xc9,0xbe,0x25,0x0b,0xed,0x7a,0x06,0x8c,0xab,0xd2,0x64,0xbb,0x56,0xa5,0x4d,0x4a,0x7e,0xc5,0x3c,0xa6,0x01,0xe4,0x2d,0x9c,0x96,0xa2,0x50,0x48,0x9b,0xf6,0xc9,0xaa,0x04,0x37,0x5b,0xa6,0xd7,0x1f,0x4e,0x8f,0x8a,0xb9,0x67,0xd7,0xb1,0x41,0xe4,0x71,0x05,0x72,0x25,0x2a,0x71,0x5c,0xb5};
    std::uint8_t digest12[32] = {0x3e,0xa7,0xf2,0xa6,0xf3,0xb2,0x86,0x87,0xcc,0xcb,0xed,0x8c,0xdd,0x69,0x99,0xc5,0x6b,0xb4,0xe5,0x81,0xb4,0x59,0x97,0xc1,0x10,0x4f,0x57,0xe0,0x84,0x4e,0xb3,0xed};
    sm3_reset(&ctx);
    block_num = sizeof(msg12) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg12, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg12 + process_n,
                        sizeof(msg12) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest12, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg13[112]    = {0x7f,0x72,0x0e,0xf8,0x43,0xbe,0x08,0x32,0x72,0x12,0x36,0xb1,0x9f,0x23,0x3d,0xe7,0xbc,0x64,0xbc,0x96,0xbd,0x06,0xff,0x57,0x07,0xce,0x14,0xe9,0x4e,0x4f,0x2f,0xc8,0x23,0xfe,0x8e,0xe3,0xbe,0xb8,0xb7,0xc6,0xe6,0x9c,0xbc,0x74,0x64,0xaa,0x98,0x53,0xee,0xd9,0x73,0xfd,0x30,0x81,0x8c,0x2a,0x1a,0xfa,0x14,0x27,0x8a,0x9e,0x1f,0xd2,0x49,0x90,0x39,0x64,0x09,0x8f,0x70,0x4d,0x47,0x34,0x1b,0x8a,0xed,0x26,0xf1,0xc8,0xdd,0x48,0xc1,0xff,0xb6,0x28,0x9d,0x77,0xb6,0xbb,0x1b,0x6b,0xe8,0x98,0xf9,0xf2,0x38,0xa7,0x1e,0x31,0xb1,0x8e,0xa5,0x82,0x10,0x2a,0x41,0xb4,0x49,0xe2,0x4d,0x43};
    std::uint8_t digest13[32] = {0x8d,0x6e,0x93,0xcc,0x70,0x9d,0xff,0xe1,0xb4,0x97,0x4d,0x80,0x16,0x1c,0x3c,0x5a,0x11,0xed,0xa0,0xbb,0x89,0x09,0x09,0x1e,0x7f,0x9f,0x4b,0x2e,0xfa,0x48,0x40,0xf2};
    sm3_reset(&ctx);
    block_num = sizeof(msg13) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg13, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg13 + process_n,
                        sizeof(msg13) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest13, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg14[212]    = {0xbb,0x60,0x00,0xb7,0x54,0x9e,0x3f,0x2d,0xcb,0x2c,0xbc,0x2f,0x62,0xed,0x02,0x33,0xce,0x4e,0xfb,0xfc,0x2f,0x90,0x2f,0x40,0xd2,0x68,0x1f,0x7d,0xc3,0x56,0x78,0xa5,0x09,0xbf,0x95,0xea,0x0e,0x6a,0xb8,0xe6,0xde,0x40,0xb6,0x49,0x6e,0xd9,0xd6,0x92,0x28,0x7e,0xa9,0xd6,0xbc,0xc9,0xcb,0x48,0x26,0xe7,0xe6,0xc0,0xd0,0x7e,0x92,0x1d,0x2f,0x9c,0x00,0x0f,0x4f,0x40,0xfb,0xd4,0x26,0x50,0xea,0x10,0xc2,0x85,0x0d,0x5e,0x61,0x56,0x74,0x35,0xd9,0xa9,0x80,0xeb,0xf9,0xaa,0x39,0xeb,0x7d,0x6a,0x74,0x17,0x99,0xfc,0x2d,0xca,0xc0,0xfb,0xa1,0x66,0x2f,0xda,0xfc,0x42,0x5f,0x49,0x60,0x80,0xb1,0xab,0xc2,0xf4,0x29,0xfc,0x82,0xbf,0x7f,0x7c,0x1d,0x72,0xba,0xb1,0x5c,0xec,0xa7,0xbc,0x24,0xdd,0x31,0x1a,0x84,0x02,0x1a,0xf8,0x83,0x4a,0x44,0xdc,0xb1,0x33,0xb1,0x81,0x0a,0x64,0x1d,0x10,0x20,0xf9,0x2e,0x55,0x69,0x93,0x28,0xa9,0x7e,0x1d,0x6e,0x0b,0x77,0xcd,0x5a,0x21,0xd3,0xdb,0x0a,0x99,0x85,0xe9,0xac,0x2c,0x8f,0x09,0xf0,0xed,0xc6,0x09,0x89,0x5d,0x78,0x8d,0x02,0x38,0xd3,0xa9,0x07,0xcb,0x05,0xf1,0xda,0x8e,0x3a,0x39,0xfe,0xee,0x24,0x99,0xf6,0x6a,0xf5,0x12,0x4e,0x2d,0x30,0x87,0x1f,0x22,0x4a,0xca};
    std::uint8_t digest14[32] = {0xe8,0x94,0xc9,0x02,0x1d,0xd1,0x25,0xdc,0xdc,0x5f,0xa8,0xcf,0x48,0x0f,0x5e,0x4b,0xd7,0xa7,0xa6,0x32,0x68,0xcf,0xec,0x0a,0x8b,0x37,0x55,0xe8,0x4c,0xe5,0xfa,0x3b};
    sm3_reset(&ctx);
    block_num = sizeof(msg14) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg14, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg14 + process_n,
                        sizeof(msg14) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest14, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg15[345]    = {0x69,0x1b,0xe0,0xec,0x8e,0x82,0x45,0xc0,0x5f,0x47,0x91,0xa7,0x13,0xaa,0x45,0x70,0x50,0x66,0x08,0xbb,0x90,0xbd,0x7b,0xc6,0xd4,0x3b,0xbc,0x65,0x1b,0x31,0x3c,0x94,0x9f,0x1d,0x1b,0xbd,0xfe,0x4c,0x12,0xb9,0xb9,0x7d,0x6e,0x78,0x89,0xb4,0x7d,0x71,0x39,0xc8,0xb3,0x16,0x50,0xeb,0x11,0xc6,0x03,0x44,0x04,0x71,0xe4,0x40,0x70,0x8a,0x96,0x47,0xe6,0xbc,0xe5,0x48,0x79,0xd2,0xf0,0x5e,0x53,0x1e,0xae,0x2c,0x8f,0x23,0xcf,0x81,0xbf,0xe6,0xcd,0x19,0xe3,0x13,0xc7,0xdf,0xc3,0x15,0xc7,0xa3,0xc7,0x24,0x2c,0xa4,0x74,0xd8,0xa8,0xea,0x7e,0x52,0x7a,0x14,0xcd,0x98,0xf1,0x7b,0xe4,0x7e,0xf4,0x19,0x27,0xc0,0xe0,0xe1,0xae,0x3d,0xe5,0x12,0xcd,0xdf,0xd9,0xe8,0x49,0xe7,0x82,0xad,0x1e,0xbf,0xd5,0xcc,0x11,0x58,0xac,0x3c,0x21,0x19,0x4f,0xf7,0x30,0x67,0xda,0x6a,0x53,0xbd,0x2a,0xbb,0xc0,0x07,0xd0,0x02,0x11,0x66,0x18,0x07,0x26,0x07,0x19,0xb9,0x7b,0xbc,0x3c,0x9d,0xc4,0x02,0x41,0x34,0x14,0x48,0x03,0x57,0x27,0xf6,0xdf,0x7a,0x3e,0x9c,0x75,0x91,0x41,0x36,0x47,0x05,0xb7,0x7a,0xc9,0xe2,0xa8,0x01,0xb1,0xfb,0x8e,0x16,0xe9,0x9e,0x16,0x6a,0xfa,0xef,0x1c,0x5e,0x11,0x89,0xbc,0x6f,0x46,0x42,0x5b,0x6b,0x4d,0xaa,0xb5,0x53,0xc7,0x60,0xbb,0xed,0x8e,0xdc,0x72,0xe6,0xa5,0x83,0x10,0x84,0x19,0xa1,0xa7,0xb3,0x0b,0x8d,0x2a,0xbb,0x3f,0xfd,0x94,0x91,0x4d,0xc5,0x87,0xd4,0xc9,0x80,0xd1,0x0d,0xa2,0x1d,0x22,0x33,0x7c,0xb2,0x47,0x82,0x31,0xcc,0xb3,0xf4,0xee,0x50,0x6d,0x99,0xa6,0x61,0x39,0x38,0xeb,0x86,0x00,0x84,0x43,0xf0,0xda,0x20,0x3b,0xf1,0xce,0x29,0xe4,0x71,0x34,0x29,0x6c,0xea,0xcc,0xa9,0x6e,0xff,0xab,0x9f,0x2d,0x01,0xa7,0xa3,0x71,0x0c,0x63,0x34,0x19,0x49,0xdf,0xaf,0x3f,0x80,0xbb,0xc5,0xc0,0xba,0x55,0xc4,0x36,0x08,0xce,0x16,0x92,0x1e,0x44,0xa5,0xef,0x50,0x8b,0x48,0x72,0x31,0x38,0x66,0xf1,0x7a,0x4d,0x2c,0x6b,0x3e,0xd5,0x5b,0x7f,0x17,0xc3,0x6b,0x3b,0xe1,0xa0,0x8e,0xa2};
    std::uint8_t digest15[32] = {0x06,0x29,0x60,0xb4,0x33,0xad,0x92,0x40,0x6d,0x3e,0x7f,0x91,0xc4,0x0e,0x2c,0x87,0x38,0xbf,0x8b,0xf6,0x6b,0xa9,0x37,0x7d,0x7e,0xd3,0x8a,0xa7,0xf8,0x34,0xd7,0x30};
    sm3_reset(&ctx);
    block_num = sizeof(msg15) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg15, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg15 + process_n,
                        sizeof(msg15) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest15, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg16[115]    = {0xa2,0x62,0xa4,0xb7,0x99,0x82,0x55,0xe5,0x6c,0xb2,0x7d,0xf4,0x6b,0x63,0x38,0xf4,0xd5,0x7e,0xf6,0x36,0xbd,0xb4,0x5c,0x3e,0x1f,0x87,0x55,0x66,0x59,0xe9,0x6d,0x67,0xda,0x60,0x3e,0xdf,0x45,0x88,0xdb,0x81,0x89,0x5a,0x07,0x1f,0x15,0x09,0x3d,0xd9,0xe2,0x81,0x2c,0xf8,0xb8,0x56,0x22,0x1a,0x0e,0x5b,0x38,0x2d,0x08,0x3d,0x2a,0x1a,0x5f,0xa4,0x43,0x71,0x41,0x55,0x42,0xb1,0x45,0x38,0xb1,0x40,0xf1,0x8b,0x0a,0x7f,0x64,0x91,0xe7,0xe5,0xcd,0xb3,0x4b,0x7d,0x56,0x54,0x74,0xd0,0xd3,0x4b,0x15,0x66,0x02,0x98,0x1c,0x9c,0x49,0xea,0x7f,0xaf,0x86,0xf3,0x02,0x52,0x6b,0xd7,0x39,0xdf,0xf3,0xa9,0x3b};
    std::uint8_t digest16[32] = {0x42,0xf1,0x4b,0x3b,0x97,0x85,0x7b,0x21,0xe7,0x79,0x10,0x02,0x51,0x57,0x67,0x42,0x6c,0xbc,0x22,0x5b,0x43,0x37,0x0b,0xff,0x43,0xe9,0x60,0xe0,0xbf,0x31,0x97,0x74};
    sm3_reset(&ctx);
    block_num = sizeof(msg16) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg16, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg16 + process_n,
                        sizeof(msg16) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest16, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg17[43]    = {0x55,0x63,0x5c,0xdd,0x9e,0x94,0x89,0x8d,0xa5,0xba,0xeb,0x5b,0x44,0x14,0x43,0x93,0x26,0x30,0x9c,0xb6,0x4b,0xef,0x62,0xe1,0x49,0xb4,0x69,0xc9,0xc6,0x3e,0x94,0xab,0x3b,0xc3,0x48,0xdd,0x44,0x7a,0x21,0x08,0x8a,0x99,0xb3};
    std::uint8_t digest17[32] = {0x58,0x16,0x6b,0xab,0xad,0x28,0x9e,0x89,0x14,0xed,0x3a,0x00,0x70,0xe6,0xe0,0x44,0x27,0xe4,0x8a,0xc4,0x4e,0x99,0x89,0xea,0x9e,0x71,0xe2,0x90,0x5c,0xdc,0x35,0xcf};
    sm3_reset(&ctx);
    block_num = sizeof(msg17) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg17, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg17 + process_n,
                        sizeof(msg17) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest17, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg18[393]    = {0x67,0x84,0xd5,0x25,0xd9,0xd6,0xb2,0x5b,0xe5,0xe5,0xf3,0xd5,0x3d,0x76,0x15,0xde,0xe0,0x61,0x12,0xdf,0xd2,0xf0,0x05,0xbd,0x99,0x0b,0x93,0x37,0xce,0x3b,0x58,0x25,0x6a,0xad,0x75,0xac,0x9e,0x56,0xc5,0x1b,0x2d,0x62,0x2c,0x34,0x89,0x63,0x39,0x8a,0x88,0x84,0xb2,0xd5,0xf4,0xf2,0xc3,0x84,0x82,0x28,0xfc,0xd1,0x37,0xfc,0x1b,0x50,0xc1,0xcc,0x33,0xe4,0x60,0x22,0x8a,0xc9,0x87,0x89,0x50,0x7d,0xa4,0xd7,0x76,0x7d,0x6f,0x73,0xd8,0x9d,0xf9,0xed,0xa4,0x44,0x95,0xb1,0xa6,0x43,0xcf,0x86,0x9a,0x36,0xc7,0x89,0x3f,0x2a,0x92,0x50,0x80,0x00,0x13,0x06,0x4d,0x78,0xbe,0xe9,0x09,0xd5,0xd9,0x66,0x62,0x6b,0x3f,0x82,0x42,0x8e,0x61,0x3b,0xbb,0x7c,0x0e,0xe0,0xd5,0x85,0xde,0xaa,0xdb,0x3e,0x46,0x57,0xf4,0x70,0x03,0x42,0x4b,0xd9,0x42,0xa9,0xc8,0x0f,0xee,0xc4,0x11,0x34,0x63,0x41,0xc0,0x3b,0x0f,0x3c,0x8f,0xc6,0xef,0x4e,0xcd,0xc4,0xcb,0xa8,0x64,0x84,0xea,0x01,0xee,0xe3,0xb7,0xc7,0xb5,0xb0,0x7d,0xc1,0xa4,0x5a,0x58,0xb7,0x9f,0xde,0x4c,0x7a,0xc6,0xc0,0x45,0x64,0x71,0x7c,0x32,0xf0,0x27,0xd9,0xff,0x9b,0xc9,0x3c,0x41,0xd7,0xf6,0x1c,0x5f,0x34,0x43,0xb6,0xea,0x58,0x57,0xce,0x23,0x83,0x6c,0x9b,0xa4,0xb1,0x4f,0xfe,0x14,0x91,0xa7,0xaf,0x39,0x81,0x59,0x2a,0x7d,0xca,0x4b,0x40,0xe7,0x95,0x65,0x67,0xe5,0xfb,0x55,0x87,0x0d,0xe5,0x26,0x6a,0xeb,0x55,0x8f,0x0a,0x02,0xd4,0x37,0xda,0xec,0x0c,0xf8,0xa1,0xd4,0x23,0x7f,0x6c,0xcd,0x81,0x80,0x1a,0xf5,0x40,0x37,0x41,0x28,0xe1,0xc3,0x32,0x78,0x32,0x0f,0xc8,0x0b,0xb8,0xb6,0xfd,0xd3,0x74,0x99,0x04,0x4c,0x4e,0x27,0xc3,0xe6,0x25,0xb2,0x56,0xc1,0xe3,0x09,0xf3,0x09,0x86,0x0c,0x79,0x7a,0xb4,0xc3,0x50,0x28,0x5b,0xd7,0xb2,0x2d,0x71,0xf6,0x7e,0x99,0xb2,0xe4,0xf9,0x48,0x7c,0x7d,0xab,0xd4,0xf4,0xad,0xc6,0x3e,0xaa,0x20,0xac,0x93,0x90,0x4a,0x2b,0xb7,0xf9,0xae,0x68,0xb3,0x92,0x8a,0x59,0xbb,0x37,0x9c,0x5a,0xdf,0x15,0x8b,0x5a,0xa4,0xae,0x68,0x22,0x40,0xf9,0x87,0xdf,0xb0,0x21,0x07,0xec,0x42,0xd4,0xad,0x32,0x4b,0x1d,0xdb,0xfe,0x3a,0x82,0x29,0x65,0x45,0x0b,0xd4,0xbc,0x46,0x5e,0x17,0xa7,0x6f,0x4f,0x15,0x8c,0x1d,0x14,0xd7,0x2e,0xc4,0xe0,0x93,0x43,0xaf,0x45,0x56,0x31,0xe7};
    std::uint8_t digest18[32] = {0x95,0x7d,0x10,0x9c,0x31,0x5c,0x33,0x33,0xfe,0x23,0x97,0x31,0xd6,0xb5,0x44,0xa4,0x3e,0x0a,0x6c,0xf0,0xf8,0x6f,0x91,0x93,0xc1,0x83,0x86,0x68,0x8b,0xac,0x64,0x4e};
    sm3_reset(&ctx);
    block_num = sizeof(msg18) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg18, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg18 + process_n,
                        sizeof(msg18) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest18, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg19[3]    = {0xc0,0x98,0x8b};
    std::uint8_t digest19[32] = {0x8f,0x43,0x4e,0x20,0x51,0x28,0x12,0x25,0x70,0xf5,0x0c,0x7a,0x42,0xed,0x4e,0x59,0x0c,0xc2,0x7c,0x0a,0x18,0xe3,0x32,0xb3,0x3c,0xe4,0xcb,0xa3,0x6c,0xa7,0x5a,0xf2};
    sm3_reset(&ctx);
    block_num = sizeof(msg19) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg19, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg19 + process_n,
                        sizeof(msg19) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest19, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg20[201]    = {0x59,0xad,0xc4,0xed,0xe8,0xad,0x2a,0x41,0x41,0x18,0x78,0xd7,0x89,0x3b,0xd3,0x35,0x2d,0x9b,0x81,0xbb,0x37,0xca,0x99,0x68,0xeb,0xfd,0x29,0xca,0x4d,0x6f,0xe9,0x61,0xb4,0x93,0x9d,0x5a,0x81,0xe6,0x6f,0xbd,0xff,0x95,0xda,0x1b,0xbe,0x54,0x3f,0x4d,0xc0,0x98,0x39,0x02,0x25,0x70,0xe8,0xcb,0xbc,0xfb,0xea,0xa3,0xe6,0x5d,0x4b,0xc9,0xa1,0xb2,0xf8,0x7e,0xf4,0x4d,0x00,0x50,0x56,0x32,0x81,0xe0,0xca,0xe8,0x83,0xd9,0x4a,0xe1,0xc5,0xa4,0x8f,0xc0,0x43,0x88,0x55,0x06,0x52,0x20,0x02,0x32,0xad,0x58,0x92,0x75,0xec,0xbf,0xe6,0x5b,0xc7,0xc3,0x37,0xd0,0xca,0x83,0x5d,0x74,0x55,0x28,0xf8,0xf9,0x91,0xb1,0x4c,0x4b,0x55,0x6d,0x65,0x3a,0x7f,0x68,0xbf,0x2f,0xe8,0xab,0xf9,0x22,0x05,0xbb,0x0f,0x1e,0x4e,0xb6,0x79,0x18,0x3f,0x6b,0x42,0xce,0x53,0x7a,0xd3,0x2b,0xa1,0xe5,0x5b,0xce,0xdb,0xd8,0xef,0x1a,0x32,0x05,0x5e,0x65,0x77,0x7c,0x51,0xc7,0x4e,0x61,0x0c,0x5e,0x12,0xf8,0xdb,0x04,0x31,0xb1,0xb8,0x9a,0xd0,0xb6,0xe3,0xa9,0xaf,0xa7,0x26,0x26,0xf7,0x8b,0xbf,0x33,0x97,0x18,0xef,0xa7,0x23,0x39,0x1b,0x1a,0x65,0xe2,0x73,0xaf,0x90,0xf8,0x90};
    std::uint8_t digest20[32] = {0x7d,0xa9,0x29,0x4e,0xfa,0xd6,0x56,0xe5,0xfe,0x10,0x6e,0x88,0xa9,0x2a,0x73,0x3f,0xf0,0xe2,0x98,0x4f,0x2f,0xf8,0xb3,0x47,0xaf,0x06,0xd4,0x02,0xa9,0x77,0xa5,0x55};
    sm3_reset(&ctx);
    block_num = sizeof(msg20) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg20, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg20 + process_n,
                        sizeof(msg20) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest20, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg21[352]    = {0xde,0x7d,0x87,0x84,0xff,0xa9,0x5d,0x39,0x3f,0x0b,0xb4,0xa5,0x55,0xa6,0x15,0x5f,0x05,0x1e,0xa2,0x41,0x26,0xc4,0xbe,0xa5,0x36,0x2e,0x2f,0x89,0x64,0xa4,0x20,0xf2,0xa8,0x32,0x90,0x59,0xf0,0x4d,0x8d,0x39,0x11,0x47,0xf3,0x08,0x79,0x69,0xf9,0x0f,0x14,0x2c,0x90,0x0a,0x78,0x99,0x84,0xa9,0x7b,0x97,0xc1,0xba,0x5b,0x7f,0x4b,0xc6,0x0f,0x7c,0xf2,0x25,0xcb,0x8d,0xbf,0x5a,0x98,0xb4,0x27,0xd5,0x80,0xa9,0x7a,0x53,0xc1,0xa9,0xcb,0xf2,0x50,0x82,0xf0,0x3e,0xa6,0x0a,0x68,0x78,0x3a,0x72,0xa0,0xcc,0x70,0xbd,0x00,0xaf,0x5d,0x92,0x9b,0x7a,0xa1,0x19,0x7e,0xc2,0xd2,0xb7,0xf1,0x3b,0xcd,0x4a,0x7f,0xcd,0xff,0x41,0xda,0x10,0x17,0xd1,0x35,0xd8,0x2a,0x52,0x63,0x14,0x49,0xd7,0xe8,0xcc,0xd4,0x54,0xcb,0x96,0x48,0xcb,0x7d,0xbd,0x15,0x9f,0xfa,0xe0,0xd6,0xe8,0x88,0x6b,0x19,0x48,0x57,0xf5,0xf8,0xc8,0x54,0x59,0x02,0xe5,0x99,0x3d,0x22,0xa8,0x86,0xf5,0xda,0x65,0xcf,0xf9,0x12,0x57,0x92,0x33,0x83,0x1a,0x77,0x24,0x10,0x36,0xef,0x58,0xf0,0xe4,0xab,0x4c,0xba,0x8e,0xf8,0xf9,0xb0,0x2e,0xb4,0xe7,0x7a,0xe9,0xde,0x47,0x21,0xf3,0xe8,0x7b,0x3e,0x9a,0x1e,0x90,0x29,0x66,0xc3,0x02,0x5b,0xfb,0x65,0x73,0xfc,0x2b,0xf0,0x42,0x85,0xb0,0x98,0xfc,0xb7,0xe9,0x9f,0xab,0xed,0x23,0x06,0x3b,0xbd,0xf0,0xbb,0x39,0x1d,0xe1,0xee,0xaa,0x8c,0x4d,0x71,0x72,0xbf,0x99,0x81,0xa2,0x94,0x90,0x86,0x56,0xcf,0xb1,0x0f,0x54,0x66,0x04,0x07,0x9f,0xc9,0x27,0x16,0x0e,0x6b,0xfb,0xf6,0x85,0x6f,0xcb,0x6d,0x4d,0xcc,0x6f,0x7f,0x84,0x00,0x59,0x39,0x5b,0x79,0xbc,0xbc,0x90,0x7a,0xd3,0xa2,0x34,0x60,0x4b,0x35,0x41,0x9c,0xe5,0x26,0xea,0xea,0x3d,0x20,0x24,0xf1,0x70,0xaa,0x36,0x62,0x8b,0x1b,0x41,0xfc,0xf9,0xc0,0x43,0xef,0xf3,0x01,0xdf,0xf4,0x1a,0x4d,0x11,0x7c,0x22,0x71,0x62,0xe8,0xf1,0x25,0x18,0xe7,0xcf,0xdc,0x27,0x67,0x87,0xa8,0xe8,0xf6,0xb8,0x5a,0x4e,0xcd,0x67,0xcb,0xac,0x96,0xfb,0xad,0x97,0x08,0x02,0x24,0x06,0x49,0x77,0x55,0x52};
    std::uint8_t digest21[32] = {0x9b,0xe9,0x1c,0x36,0xae,0xde,0xa0,0x9f,0xf6,0xd6,0xc7,0xde,0x99,0x16,0x24,0xf1,0xfa,0x5a,0x47,0xda,0x1f,0xf6,0xeb,0x83,0x74,0xdf,0x9f,0xf8,0x63,0x50,0xeb,0x47};
    sm3_reset(&ctx);
    block_num = sizeof(msg21) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg21, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg21 + process_n,
                        sizeof(msg21) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest21, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg22[43]    = {0x07,0xbd,0x51,0xbf,0xe1,0x3f,0xe4,0x31,0xa5,0x49,0x75,0xf5,0x5c,0x16,0x73,0x1f,0x34,0x74,0x7c,0x11,0x6b,0x1c,0xb1,0x0c,0x42,0xc5,0x1c,0xe5,0x00,0xc4,0x71,0x3f,0x20,0x03,0xc4,0xca,0x7a,0x1b,0x25,0x43,0xa8,0xba,0x60};
    std::uint8_t digest22[32] = {0x35,0x3f,0xb2,0xd2,0x9d,0x40,0xf7,0xba,0x5c,0xac,0xfe,0x4f,0xc9,0xac,0x55,0xda,0x52,0xd4,0x10,0x3d,0x92,0x9a,0x0b,0x33,0x7d,0xe9,0x9c,0x0b,0x46,0x24,0x73,0xcc};
    sm3_reset(&ctx);
    block_num = sizeof(msg22) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg22, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg22 + process_n,
                        sizeof(msg22) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest22, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg23[16]    = {0x88,0x85,0x4b,0xc9,0x22,0x41,0x5f,0x18,0x19,0xdf,0xe6,0x9d,0x3e,0xf5,0xa2,0x51};
    std::uint8_t digest23[32] = {0x8c,0xe4,0x28,0x0d,0x08,0x0d,0x22,0x46,0x5f,0x01,0x19,0x5d,0x49,0x48,0x4c,0x9d,0x72,0x1c,0xdc,0x9e,0x81,0x8e,0xea,0x58,0xad,0x42,0x76,0xdb,0xdb,0x8c,0x9a,0x99};
    sm3_reset(&ctx);
    block_num = sizeof(msg23) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg23, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg23 + process_n,
                        sizeof(msg23) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest23, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg24[139]    = {0x58,0x41,0x67,0xa1,0x86,0xd1,0x28,0x87,0xa6,0x81,0x7f,0x90,0xc9,0x02,0x40,0x98,0x9e,0x32,0x4f,0xf1,0x4d,0x56,0xb1,0x56,0x2a,0xef,0x20,0x43,0xc0,0x19,0xff,0x65,0xa4,0xd3,0xf7,0x62,0x83,0xf1,0x97,0x95,0x90,0xce,0x61,0xc5,0x2c,0x04,0x0c,0x69,0xfd,0x89,0xf1,0x53,0x50,0x83,0x63,0x4b,0x40,0xeb,0x80,0xdb,0x42,0x60,0x5c,0x09,0x07,0x9f,0x5e,0xe1,0x17,0x5d,0x65,0x07,0x07,0x32,0xbf,0x2f,0xac,0x0e,0xa7,0xca,0x31,0x25,0xfa,0x2b,0xc3,0xe4,0x16,0xa2,0x57,0xd2,0x67,0xcf,0x95,0x9e,0x8d,0x53,0x60,0xd6,0x8d,0x28,0x86,0x92,0xa9,0x0c,0xc6,0xf3,0x2f,0x78,0xf8,0x99,0xd5,0x50,0xa1,0x4c,0x2c,0xb8,0x78,0x92,0x40,0x31,0x7d,0x6b,0x40,0x7b,0x09,0x68,0x34,0x87,0x10,0x3e,0xbb,0x50,0x44,0x4e,0xd8,0x4b,0xde,0xab,0x73};
    std::uint8_t digest24[32] = {0x49,0xda,0x9c,0x83,0xe4,0xb3,0xe6,0x86,0x27,0x51,0x28,0x18,0x36,0xfb,0xe6,0x25,0xc1,0x34,0xbd,0x42,0x34,0x31,0xa0,0x7b,0x73,0xa5,0x6e,0xfc,0xb0,0x58,0xc4,0xfa};
    sm3_reset(&ctx);
    block_num = sizeof(msg24) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg24, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg24 + process_n,
                        sizeof(msg24) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest24, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg25[14]    = {0x4b,0x0f,0xde,0x66,0xa9,0x59,0xc6,0x9b,0x77,0x25,0xc9,0x07,0xb1,0x37};
    std::uint8_t digest25[32] = {0xfe,0xe8,0xa7,0x99,0xc8,0xb6,0x75,0xee,0x60,0x8a,0xd1,0x99,0x0e,0x17,0x58,0x69,0x85,0x19,0xca,0xc8,0xce,0x33,0xca,0x53,0xee,0x18,0xe2,0x96,0x07,0xb5,0x75,0x04};
    sm3_reset(&ctx);
    block_num = sizeof(msg25) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg25, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg25 + process_n,
                        sizeof(msg25) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest25, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg26[159]    = {0xe3,0xf2,0xee,0x2c,0xef,0x88,0x44,0x56,0xae,0x6c,0x42,0x6e,0x4b,0xe9,0x76,0x5e,0x5f,0x91,0x13,0x8d,0xe5,0x7a,0x25,0xac,0xc6,0x66,0x6f,0xda,0x8e,0xeb,0x89,0x0f,0xbd,0x19,0xbb,0x75,0x70,0xfd,0x98,0x91,0x5c,0xe5,0x65,0x2f,0xc9,0x8f,0xb8,0xd6,0x6d,0x64,0x2b,0x51,0x39,0x1c,0x89,0x91,0xc4,0xb1,0xdb,0xe2,0x04,0x09,0x0b,0xed,0xd7,0x4c,0x63,0x25,0x8d,0xa0,0x64,0x0b,0x0a,0x4b,0xbf,0xec,0x60,0x96,0xbc,0xcc,0x0c,0x47,0xd9,0xba,0xb1,0x08,0xa4,0x3a,0xeb,0x70,0x96,0xd5,0xe9,0x31,0x6e,0x74,0x7e,0xc6,0x30,0xcc,0xf5,0x53,0x3d,0x4c,0xae,0x33,0x8c,0x71,0xaf,0xa0,0xd3,0xcb,0x5e,0x90,0x21,0xd4,0x2b,0xab,0xdd,0x28,0x96,0x37,0xf4,0xfc,0x3e,0xcc,0xd8,0x46,0x09,0x25,0x34,0x2f,0x7f,0x0c,0xa5,0x16,0x52,0x79,0x9e,0xcd,0x2a,0xb4,0x86,0x5e,0x8f,0x63,0x05,0xfd,0xf0,0xe0,0x1b,0xf7,0x54,0xa2,0x94,0xa1,0x18,0x0f,0x37};
    std::uint8_t digest26[32] = {0x50,0xa1,0x2e,0x7f,0x14,0x92,0xb0,0xc6,0x8b,0xde,0x74,0x94,0xfd,0x7b,0xf6,0xe6,0xbb,0x98,0xc0,0x8c,0x83,0xe2,0xc2,0x79,0xcf,0x36,0xf9,0x85,0x47,0x20,0xee,0x55};
    sm3_reset(&ctx);
    block_num = sizeof(msg26) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg26, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg26 + process_n,
                        sizeof(msg26) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest26, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg27[386]    = {0x97,0x93,0xcc,0xe1,0x52,0xed,0x84,0x09,0x23,0x42,0xb7,0x99,0x57,0x1c,0x5d,0x24,0xd1,0xd0,0x09,0x12,0xe3,0xcf,0x60,0xd9,0xf7,0x24,0xda,0x4c,0x63,0xc1,0x15,0x84,0xfd,0xb8,0x11,0x31,0x65,0x9c,0x92,0xb4,0x05,0x66,0x66,0x2a,0x01,0xe5,0xec,0x43,0xdd,0x36,0x7e,0xc8,0xfc,0x9d,0xd4,0xeb,0x91,0x30,0x3c,0x82,0x35,0x86,0x0b,0xca,0x7c,0xa1,0xd0,0x3e,0x42,0x6e,0x52,0xe9,0xa7,0x50,0x74,0xea,0x48,0x9b,0x3f,0xb4,0xe1,0xa7,0x88,0xb9,0xe0,0x4e,0x1f,0xa6,0x78,0x1d,0xae,0x43,0x1a,0x2e,0x64,0x6d,0x33,0xa7,0xf3,0xfc,0x51,0x9b,0xc0,0xca,0xd1,0xb5,0x0f,0xd1,0x23,0xa9,0x0c,0x1f,0xa6,0x73,0x3c,0xf3,0x4b,0x22,0x97,0x95,0x7b,0x0a,0xb3,0x8b,0x71,0x8b,0x2e,0x0d,0x1b,0xa1,0x0c,0xb2,0x6a,0x59,0xf3,0x16,0x39,0x6b,0x51,0xb8,0x1e,0x58,0xf0,0x34,0x7c,0x90,0x43,0x3a,0xfe,0x38,0xac,0xc5,0xc5,0x2b,0xda,0x49,0xf8,0xd8,0x64,0x71,0x4b,0x2b,0x6f,0x35,0xc7,0xa0,0x59,0x97,0xf7,0xe3,0xb1,0x80,0xb7,0x57,0xc8,0x56,0xd1,0x5e,0x22,0xaf,0x0a,0x8f,0x13,0xa4,0xb5,0xba,0x9e,0xde,0x8e,0x2e,0x3b,0x4e,0x25,0xa6,0x16,0x56,0x73,0x5c,0x21,0xb2,0x77,0x6d,0xf5,0x6d,0x4f,0xc8,0x73,0xd1,0xc8,0xa7,0x04,0xcb,0x2b,0x00,0x7f,0xf9,0xce,0xa6,0x8d,0x91,0x6a,0x96,0x4a,0x20,0x43,0x9b,0xb5,0xc6,0xd3,0x2a,0x9c,0xe2,0x6c,0x1e,0x81,0xd7,0x94,0x60,0xe9,0xca,0x6a,0x5e,0x70,0x02,0xba,0x72,0x2d,0x63,0x19,0xd8,0xce,0x3c,0x73,0x8e,0xcf,0x52,0xf7,0xe9,0xf2,0xc7,0x63,0x2d,0xa7,0x4c,0x45,0x7d,0xf1,0x63,0x06,0x1e,0xac,0xc0,0xfa,0xbe,0x08,0x73,0x4a,0xb8,0x2f,0xa2,0x81,0x44,0xd6,0x1b,0xee,0x78,0xd7,0xa9,0x43,0x96,0x10,0xa1,0x63,0x0c,0xff,0x05,0x47,0xe4,0xd9,0x6b,0x7c,0x36,0x98,0xf6,0xe3,0x72,0x19,0xde,0x0f,0x41,0xd8,0x83,0x80,0x98,0x5e,0x20,0xd7,0x47,0xb6,0x57,0xca,0x7b,0x5c,0x3a,0x9a,0x43,0xc8,0x79,0xac,0xd2,0x3b,0x6c,0xcf,0xb1,0x49,0x68,0xcc,0xda,0xcc,0xa4,0xfd,0xfe,0x64,0x13,0x36,0x8b,0x15,0x43,0x43,0xd3,0xcd,0xb9,0x79,0x8b,0x0c,0xad,0x87,0x29,0xa3,0xa3,0xba,0xce,0x3a,0x51,0x0f,0xba,0x8a,0x66,0x70,0xee,0x0f,0x2d,0x3b,0x3a,0x77,0xe9,0x86,0x23,0x7d,0xf9,0x16,0x16,0xb2,0xf5,0x2d,0x7e};
    std::uint8_t digest27[32] = {0x4a,0xec,0x5b,0xc4,0x69,0x5a,0xae,0xd5,0x58,0x9b,0x80,0xc7,0x01,0xc6,0xb4,0xa1,0x49,0xd1,0xfa,0xc4,0x84,0x24,0x68,0xd4,0x3b,0xab,0x0c,0x7d,0xc5,0xda,0xca,0x4f};
    sm3_reset(&ctx);
    block_num = sizeof(msg27) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg27, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg27 + process_n,
                        sizeof(msg27) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest27, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg28[49]    = {0x51,0x72,0xde,0x45,0x88,0xb5,0x68,0x3b,0xf7,0x80,0xa5,0xef,0x1f,0xba,0xb6,0xa8,0x11,0xf7,0xfb,0x0c,0xd0,0x33,0xbf,0xed,0xc1,0xf0,0x6b,0x2a,0x77,0x2e,0x30,0x5c,0x05,0x3a,0x55,0xca,0x74,0x52,0x49,0xb1,0x14,0xfb,0x55,0x7c,0x40,0xc3,0xdb,0x29,0xb7};
    std::uint8_t digest28[32] = {0x6a,0x37,0x54,0x07,0xe4,0xdd,0x81,0x6b,0xb4,0x22,0x24,0xe1,0x89,0x3e,0x73,0xce,0xb0,0x6e,0x0a,0x95,0x01,0x7e,0x6c,0x68,0xf6,0xcc,0x28,0xa1,0x00,0x5d,0x58,0x7f};
    sm3_reset(&ctx);
    block_num = sizeof(msg28) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg28, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg28 + process_n,
                        sizeof(msg28) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest28, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg29[425]    = {0x22,0x85,0x45,0x7e,0x22,0x95,0x97,0xf5,0xb0,0xcf,0x6f,0x87,0xb4,0x2b,0x59,0xfd,0xe1,0x16,0x0b,0x92,0x0e,0xa4,0x26,0xb2,0x2f,0x6b,0x4f,0x79,0x29,0xc4,0x89,0x3d,0xbf,0x71,0xf6,0xd8,0x64,0xf9,0xd1,0xf4,0xd2,0xe3,0x27,0x36,0xd3,0xcf,0xb5,0x80,0x2b,0xd2,0x59,0xa6,0x36,0xf1,0x1d,0xa5,0x9c,0x46,0xe1,0x5a,0x26,0x60,0xea,0xcc,0x28,0xd3,0x4e,0x65,0xe2,0xfe,0xd3,0x91,0xad,0xf1,0x26,0xe9,0xf8,0x06,0x01,0x1f,0xe7,0x37,0xea,0x7b,0xc1,0x53,0x9c,0x7a,0xa6,0x66,0xe6,0xda,0xcc,0xa8,0x26,0x7d,0xb9,0xa9,0x0b,0xb3,0x5b,0xea,0x8b,0x70,0x22,0xcf,0x6e,0xcc,0xa3,0x58,0x68,0x2c,0xa4,0x21,0x1e,0xae,0x0d,0x66,0x88,0xae,0x64,0x45,0xe0,0x2e,0x3a,0x06,0x6d,0xa6,0xa7,0xd9,0xc1,0x7a,0x80,0x3b,0x2b,0x1f,0xcd,0x6b,0xfe,0xfb,0x1b,0xc9,0x16,0x7d,0x7b,0x27,0x5e,0x8f,0xd2,0xdd,0x2c,0xb5,0xf0,0x7a,0x91,0xe3,0x13,0xba,0xc6,0x01,0xe2,0x06,0xa5,0x2b,0xfa,0x60,0xb6,0x4f,0x0e,0x19,0x21,0x33,0x2d,0x8a,0x9e,0x67,0xb7,0xee,0xd5,0x9e,0xee,0x0d,0x0b,0x3d,0xd7,0x80,0x33,0xcd,0x54,0x65,0x1e,0xfb,0xe8,0x7b,0xe1,0x9c,0x18,0x41,0x3c,0x71,0x3d,0x38,0x9c,0x1a,0xf0,0x58,0xf0,0x13,0xc4,0xe3,0x9c,0x43,0x96,0xfd,0x97,0xc7,0xaa,0x9b,0x54,0x22,0x53,0x82,0x31,0x3f,0x88,0x1c,0xea,0xa9,0x10,0xc2,0xa2,0x2c,0x31,0x11,0x6a,0x09,0xa0,0x32,0x7e,0x49,0x7e,0x2f,0xc5,0x21,0xa5,0xc9,0x98,0xeb,0xda,0x7e,0x13,0xb3,0x04,0x4e,0xb2,0x8b,0xca,0x8f,0x02,0x19,0x2c,0xb7,0x5b,0x8d,0x31,0x3a,0x0f,0xb0,0xa0,0xc3,0x40,0xaf,0x50,0xaa,0x82,0x8b,0xc9,0x38,0xcf,0xf8,0x7d,0xcc,0x0c,0x58,0x0d,0x4e,0x76,0x12,0x71,0x6b,0xa3,0xe1,0x1b,0x9c,0xa2,0xbd,0x4b,0x54,0x58,0x98,0x2b,0x03,0x69,0x51,0x6d,0x73,0xde,0x84,0x98,0x95,0x04,0xfb,0xcd,0x7e,0x2d,0x69,0x95,0xcd,0x08,0x0c,0xe9,0xda,0xe0,0x48,0xea,0x23,0xc1,0x40,0xe8,0x7d,0xd5,0x2c,0x18,0x71,0x77,0x6c,0x55,0xa4,0x9e,0x25,0xed,0x0d,0x80,0xa5,0x7e,0x60,0x53,0xa5,0xd7,0x5d,0xa5,0x66,0x5f,0x41,0x30,0x66,0x34,0x95,0xc0,0x8b,0xbf,0xfd,0xb7,0xf8,0x9d,0x25,0xcd,0x75,0xb3,0xf2,0xf0,0x23,0x71,0x72,0x1f,0xfc,0x95,0xd9,0x0d,0x59,0x7a,0x8e,0x5b,0xae,0x89,0x9a,0x65,0x9d,0x07,0xc5,0xa7,0xd1,0xb1,0x5d,0xae,0xe4,0x03,0x24,0xc7,0xcb,0x56,0x23,0x82,0x41,0x2d,0x22,0xb4,0x66,0x87,0x8a,0x48,0x83,0x6d,0xc9,0xa8,0xda,0xd7,0x86,0x25,0x49,0x41,0x97,0x1d,0x92,0xdf};
    std::uint8_t digest29[32] = {0xf9,0xf7,0x7c,0xba,0x21,0x21,0xce,0xf3,0xcc,0x38,0x58,0xc0,0x55,0x67,0x47,0x79,0x16,0x22,0x9e,0xd3,0x83,0xa4,0xaf,0xbf,0x5c,0x7a,0xd4,0x4d,0x1e,0x64,0x62,0xc0};
    sm3_reset(&ctx);
    block_num = sizeof(msg29) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg29, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg29 + process_n,
                        sizeof(msg29) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest29, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg30[181]    = {0x95,0x85,0xc3,0x26,0x39,0xb6,0xf8,0xfe,0x55,0x4f,0x3b,0x2f,0x7c,0x77,0xed,0xab,0xde,0xe3,0x7a,0xcd,0x5c,0xa3,0x1e,0xf2,0x84,0x96,0x60,0x94,0x01,0xca,0x2b,0x14,0x5a,0x76,0xde,0x1f,0x3c,0x6d,0xbc,0x65,0x88,0x44,0x95,0x42,0xf2,0x9c,0x0c,0xba,0xda,0xe2,0x47,0x3a,0xd3,0x02,0x57,0xa3,0x05,0x78,0xbf,0x0f,0xb6,0xf2,0xae,0x22,0x3c,0xab,0xd6,0x5a,0x7c,0x3f,0xa9,0xf3,0x33,0x7e,0x94,0xf3,0x57,0xcf,0xbb,0x3f,0x67,0xbc,0x61,0x10,0xbf,0x60,0xd9,0x75,0x0f,0x3d,0x69,0x9d,0xea,0x1f,0x24,0x9a,0x27,0x60,0xc4,0x44,0x1d,0x5e,0x65,0x60,0x75,0x2a,0x56,0x00,0x6d,0x06,0xd4,0xc7,0x44,0xa4,0x6b,0x85,0x18,0x96,0x0f,0xfc,0x67,0x90,0x85,0x1e,0xc3,0x06,0xde,0xf8,0x8f,0xd3,0xf2,0xe4,0x84,0xc1,0xbc,0xa6,0x3c,0x4f,0x0e,0x7d,0xe2,0x8a,0xca,0x54,0x6c,0x47,0x0e,0x94,0x86,0xe8,0x4e,0x34,0x48,0x97,0xa4,0x15,0xa4,0xce,0xac,0x2c,0xdf,0x6c,0x49,0xe2,0xff,0xd3,0x17,0xde,0x11,0xbc,0x97,0xf1,0xd4,0x58,0x79,0x5e,0x78,0x03,0x4f,0xb4,0x6a};
    std::uint8_t digest30[32] = {0xce,0xba,0x80,0xf1,0xfa,0x79,0xc4,0xfc,0xc1,0xd6,0x67,0x37,0x8b,0xf4,0x03,0x0e,0x9b,0x09,0x28,0xa5,0x71,0x70,0xa2,0x9e,0x03,0x8b,0xfb,0xaa,0x19,0x71,0xc9,0x34};
    sm3_reset(&ctx);
    block_num = sizeof(msg30) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg30, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg30 + process_n,
                        sizeof(msg30) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest30, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg31[92]    = {0x79,0x40,0x23,0x1c,0xc2,0xa8,0x27,0x02,0x18,0xf9,0xe9,0x6c,0xcc,0xb1,0xee,0x61,0xb3,0x1a,0x55,0xc0,0xd8,0x17,0xa8,0x06,0x83,0x13,0x20,0x40,0x28,0x58,0x4b,0xa9,0x30,0xad,0x25,0x8d,0x75,0x0e,0x5e,0xb9,0xcc,0x5f,0x02,0x0c,0x51,0x1e,0xc1,0xcb,0xc3,0xce,0xff,0xd8,0xe8,0x3a,0x00,0x42,0x2e,0xd7,0x78,0x0d,0xdf,0x0d,0x84,0x7c,0x81,0xe5,0x93,0xac,0xa7,0x5b,0x7c,0x14,0x9c,0x51,0x4e,0x62,0x8e,0x39,0x6a,0x24,0xa5,0xb3,0x40,0xd1,0xb9,0x54,0x5b,0x3d,0x5c,0x04,0xf8,0x02};
    std::uint8_t digest31[32] = {0x1c,0xaa,0x8f,0xfa,0x1b,0x11,0x54,0xb2,0xff,0xc2,0x34,0xbe,0x99,0x1f,0x7f,0xa0,0x45,0x9b,0xd4,0x23,0x12,0x7f,0x26,0xa5,0x78,0xce,0xb8,0x9b,0x47,0xca,0xa0,0x44};
    sm3_reset(&ctx);
    block_num = sizeof(msg31) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg31, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg31 + process_n,
                        sizeof(msg31) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest31, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg32[452]    = {0x67,0x6d,0xae,0xf8,0x36,0xc6,0x32,0x34,0x2a,0xc3,0x31,0x7c,0x17,0x1b,0xdd,0xab,0xed,0x79,0x79,0x7b,0xcb,0x2b,0x6c,0xfd,0x9c,0x5b,0x8b,0x82,0xd7,0x60,0x03,0x21,0x45,0x3a,0x63,0xc2,0x17,0x47,0x2b,0x9f,0x73,0xd3,0x67,0xe7,0x33,0xc1,0x83,0x18,0xae,0xa8,0xdc,0x8b,0xcf,0x81,0xc4,0xc9,0xb9,0x1a,0xa4,0x6d,0x03,0x84,0x20,0x64,0x6d,0xfa,0x3b,0x68,0xcb,0x95,0x51,0x70,0x8b,0x0b,0xc0,0x5e,0xe5,0x98,0xb6,0xac,0x87,0xcd,0x11,0xa5,0xbf,0x17,0x29,0xce,0x57,0x3b,0xe0,0xb0,0xeb,0x1b,0x1e,0x2b,0x9a,0x57,0x97,0x22,0x96,0x7e,0xa9,0xee,0xa1,0x24,0x8c,0x7a,0x45,0xa4,0xc0,0xdf,0x48,0xe7,0xd2,0x57,0x4a,0x93,0x9f,0x54,0x8d,0x88,0x6d,0x5a,0xdb,0x2e,0x42,0x54,0xa8,0x18,0x83,0x0c,0xb8,0xce,0x26,0x02,0x10,0xeb,0x33,0x3b,0xbb,0x48,0x4a,0x39,0x4f,0x29,0xb7,0x42,0x46,0x3f,0xbc,0x8e,0x17,0x51,0x4c,0xf6,0xe3,0x05,0x77,0xf2,0x35,0xee,0xbc,0x7c,0x1f,0x7a,0x90,0x60,0xdb,0x47,0x7b,0xe0,0x3d,0x81,0x58,0xd2,0xfd,0x71,0xf1,0xf6,0x10,0xf9,0x1c,0x84,0xfb,0x4b,0xe6,0x88,0x50,0x21,0xb2,0x4c,0xa8,0x02,0x14,0x8d,0x15,0x02,0x04,0xe4,0x6d,0x03,0x12,0x84,0xa1,0xeb,0x12,0xee,0xc6,0x5f,0x42,0x35,0x30,0x2e,0xce,0xe2,0x64,0x47,0xc7,0x46,0xc8,0x53,0x13,0x29,0xde,0xbf,0x7c,0xbc,0xcb,0x50,0x11,0xe4,0x27,0x27,0x46,0x6c,0x70,0xca,0x47,0x99,0x17,0x76,0xcb,0xe4,0x4a,0x7d,0xd6,0x13,0xf8,0x58,0xf7,0xc7,0x17,0xe6,0x36,0x13,0x85,0x90,0x4a,0xdd,0xaf,0xe5,0xe7,0x2c,0xf8,0xcf,0x76,0x8e,0xe1,0x74,0x19,0xbe,0x8b,0x27,0x84,0xe2,0xbb,0xd5,0xc1,0x33,0x34,0x15,0xa0,0x39,0xf2,0x8f,0xcf,0x3a,0xf2,0xcf,0x36,0xaf,0x02,0x2d,0x51,0x70,0x19,0x12,0x2b,0x75,0x65,0x04,0x2f,0x97,0xca,0x6e,0xd0,0xca,0xd8,0xe2,0x03,0x12,0x96,0x64,0xcd,0x2e,0x45,0x9c,0xd7,0x14,0x46,0x2f,0x67,0x7b,0x34,0x38,0x63,0x78,0xc1,0x48,0x39,0xaf,0x70,0xfb,0x76,0x03,0x16,0x49,0x9e,0xa1,0xdd,0xe7,0x11,0x6c,0xea,0x24,0x87,0x0e,0xc7,0x7e,0x9f,0x42,0xef,0x89,0xcb,0x65,0x07,0x81,0x77,0x85,0xab,0xbf,0xed,0xe4,0x0c,0x94,0xf4,0x27,0xac,0xb3,0xab,0x11,0x6c,0x0d,0x13,0xf2,0x35,0x84,0x24,0xe0,0x61,0x3e,0x84,0xc3,0x49,0x57,0x24,0x72,0xd6,0xc3,0xc0,0x17,0x38,0xa7,0xb9,0x05,0x20,0x32,0x39,0x8f,0x60,0x00,0x17,0xd0,0x48,0xb0,0x88,0x2c,0x4b,0xf3,0x56,0x08,0x53,0x89,0x29,0x9a,0x39,0xec,0xf3,0x1a,0x97,0x3b,0xad,0xe4,0xc8,0xf5,0x9d,0x73,0xda,0xf7,0xec,0x9c,0xba,0x88,0x95,0x4f,0x2e,0x09,0x24,0x03,0x03,0x29,0x4d,0x09,0xae,0x20,0x7e,0x1a,0xb0,0xb3,0xea,0x94};
    std::uint8_t digest32[32] = {0x7a,0x6b,0x69,0x9e,0x7a,0x98,0x91,0x25,0x16,0x9b,0x74,0x7a,0xf3,0xe5,0xce,0x5f,0x54,0xf8,0xc7,0x2d,0xb4,0x64,0xeb,0xfc,0x26,0x67,0x8d,0x41,0x35,0xe8,0x82,0x65};
    sm3_reset(&ctx);
    block_num = sizeof(msg32) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg32, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg32 + process_n,
                        sizeof(msg32) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest32, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg33[236]    = {0xa3,0xb0,0x06,0xd5,0x31,0xb2,0x46,0xad,0x5f,0xb7,0xce,0xeb,0x12,0xe0,0x9c,0xe4,0x30,0x3c,0x13,0xfb,0x76,0x3d,0xa6,0xde,0x60,0x29,0x25,0xcc,0xb5,0xa8,0x4f,0x29,0x73,0x89,0x97,0xa2,0x53,0xf5,0x54,0x70,0x09,0x5f,0xd9,0x03,0x87,0xbb,0x47,0xcb,0xde,0x19,0x6d,0x66,0xbf,0xf2,0xd1,0xe8,0x36,0x26,0xac,0x43,0x5e,0xee,0xe8,0x59,0xc2,0x65,0x20,0xd5,0xb7,0x69,0xf1,0x7e,0xbb,0x77,0x10,0x43,0xf9,0x96,0xb2,0xd4,0xb5,0x7e,0x26,0x7a,0x56,0x79,0x64,0xc9,0xea,0x7c,0xef,0x6d,0x18,0x4e,0x1f,0x1d,0x49,0x0e,0x1a,0x18,0xe3,0x59,0x40,0xa3,0x0b,0xde,0xde,0x65,0x14,0x44,0x14,0x2e,0x07,0x7f,0x65,0xa6,0x6f,0x92,0x95,0x55,0x51,0xec,0x00,0x7a,0x6b,0x53,0x3f,0x02,0x3d,0x5f,0xdd,0x4f,0xa6,0x53,0xaa,0x25,0x41,0xab,0x56,0x98,0x32,0x61,0x45,0xd2,0x40,0x19,0x17,0xbe,0x06,0x5e,0x08,0x0a,0x82,0xe7,0xcb,0xef,0xe1,0xd6,0x2c,0xb3,0xb9,0xa0,0xec,0xac,0xa3,0xf3,0x4e,0x05,0xd6,0xba,0x09,0x14,0x1b,0xa4,0x84,0x2d,0x06,0xf9,0x74,0x72,0x90,0xbe,0x5a,0x56,0x4c,0xaf,0x42,0xfe,0x4d,0x58,0x10,0x7c,0xc9,0x7a,0x59,0xb0,0x3c,0x0f,0x86,0xb4,0xfd,0xa9,0xee,0x53,0xdd,0x06,0xa1,0x6d,0x99,0xf4,0x7f,0x08,0x4b,0xe3,0x5e,0x3d,0x48,0x7a,0xb8,0xdd,0x73,0xab,0xb7,0x62,0xa7,0x9f,0x26,0xd3,0xbe,0xc0,0x14,0xfc,0x9c,0x8c,0xcd,0x71};
    std::uint8_t digest33[32] = {0x78,0xa8,0xfb,0x62,0x72,0xf4,0x1e,0xf7,0xef,0xd7,0xb4,0x06,0x26,0xcd,0xbf,0x48,0x43,0x1b,0x93,0x9b,0x84,0x1f,0x2f,0x82,0xa5,0x43,0x90,0xe6,0xcf,0xd5,0x2e,0xcb};
    sm3_reset(&ctx);
    block_num = sizeof(msg33) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg33, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg33 + process_n,
                        sizeof(msg33) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest33, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg34[10]    = {0xeb,0xf8,0x22,0x4a,0xe9,0xef,0x11,0x8f,0x69,0xa6};
    std::uint8_t digest34[32] = {0x20,0x88,0xd5,0x26,0xa2,0x76,0xd6,0xa6,0x85,0xf6,0x97,0x12,0x70,0x2f,0xce,0x59,0x0b,0xc6,0xea,0x47,0x46,0xc2,0xcd,0x6e,0x05,0xc7,0xfd,0xfd,0x15,0x8b,0x47,0xfa};
    sm3_reset(&ctx);
    block_num = sizeof(msg34) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg34, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg34 + process_n,
                        sizeof(msg34) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest34, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg35[74]    = {0x0f,0x3f,0x0b,0x96,0xa8,0xb0,0x87,0x0a,0xc2,0xfa,0x48,0x26,0x69,0xd3,0x21,0xe6,0x9a,0xbd,0x6d,0xb9,0xa0,0x54,0xc0,0x15,0x14,0x64,0xf7,0x51,0xae,0xe5,0x4d,0x3b,0x28,0x74,0xc4,0x54,0x22,0xd2,0x8b,0x6e,0x2f,0x66,0x0d,0x4f,0x4b,0xf0,0xe7,0xe3,0x67,0xb3,0x40,0xf1,0x1a,0x62,0x1f,0xf1,0x01,0x09,0x56,0xa7,0x3b,0x8d,0x21,0x59,0x74,0x38,0xa0,0x28,0x7a,0x77,0x56,0xe0,0x38,0xcc};
    std::uint8_t digest35[32] = {0x92,0x98,0x8b,0xd3,0x97,0x7c,0xb0,0xee,0xb7,0x55,0xe4,0xfe,0x6e,0x0a,0x33,0x9b,0xf5,0xcd,0xe7,0x24,0xe3,0xea,0x08,0xe6,0x40,0x7d,0x30,0xd6,0x07,0xd3,0x47,0x6b};
    sm3_reset(&ctx);
    block_num = sizeof(msg35) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg35, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg35 + process_n,
                        sizeof(msg35) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest35, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg36[218]    = {0x1c,0x08,0x26,0x2b,0x18,0x6e,0x7b,0x81,0xa0,0x67,0x93,0xf7,0x60,0x83,0x7d,0x8b,0x72,0x25,0x68,0xf9,0x65,0x41,0x77,0x4c,0xc2,0xf2,0x03,0x1e,0x78,0xb1,0x69,0x6c,0xe3,0x5a,0x2a,0xc4,0xae,0x25,0x74,0x44,0x2e,0xb2,0xc9,0x2b,0x25,0xd5,0x66,0xc2,0x73,0xef,0x0d,0x63,0x10,0x1d,0x9d,0xf5,0x72,0x24,0xde,0x04,0x2c,0x4f,0xca,0x13,0xf3,0x66,0x87,0x21,0x15,0xbf,0x10,0x4b,0xdb,0x43,0xd7,0x45,0x61,0xc4,0x32,0xa4,0xf2,0xe0,0xb1,0x18,0xe7,0xa7,0x33,0x11,0x52,0xa3,0xd1,0x3c,0x73,0xa2,0x86,0x26,0x78,0xf3,0xbe,0x14,0xa4,0x6a,0x2b,0xa5,0x09,0xa4,0xef,0x9c,0x2b,0xe3,0x40,0xc6,0xbd,0x6a,0x0f,0x9f,0xee,0x4f,0x86,0x66,0xb7,0x26,0xb1,0xe3,0x35,0xc7,0x25,0x5e,0x61,0xe4,0x36,0xf8,0x83,0x6d,0x80,0xe1,0x3a,0xb5,0xa4,0x28,0xda,0xa8,0x1c,0x07,0xbf,0x1a,0xaf,0xaa,0x44,0x2d,0x2e,0x4a,0xf4,0xe7,0x78,0xb0,0xa3,0x79,0x01,0x07,0xd8,0xa3,0x5f,0x83,0x27,0x82,0xac,0xe2,0x0f,0xfc,0xde,0x05,0x59,0x85,0x03,0xdb,0x3f,0x3d,0x72,0xa4,0x59,0xe1,0x1d,0xd4,0x38,0xe7,0x02,0x2c,0x71,0xa5,0xd0,0xe7,0xa4,0x80,0xec,0x07,0x04,0x54,0xc8,0xc7,0x75,0xc4,0xb5,0x28,0xb2,0xc0,0x75,0xa8,0x61,0xcf,0x84,0x29,0xe3,0x7b,0x77,0x82,0x65,0x7c};
    std::uint8_t digest36[32] = {0xc5,0x9b,0xc8,0x32,0x2c,0x70,0x2e,0x68,0xbb,0x30,0xb8,0x20,0x07,0x72,0x80,0x17,0x43,0x7e,0xab,0x4a,0x31,0xfc,0x76,0xb2,0x04,0x9c,0x46,0xef,0x8f,0x79,0x92,0xbd};
    sm3_reset(&ctx);
    block_num = sizeof(msg36) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg36, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg36 + process_n,
                        sizeof(msg36) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest36, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg37[77]    = {0x9d,0x06,0xc8,0x82,0xf6,0xd4,0x4a,0x43,0x25,0x8c,0x67,0x0d,0x75,0x41,0x7d,0x59,0x7c,0x13,0x69,0x49,0xd4,0x48,0xe6,0xcd,0xb3,0x20,0xfc,0x07,0xf4,0xb4,0x00,0x72,0xd2,0x2b,0x7b,0x22,0x9f,0x6e,0x9b,0xab,0x9b,0x3a,0xa1,0xb8,0x1c,0x42,0x05,0xd8,0xf2,0xab,0xfe,0x98,0xa1,0x31,0x61,0x14,0x1c,0x21,0xd0,0xb4,0x07,0x12,0x2c,0x8e,0x31,0xb8,0x9f,0xab,0x41,0xcb,0xd7,0xc8,0x57,0x49,0x17,0x91,0x57};
    std::uint8_t digest37[32] = {0x9e,0xcc,0xf1,0x33,0x99,0xa3,0x03,0x41,0x72,0xa9,0xd3,0xca,0x9d,0x4c,0x6d,0xec,0x47,0xe5,0x11,0x6b,0xa5,0xa2,0x11,0x64,0x06,0xc5,0xfb,0xa1,0xd8,0x90,0x99,0x43};
    sm3_reset(&ctx);
    block_num = sizeof(msg37) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg37, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg37 + process_n,
                        sizeof(msg37) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest37, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg38[230]    = {0x3e,0x1f,0x71,0x7e,0x00,0x65,0xa6,0x4d,0x0b,0x44,0x0d,0xf4,0x0c,0xed,0x9a,0xf9,0x3e,0x42,0x16,0xed,0xdb,0xdc,0xd8,0xfd,0xad,0x9f,0x06,0xda,0xc3,0x6d,0xfb,0x12,0x27,0x06,0x93,0xce,0x6e,0x06,0x36,0x25,0xe2,0xe9,0xda,0xf5,0x1d,0x35,0x55,0x68,0x07,0xa2,0x1d,0xca,0xe8,0x4e,0xd5,0x51,0x23,0xe9,0x5f,0x87,0x8b,0x1d,0x7e,0x60,0x72,0x14,0x02,0x31,0x9d,0x52,0x37,0x52,0x1d,0x48,0x36,0xbc,0x33,0x3f,0x86,0x39,0xf1,0x41,0x6e,0xa1,0x8b,0xd1,0xb6,0x68,0xd0,0x4c,0x18,0xc3,0x73,0x4f,0x14,0x3e,0x4c,0x71,0xdd,0x0c,0x4c,0x10,0xc4,0x9a,0x67,0x3c,0x38,0xf2,0x4b,0x95,0x83,0x40,0xcd,0x91,0xa6,0x91,0x29,0xae,0xa7,0x2c,0x97,0x28,0xbc,0x3f,0xa5,0x63,0x82,0x9a,0x37,0x25,0x29,0xd1,0x87,0x4b,0xc1,0x13,0x66,0x5f,0xac,0x16,0x05,0x43,0x94,0x29,0x9e,0x38,0xcb,0x93,0x6f,0xe9,0xd7,0x38,0xb2,0x93,0xd5,0x99,0xe6,0xa3,0x65,0xa6,0xd3,0xdd,0x12,0xec,0x47,0x91,0xc6,0x17,0x13,0xd2,0x4a,0x68,0x4e,0x55,0x6a,0xc4,0x6d,0xe7,0xa5,0x88,0x92,0xb2,0x2b,0x5e,0x82,0xd6,0x17,0xc9,0x87,0xdf,0x2c,0xcb,0x02,0x72,0x5d,0xba,0x41,0x9e,0xcc,0x21,0xe4,0x25,0xfb,0x3a,0x3c,0x18,0x1a,0x53,0x7a,0x2a,0x2b,0x74,0x70,0x64,0x2b,0xf6,0xf4,0x79,0xce,0x02,0x00,0xbf,0x20,0x7f,0x89,0x62,0xf8,0x29,0x71,0x94};
    std::uint8_t digest38[32] = {0x0e,0x11,0x83,0xd0,0x74,0xb7,0x96,0xdd,0x42,0x06,0x21,0x59,0x93,0xed,0x17,0x74,0x73,0x02,0x71,0x90,0x95,0x20,0x43,0x63,0x01,0x9e,0x6c,0x63,0x73,0x4d,0xb8,0xdf};
    sm3_reset(&ctx);
    block_num = sizeof(msg38) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg38, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg38 + process_n,
                        sizeof(msg38) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest38, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg39[173]    = {0x6d,0xe2,0x2c,0xac,0x59,0x22,0xf1,0x32,0xf3,0x7e,0xd8,0x03,0xde,0x33,0x46,0x8b,0x1e,0x16,0xae,0x14,0x70,0xee,0xbc,0x0f,0xdb,0x63,0xd0,0x1f,0xba,0x2d,0x1f,0xc8,0x81,0x76,0xf4,0x1b,0x08,0x8b,0x7e,0x98,0xb5,0xb1,0x51,0x20,0x75,0x78,0xc0,0xec,0x15,0x96,0xca,0x7e,0x41,0xf0,0x1b,0x1c,0x83,0x71,0x10,0x8f,0xb8,0x65,0xa9,0x5d,0x49,0xa4,0xcf,0x2c,0x6e,0xb1,0xab,0xa9,0x8c,0x2e,0x9a,0x86,0xb6,0x3a,0x40,0x8f,0xc6,0x9d,0x02,0x3f,0x7e,0x6e,0xd2,0xbb,0x11,0x3e,0x58,0x9b,0xdd,0x22,0xc5,0x65,0x08,0x27,0xe4,0x5b,0xa1,0xed,0x04,0x89,0x49,0x19,0xd5,0x0f,0x04,0xf4,0x10,0xdb,0x80,0xf1,0xbe,0x88,0x22,0x85,0x52,0xbb,0x58,0xc2,0x5e,0xe4,0x50,0xac,0x98,0x78,0x32,0x63,0x05,0x99,0xb2,0x0e,0xbd,0xe2,0x88,0x41,0x59,0x74,0xc5,0x82,0x28,0xe4,0x2f,0x48,0xa3,0x90,0x84,0x18,0x85,0xf1,0xd2,0x5a,0x7f,0x04,0xf1,0x11,0x51,0x4d,0x84,0x14,0x39,0x87,0x61,0x8e,0xa5,0xbf,0x01,0xc9,0xc5,0x3a,0x09};
    std::uint8_t digest39[32] = {0xf9,0xf2,0xff,0xeb,0x74,0x6c,0x18,0x30,0x46,0x49,0xb8,0x17,0x38,0x44,0x23,0xd1,0x9f,0x0c,0xf8,0x7f,0x27,0xd9,0xb6,0xc8,0x8f,0xfe,0x8f,0x52,0xb5,0x5b,0xf1,0xf6};
    sm3_reset(&ctx);
    block_num = sizeof(msg39) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg39, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg39 + process_n,
                        sizeof(msg39) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest39, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg40[90]    = {0x22,0x5f,0x8a,0x1b,0xc9,0x63,0x84,0xfb,0x6f,0xa0,0x8e,0x18,0xf0,0x7b,0x70,0x5a,0x01,0x20,0xca,0x7c,0xc5,0xf6,0x46,0x0c,0x5a,0xcf,0x5a,0xcf,0x3f,0xe5,0x4d,0x84,0x32,0xba,0xc2,0xaf,0xcf,0x5e,0x6b,0xcd,0x4b,0xd5,0x1b,0xbd,0x9d,0xa7,0xfa,0x58,0x6b,0x41,0xec,0x64,0x8e,0x00,0x6e,0x19,0x09,0xf1,0xad,0x1a,0x54,0x39,0x27,0xe2,0x9d,0xbc,0xb9,0xe7,0x24,0xa3,0xd1,0xae,0x65,0xb4,0x9f,0x10,0x43,0x78,0x66,0x7f,0xd2,0x4a,0x87,0x29,0x45,0xa7,0xbd,0x0c,0x2e,0x36};
    std::uint8_t digest40[32] = {0x49,0x73,0xb1,0x65,0x0f,0x99,0xb9,0x85,0x53,0xad,0xa6,0xbe,0x8b,0x07,0x5b,0xd4,0x93,0xcc,0x16,0xf7,0x56,0xc0,0x90,0x87,0x7b,0x7b,0x50,0x2b,0xfd,0x3f,0x93,0xb5};
    sm3_reset(&ctx);
    block_num = sizeof(msg40) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg40, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg40 + process_n,
                        sizeof(msg40) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest40, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg41[424]    = {0x45,0x49,0xb7,0x61,0x8a,0x12,0x4d,0x4e,0x41,0xfc,0xeb,0xc5,0xcf,0x55,0x7c,0xfc,0xc6,0x7a,0x4d,0x62,0xe3,0xa3,0x7c,0x6a,0xd1,0x4f,0xf7,0x4f,0x1d,0x66,0x51,0xea,0x36,0x56,0x49,0xa1,0xbf,0x31,0x97,0xb8,0xe1,0xec,0xca,0x9a,0xf3,0xf9,0x28,0x73,0x45,0x85,0xc2,0x1a,0x16,0x63,0x6b,0x4b,0x0a,0x52,0x51,0xa5,0xf1,0x5d,0x97,0x38,0x74,0x2e,0x07,0x58,0x72,0x28,0xd4,0xfb,0xcb,0x94,0xc7,0x8b,0xc2,0x13,0x44,0x66,0xbd,0xc7,0x18,0x95,0xbe,0xe4,0xf3,0xc8,0x83,0x9b,0x25,0x1c,0xe0,0x77,0xfd,0x7f,0x73,0x14,0x77,0x31,0x34,0x00,0xbb,0xd7,0x70,0xa9,0xa2,0xc0,0xbb,0xad,0x06,0x98,0x40,0x36,0x98,0xaa,0x7a,0xdb,0x51,0x3b,0x04,0x88,0xfb,0x9f,0x89,0xd4,0xd5,0xb5,0x34,0xf3,0xcb,0xad,0x17,0x0a,0xa5,0x0f,0x2f,0x0f,0x6c,0xd2,0x8d,0x25,0x50,0x82,0x6c,0xc1,0x06,0x42,0xa3,0xeb,0x56,0xa1,0x3b,0xdc,0xae,0xd5,0x09,0xb1,0x5e,0xd7,0x92,0xfc,0x83,0x7b,0xfc,0x4f,0xbe,0xe8,0xb9,0x61,0x61,0xc4,0xce,0xf9,0x33,0xad,0xb4,0x61,0xd0,0xb5,0x97,0x43,0xd4,0x47,0xba,0xae,0x07,0x53,0xee,0x61,0xe9,0x3b,0xd3,0x4b,0xfa,0x2c,0x09,0x89,0x97,0xbb,0x6b,0x26,0xb4,0xdf,0xa0,0x93,0x7d,0x2a,0xc6,0xf5,0x25,0x14,0x1b,0xe3,0x75,0xb3,0x46,0xe6,0x09,0xc1,0x71,0x75,0x1f,0x87,0x90,0xa3,0x42,0x53,0xd3,0xa6,0x80,0xfb,0x85,0xc6,0xe4,0x2b,0xb1,0x07,0xbf,0x26,0xeb,0x84,0xeb,0x88,0xec,0x8d,0x45,0xd2,0x9b,0x85,0x15,0x4c,0x12,0x6d,0x81,0x14,0xc4,0x1d,0x44,0x25,0x4c,0x83,0x2f,0xd5,0x27,0x2a,0xb2,0xa4,0xd8,0xca,0xe0,0xe3,0xaf,0x8e,0x44,0x1a,0x4b,0x58,0x40,0x19,0x09,0xae,0x06,0xec,0xc5,0x7b,0xb0,0x07,0x98,0x8b,0x81,0xdf,0xa4,0x71,0x67,0xa5,0x58,0xf0,0xe5,0x06,0xf5,0x55,0xef,0x85,0x7a,0xc7,0x15,0x54,0xa7,0x25,0x24,0x71,0x7b,0x9c,0x07,0x0e,0xb6,0x04,0xb5,0xcd,0x07,0x01,0xc9,0xc7,0xac,0xca,0x0c,0xcb,0x60,0x4b,0x9d,0x94,0x1c,0xbe,0xb7,0xc4,0x36,0x00,0xc4,0x15,0xa3,0x78,0xbe,0xcd,0x33,0xb1,0xf5,0xba,0x44,0x09,0x59,0xf1,0x70,0xa3,0xbb,0x8b,0x02,0x4d,0x96,0x0c,0xd4,0xaf,0xff,0x09,0xce,0x46,0x00,0x7a,0x85,0x2a,0x34,0xb0,0x2c,0xd8,0x1e,0x5d,0x0b,0x0b,0x64,0xfc,0x07,0x0f,0x87,0xcb,0x03,0x92,0x82,0xab,0x99,0x05,0x8b,0x29,0xd9,0xc8,0xc4,0x18,0xbd,0x16,0xeb,0x3c,0xcd,0xd8,0x71,0x46,0xf1,0x35,0x2a,0xeb,0xbd,0xc6,0xd1,0xe0,0x40,0x67,0x6c,0xd8,0x2a,0x55,0xd5,0xcc,0x9c,0x51,0x0f,0xe5};
    std::uint8_t digest41[32] = {0xd4,0x40,0xf4,0x95,0x98,0x04,0xe5,0xe3,0x84,0x1e,0xfa,0xa8,0x30,0xb7,0x1c,0x37,0xbc,0xb8,0x43,0x4f,0x7c,0x8c,0xd7,0x77,0xbc,0xf1,0xa9,0xe0,0x2a,0x98,0xdb,0x89};
    sm3_reset(&ctx);
    block_num = sizeof(msg41) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg41, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg41 + process_n,
                        sizeof(msg41) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest41, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg42[10]    = {0xc6,0xc4,0x9d,0xe8,0x0c,0xdf,0x15,0xe4,0x9d,0x08};
    std::uint8_t digest42[32] = {0x1c,0xa2,0xab,0xe0,0xf9,0x9b,0x4c,0x45,0xd8,0x00,0xb8,0x68,0x46,0xc4,0x3d,0x86,0x0d,0xc4,0x53,0xe1,0xf0,0x02,0x5b,0xc6,0xb6,0x09,0x70,0x70,0x63,0x28,0x88,0x10};
    sm3_reset(&ctx);
    block_num = sizeof(msg42) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg42, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg42 + process_n,
                        sizeof(msg42) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest42, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg43[465]    = {0x8d,0xb4,0x9e,0x2c,0xe7,0xdb,0x1f,0x53,0xa1,0x2d,0x6a,0x21,0xca,0xaf,0x13,0x48,0x6e,0x27,0xcf,0xcc,0x87,0x27,0xcb,0x15,0x3d,0x9a,0x5d,0x3f,0x52,0x82,0xe4,0x0d,0x29,0xd8,0x9d,0x30,0x88,0xa9,0xed,0x88,0x88,0x75,0x40,0x42,0x59,0x52,0xcd,0x7a,0xc8,0x8e,0x82,0xe9,0x5e,0xb1,0x6f,0x47,0x33,0xc5,0xf0,0x22,0xf2,0x41,0x2b,0x6e,0xb2,0xc6,0x70,0x34,0x62,0x12,0xcb,0x77,0x52,0x69,0x12,0x15,0xd0,0x11,0xce,0x28,0x98,0x61,0x9c,0x9f,0xf7,0x07,0xf6,0x58,0x6b,0x34,0xb5,0x5b,0x98,0xf5,0x03,0xc3,0xf4,0xfc,0x4b,0x2d,0x3c,0x4a,0x49,0x91,0x7b,0x3b,0x89,0x26,0x04,0xe2,0x22,0x8e,0x18,0x3e,0x27,0x5b,0xe4,0x2f,0xb6,0x26,0x86,0xea,0x3e,0x11,0x33,0x3b,0x0a,0x45,0x1b,0x78,0x04,0xbb,0x0b,0x9d,0xab,0x85,0x89,0xc2,0x79,0x49,0xbc,0x9d,0x94,0xd8,0xa8,0xef,0xc9,0xcd,0xec,0x47,0x39,0xf8,0xec,0x8a,0xe6,0x25,0x90,0xc5,0xd5,0x5c,0x92,0x86,0x03,0x2e,0xfe,0x2b,0xef,0xb7,0x7d,0x1e,0x75,0x99,0x50,0x62,0x5f,0x47,0x72,0x13,0x0e,0xff,0x17,0xd9,0xe0,0x50,0x48,0xf6,0x24,0xb1,0xf9,0xe9,0xf0,0x6a,0x1a,0x6f,0x5b,0x90,0xf8,0x94,0x62,0xa7,0x7a,0x1c,0x1d,0x68,0xf8,0xf6,0xb6,0x1f,0xe7,0xef,0xe3,0x1b,0x12,0x36,0x7a,0x0a,0x25,0x27,0x2f,0x8e,0x19,0xfd,0x29,0x0b,0xee,0xc9,0x87,0x77,0xfb,0xad,0x6e,0xfa,0x70,0xb9,0x57,0xa1,0xca,0x4f,0x83,0x72,0x3d,0x62,0x1e,0xfe,0x5c,0x54,0x93,0xc7,0x07,0x47,0x1b,0xa8,0xb5,0x7a,0x46,0x30,0x9a,0xe5,0x84,0x55,0x0d,0x5e,0xee,0x98,0xd0,0x74,0xd5,0x9f,0x53,0xbf,0xee,0x6c,0xbd,0x3a,0x12,0x56,0x10,0xc4,0xc0,0xc4,0x3d,0xf8,0x63,0x7c,0x38,0xfd,0xb7,0x14,0x00,0x42,0x8f,0xef,0x3c,0x86,0x05,0x3f,0x7f,0xce,0x55,0x43,0x99,0xba,0x96,0x6a,0xb1,0x8a,0x63,0xec,0xee,0x96,0x7d,0x6f,0x11,0xac,0x07,0x70,0x01,0x44,0x21,0xde,0x38,0xf0,0xba,0xbb,0x23,0x96,0x8b,0x7d,0x96,0xc1,0xbc,0xd0,0xca,0x05,0x1b,0x47,0x3d,0x40,0x61,0x01,0xcb,0xf3,0xb6,0x54,0xb1,0x99,0xb7,0x22,0x6d,0x77,0xc1,0xe1,0x69,0x75,0xdc,0x7e,0x1c,0x61,0x18,0xbc,0xbd,0xcb,0xee,0x0b,0x82,0x83,0x42,0xa1,0x42,0x85,0xec,0x16,0xc7,0xc9,0x95,0x52,0xd2,0xe1,0xbb,0x24,0x09,0x2e,0xfe,0x2b,0x80,0x7e,0x39,0x2c,0x10,0xc9,0xc7,0x0c,0xdd,0xec,0xc5,0xc7,0xea,0x99,0xa4,0x11,0xe2,0x20,0xe5,0x5b,0x7b,0xed,0xfd,0x8b,0x7d,0x53,0x62,0x62,0xbd,0x27,0x40,0x69,0x04,0x3a,0xdd,0x1a,0x50,0x86,0x82,0xf4,0xa3,0xfa,0x4e,0xb8,0xe9,0x11,0x05,0x49,0xed,0x82,0x07,0xf2,0xa9,0x16,0x9e,0x10,0x5a,0x3b,0xf0,0x62,0xd8,0xb8,0xfd,0x9b,0xce,0x73,0x6f,0xe8,0x72,0x39,0x49,0x3b,0x57,0x42,0xa5,0xbe,0xf7,0x0b,0xff,0x31,0xf4};
    std::uint8_t digest43[32] = {0x2f,0xd8,0x49,0x5b,0xa9,0x58,0xaa,0xaf,0x37,0x2e,0x46,0x42,0x3b,0x5f,0x8d,0x14,0x1b,0xcb,0x16,0x2c,0x99,0x3c,0xca,0x60,0x68,0x80,0xd3,0xbf,0x1c,0x2b,0xe7,0xe1};
    sm3_reset(&ctx);
    block_num = sizeof(msg43) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg43, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg43 + process_n,
                        sizeof(msg43) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest43, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg44[64]    = {0x1f,0xff,0xd9,0xb4,0x97,0xab,0x5c,0xcd,0xfd,0xd8,0x3e,0x4e,0x85,0x8f,0x78,0x72,0x5e,0x88,0xbb,0xfa,0xf1,0xc0,0x83,0x33,0xb2,0xbb,0xf0,0x2b,0x03,0xc8,0x46,0x3d,0x8e,0xb7,0x8e,0xa4,0xe5,0x18,0xb8,0xee,0x77,0xed,0x9d,0x9e,0x76,0x60,0x7d,0x9c,0x0b,0x83,0xf0,0x13,0xc3,0x5e,0x65,0x0f,0x95,0x02,0x56,0x62,0x6a,0xed,0x61,0x06};
    std::uint8_t digest44[32] = {0xdb,0x7f,0x4d,0x53,0xef,0x3d,0x6f,0x85,0xff,0xc1,0x2e,0xfc,0xdf,0x49,0x31,0x1b,0xbf,0x7b,0x16,0x43,0x4b,0x69,0x9c,0xb1,0x13,0x67,0x0e,0x18,0x25,0x9f,0xe6,0x3e};
    sm3_reset(&ctx);
    block_num = sizeof(msg44) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg44, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg44 + process_n,
                        sizeof(msg44) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest44, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg45[179]    = {0x4d,0x92,0x39,0x7b,0x06,0xdf,0x02,0x6e,0x4d,0x81,0x27,0x0b,0xd3,0x00,0x27,0xa5,0xd2,0xde,0xcb,0xb9,0xa8,0x16,0xe9,0x31,0x6b,0x71,0xfe,0x59,0xde,0xa0,0x89,0xda,0xbf,0xad,0x4f,0xcc,0x71,0x98,0xb2,0x0c,0x10,0x59,0x0c,0x58,0x46,0x93,0xe6,0xa5,0xb2,0xe4,0x39,0x4c,0x15,0x09,0xd3,0x3c,0x1b,0xaf,0xec,0xb4,0xff,0x71,0x18,0xd2,0x66,0x48,0xae,0xbe,0x91,0xf4,0x8d,0xbe,0x1c,0xce,0x3a,0x99,0xa0,0x43,0xa6,0xe5,0xe2,0x10,0x04,0x23,0x77,0x72,0xc5,0x2a,0x00,0x88,0x68,0x27,0x02,0xaf,0xcf,0x6a,0x1e,0x17,0x7f,0x43,0x1d,0xb7,0x76,0x71,0x32,0xdb,0x70,0x15,0x8c,0x9c,0x5f,0xc6,0x17,0x64,0x3b,0x55,0xe8,0x01,0x3c,0xb6,0x56,0x91,0xc2,0x56,0x21,0xc9,0x71,0x30,0x30,0xeb,0xc8,0x9a,0xed,0x3c,0x80,0x15,0x92,0x88,0x8b,0x8e,0xd0,0x79,0xbf,0x40,0x51,0x31,0xe0,0x17,0x4d,0xc7,0x14,0xf2,0xa8,0xfd,0x7e,0xe3,0x0f,0xf3,0xd2,0x94,0x6e,0x2c,0x15,0xc3,0x08,0xac,0x25,0x4f,0xb5,0x08,0x6a,0xc6,0x99,0x13,0xa9,0xfa,0x07,0x53,0x07};
    std::uint8_t digest45[32] = {0xa7,0x52,0x99,0x52,0xdd,0xd8,0xaf,0x06,0xeb,0x0d,0x30,0x5f,0x80,0x7a,0x5a,0xc6,0x4f,0x24,0x5e,0xf7,0x2c,0x04,0x6e,0x47,0x22,0x95,0x6d,0xa9,0x16,0xb8,0x5e,0xc4};
    sm3_reset(&ctx);
    block_num = sizeof(msg45) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg45, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg45 + process_n,
                        sizeof(msg45) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest45, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg46[333]    = {0x6c,0x7f,0x47,0x89,0xc2,0x93,0x53,0x2e,0xf3,0x61,0x5f,0xce,0x95,0x31,0x47,0x46,0x57,0xaf,0xc0,0x4d,0x4d,0x3d,0xaa,0x38,0x7c,0x9c,0xae,0xfe,0xff,0x61,0xa9,0x91,0x94,0xd7,0x5a,0x30,0xed,0xb4,0x4c,0xc3,0xb9,0x2d,0x73,0xad,0xb8,0x9b,0xe0,0x1d,0x8f,0x0b,0x73,0x2b,0x95,0x80,0x29,0x38,0x7e,0x05,0x75,0xac,0x50,0xf5,0xed,0x95,0x42,0x07,0xaa,0x9f,0xae,0xdc,0xb8,0x06,0x65,0x20,0x2f,0x4d,0x1d,0x42,0xee,0x2a,0xdb,0x32,0x9e,0x26,0x0b,0x29,0x5b,0x21,0x07,0x26,0xde,0x70,0x11,0x63,0xb1,0xda,0x13,0x0e,0x55,0xc4,0x76,0x6d,0xd2,0xc7,0x41,0x80,0x15,0x85,0xf8,0x72,0xa1,0x60,0x1d,0xd9,0xab,0xc4,0x86,0x6b,0x48,0x0a,0x96,0xaf,0x5b,0x81,0x2d,0xe1,0x3e,0x4f,0x97,0x8c,0x49,0x1d,0x21,0xd9,0xfc,0x5a,0x8c,0x28,0x2c,0x64,0x52,0xf3,0xac,0xae,0x2b,0x76,0x8e,0xf6,0x3a,0xcb,0x96,0x75,0x19,0x7e,0xfd,0x1d,0xbd,0x12,0x96,0x0e,0xa6,0x4a,0x1b,0x4f,0x56,0x08,0xf0,0x5f,0xf3,0xd9,0x64,0x9c,0x58,0x78,0x0a,0x70,0x88,0x6f,0x3d,0x6c,0xa9,0x0d,0xd8,0x5b,0xf0,0xb7,0x4d,0x18,0xd5,0x3f,0xf2,0xf2,0xc0,0x14,0xff,0x2f,0x92,0xf8,0x34,0xc0,0xeb,0x59,0xf3,0x63,0xe9,0x0b,0x3f,0x1f,0xa9,0xe8,0xbf,0x60,0xb8,0x57,0x23,0x93,0x17,0x08,0x4d,0x5e,0x13,0x27,0x40,0xe6,0x4c,0x9e,0xd4,0xe6,0xf2,0x80,0xa8,0xdc,0x30,0x6b,0x12,0xe0,0x92,0x41,0xb7,0x83,0x07,0xee,0xaa,0x91,0x1e,0x8c,0x51,0x95,0x70,0xdc,0x06,0xac,0x37,0x3e,0x49,0x15,0xf1,0xd5,0xb7,0x6f,0xf9,0x54,0x3a,0x30,0xa1,0xac,0xb5,0xd1,0x2e,0x26,0x7f,0xe8,0xf5,0x7f,0x1f,0xeb,0x1d,0x1c,0xe3,0x7e,0x2b,0x67,0x16,0x6c,0x41,0x6b,0x62,0x50,0x6c,0x37,0x60,0x29,0x04,0x35,0xdc,0x8a,0xf9,0x77,0xae,0xb5,0x2d,0x7a,0xfd,0x46,0x3b,0xcd,0x83,0x7f,0x26,0xe8,0xb9,0x91,0xc9,0xd4,0xf7,0x68,0x3e,0xf0,0x53,0x14,0x30,0xe7,0x67,0x1e,0x2d,0xa1,0xac,0xb6,0x0a,0x9f,0x87,0xcc,0xa9};
    std::uint8_t digest46[32] = {0x81,0x38,0x23,0xa5,0xa9,0xa2,0xd7,0xbd,0xa2,0x78,0xbc,0xa6,0xfd,0xa9,0xf8,0x85,0x4b,0x36,0xe3,0x61,0xd1,0x28,0xa4,0x3c,0x0c,0x25,0x55,0xfa,0x50,0xb6,0xe3,0x97};
    sm3_reset(&ctx);
    block_num = sizeof(msg46) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg46, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg46 + process_n,
                        sizeof(msg46) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest46, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg47[153]    = {0xaf,0xd5,0x0b,0x18,0x68,0xfb,0xe4,0x3c,0x39,0x6f,0x6a,0x55,0xc5,0x1f,0x98,0x0b,0x11,0x49,0xa9,0xfa,0xb9,0x02,0x91,0x60,0x28,0x1b,0xcf,0x8b,0x56,0x70,0xf3,0x15,0xe2,0x5d,0x66,0x02,0xc7,0x9b,0x11,0x41,0xce,0xd3,0x80,0x22,0xe5,0xe2,0x90,0x61,0x5c,0xa9,0x0a,0x63,0xf0,0x8e,0xb4,0xc2,0xc2,0x61,0xa4,0x53,0x8b,0xfb,0x64,0x0c,0xe7,0xd4,0xea,0x93,0xed,0xd4,0xe2,0x40,0x58,0x03,0xb3,0x4d,0x83,0x56,0xc6,0x6c,0x56,0x01,0x1d,0x27,0x14,0x35,0x1d,0x98,0x86,0x81,0xa8,0xf1,0x23,0xf6,0xd8,0x39,0x76,0x11,0xbc,0x26,0x91,0x8d,0x43,0x9e,0x20,0xf7,0x18,0x4b,0x08,0x47,0xf1,0xc4,0xe1,0xc9,0xaf,0x78,0xe0,0x20,0xf8,0xad,0x56,0x93,0xa9,0x8f,0x4e,0x24,0xc5,0xf9,0x8c,0x1c,0xb1,0x85,0xde,0x8b,0xe2,0x49,0x62,0xe1,0xe2,0x3b,0x34,0x4b,0xf1,0xea,0x37,0xc6,0xd9,0xfe,0x61,0x69,0x45,0x6a,0x36};
    std::uint8_t digest47[32] = {0x1a,0x7f,0x88,0x1c,0x1d,0xdc,0x2a,0x94,0xee,0xb1,0x81,0x93,0xc2,0x3a,0xa8,0x40,0x6c,0x70,0xcf,0x00,0x17,0x63,0x4a,0xf9,0xa4,0x72,0x84,0x8b,0xa5,0xe5,0x22,0x75};
    sm3_reset(&ctx);
    block_num = sizeof(msg47) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg47, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg47 + process_n,
                        sizeof(msg47) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest47, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg48[15]    = {0xda,0x78,0xe0,0xeb,0x60,0xb4,0x0c,0x0c,0x9b,0xaf,0x17,0xa6,0x2e,0xd9,0xaa};
    std::uint8_t digest48[32] = {0x50,0x4e,0xe4,0x66,0x6c,0x42,0x59,0xbd,0x89,0x18,0x61,0x59,0x01,0x42,0xd0,0xe2,0x73,0x4d,0x11,0x83,0x8b,0xed,0x51,0x73,0xa9,0x06,0x5d,0x77,0x0e,0x3d,0x62,0x0f};
    sm3_reset(&ctx);
    block_num = sizeof(msg48) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg48, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg48 + process_n,
                        sizeof(msg48) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest48, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg49[319]    = {0xcd,0x32,0x5d,0xad,0xff,0xf5,0x1b,0x58,0xfa,0x60,0xdc,0xee,0x8f,0x86,0x1d,0xa5,0xe6,0xb6,0x5a,0x02,0x47,0xad,0x84,0x0a,0x4c,0x1e,0x33,0x36,0x89,0xc3,0x27,0xf6,0x4f,0x53,0xc0,0xa0,0x5d,0xc8,0x16,0x71,0x34,0x95,0xc7,0xc7,0x23,0xa4,0x3c,0xb6,0x33,0xba,0x29,0x31,0x4a,0x67,0x22,0x88,0x5d,0x41,0x9b,0x23,0x3c,0x76,0xe5,0xe6,0xb1,0x7b,0x97,0xd4,0x18,0xba,0xb6,0x13,0x65,0x6b,0x18,0xbe,0x89,0xac,0x81,0xd3,0x11,0x90,0x2d,0xf7,0x9f,0x32,0x76,0xab,0x4e,0x1a,0x04,0xe1,0x32,0x22,0x03,0x41,0x72,0xc5,0x4e,0x17,0x0a,0xb4,0xdd,0xfa,0x17,0xb7,0x59,0x26,0xed,0x33,0x8a,0x8a,0xe7,0x56,0xae,0xe4,0x35,0xc5,0x9a,0x08,0x6a,0xee,0xd3,0x70,0xa5,0xc8,0x8a,0x2f,0xe4,0x5d,0x32,0x2f,0x77,0xeb,0x15,0x71,0x28,0x9b,0x82,0x89,0x47,0xe8,0x83,0xeb,0x76,0xc9,0x40,0x5e,0xb4,0x37,0xe2,0x99,0x67,0xff,0xf4,0x9c,0x31,0xd1,0x23,0x88,0xec,0xa1,0x84,0x1e,0x5b,0x1c,0x33,0x83,0xde,0xa0,0x26,0x24,0x8b,0x6b,0xa2,0xdf,0x03,0xce,0x69,0x29,0xbd,0xc9,0x46,0x02,0xb9,0x3e,0x30,0xbd,0xc6,0x9f,0xd9,0xeb,0xf5,0x30,0xc8,0xbc,0x31,0x95,0x6c,0xe2,0x29,0x02,0xb5,0x18,0xcb,0xc2,0xbc,0x0d,0x01,0x99,0xe0,0x92,0xd2,0x8a,0x84,0x57,0xef,0xfd,0xce,0x39,0xf7,0x9a,0xf4,0x0c,0x57,0xf0,0x84,0xee,0x16,0x1f,0xfe,0x1d,0xad,0xd6,0xc9,0xb2,0xcf,0x68,0x48,0x83,0xbc,0x20,0x7e,0x76,0x8b,0x11,0xf5,0xef,0x2f,0xc7,0xec,0x1e,0x11,0x43,0xc1,0x45,0x4a,0xe5,0x44,0x5d,0xa0,0x3a,0x63,0x67,0xee,0x3e,0x74,0x6c,0x5e,0x9b,0x1e,0x8c,0x34,0x62,0x10,0x34,0xfd,0x0c,0xa6,0xe2,0xc6,0x5e,0xd3,0xc7,0xda,0x66,0x57,0x9b,0x64,0xaf,0x3b,0x55,0xa3,0x60,0x89,0xf8,0x59,0x5e,0xed,0x73,0x32,0xb8,0x84,0x40,0x42,0x05,0x97,0xce,0x28,0xa8,0x0a,0x66,0xa5,0xfc,0x91,0x22,0x58,0xcb,0xff};
    std::uint8_t digest49[32] = {0xab,0xa5,0xb0,0xcd,0xdf,0x43,0x2d,0x89,0xcf,0x20,0x0b,0x2d,0x39,0xc1,0xcd,0x43,0xe4,0x57,0xa6,0x22,0x74,0xca,0x7f,0x64,0x41,0xe8,0xe1,0x70,0xc8,0x55,0xea,0xc4};
    sm3_reset(&ctx);
    block_num = sizeof(msg49) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg49, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg49 + process_n,
                        sizeof(msg49) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest49, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg50[60]    = {0xb1,0x93,0x79,0xbb,0x0b,0x2e,0xec,0x6c,0x0f,0x26,0xe1,0xbc,0x46,0x94,0x9f,0xd2,0xda,0x3d,0xc2,0x27,0x30,0x7c,0x1b,0xc7,0x9f,0xde,0xa8,0x92,0xa4,0x38,0x3a,0xf8,0x27,0x0b,0xeb,0x8d,0x1d,0xc9,0xf8,0xe4,0x20,0x28,0xe5,0x54,0x9f,0x77,0xda,0x5d,0x9f,0x45,0x60,0x44,0xcf,0xe0,0x40,0x56,0xd2,0xae,0xd3,0x13};
    std::uint8_t digest50[32] = {0x69,0xf1,0xae,0x9c,0x3e,0x23,0xd7,0xca,0x26,0xcf,0x4f,0x64,0xf5,0x8e,0x66,0x97,0x8b,0x91,0x94,0x8f,0x0b,0x2a,0xda,0x51,0x9d,0xd4,0xf5,0x6f,0x07,0x43,0x6c,0x5b};
    sm3_reset(&ctx);
    block_num = sizeof(msg50) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg50, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg50 + process_n,
                        sizeof(msg50) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest50, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg51[101]    = {0x8c,0x2e,0x5d,0x44,0xd7,0x51,0x0e,0x62,0x20,0xe4,0xb6,0x63,0x7c,0xe6,0xc2,0x9c,0x5a,0xae,0x1f,0x13,0x27,0x49,0x78,0x0a,0x5d,0x32,0x82,0xd2,0x27,0x3d,0x56,0x25,0x3f,0x65,0x20,0x41,0xe9,0x1d,0x89,0x0c,0x6a,0x19,0x48,0x3c,0x98,0x8d,0xb3,0xc8,0x8c,0x17,0x5b,0x66,0xe1,0xf0,0x13,0x31,0x76,0x89,0xaa,0xcd,0xc7,0x78,0x72,0xa0,0x43,0xe7,0xb5,0x23,0x05,0x5c,0x7f,0x83,0xfa,0xea,0x6b,0x66,0x35,0xa0,0xed,0x21,0x9c,0xf1,0x66,0xdd,0xa4,0x99,0xaa,0xac,0x99,0xc1,0xef,0x89,0x16,0xcf,0x31,0xc1,0x7b,0xa5,0x68,0x5e,0x63};
    std::uint8_t digest51[32] = {0xbd,0xb8,0x54,0x4a,0xfb,0x81,0xa1,0x40,0xc7,0xbf,0x9c,0x8a,0xc9,0xa0,0x7d,0xf2,0xfc,0x68,0x21,0xc7,0x78,0x8d,0xf9,0x4a,0x35,0xb0,0x7c,0xca,0x81,0x3e,0xfc,0x9c};
    sm3_reset(&ctx);
    block_num = sizeof(msg51) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg51, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg51 + process_n,
                        sizeof(msg51) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest51, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg52[86]    = {0xd9,0xa0,0xfe,0xe6,0x2b,0xd3,0xe0,0x44,0x00,0x70,0xf9,0xfa,0x87,0x1b,0x6e,0x23,0x3d,0xe5,0x7c,0x7d,0x2b,0x8a,0xd9,0xcd,0x7b,0xd6,0xf4,0xd5,0x49,0x68,0x6f,0x36,0x03,0x24,0xa7,0x01,0x15,0x6e,0x3c,0x93,0x0c,0x57,0x9a,0x00,0x69,0x17,0xd2,0x45,0x1f,0x3f,0x70,0x8b,0xf8,0x30,0x8f,0x12,0x6e,0x30,0x7d,0x9a,0x95,0xce,0xa9,0x43,0x96,0xcb,0x99,0xef,0xf6,0x18,0x2e,0x4f,0x2b,0xc3,0x34,0x81,0x7a,0xaa,0x03,0x9c,0x3a,0x05,0x23,0x10,0xbe,0x8a};
    std::uint8_t digest52[32] = {0x0b,0xca,0x57,0x20,0x86,0x8a,0xe9,0x71,0x06,0xaf,0xa7,0xad,0x57,0x06,0x61,0xf8,0x76,0xf9,0x63,0x09,0x15,0x0d,0x20,0x71,0xc1,0x4d,0x90,0x5c,0xa6,0x91,0xcc,0xb3};
    sm3_reset(&ctx);
    block_num = sizeof(msg52) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg52, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg52 + process_n,
                        sizeof(msg52) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest52, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg53[224]    = {0xe3,0xbf,0x90,0x01,0x09,0xc9,0x49,0x0f,0xde,0x20,0xe3,0x12,0x7c,0x30,0xab,0xda,0x8e,0xd0,0x60,0xf1,0xd5,0xb0,0x6e,0x2d,0xae,0xe7,0x4d,0x36,0xad,0xff,0x6a,0x2e,0x6b,0x85,0xe5,0xa1,0xb3,0x6e,0xa2,0xf2,0xfc,0xf2,0xaa,0xb9,0x7c,0x9d,0xae,0x9c,0xb7,0x6f,0x9b,0x8e,0x98,0x7b,0x6e,0x94,0xcc,0x5d,0xfe,0xe1,0x78,0x79,0xa3,0x1e,0xe1,0xd9,0x44,0x50,0x39,0x58,0x86,0xe8,0xad,0x37,0x53,0x90,0x2a,0x77,0xc8,0xff,0x20,0x55,0xaa,0xa7,0x89,0x51,0xf6,0x66,0x96,0x05,0xd5,0x4f,0x57,0xb8,0x89,0xaf,0xb4,0x86,0x4b,0xf2,0xf6,0xdf,0x55,0x91,0xda,0xae,0x10,0xeb,0xb0,0x5c,0x7b,0xc0,0x4f,0xf9,0xa9,0x7e,0x10,0xdb,0x52,0x73,0xea,0x8f,0xcb,0xcd,0xb7,0x3e,0xec,0x83,0x67,0x61,0x36,0x31,0xfd,0x14,0x31,0x0f,0x01,0x3f,0x9b,0x8f,0xc3,0xf2,0x39,0x1d,0xbc,0x42,0x23,0x3e,0xef,0x83,0x87,0xa4,0xa8,0xd9,0x51,0x4c,0x56,0xbd,0xf0,0xec,0x40,0x69,0xd4,0xf4,0xf8,0xb4,0x18,0x49,0x34,0xe1,0x21,0x04,0xd8,0x7f,0x9c,0x1f,0xd0,0x9d,0x7d,0x42,0x4c,0xf2,0xaa,0xde,0x8a,0x86,0xee,0x21,0x8a,0xdd,0xe3,0x05,0x57,0x04,0x28,0x21,0x02,0x41,0xa8,0x61,0xbd,0xe8,0x82,0x27,0x26,0x74,0x25,0xa4,0x2b,0xa2,0x24,0xa0,0x1e,0x48,0x3b,0xec,0xda,0xf7,0xd4,0x83,0x03,0x20,0xc3,0x1b};
    std::uint8_t digest53[32] = {0x8d,0xe4,0x4f,0x93,0xfa,0x80,0xda,0x11,0x46,0xed,0x8d,0xd2,0x52,0xf9,0x50,0x0f,0x83,0x4b,0x33,0x04,0x3a,0xdb,0x74,0xa3,0xb1,0xc1,0x74,0x51,0xde,0x7d,0x57,0xdc};
    sm3_reset(&ctx);
    block_num = sizeof(msg53) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg53, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg53 + process_n,
                        sizeof(msg53) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest53, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg54[66]    = {0xb6,0x8a,0x7d,0x8c,0xca,0x90,0x17,0x88,0x7f,0x34,0x15,0xe2,0xba,0xe2,0x0d,0x77,0x48,0x72,0xda,0x4d,0x81,0x8f,0x20,0xbb,0x10,0x10,0xe4,0x9e,0xc0,0x18,0x68,0x58,0x1c,0x33,0xc7,0x36,0xa6,0x9c,0xe9,0xb9,0x1f,0xc5,0xaa,0x58,0xdf,0x12,0xf9,0x94,0x9e,0xc7,0xa9,0x28,0xb4,0x9f,0x59,0x8b,0xbe,0xb2,0x77,0x29,0x61,0xfe,0x91,0x5b,0x75,0xf5};
    std::uint8_t digest54[32] = {0x77,0xd8,0x14,0x70,0x7e,0x1f,0xdf,0x74,0x2c,0xe8,0x36,0x42,0x61,0x19,0xad,0x4f,0x56,0x3e,0xf8,0x7e,0xca,0xb5,0x97,0xfe,0x0e,0x34,0xd1,0x2e,0xbe,0x54,0x35,0x36};
    sm3_reset(&ctx);
    block_num = sizeof(msg54) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg54, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg54 + process_n,
                        sizeof(msg54) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest54, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg55[206]    = {0x2d,0x8c,0x4d,0x32,0xda,0xc7,0xa9,0x46,0x0d,0x57,0xd9,0x77,0x9b,0x7f,0xa4,0x69,0x3a,0x4a,0x04,0x44,0x52,0x5a,0xe7,0x79,0xae,0x8d,0xf1,0x4d,0xdb,0x73,0xa1,0x85,0x60,0x5a,0x40,0x79,0xa7,0x4a,0xe0,0x92,0xb3,0x77,0xbf,0x4a,0x73,0xb7,0xc4,0x28,0x08,0xe8,0x2d,0x84,0x5e,0xad,0xae,0x31,0x12,0xf1,0x10,0x9f,0xeb,0x03,0xfb,0xb1,0x71,0xd2,0xac,0x84,0x8b,0xe0,0xa0,0x97,0x33,0x11,0x83,0xcd,0x6d,0xb2,0x45,0xee,0x21,0x10,0xa7,0x06,0x0f,0xa5,0x35,0x0b,0xa4,0xbf,0x3b,0x4e,0x43,0x1f,0x4c,0x16,0x6b,0x93,0x14,0x92,0xae,0xdb,0xbd,0x39,0x49,0xca,0x87,0x26,0x3b,0xf9,0xd6,0x0d,0xc8,0xe1,0x02,0x3e,0x5b,0x10,0x27,0x66,0x38,0x17,0xc5,0x61,0x46,0x1a,0xf9,0x46,0xb5,0x30,0xe9,0x07,0x10,0xb1,0x05,0xb9,0x85,0x78,0xc6,0xb7,0x14,0xc0,0xff,0x25,0x47,0xf7,0x8e,0x8a,0x77,0xd1,0xde,0x87,0x8a,0xbe,0xe3,0x4d,0x87,0xb5,0x2b,0x83,0x2d,0xdd,0x46,0xf0,0xd4,0xb0,0xc2,0xfa,0x1d,0xb1,0x19,0x48,0xab,0x0d,0x85,0x75,0xa0,0x71,0x66,0x8e,0x8f,0x56,0xf0,0x0e,0x26,0xaf,0x5d,0xa7,0x04,0x2e,0xad,0x3c,0xdd,0x59,0xf4,0xd8,0x1b,0x91,0xf0,0x47,0xb8,0x4e,0xe2,0xf2,0x37,0x51};
    std::uint8_t digest55[32] = {0x76,0x2f,0x83,0x46,0xf4,0xab,0xa5,0x93,0xfb,0xa8,0x86,0xa5,0x45,0x72,0x12,0x86,0x4e,0x0f,0xb8,0x65,0xb7,0xf3,0xfe,0xd0,0xb1,0xcb,0x8e,0xd6,0xe5,0x04,0x15,0x0a};
    sm3_reset(&ctx);
    block_num = sizeof(msg55) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg55, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg55 + process_n,
                        sizeof(msg55) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest55, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg56[33]    = {0xa0,0xe2,0x8d,0x16,0xb8,0xa7,0xa9,0x80,0xd6,0xe7,0x65,0x9b,0x1b,0x9e,0xee,0x94,0xda,0x0d,0xaf,0xef,0x02,0xb1,0x45,0x48,0x6a,0xe8,0x2a,0x64,0x74,0x39,0x1b,0x69,0x5c};
    std::uint8_t digest56[32] = {0x8d,0xd8,0x34,0xa0,0x02,0x36,0xbd,0xfa,0x17,0xa2,0x38,0x7c,0x42,0x4e,0xbc,0x83,0x0a,0x7d,0x7f,0xd0,0xb4,0x28,0xa6,0x3b,0xdf,0x17,0x74,0x3b,0x47,0xaf,0xf7,0xfd};
    sm3_reset(&ctx);
    block_num = sizeof(msg56) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg56, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg56 + process_n,
                        sizeof(msg56) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest56, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg57[443]    = {0x44,0x26,0x4e,0x45,0xae,0xd8,0x92,0xa3,0xab,0x1a,0xc2,0x90,0x76,0x5b,0x31,0x43,0x5d,0xc6,0x1d,0x75,0xf4,0xbd,0x3d,0xd6,0x4d,0x0b,0x11,0xa2,0x01,0xfc,0x03,0x84,0x84,0xf7,0xb8,0xc3,0x82,0x5e,0xd2,0x56,0x7c,0xf0,0x7f,0xa7,0x77,0x74,0x27,0x55,0xfd,0x32,0x5a,0x0d,0x58,0x09,0x75,0x13,0xc7,0x25,0x41,0x47,0x95,0xfb,0x9c,0x32,0xd0,0x4a,0x42,0xcf,0x3e,0x19,0xf3,0xe4,0x9d,0xe2,0xc1,0xa9,0xf9,0x17,0x0d,0xd6,0xfc,0x74,0x71,0x21,0xa1,0x3c,0xf3,0x24,0xb8,0x90,0xc1,0x41,0x76,0x08,0xfc,0xc6,0xe9,0x75,0x29,0x6b,0x31,0x8a,0x53,0xb9,0x1b,0x16,0xb2,0xde,0xb8,0x5b,0xd2,0x1a,0x9f,0x88,0x2c,0x7b,0x4c,0x3a,0xd1,0xff,0x80,0xe7,0x6e,0xbb,0x30,0x9a,0x6a,0x18,0x10,0x06,0x1e,0x07,0x04,0x9c,0x07,0xda,0xa2,0x6b,0x9d,0x9f,0x1f,0x18,0x6e,0x2f,0x38,0xd1,0xdb,0x8d,0x58,0x7f,0x71,0x6a,0xc4,0xb2,0x39,0xb2,0x01,0x98,0xdc,0xf6,0x10,0x07,0x03,0x4a,0xa1,0x7e,0x77,0x2c,0x17,0xfa,0x99,0xac,0x34,0xe3,0xd7,0x8e,0x62,0x5b,0xc1,0x15,0x10,0x2e,0xae,0x32,0x72,0x9e,0x2f,0x8e,0x0f,0xd5,0x13,0x86,0xa1,0x2b,0x20,0xfa,0x7b,0x8c,0x02,0x05,0xab,0x77,0xf3,0x6e,0xa3,0xb1,0x90,0xb3,0x5e,0xe0,0x20,0x77,0x1d,0xad,0x8c,0x19,0xdb,0xd1,0xf3,0x0b,0x8a,0xdd,0x38,0xea,0x28,0x9b,0xfe,0xde,0x73,0xc3,0xe8,0x91,0xf6,0xc5,0x6d,0x64,0xe6,0x4d,0x30,0x3f,0xe6,0x6b,0x7d,0x4e,0xca,0x40,0x3e,0xaa,0xb7,0x9b,0x8e,0x3e,0x55,0x73,0x57,0x1d,0x8b,0xb0,0x17,0xe6,0xab,0x26,0xed,0x5c,0x14,0xcc,0x72,0xc6,0x34,0x39,0xbb,0x09,0xe4,0x64,0x38,0xf6,0x43,0x58,0xa3,0xe2,0xd9,0xba,0x82,0x5c,0x5e,0x86,0xfa,0x68,0x96,0x6e,0xb7,0x9e,0xb7,0xdc,0x76,0x5a,0x02,0x45,0x0d,0xbd,0x62,0xa9,0x70,0xfa,0x6b,0x1c,0x39,0x13,0xab,0x49,0xc7,0x8f,0xbe,0x3f,0x6a,0x58,0x64,0xb4,0xdf,0x0f,0xf8,0xaf,0x76,0x3e,0x8d,0xb5,0x23,0xa1,0xb1,0x16,0xd8,0x18,0x5c,0xb8,0x8a,0xf1,0x80,0xaf,0x8c,0xf6,0x29,0xd7,0xb7,0xd9,0x4d,0xea,0xe6,0x16,0x94,0x75,0x3f,0xb4,0x09,0x67,0xb3,0x1e,0xa5,0xd6,0xdd,0x7f,0xde,0x32,0x03,0xc8,0x08,0xec,0xaa,0x97,0xbe,0x5f,0x00,0xc0,0xef,0x11,0x93,0x23,0x77,0x46,0xe4,0x5f,0x43,0xb8,0x26,0x97,0xaf,0x9f,0xdd,0xb3,0x20,0x19,0x18,0x4d,0x62,0x6b,0xea,0x59,0x67,0x79,0xe6,0x17,0xd0,0x8d,0x07,0x44,0x44,0xa5,0x6e,0x93,0xf2,0xa4,0xe2,0xa2,0xf8,0x6d,0xe4,0xc5,0x52,0x25,0x58,0x32,0x36,0xb5,0x65,0x35,0xa0,0x89,0xba,0xb3,0x36,0xf7,0x10,0x75,0x81,0xc1,0x4b,0xe6,0xbe,0xe5,0x11,0x73,0xf9,0xd2,0x81};
    std::uint8_t digest57[32] = {0x16,0x58,0x3d,0x93,0xb8,0xa3,0x9f,0xd7,0xf9,0xc7,0x72,0x22,0xdc,0xc3,0xbc,0x98,0xc8,0x52,0x02,0xfc,0x81,0x39,0xb3,0xd0,0xdb,0xbb,0x3a,0xfc,0x92,0xd2,0xa0,0xdd};
    sm3_reset(&ctx);
    block_num = sizeof(msg57) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg57, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg57 + process_n,
                        sizeof(msg57) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest57, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg58[195]    = {0x48,0xa1,0xf2,0x57,0x54,0xd5,0x0a,0x7f,0x57,0xe6,0x5c,0xfe,0xc0,0x0a,0x35,0x9f,0x21,0x68,0x5d,0x48,0x58,0x06,0x2d,0xd5,0x4d,0x04,0x54,0xc8,0x86,0x3f,0x92,0xef,0x70,0x7a,0x2a,0xf9,0x09,0x24,0x47,0xb6,0x7d,0x6a,0xb7,0xa4,0xd2,0x12,0x41,0x49,0x0a,0x78,0x5d,0xcc,0x65,0x8d,0x08,0x39,0x21,0xfe,0x50,0xdd,0x35,0xfe,0xa0,0xf2,0x56,0xf9,0x2e,0x73,0x3f,0xd6,0x64,0x0d,0x34,0x91,0xa0,0x05,0x76,0xa2,0x28,0xf8,0x20,0x03,0xe0,0xa2,0x75,0xf7,0x6c,0xbf,0xa9,0x00,0xf9,0xa0,0x0d,0x75,0x2d,0x4d,0xaa,0x0f,0x4c,0x30,0x1d,0x6b,0xab,0xbf,0xc0,0xe8,0x77,0xdd,0xc7,0x8e,0xa8,0xa8,0x91,0xb4,0x31,0xd2,0x41,0xf0,0x96,0x4a,0x6f,0x19,0x3a,0x33,0x21,0xd2,0xf6,0xc9,0x57,0xb5,0xbd,0xe4,0xcd,0xd2,0x20,0x86,0x34,0x61,0x44,0x8b,0x14,0xe3,0x6f,0x37,0x59,0xd9,0x70,0x47,0x3c,0xfe,0xdb,0xb1,0xdc,0x6d,0xb5,0x5e,0x2b,0x07,0xfd,0xed,0x35,0x30,0xfe,0xce,0x6d,0x70,0x7e,0x5d,0xd3,0xd0,0x3f,0x14,0xef,0x74,0x8a,0x99,0xf5,0x0f,0xb4,0xea,0xf7,0xac,0xdb,0x23,0xfe,0x1f,0xbc,0x20,0x27,0xc8,0x2d,0x29,0xd9,0xe8,0xcd};
    std::uint8_t digest58[32] = {0x1d,0xa5,0xf9,0x1c,0x83,0x02,0x11,0x9f,0x35,0x79,0xf8,0x58,0x80,0x06,0xf8,0x15,0x50,0xdd,0x21,0xc7,0x83,0x88,0x2a,0xfe,0x84,0xf2,0xee,0x65,0xb3,0xbb,0x82,0x95};
    sm3_reset(&ctx);
    block_num = sizeof(msg58) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg58, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg58 + process_n,
                        sizeof(msg58) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest58, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg59[111]    = {0xfa,0x24,0x36,0x29,0x40,0xd7,0x5c,0x5b,0xa4,0x6e,0x14,0xef,0x32,0xc9,0xd1,0x30,0xf9,0x0e,0xc6,0xf3,0x7c,0xd7,0x16,0x8e,0x82,0xf2,0x47,0xd5,0x69,0x14,0x69,0x18,0xc5,0xe1,0x11,0xf8,0xb4,0xe7,0xb6,0xfe,0xb0,0x69,0x0a,0x1c,0x8f,0x33,0xba,0xc0,0x38,0xe9,0xaf,0x78,0xe5,0x09,0xbe,0x1c,0x0a,0x0d,0x9a,0xcd,0x0a,0xc7,0xc7,0xb9,0xf3,0x5a,0x0b,0xab,0x90,0xa3,0x2e,0x6a,0x47,0x38,0xa0,0x10,0x2a,0x18,0x11,0xfb,0x9a,0x93,0xed,0xdb,0xf6,0x46,0x10,0x72,0x6c,0xbc,0x9a,0x10,0x3c,0x56,0xaa,0x85,0xae,0xd1,0x4d,0xc2,0xa4,0xa9,0x52,0x8a,0x8d,0x99,0x81,0xfc,0x6d,0x3c,0x7a};
    std::uint8_t digest59[32] = {0xa2,0x2e,0xa1,0x41,0x32,0x06,0x58,0x86,0x40,0x78,0x52,0xb6,0x5c,0x6b,0xad,0xee,0x01,0x91,0x01,0x39,0x0f,0x86,0x4a,0x6f,0x49,0x82,0xd6,0xac,0xfd,0xa6,0x3e,0x95};
    sm3_reset(&ctx);
    block_num = sizeof(msg59) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg59, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg59 + process_n,
                        sizeof(msg59) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest59, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg60[352]    = {0x89,0x3f,0x24,0xbe,0xd0,0x69,0x31,0x3d,0xb6,0xca,0xfd,0x3e,0x02,0x08,0x63,0x5e,0x6f,0xfe,0xcc,0xb8,0x17,0xd1,0xb0,0x82,0x12,0x0b,0x9f,0x99,0xfa,0x72,0x83,0xc9,0x58,0x7f,0x09,0x08,0x3d,0x3a,0x0e,0x56,0xef,0x7d,0x03,0x2b,0x9e,0x40,0x4a,0xe8,0xf8,0x4e,0x5f,0xc0,0x96,0x71,0x3a,0x8f,0x98,0x40,0xda,0x4f,0x18,0xb2,0x74,0x60,0x89,0xda,0xe8,0xf4,0xaa,0xd0,0x34,0xaf,0xe4,0xa6,0x2b,0x30,0xdd,0x33,0x8c,0x76,0xa8,0x30,0x42,0x39,0xe3,0x40,0xc6,0xee,0x2c,0x82,0x20,0xf6,0xb3,0x89,0x10,0xaa,0x05,0x3b,0x0f,0x06,0x66,0xaf,0x55,0x50,0x86,0x6b,0xad,0x27,0x45,0xe1,0xa7,0x9b,0xc1,0xf7,0xd7,0xd3,0x7b,0x84,0x29,0x20,0x86,0xac,0x9c,0x9e,0xa6,0xd8,0x72,0xa9,0xee,0x72,0xe3,0xd3,0x03,0x3a,0xde,0x88,0x10,0x94,0x0f,0xeb,0x24,0xa5,0x0e,0xda,0x2a,0x77,0x8b,0x5e,0xb5,0x70,0x85,0x5e,0x15,0x86,0x6b,0xc3,0xde,0xf0,0xf1,0xaf,0x75,0xbb,0xc6,0x68,0x6a,0xc8,0xc7,0xdf,0xbd,0xa6,0x14,0x3c,0x94,0x4b,0x51,0x4d,0xbe,0x4a,0x84,0xff,0x8a,0xc2,0xc7,0xe8,0xdb,0x21,0x1a,0x18,0x95,0x64,0xf0,0x7a,0xa4,0xa8,0x95,0xd5,0xa3,0x3b,0xd8,0x5e,0xdb,0xf3,0xe7,0x7d,0xc0,0x04,0x22,0x6b,0x29,0xb3,0x64,0xdf,0x09,0xa1,0x33,0x76,0x87,0xb6,0x37,0x4b,0x1f,0x63,0xd1,0x69,0xd8,0x53,0xec,0xa2,0x33,0x65,0xb0,0x97,0x80,0x33,0xc7,0x26,0xeb,0x2c,0xce,0x76,0x8f,0x3f,0xff,0xc8,0x1a,0x42,0x56,0x4d,0x96,0x91,0xa5,0x6a,0xdb,0x7c,0xf5,0x5d,0x3c,0x78,0xda,0xfa,0x15,0x84,0x13,0x66,0x93,0x71,0x79,0x00,0x71,0xe1,0x93,0xbb,0x2d,0xc3,0x7d,0x77,0xeb,0x90,0xcc,0x95,0x41,0x77,0x06,0xd9,0x97,0x96,0x71,0x7e,0x1a,0xc9,0xe6,0x8c,0xc5,0x21,0x43,0x03,0xc9,0x2e,0xbc,0x72,0xbc,0x40,0x31,0x5d,0xfc,0xd4,0x23,0x2f,0x6f,0xb5,0x80,0x1b,0xf6,0x15,0x96,0x07,0x5d,0x6b,0x09,0xa1,0xdd,0xef,0xf8,0xd9,0x39,0x2f,0xf9,0xee,0x3d,0xe3,0x0c,0x2f,0x9a,0xab,0xd0,0xe0,0x4a,0xb0,0x3c,0xb6,0x90,0xbd,0x88,0x8d,0xd7,0x97,0xab,0x6c,0xf0,0x2e,0x16,0x6d};
    std::uint8_t digest60[32] = {0x87,0x55,0x16,0xb9,0xdf,0x4f,0x1f,0x79,0xe2,0x5a,0xfc,0xc0,0xeb,0xae,0x47,0x52,0x73,0xcb,0x4c,0x28,0x23,0x67,0x0c,0x39,0x19,0x21,0x5a,0xbe,0x4f,0x3e,0x00,0xc2};
    sm3_reset(&ctx);
    block_num = sizeof(msg60) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg60, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg60 + process_n,
                        sizeof(msg60) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest60, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg61[42]    = {0x29,0xd9,0xe0,0x42,0x50,0x2d,0xb4,0x81,0x78,0xac,0x0e,0x77,0x99,0x00,0x3e,0xaa,0x1e,0x38,0x07,0xfc,0x81,0x1b,0x47,0xa9,0xb2,0x71,0xf2,0x74,0xfd,0x1b,0xc6,0xe8,0x51,0xef,0x60,0xc0,0x60,0x07,0x22,0xe5,0xf2,0x80};
    std::uint8_t digest61[32] = {0x1f,0xd3,0x8b,0xf1,0x29,0xf0,0x7a,0x0f,0xf7,0x51,0x33,0xb7,0x21,0x65,0xb6,0xdb,0x9e,0x01,0x45,0xaa,0x86,0x3c,0xae,0x6d,0x2e,0x49,0x58,0x1b,0x27,0xfe,0xff,0x08};
    sm3_reset(&ctx);
    block_num = sizeof(msg61) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg61, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg61 + process_n,
                        sizeof(msg61) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest61, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg62[205]    = {0xe8,0x77,0xa9,0x2e,0xbf,0x54,0xf7,0x38,0x72,0x88,0xea,0x59,0x73,0xb5,0x63,0x32,0x40,0x1e,0xea,0x14,0x82,0x80,0x0f,0x38,0x49,0xb4,0xb0,0xc4,0xb4,0xb0,0x0e,0x31,0x83,0x9b,0x17,0x90,0xca,0xfd,0x70,0x48,0x80,0x44,0x39,0xcb,0xbc,0x7a,0x4f,0x53,0x5e,0x64,0x2c,0x90,0x88,0x4d,0x9a,0x43,0xec,0x81,0x8b,0x33,0x4c,0xa1,0x99,0x37,0xef,0x8a,0x5c,0x4e,0x6e,0x7c,0xa3,0x8b,0xaf,0x69,0x36,0x88,0x11,0x0b,0xad,0x16,0xfa,0xb2,0x1d,0x8d,0x48,0x6d,0xae,0x68,0xaa,0x81,0xdf,0xea,0x42,0xd8,0x10,0xed,0x5b,0x49,0x2d,0x24,0x37,0x18,0x28,0xc5,0xfa,0x88,0xc8,0x16,0x29,0x10,0x87,0x57,0xd8,0x8d,0xd9,0x0b,0x96,0x35,0xf3,0xc8,0x60,0xb6,0xdc,0xed,0x28,0x0f,0x91,0x7f,0xda,0x52,0x9d,0x8f,0xdd,0x5e,0x7d,0x94,0x1e,0x25,0x01,0x02,0x25,0x13,0x8c,0x24,0x66,0x06,0x95,0x19,0x29,0xba,0x9c,0x54,0xa9,0x44,0xe8,0x6b,0xf5,0x4e,0xfc,0x9b,0xff,0xcf,0x98,0x21,0x4b,0x17,0x6b,0x0c,0xca,0x96,0xf7,0x00,0x14,0x19,0x11,0x23,0x06,0xf4,0x76,0xbf,0x98,0x2c,0xbb,0xf4,0x52,0x4b,0x74,0x16,0xa3,0x22,0x72,0x8a,0x50,0x3e,0x15,0x32,0x95,0x92,0x39,0xb3,0xd5,0xa5,0x93,0x52,0x84};
    std::uint8_t digest62[32] = {0x54,0x79,0x22,0x30,0xa1,0x54,0xa9,0x2d,0xd2,0xbc,0xb9,0x8c,0xaf,0x14,0x77,0xcc,0x8b,0x25,0x68,0x9b,0x51,0xae,0x5e,0x0b,0xdd,0x7c,0x93,0x68,0xfa,0x2b,0xf5,0xcb};
    sm3_reset(&ctx);
    block_num = sizeof(msg62) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg62, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg62 + process_n,
                        sizeof(msg62) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest62, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg63[251]    = {0x86,0x74,0x4a,0x3d,0x48,0x65,0x73,0xc1,0xec,0x66,0x65,0x02,0xbb,0x99,0xfc,0x2d,0x9b,0x6e,0x14,0xfe,0x69,0xa9,0x5d,0x05,0xc6,0xef,0x2f,0x98,0xf4,0xfd,0x9a,0xf5,0x44,0x14,0x47,0x47,0xe7,0x82,0xa2,0x5a,0x06,0x35,0x71,0xc3,0x23,0x65,0x10,0xba,0xb2,0xd2,0xbb,0xfa,0x8a,0xe8,0x71,0x14,0xe2,0x29,0x95,0x0c,0x4b,0x60,0xc6,0x2b,0xaa,0xa4,0x5d,0xc4,0x5a,0x48,0xa3,0x6d,0x46,0xfd,0x10,0x9a,0x27,0xbd,0xfb,0x21,0x58,0xd5,0x8c,0x84,0xf2,0xbe,0xfc,0xaf,0xcf,0x56,0x86,0x94,0xf9,0xfa,0x25,0x0a,0xbf,0xef,0x6d,0x97,0xc9,0x89,0xc5,0x89,0xa0,0x97,0x57,0x16,0x20,0x53,0xdf,0x14,0x21,0x8e,0xe2,0xc1,0xf3,0x09,0xce,0x9d,0xac,0x0f,0xd6,0xbe,0x9b,0xf6,0x8b,0xd1,0x56,0x41,0x06,0xf1,0xe9,0xb7,0xa5,0x74,0x63,0xc3,0x59,0x97,0xfe,0x49,0x52,0xb0,0xdd,0x92,0x0e,0x68,0x70,0x3f,0x91,0x92,0x17,0xf1,0x75,0xc3,0xa4,0x97,0xd7,0xef,0xd4,0x49,0xcb,0x5c,0x19,0x6c,0xf8,0xa7,0x73,0xeb,0xe0,0xf0,0x54,0x8f,0x8a,0x2f,0x1c,0x64,0xf8,0xae,0x23,0x84,0x39,0x25,0xd6,0x92,0x08,0x72,0x6a,0x6f,0xa6,0x16,0x81,0x6c,0xb2,0xb0,0xe9,0xa5,0x6f,0x00,0xfe,0xce,0x61,0x05,0x49,0x3a,0x2b,0x79,0xc7,0xb7,0xb9,0xa7,0x92,0x43,0xab,0xbb,0x58,0x1d,0x41,0xf5,0xbb,0x75,0xee,0xfd,0xff,0xdf,0xb5,0xa5,0x0c,0xb8,0xba,0x98,0xf0,0x33,0x1e,0x52,0x2f,0x19,0xe0,0xed,0xb3,0x7e,0x25,0x36,0xf5,0x21,0x8d,0x92,0x30,0x45,0x0f};
    std::uint8_t digest63[32] = {0xf7,0x2a,0x57,0x30,0x44,0xd1,0x37,0x71,0x65,0x6d,0xcb,0x4d,0xea,0x9e,0x5d,0xfe,0xc0,0x0a,0x32,0xe8,0x85,0xb9,0x00,0xee,0xfb,0xee,0x0a,0xfa,0xaa,0x69,0x6b,0x06};
    sm3_reset(&ctx);
    block_num = sizeof(msg63) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg63, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg63 + process_n,
                        sizeof(msg63) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest63, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg64[276]    = {0xeb,0xd0,0x24,0x44,0xba,0x6f,0x3b,0x13,0xc4,0xeb,0x37,0x33,0x22,0xdb,0xff,0xe8,0x59,0xaf,0x64,0xed,0xd4,0x37,0xba,0x51,0x95,0x8a,0x76,0x19,0xf3,0x24,0x82,0x62,0x61,0x6c,0x46,0x6c,0x6c,0xe2,0x85,0x3b,0xa9,0x46,0xea,0x25,0x90,0xc5,0xf3,0x1b,0x8d,0xb3,0xb6,0x10,0x37,0x3a,0xea,0x46,0xf1,0xf9,0x1c,0xae,0x89,0x12,0x20,0x2d,0x6a,0xbc,0xc9,0x9e,0x1a,0x7c,0xf9,0xfa,0x0c,0x10,0x60,0x82,0xf2,0xc0,0xbe,0x40,0xa6,0x73,0xa5,0x7a,0x09,0xff,0xbb,0x01,0xe9,0x7d,0x47,0x35,0x44,0xb1,0x5b,0x11,0x00,0xeb,0xef,0x01,0xd6,0xd8,0x63,0xb1,0x99,0xeb,0x8a,0x5b,0x11,0x4c,0x04,0x68,0xb4,0x38,0xb7,0x00,0x87,0xc8,0xda,0x70,0xd3,0x40,0x1a,0xc8,0x44,0x44,0xb7,0xa1,0x1d,0x8d,0x09,0x0c,0xa8,0xad,0x5a,0x8a,0x29,0xf2,0xfe,0x4e,0xf7,0x0a,0x72,0x55,0xc8,0x31,0x72,0x8a,0x4c,0x83,0x76,0x63,0xd8,0x94,0xf1,0xdf,0xcc,0x48,0xb7,0xb6,0xdb,0xa4,0x4b,0x4a,0x6c,0x35,0x26,0xe9,0x0a,0xac,0xdb,0x06,0x39,0x0f,0xd1,0x3b,0xc5,0x0d,0xb2,0xa7,0x21,0x33,0x53,0x4d,0xe1,0xb2,0x83,0x2a,0xdf,0x3e,0x40,0xe8,0xcf,0x50,0x57,0x11,0xb5,0x9b,0x43,0x6c,0x2e,0x93,0x70,0x47,0x60,0x3a,0xa9,0x3e,0xfd,0x8c,0x5f,0x0a,0xb0,0x21,0xcd,0x6a,0xd5,0x3b,0x63,0xf9,0xfe,0x0c,0xe5,0x4d,0x1d,0x23,0x78,0x10,0xfc,0xb5,0x52,0xf6,0x4d,0xee,0xb6,0x8e,0x7b,0xc0,0x25,0xc4,0xc3,0x3e,0xed,0xc3,0x3d,0x3d,0x71,0x5f,0xaa,0xb8,0x4f,0x0b,0xa9,0x46,0xd6,0x5f,0x4a,0x09,0x66,0x98,0x6d,0xf9,0x5c,0x40,0x5a,0x18,0xc7,0x09,0x9b,0xea,0x06,0x04,0x9d,0xbc,0xa9,0x0b};
    std::uint8_t digest64[32] = {0x03,0x95,0x44,0xfd,0x54,0xd7,0x14,0x04,0xa5,0x9b,0x22,0x52,0x57,0x7f,0x69,0xf5,0x68,0x2e,0xb6,0x1a,0xe4,0x6f,0x76,0x22,0x84,0xbc,0x0e,0xb1,0xd9,0x3b,0x55,0x98};
    sm3_reset(&ctx);
    block_num = sizeof(msg64) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg64, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg64 + process_n,
                        sizeof(msg64) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest64, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg65[135]    = {0x48,0x5a,0xa2,0x5e,0x97,0x03,0xf3,0x55,0x47,0xb0,0xbb,0xd5,0x1f,0x84,0xb4,0x71,0x7e,0x31,0x60,0xc9,0x5a,0xcd,0x4a,0x2c,0xd8,0xea,0x8e,0xcc,0x94,0x30,0x58,0xce,0x92,0xa0,0xd8,0x94,0x7f,0x90,0x13,0x6c,0x51,0xd4,0x57,0xc0,0xa2,0xa9,0xa2,0xcd,0x54,0xb2,0xe6,0xcb,0xdf,0xcb,0x5e,0x87,0xe5,0x1f,0x06,0x26,0xcd,0x5d,0x4d,0x5f,0x8e,0xba,0x84,0x9f,0x3c,0xe8,0xc0,0xe8,0x6e,0x0f,0xfb,0xdb,0xd0,0x65,0x1c,0x50,0x77,0x0f,0xde,0x18,0xb7,0x80,0x05,0x0a,0xeb,0xc2,0x1f,0xa0,0xb9,0x1c,0x5f,0x4f,0x21,0x74,0x07,0xc9,0x66,0x8e,0x99,0xf4,0x9d,0x99,0xca,0x2c,0x52,0x5a,0x22,0x3a,0xa8,0x4a,0x66,0xaf,0xe1,0x10,0x28,0xe5,0xf8,0x60,0xfd,0x4d,0x6e,0x35,0xa4,0xb2,0xc4,0xe1,0x8d,0xea,0x0a,0xd9,0xa0};
    std::uint8_t digest65[32] = {0xbb,0xc9,0x04,0xb7,0x80,0x6c,0x3d,0xbe,0x96,0x10,0x85,0x96,0xc1,0x7d,0xc0,0xb0,0x9f,0x94,0xcd,0x59,0xae,0x34,0xeb,0xfc,0x0b,0x6f,0xbc,0x56,0x98,0xc4,0x9d,0x00};
    sm3_reset(&ctx);
    block_num = sizeof(msg65) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg65, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg65 + process_n,
                        sizeof(msg65) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest65, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg66[355]    = {0x5c,0xde,0xf2,0x73,0x31,0xbf,0xc3,0x8c,0x8a,0x2b,0xd1,0xd6,0xb0,0x89,0xaa,0x2b,0x1a,0x5b,0xff,0x10,0x6b,0xfc,0x34,0x99,0x12,0x8d,0xce,0xd7,0xee,0x8f,0x64,0x43,0x30,0xac,0x6d,0x60,0x4a,0x09,0x21,0x18,0xb9,0x20,0xdc,0x7e,0xa6,0x03,0x1e,0x9b,0xcd,0xfd,0x71,0xc4,0xa3,0x7a,0xea,0xe4,0x09,0x17,0x36,0x5e,0xfc,0xb2,0x5b,0xa4,0x8b,0xc7,0xfa,0xd4,0xde,0xc5,0xc7,0xc7,0x43,0x64,0x05,0xe4,0xac,0x96,0x32,0xf9,0xe0,0x03,0x36,0x96,0x28,0x9a,0x1d,0x3f,0xea,0xd5,0xbc,0x9c,0x75,0x6f,0xa5,0x65,0x71,0x79,0xd1,0xe7,0x01,0x0a,0xb5,0xe7,0x6f,0xf5,0x07,0x2a,0x5a,0x29,0x15,0xdf,0x17,0xf8,0x07,0x76,0x5c,0x87,0xc3,0x95,0x01,0xa1,0xd7,0x01,0x7c,0xcd,0x19,0x4a,0x47,0xf8,0x2a,0x7e,0xe0,0x4e,0x14,0x7b,0x79,0x84,0x5d,0x6c,0xb5,0x5d,0xe2,0xe5,0xad,0xf4,0xff,0x62,0xe1,0x97,0x85,0x05,0x56,0xc4,0x44,0x55,0xef,0x8d,0x9c,0xa0,0x25,0x92,0x92,0x78,0xa7,0x36,0x9b,0x5a,0x8a,0x21,0x35,0xbd,0x96,0x4c,0xd1,0x5b,0x4c,0x1f,0x0b,0x7a,0xab,0xaa,0x9a,0xea,0x86,0xa5,0x3a,0xbd,0x6d,0x85,0xf2,0x53,0xe3,0x40,0x47,0x58,0x19,0x79,0x64,0x1c,0xe5,0xff,0x4c,0xd6,0xa0,0x84,0x22,0xcd,0x49,0x3a,0xe7,0x06,0x8e,0x30,0x9b,0x0e,0x8d,0x93,0x1f,0x3c,0x04,0x8b,0xfb,0x23,0xdc,0x2a,0x13,0xbb,0x2b,0xe0,0x94,0x70,0x31,0x16,0x9b,0xd9,0xa6,0xc3,0x17,0x7a,0x8f,0xfc,0xaf,0x0b,0x1c,0xfb,0x61,0x59,0x84,0x9e,0x0f,0x57,0xf1,0xdf,0x62,0x80,0xb3,0x64,0x47,0xb0,0xe8,0xf0,0x1d,0xcc,0x90,0x5b,0x6a,0xbe,0xb0,0xa1,0x53,0xc4,0x6f,0x00,0x03,0x46,0xb1,0xfc,0xa9,0x63,0x7c,0xe0,0xbb,0x19,0xcb,0x5b,0x28,0xc5,0xce,0xe3,0xf0,0xda,0xc5,0x1d,0xba,0x43,0x47,0x14,0xad,0x27,0x76,0x49,0x30,0x90,0xfd,0x2d,0x97,0xa0,0x43,0x8f,0x5b,0xec,0xc9,0x20,0x51,0x92,0xce,0xf9,0x10,0x5a,0x54,0xaf,0x36,0xac,0x93,0x40,0x06,0xa9,0x86,0xaa,0x94,0x19,0x38,0x0b,0xd5,0xef,0x48,0x87,0xe9,0x88,0x09,0x38,0xa9,0xc7,0x90,0x2c,0x7d,0x33,0xa7,0x24,0x27,0x6d,0x15,0x3a,0x43};
    std::uint8_t digest66[32] = {0x12,0xd9,0x18,0x7c,0x71,0x64,0x78,0x9e,0xe1,0x5c,0x2f,0x99,0x65,0xef,0xbb,0xea,0x0c,0x8c,0xfb,0x35,0x23,0xf5,0x9b,0x9c,0x92,0xa6,0xa3,0x14,0xf0,0x4f,0x9d,0x1e};
    sm3_reset(&ctx);
    block_num = sizeof(msg66) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg66, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg66 + process_n,
                        sizeof(msg66) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest66, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg67[395]    = {0x03,0x82,0xeb,0x9b,0x41,0xec,0xbc,0x16,0xe7,0xc8,0xb3,0x41,0xb7,0x51,0xa5,0x6b,0x07,0xd3,0x4c,0xee,0x32,0x65,0x8e,0xe7,0xa9,0x51,0x8f,0xab,0xa3,0x0f,0x34,0x03,0xcb,0x89,0xba,0x9a,0xce,0x24,0x7b,0xa0,0xe3,0xcd,0xfe,0xc8,0xca,0x8d,0x13,0x28,0xce,0xa2,0x7e,0x84,0x4d,0x72,0xeb,0xe6,0xdc,0x2c,0x47,0x2c,0x78,0x89,0x55,0xe1,0x23,0x41,0x00,0x26,0x8a,0xdd,0x71,0xff,0xb8,0x43,0xe8,0x66,0xe5,0x23,0xb2,0x41,0x6c,0x8d,0x95,0xe4,0x13,0x05,0x59,0xaa,0x6c,0xa1,0xb8,0x9f,0x4a,0x8a,0x0f,0x31,0x56,0x55,0xfa,0xd7,0x8f,0xf7,0x8a,0xa3,0x48,0x18,0x62,0xd2,0x67,0x8b,0x9e,0xd2,0xa5,0xbd,0xbf,0x65,0x3e,0x87,0xa5,0xb0,0x0d,0x05,0x0f,0xfd,0x00,0xbf,0x27,0x6e,0xa8,0x12,0x28,0xa3,0x6e,0xc2,0xaa,0x00,0xef,0xe4,0x67,0xf2,0xf5,0x2b,0x40,0xed,0x55,0xc0,0x94,0x9b,0x7f,0x86,0xe2,0x8c,0x47,0x03,0x78,0x81,0x33,0x1b,0xd7,0x7c,0x97,0x54,0xbc,0xe7,0x9f,0x97,0x0b,0x63,0x00,0xa0,0xfc,0x03,0xbc,0x50,0xa2,0x2f,0x96,0x15,0x59,0x3b,0xf4,0x44,0x93,0x73,0x9f,0xba,0xe8,0xd0,0x50,0xc8,0x8d,0xc1,0x81,0x67,0x3e,0x8d,0xd2,0x89,0x12,0x4e,0x7b,0xb2,0x7c,0x1c,0x61,0xa8,0xa6,0xca,0x9d,0x79,0x48,0x5d,0x9e,0xb6,0x5f,0x99,0xd8,0xa5,0xcd,0xa6,0x4b,0xd4,0x4b,0xba,0xb5,0x9d,0x3d,0x3f,0xb6,0xa2,0x7d,0xfa,0x0b,0x2a,0x7a,0x37,0x79,0x18,0x92,0x8a,0x4e,0xb0,0x3f,0xa7,0x16,0xc2,0x61,0xb7,0xe3,0x55,0x4c,0xec,0xca,0x61,0x44,0xb2,0x0a,0x9d,0xa3,0xcf,0xcd,0x0c,0x9a,0xa0,0xbd,0xb3,0x39,0xe8,0xb5,0x59,0xd8,0x7d,0x6d,0x9b,0x06,0xf4,0x1f,0x88,0xce,0xfb,0x27,0x7f,0x6d,0x7b,0x22,0x20,0x34,0x06,0x1c,0xa3,0x97,0x6c,0x2e,0xee,0x69,0xb1,0xb6,0xc9,0x23,0x18,0x18,0x88,0x52,0x55,0xd7,0x04,0x32,0x08,0x39,0x4f,0xea,0x48,0x9f,0x2b,0xb5,0x7e,0x28,0xe8,0x27,0x54,0x22,0xe1,0xb1,0xe1,0xaa,0xb4,0x1b,0x87,0x07,0x6c,0x01,0xdc,0xa5,0x3c,0xd9,0xb3,0x19,0x29,0x3a,0xdd,0x53,0x5a,0x75,0x1e,0x06,0xcb,0x2a,0xc6,0x92,0x81,0x3e,0x6a,0x0a,0x75,0xd3,0x11,0xf8,0x2b,0x10,0x3b,0x49,0x68,0xbd,0xeb,0x4b,0x36,0x65,0x2e,0xe2,0xdc,0xf4,0x7a,0xa9,0xa8,0x86,0x53,0x12,0x85,0xc9,0x00,0x95,0x5a,0xa4,0xa0,0xb1,0x81,0x41,0x5d,0xa7,0x80,0xf7,0x44,0x21,0xd7,0xed};
    std::uint8_t digest67[32] = {0xd6,0x27,0xd6,0x81,0x20,0xe4,0x1e,0x08,0x3b,0xd3,0xc6,0xea,0x1a,0xab,0xda,0x27,0x84,0xd4,0xb7,0xc5,0xc9,0xc0,0xb7,0x2a,0xdc,0x85,0xc1,0x5d,0x58,0x9c,0x9a,0x69};
    sm3_reset(&ctx);
    block_num = sizeof(msg67) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg67, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg67 + process_n,
                        sizeof(msg67) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest67, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg68[343]    = {0x23,0x59,0xa0,0x30,0xf9,0x1b,0xdc,0x2b,0x43,0x3e,0x08,0xc8,0xd6,0xea,0x3e,0xb6,0x82,0x64,0x7f,0x24,0x80,0xc7,0x35,0xe9,0xf7,0xd7,0xc2,0x96,0xd7,0x75,0x41,0x00,0xd7,0x82,0x1a,0x04,0x87,0x0a,0x57,0x48,0x50,0xd5,0xd1,0xad,0xbb,0x31,0xb6,0x48,0x58,0x90,0xae,0x9e,0xad,0x25,0xb3,0x9f,0x11,0x84,0xcb,0x9a,0xa3,0x99,0x71,0x6c,0xfa,0x71,0x77,0x5e,0xf5,0x8d,0x2f,0x1f,0xb2,0xd5,0x8a,0x49,0x9a,0x2c,0xf9,0x9f,0x07,0xd5,0x2d,0x95,0xa8,0x71,0x21,0xf3,0x8b,0xfd,0x60,0xa7,0xe3,0x23,0x15,0xff,0x12,0xc5,0xf8,0x80,0x33,0x37,0x86,0x56,0xab,0xb6,0x26,0x76,0x60,0x57,0x8c,0xfe,0x89,0xd9,0xd5,0x56,0x77,0x8c,0x8c,0x72,0xd7,0xfc,0x07,0x4c,0x7e,0x7a,0x0d,0x34,0x09,0xff,0x74,0x6d,0x7e,0x01,0x77,0x4e,0xec,0xf8,0x75,0xa3,0x62,0xa7,0x0f,0x05,0xbf,0x96,0xc2,0xbe,0xc8,0x9a,0xb4,0xbe,0xf9,0xfb,0x30,0xf2,0x19,0x51,0xaf,0x4c,0x7e,0x00,0x4d,0xab,0x3c,0xf1,0x73,0x48,0x2d,0x81,0x7a,0x35,0x3e,0x37,0xb5,0xa1,0xe0,0xde,0xa7,0x2f,0x14,0x91,0x64,0x38,0xe9,0xff,0x4e,0xcc,0xa8,0x1f,0xf8,0x1b,0x7a,0x5e,0xe6,0x06,0x6d,0x31,0x83,0xd6,0x40,0x52,0xb3,0x01,0x79,0xb6,0x57,0x69,0x6e,0x48,0x31,0xbd,0x63,0xe8,0x56,0x58,0x56,0x07,0x7b,0xb7,0x13,0x11,0xc1,0x69,0xde,0xd7,0x39,0xe9,0x01,0xc2,0xdb,0xa3,0x4d,0x9a,0xdc,0x27,0x1f,0xac,0xf1,0x15,0x69,0xee,0xa6,0xa1,0x98,0x28,0x1d,0x4c,0xde,0x90,0xd0,0xa2,0x10,0xd5,0x9e,0xc3,0x2e,0x4a,0x9e,0xaf,0x0e,0x50,0xb3,0x9b,0x43,0xba,0xc2,0x83,0x5d,0xfb,0xcd,0xdb,0xa6,0x30,0xd1,0x9f,0xcd,0x18,0xe2,0x6a,0x18,0x54,0x07,0xf5,0x91,0x55,0x60,0xfb,0x70,0xb0,0x25,0x5e,0xdf,0x3a,0x8d,0x25,0xd1,0xe6,0xf7,0x7d,0xba,0x11,0x77,0x34,0x81,0xf2,0x0b,0x7d,0x9b,0x18,0x4e,0x50,0x37,0x53,0xd2,0xea,0x97,0x89,0x90,0x9b,0x04,0x0e,0x72,0x6f,0xd3,0xff,0xce,0x77,0x51,0x4a,0x09,0x9f,0x78,0xf1,0x84,0xbc,0x64,0x8c,0xc4,0xaa,0xc8,0x08,0xf1};
    std::uint8_t digest68[32] = {0xbc,0x39,0x2e,0xc1,0x1a,0x37,0xdf,0x48,0x54,0x1b,0xa0,0xd4,0x40,0xca,0x8b,0x04,0xf1,0xad,0xc4,0x12,0x40,0xa4,0x90,0xc8,0x4d,0x0d,0x9b,0xd3,0x4b,0x3e,0x67,0xce};
    sm3_reset(&ctx);
    block_num = sizeof(msg68) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg68, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg68 + process_n,
                        sizeof(msg68) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest68, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg69[482]    = {0x14,0x00,0x92,0x16,0xaa,0xc8,0x76,0x45,0x35,0x3c,0x52,0x01,0x50,0xa5,0x26,0x25,0xd4,0x27,0xe7,0xb8,0xfa,0x77,0x8d,0x34,0x5a,0x8a,0x33,0xe0,0xf7,0x6d,0x1d,0xf7,0x00,0xe3,0x1a,0xd6,0x6c,0xe8,0x8e,0x30,0x44,0x6c,0xe4,0xc9,0xf2,0x53,0x89,0x6f,0x7c,0x3d,0x6f,0x9f,0x82,0x76,0x83,0x7b,0xb1,0xb2,0x8d,0x99,0x64,0x87,0xb6,0xe1,0x0e,0x84,0xf7,0x74,0x0f,0x76,0x69,0xf2,0xff,0xc4,0x39,0x47,0x23,0x93,0x7e,0xd5,0x84,0x38,0x74,0xa7,0x80,0xd4,0x29,0x9f,0x54,0x50,0xc8,0x0a,0xb1,0xeb,0xc3,0x91,0xf9,0xd6,0xac,0x64,0x96,0x47,0x50,0x4d,0x7f,0x13,0x00,0xbd,0xb2,0x45,0x6c,0xca,0x64,0x75,0x80,0x25,0x38,0x5f,0x44,0x56,0x14,0x79,0x8c,0x15,0x7c,0x76,0x2d,0xc9,0xfb,0x05,0x5f,0xf2,0x83,0x35,0x9c,0x00,0xaf,0xc8,0xec,0x8c,0x3b,0xba,0xeb,0xcb,0x5c,0xbc,0x2f,0xa5,0x7b,0xdb,0xc8,0x4e,0x78,0xcb,0x6e,0xe4,0x3f,0xa0,0xc3,0xf0,0x82,0x21,0x6c,0xef,0xe8,0x48,0x59,0x25,0xea,0x1b,0x73,0x2a,0x87,0x20,0x4e,0x52,0xe8,0x27,0x18,0x47,0xf1,0x0d,0x04,0xb8,0x81,0xc7,0x19,0x15,0xd2,0x58,0x67,0x8d,0x55,0xec,0x6c,0x47,0xc5,0x4a,0x62,0x9b,0xcf,0xe7,0xec,0x11,0xc7,0x09,0xd2,0x2b,0x10,0x5f,0x6b,0xdd,0x72,0x57,0xdc,0x7e,0xc1,0x6a,0x6a,0xe1,0x7d,0x54,0x2a,0x63,0x06,0x78,0xd8,0x07,0x0e,0x43,0xbb,0x60,0x72,0x86,0x2e,0x66,0xd0,0x9b,0xa4,0xc4,0x6b,0x69,0x9b,0x67,0x25,0xed,0x7e,0x2c,0x7d,0x12,0x06,0xd2,0x62,0x8c,0x7c,0x43,0x9f,0x91,0x4a,0x24,0x1b,0xf2,0x1e,0xc9,0x1a,0x75,0xb8,0xca,0xd2,0x63,0x18,0x74,0x4d,0xc3,0x8f,0x29,0x6f,0x70,0xde,0x35,0x20,0x59,0x3e,0xdd,0xa2,0xf8,0xa6,0x60,0xf3,0x59,0x92,0x80,0x02,0xaf,0xec,0xe3,0x1c,0x7a,0xa8,0x2d,0xf4,0x66,0x5f,0x0f,0x10,0x08,0x02,0x59,0x45,0xd5,0x6b,0x60,0xc5,0xe9,0x71,0xf1,0x8a,0xcd,0x95,0x7c,0xbb,0x3e,0x63,0xcc,0xcd,0xcc,0x55,0x07,0x0f,0xc4,0xea,0x4a,0x59,0x23,0x2f,0x1f,0x63,0xef,0x04,0x73,0xb3,0xa8,0x93,0x1d,0xbd,0x26,0xaf,0xef,0x41,0x71,0x16,0x13,0xd9,0x14,0xaa,0x9b,0x08,0xf0,0xe9,0x87,0xfa,0x21,0xec,0x89,0x73,0x13,0xfa,0x7a,0xea,0x08,0xab,0x28,0x8a,0xc2,0x4e,0x0f,0xa6,0x88,0x89,0x08,0x0c,0x3e,0x30,0x6e,0x59,0x9f,0x39,0x18,0xfe,0x69,0x12,0xff,0x0d,0x25,0x8c,0xeb,0x93,0xfb,0xcc,0xcd,0xb8,0x5e,0x1b,0x1e,0x36,0x6d,0xfa,0x52,0x9d,0xce,0x33,0xfb,0x4d,0x27,0x55,0x5a,0x59,0x8e,0xaa,0x63,0x69,0x64,0xa0,0x6b,0x74,0x9d,0x37,0x21,0x26,0x76,0xf0,0x19,0x54,0x35,0xec,0xf6,0x3a,0x04,0x6c,0x42,0x25,0xa4,0x31,0x6e,0x5a,0x8a,0xbd,0xce,0xfa,0x52,0xaf,0xe7,0x68,0x2b,0xcb,0x54,0x53,0xbb,0xda,0x0f,0xd9,0x12,0x90,0x38,0xe9,0x0f,0x3e,0xb5,0x91,0x35,0x10,0xed,0x80,0x26,0x02,0xac,0xb4,0x13,0x0e,0xac,0x42,0xc5};
    std::uint8_t digest69[32] = {0x00,0x54,0xcd,0xf8,0x59,0x62,0xe4,0x84,0x32,0x85,0x59,0xa9,0x60,0xf0,0x0f,0xbe,0xb7,0xe9,0x03,0x75,0x29,0x5d,0xfc,0xff,0x16,0x62,0x26,0xa7,0x37,0x72,0xcc,0x46};
    sm3_reset(&ctx);
    block_num = sizeof(msg69) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg69, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg69 + process_n,
                        sizeof(msg69) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest69, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg70[326]    = {0xc7,0x92,0x6f,0x51,0x26,0x35,0xc9,0xc8,0x28,0xbd,0x07,0x03,0xc2,0x7b,0xd2,0x36,0x2a,0x42,0xb9,0x93,0xa5,0x57,0x1c,0x7d,0xe5,0xf8,0x54,0xbe,0xca,0x66,0xa1,0x51,0x61,0xd8,0x34,0x07,0xe9,0x84,0x63,0x96,0x35,0x6a,0x54,0x19,0x66,0x78,0x28,0x52,0x7b,0x97,0xe6,0xaa,0x3b,0x34,0xc0,0xe5,0xcc,0x0c,0x89,0xf6,0x44,0x37,0xf0,0xbe,0xf4,0x74,0x62,0xa5,0x1c,0xe5,0x66,0xa6,0x9f,0x8e,0xea,0xea,0x23,0x86,0x20,0x4f,0x9d,0x29,0x7a,0x5d,0xbf,0x85,0x86,0xd0,0x1c,0x89,0x87,0x19,0x20,0x27,0xb4,0x45,0x53,0x85,0xe2,0xa0,0x86,0x7d,0xe9,0x6d,0xe0,0x6b,0x43,0x71,0x28,0x2d,0x8f,0x49,0x95,0x15,0x23,0x2e,0xb4,0x7c,0x83,0x13,0x10,0x8e,0xbb,0xc0,0x6c,0xd6,0x4f,0x23,0x85,0xae,0xa2,0xef,0xca,0x5e,0xf7,0xc5,0xbb,0xda,0x0d,0xc4,0xaa,0xbf,0xfc,0x45,0x48,0xff,0x7a,0x81,0xc9,0xa7,0xdc,0x19,0xac,0x21,0x1f,0x8a,0x9e,0x88,0xb2,0x1e,0xc2,0x99,0x8a,0x1d,0xfc,0x80,0xfc,0x77,0x16,0x08,0xac,0x99,0x6c,0x08,0x80,0x41,0xc8,0xce,0x3f,0x95,0x1c,0x55,0xd7,0x00,0xf5,0x51,0xd5,0xb0,0x8b,0x1d,0xd0,0xe8,0x86,0x37,0xc1,0x3c,0xde,0x83,0xce,0x35,0x24,0x33,0x85,0x28,0xe8,0x3a,0xad,0x25,0x92,0xd7,0xdb,0x56,0x6c,0xd3,0x58,0xd5,0x4e,0x23,0x78,0x06,0x10,0x7a,0x7b,0x03,0x62,0xd4,0x76,0x91,0x56,0x57,0xd8,0xee,0xfe,0x51,0x8c,0x49,0x99,0x1f,0xaf,0xb5,0x48,0x6d,0x42,0xd8,0x43,0xf9,0x3e,0x7d,0xbf,0x57,0x98,0xac,0xe5,0x5a,0x8b,0xaa,0x15,0xed,0x98,0xa6,0x49,0xf7,0x37,0x82,0x86,0xf0,0xab,0x6f,0x85,0x4f,0xa9,0x39,0x23,0xf8,0x93,0x37,0xf0,0x49,0x2e,0x7c,0x52,0xa4,0x3b,0x68,0x8b,0x3b,0xf4,0x66,0x0d,0xa7,0x85,0x29,0xc4,0x24,0x95,0xc1,0x51,0xe1,0x8b,0x6d,0xed,0xaa,0xbe,0x76,0xd1,0xf4,0x90,0xba,0x90,0x63,0xb9,0x0c,0x44,0x9c,0xe0,0x5d,0x28,0x38,0x1c,0x79,0x1a,0x99,0x58,0xf0,0xba,0x2a};
    std::uint8_t digest70[32] = {0x2b,0xfe,0x15,0xab,0x47,0x8d,0x06,0x03,0x24,0x24,0x59,0x1e,0x03,0xfd,0x8a,0x18,0x46,0x1a,0x74,0xf8,0x4b,0xf9,0x7c,0xd9,0x80,0x86,0x3a,0x38,0x23,0x1c,0xbe,0xf6};
    sm3_reset(&ctx);
    block_num = sizeof(msg70) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg70, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg70 + process_n,
                        sizeof(msg70) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest70, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg71[151]    = {0xec,0x11,0xc6,0x1a,0xa5,0xd3,0x5c,0x56,0x17,0x8f,0x28,0xec,0x26,0x57,0x0d,0xc1,0x9a,0xbc,0xf8,0xd4,0xa0,0xd0,0x39,0x14,0x97,0x70,0xa0,0x1a,0xa0,0x32,0xdb,0x4f,0x4d,0x33,0x85,0x86,0x3e,0x88,0x2c,0xf3,0x91,0x73,0x95,0xe2,0x84,0x3e,0xb0,0xf2,0xb9,0x35,0xbe,0xc2,0xcc,0x7c,0x46,0xc0,0x57,0x55,0xe1,0xf4,0x67,0x69,0xb2,0xff,0x32,0x77,0x0c,0x2a,0x28,0xd7,0x06,0x57,0xb2,0x06,0x29,0x23,0xeb,0x27,0x9f,0xa9,0xf4,0xb6,0xd6,0x30,0xc7,0x45,0xc8,0x6a,0x14,0xe8,0x80,0xa9,0x20,0x4d,0x02,0xa0,0x4c,0xb7,0xb7,0x81,0x3c,0x60,0x60,0x7d,0xc8,0x3b,0xb6,0xc2,0x72,0x61,0xfe,0xb8,0x67,0xef,0x75,0x20,0x79,0x4b,0xab,0x8e,0x8e,0xfa,0x85,0xdc,0xbd,0xef,0xcf,0x1a,0x94,0xe8,0xd5,0xf2,0x35,0x8a,0x31,0x29,0xd1,0x24,0xf8,0x45,0x24,0x8f,0xc9,0x4a,0x7f,0x79,0xee,0x6c,0xe6,0xa8,0xab};
    std::uint8_t digest71[32] = {0x0e,0x09,0x99,0x7b,0xca,0x95,0x0a,0x6a,0x97,0x77,0x07,0xc4,0xbf,0x50,0x64,0x9c,0x60,0xa2,0x3a,0x21,0xa4,0xf4,0x57,0xd3,0x0e,0x2f,0xaa,0x1e,0x71,0xc7,0xef,0x9d};
    sm3_reset(&ctx);
    block_num = sizeof(msg71) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg71, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg71 + process_n,
                        sizeof(msg71) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest71, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg72[338]    = {0x79,0x76,0xa2,0xe2,0x89,0x8a,0x17,0x42,0x68,0xe6,0x73,0x2f,0x39,0x9c,0xef,0xae,0x6b,0x82,0xe7,0xf9,0xef,0x0b,0x9b,0xd0,0x2a,0xb7,0x4b,0x0e,0x66,0xf1,0x73,0x9f,0xd4,0x50,0x1b,0x66,0xbd,0x79,0x01,0xba,0xdb,0xfc,0x38,0x3d,0xef,0xf9,0x10,0xdc,0xf1,0x1b,0x6d,0x28,0x77,0xb5,0x96,0xa4,0x11,0x40,0x2f,0x59,0x44,0xf7,0x3e,0xc6,0x67,0x5a,0x3e,0xb9,0xb5,0xca,0xf5,0xd3,0xb9,0x3d,0xf8,0xf4,0xb2,0x98,0x2b,0xd9,0xd0,0x17,0xb2,0x02,0x07,0x01,0x9b,0xd5,0x74,0x86,0xa4,0x90,0x76,0x6c,0xb0,0x00,0x9d,0x25,0xaf,0x90,0x87,0x90,0xfd,0x96,0x4f,0x9e,0xd1,0x35,0x18,0x5e,0x72,0x07,0xc5,0x0a,0xd0,0x2f,0x0d,0x4d,0x11,0x44,0xf0,0x62,0x0a,0xf4,0x01,0xf2,0x75,0x83,0x55,0x77,0x46,0x04,0x63,0x5f,0x4d,0x82,0x55,0x74,0xf9,0xcc,0x6e,0xc7,0xda,0xee,0x50,0x9f,0xd2,0x4c,0x68,0x60,0xdd,0x44,0x49,0x36,0xa0,0x66,0x60,0xce,0xaf,0xea,0x82,0x70,0xe4,0xc4,0x9d,0xbb,0x8c,0x84,0x28,0xdc,0xb2,0xf9,0x6e,0x4c,0xfd,0x4f,0xb4,0xc1,0xa5,0xd1,0xa1,0x8a,0x35,0x2e,0xa2,0x5e,0xf2,0xaa,0xf4,0xc1,0xa2,0x4a,0x29,0xfd,0xe7,0x57,0xfb,0x98,0x95,0xe0,0x6d,0xd9,0x4a,0x51,0x38,0xe8,0xee,0x83,0xc1,0xd2,0x33,0x3a,0xd7,0xa0,0xd8,0x33,0xf2,0x53,0x83,0x18,0xbf,0x77,0x46,0x1d,0x41,0xf4,0xdc,0xc8,0x8d,0xa3,0x80,0xc9,0x42,0x31,0x95,0xae,0x06,0x09,0xdf,0x4d,0x99,0x5e,0x1e,0x7c,0xf8,0x83,0xbc,0x17,0xf0,0xad,0xe1,0xe8,0x06,0x46,0xca,0x87,0x25,0x33,0x7f,0x60,0xe5,0x56,0x96,0x4a,0x1d,0x2f,0x8c,0xf6,0x77,0x85,0xc5,0x46,0xad,0x60,0xcc,0xe0,0xf9,0xd3,0xd7,0xfa,0xa3,0x9d,0xa1,0xe9,0x8d,0xf4,0x01,0xc3,0x7b,0x34,0x7b,0x6a,0x4a,0x8a,0xe2,0x5c,0x00,0x66,0x7a,0xf0,0x1c,0x6d,0xb7,0x78,0x78,0x18,0x7a,0x4f,0xdb,0x09,0x20,0x4a,0x6f,0xa8,0x0c,0x9f,0x10,0xd9,0x64,0x44,0x9a,0x1a,0x5f,0xff,0x1d,0x08,0x46,0xad,0x33,0x5b,0x0f,0x89,0x8a,0xf2,0x92,0x21,0xf2,0x9f};
    std::uint8_t digest72[32] = {0x32,0x17,0xc9,0xb0,0x25,0x05,0x5b,0x98,0xbe,0xad,0xaf,0x6e,0x7a,0xa1,0x43,0x39,0x40,0x5e,0x7b,0x06,0x63,0x0a,0x48,0xe4,0xf1,0xd8,0xa8,0x19,0xdb,0xda,0x8d,0xa5};
    sm3_reset(&ctx);
    block_num = sizeof(msg72) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg72, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg72 + process_n,
                        sizeof(msg72) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest72, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg73[16]    = {0x38,0xbd,0x51,0xc1,0xb1,0x5b,0xaf,0x1b,0x28,0xeb,0xab,0x9d,0x54,0xcd,0x83,0xff};
    std::uint8_t digest73[32] = {0xaf,0xa0,0xf0,0x51,0xd0,0x94,0xed,0xb6,0xa9,0x28,0x72,0xdb,0x34,0x8d,0x24,0x7a,0x68,0x30,0xd0,0x86,0x6a,0x07,0x9a,0x6c,0xb2,0xa4,0xbd,0x5c,0xe6,0xc2,0xcf,0x14};
    sm3_reset(&ctx);
    block_num = sizeof(msg73) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg73, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg73 + process_n,
                        sizeof(msg73) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest73, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg74[142]    = {0x2f,0xc4,0xa6,0x4e,0xa2,0x75,0x37,0xbd,0x92,0x5b,0xf1,0x35,0xd8,0x42,0x49,0x64,0xf9,0x2f,0x2d,0x74,0x83,0x16,0x6a,0x29,0xd9,0x0a,0xe0,0xfa,0x97,0x3b,0xd4,0x9f,0x8a,0x2a,0xe7,0x88,0x91,0x66,0xdd,0xe6,0xea,0x74,0xff,0x4b,0x85,0x1b,0xf3,0x86,0x3d,0x11,0xe7,0xa6,0x6a,0x46,0xc4,0xf0,0x88,0x6c,0x3c,0x89,0x71,0x06,0x33,0x05,0x91,0x11,0xa4,0xeb,0xc0,0x5f,0x65,0x25,0x7c,0x34,0x55,0xf3,0xbc,0xec,0xf5,0xc7,0x4d,0x4f,0x07,0xed,0x10,0xc3,0xef,0xbd,0x3b,0xb6,0x2c,0xa9,0x8f,0x52,0xa9,0x20,0x65,0x53,0x08,0xff,0xe3,0x76,0xe2,0x4a,0xff,0x62,0xf4,0x27,0xf9,0x2b,0x0d,0x28,0x72,0xdb,0x48,0xba,0x38,0x97,0x23,0xc7,0x8f,0xab,0xca,0x0a,0xa2,0x9b,0x69,0x06,0x17,0x4a,0xad,0xb7,0xef,0x96,0x6e,0xa7,0x08,0x18,0x58,0x8d,0xe0,0x4d};
    std::uint8_t digest74[32] = {0xb1,0xcf,0x15,0x58,0x2e,0x65,0xed,0x97,0x96,0x90,0x64,0xb4,0x28,0x8b,0x2b,0x0a,0x30,0x42,0xf0,0xc7,0xec,0x30,0x61,0xcb,0xe4,0xef,0xbb,0xa0,0xb3,0x01,0x8c,0x50};
    sm3_reset(&ctx);
    block_num = sizeof(msg74) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg74, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg74 + process_n,
                        sizeof(msg74) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest74, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg75[387]    = {0xd2,0x7f,0xb9,0x6b,0x93,0xf1,0x9b,0xed,0x78,0x1e,0x75,0x8e,0x04,0x14,0x74,0x5c,0x3e,0x22,0x4a,0x4c,0x5f,0x76,0x10,0xfd,0x0f,0xe6,0x0e,0x87,0xfc,0xa7,0xf6,0x66,0xba,0x40,0x56,0xf3,0xd2,0x9d,0x0e,0xfb,0x5a,0xb9,0x38,0xba,0xe7,0xec,0x61,0x7e,0xdf,0x00,0xdc,0x9b,0xd3,0x2e,0xd1,0x62,0xb1,0xbc,0x60,0xf6,0xa2,0x47,0x00,0xf9,0xbe,0x1c,0x14,0x1e,0xc2,0x15,0x89,0x06,0xb6,0xf8,0x62,0x8d,0x87,0x38,0x27,0x1a,0x09,0x85,0x73,0x9d,0x52,0x6e,0x6a,0xc6,0x83,0x90,0x78,0x14,0x1a,0x11,0xbd,0xef,0x50,0x67,0xba,0xdb,0xab,0x23,0x9f,0xff,0x0d,0xe7,0x3b,0x5d,0x28,0x96,0x0f,0xb7,0xe3,0x79,0x52,0xa1,0xca,0x66,0x9a,0xf8,0x55,0xf1,0x82,0x16,0xaf,0x84,0x44,0xb5,0x48,0xa6,0xfc,0xca,0xb1,0x4d,0x64,0x49,0x4a,0xe3,0x9b,0x98,0xcc,0x39,0xec,0xb7,0xaa,0x4e,0x69,0x6f,0x33,0x38,0x2a,0x71,0xab,0xba,0xb9,0xcd,0x18,0x1d,0x07,0xe6,0xf2,0x96,0x5d,0x85,0x75,0xa1,0x99,0x2a,0xdf,0x7c,0x7d,0x3b,0xad,0x49,0x11,0xb2,0x6f,0x47,0xe2,0x7e,0x2c,0x83,0xaa,0x5c,0xb8,0xc5,0xda,0x66,0xb7,0xb7,0x72,0xc0,0x51,0xe7,0xc8,0x3f,0xfe,0xb3,0x06,0x8b,0x9d,0xd1,0x77,0x59,0xff,0x49,0xb0,0x27,0x4c,0xae,0xed,0xf6,0xdc,0xea,0xe8,0x09,0x08,0x15,0x68,0x20,0xd7,0x64,0xd1,0xda,0xd2,0xe7,0x17,0xbe,0x44,0xad,0x98,0x63,0x78,0x1a,0x2c,0x7d,0x70,0xa0,0x0a,0xbe,0x26,0x97,0xfa,0xc1,0x0b,0x70,0x69,0xf5,0x1c,0xd7,0x2d,0x7b,0xf2,0x9b,0xf8,0xd5,0x8c,0xca,0x61,0xf4,0x48,0x6a,0xc6,0xce,0x13,0xed,0x57,0x1b,0x75,0x97,0x56,0xf7,0x4b,0x03,0x4c,0xed,0x10,0xcb,0xff,0xfb,0x5b,0x35,0x18,0x16,0x03,0x3e,0x02,0x30,0xff,0xf9,0xe0,0x75,0xae,0xae,0x83,0xd7,0x19,0x17,0x4a,0xff,0x67,0x40,0x38,0xa4,0xd5,0x96,0x35,0xa7,0x28,0xec,0xce,0x30,0xfc,0xbe,0x1d,0xbe,0x2d,0x95,0x39,0xff,0xa5,0x56,0x90,0xcf,0x2c,0x1c,0xe6,0x08,0x3e,0x0e,0x4b,0x1f,0x02,0x5c,0xa7,0xd2,0x62,0x2b,0x2d,0xaa,0x1d,0x9f,0xac,0x4c,0x97,0xc8,0xbb,0x94,0x01,0xdb,0x7d,0x18,0xfe,0xef,0x9f,0xc3,0x9d,0xea,0xc5,0xf5,0x69,0x4e,0x97,0xab,0x6c,0x2e,0x52,0xc4,0x67,0xc8,0xf3,0xcb,0xf0,0x46,0xea,0x85,0xa3,0x7d,0x06,0xfb,0xb2,0x8f,0x3f,0x5f,0x2b,0xa5,0x9d};
    std::uint8_t digest75[32] = {0x48,0xd1,0x30,0x43,0xa7,0x8b,0xc8,0x60,0x14,0xfa,0x4a,0x0e,0x63,0x7b,0x00,0x92,0x70,0x9e,0x4c,0x5b,0xbf,0x91,0x27,0x9e,0xf9,0xd6,0x4b,0x71,0x77,0x62,0xbc,0xa9};
    sm3_reset(&ctx);
    block_num = sizeof(msg75) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg75, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg75 + process_n,
                        sizeof(msg75) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest75, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg76[222]    = {0xec,0x76,0xc4,0xae,0x97,0xae,0xc9,0x9d,0xe9,0x8f,0x73,0x54,0xbc,0x11,0x31,0x55,0x2b,0xa1,0x16,0x82,0x56,0x02,0x6d,0x9f,0x4a,0xdf,0x14,0xe6,0x28,0x44,0xb7,0xa6,0x4c,0x1d,0x3e,0xc9,0x40,0x0e,0x2a,0x4f,0x06,0x48,0x17,0xe9,0xbc,0x7a,0xcf,0xf1,0xa1,0x00,0xf2,0xa0,0xc7,0x0b,0x85,0xd8,0x51,0xd2,0xac,0x44,0x73,0x77,0xf4,0x43,0xa4,0xc3,0x50,0xeb,0x0c,0x3b,0x28,0x7e,0xe1,0x76,0x41,0x26,0xbf,0x98,0xf0,0x4c,0xa3,0xca,0xc6,0x8e,0xc7,0x67,0x71,0x47,0x64,0x85,0xb9,0x3a,0xda,0x4a,0xb6,0x09,0x4f,0x8d,0x9c,0xc1,0x77,0x3d,0x25,0xb5,0x28,0x5e,0x72,0x76,0x4a,0x74,0x1d,0x77,0x97,0x72,0x85,0xb0,0x38,0x9f,0xd4,0x50,0xf4,0xde,0xdb,0x11,0x81,0x17,0x71,0xf9,0x60,0xf1,0x62,0x0e,0x0a,0xa0,0x0b,0x56,0x14,0x41,0x4c,0x8b,0xf8,0x25,0x89,0xbb,0xb5,0xdf,0xbe,0x40,0x42,0xb9,0x9c,0x77,0x23,0x69,0xd0,0xe3,0x52,0x66,0x16,0x6c,0x71,0x56,0x33,0xdd,0x7a,0x5b,0xd8,0x84,0x6e,0x5a,0xcd,0xae,0x5f,0xe5,0x35,0x22,0x9a,0x52,0x53,0x37,0x21,0xc1,0x3b,0x3c,0x94,0xcd,0x1b,0x47,0xd1,0x4d,0xe6,0x4c,0xac,0xf6,0x70,0xe7,0xcb,0xf4,0x5a,0x3b,0x11,0xd0,0xd6,0xd1,0x27,0xd8,0x55,0x56,0xf5,0xf3,0x6c,0x76,0xe0,0xb8,0xf0,0xa9,0x32,0x44,0xb0,0x7c,0x2a,0x7d};
    std::uint8_t digest76[32] = {0x05,0xd7,0xfe,0xfc,0x0b,0x5a,0x54,0x06,0x5e,0x98,0x4f,0xa6,0xbe,0xd1,0x53,0x41,0xcd,0x28,0xbb,0x0e,0x75,0x9d,0x14,0x78,0xf0,0x9f,0xba,0x65,0x43,0x07,0xbc,0xea};
    sm3_reset(&ctx);
    block_num = sizeof(msg76) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg76, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg76 + process_n,
                        sizeof(msg76) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest76, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg77[32]    = {0xe3,0x98,0x8b,0xe6,0xcc,0x5a,0xb7,0x65,0xe9,0xb3,0x00,0xa5,0x4f,0x6c,0xb8,0xf4,0x78,0x19,0x6a,0x5b,0xa7,0x67,0x35,0x78,0x00,0x07,0x91,0x99,0x8a,0xf5,0x36,0x00};
    std::uint8_t digest77[32] = {0x88,0x2d,0x3d,0x20,0x3a,0x11,0xab,0x13,0x91,0x54,0xdb,0xd9,0xd9,0xe0,0x2d,0x0e,0x66,0x75,0x8b,0x49,0xb5,0xe0,0x19,0x2d,0x6e,0x7d,0x26,0x74,0x57,0x17,0xfe,0xb0};
    sm3_reset(&ctx);
    block_num = sizeof(msg77) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg77, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg77 + process_n,
                        sizeof(msg77) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest77, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg78[204]    = {0x3f,0x78,0xd8,0x4b,0xdf,0xab,0x2c,0x85,0x26,0x73,0x52,0xd9,0x0f,0xbd,0xe2,0x86,0x80,0x81,0xf1,0x45,0xad,0xa9,0xfe,0xaf,0xe6,0xdb,0x83,0x57,0x7a,0xb5,0x38,0xe3,0xe7,0x55,0x3f,0x2e,0x2f,0x40,0xe2,0x89,0x3d,0xd0,0xdc,0x9e,0xa4,0x8f,0x6d,0x8b,0xa7,0xb1,0x61,0x05,0x09,0x29,0xd2,0x8b,0x1c,0x5e,0x5f,0x95,0xc6,0xa0,0xe3,0x5b,0x5c,0xb4,0x88,0xdc,0xa0,0x84,0x37,0x77,0x33,0xa8,0x36,0xf2,0xe7,0x3e,0xc5,0x1c,0xc3,0xff,0x5a,0xfe,0xef,0xdc,0x7e,0x99,0xd2,0x71,0xac,0x3c,0xb7,0x3d,0xd1,0x68,0xe6,0x92,0xe7,0x09,0xcc,0x8b,0xf9,0x40,0xeb,0x10,0xc5,0xf6,0x9c,0x4a,0x87,0x33,0x4c,0x31,0x68,0x88,0x59,0xcb,0x1a,0xd9,0x00,0x3e,0xd4,0x55,0x2a,0xaf,0xaf,0x3b,0x05,0xfd,0xca,0xda,0x90,0x2e,0x5c,0xdc,0x25,0x14,0xe4,0xdb,0x72,0x2f,0x1d,0x7a,0x0c,0xf9,0x3a,0x31,0xa4,0x6f,0x5e,0xad,0x8a,0xe6,0x72,0x7e,0xa5,0xc8,0x7a,0x64,0x0c,0x92,0x2f,0x31,0x74,0x1b,0x91,0x34,0xec,0x48,0xad,0xee,0xca,0xf8,0xdb,0xaf,0xac,0x64,0xfd,0xbf,0xfc,0x3a,0x6a,0x70,0xe5,0xfd,0xac,0xd6,0x05,0x0c,0x8c,0x48,0x59,0x1a,0x69,0x1c,0x24,0xb2,0xb6,0x84,0xd7,0x1e,0x18,0x6c};
    std::uint8_t digest78[32] = {0xf6,0x49,0x11,0xd7,0x3a,0xf3,0xfa,0x72,0x8b,0x03,0x7c,0x81,0xdb,0xf8,0x4b,0x10,0x81,0xcc,0x04,0x0b,0xa0,0xbf,0x98,0xfc,0xd6,0xf5,0x47,0xd1,0xf1,0xeb,0x99,0x72};
    sm3_reset(&ctx);
    block_num = sizeof(msg78) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg78, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg78 + process_n,
                        sizeof(msg78) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest78, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg79[355]    = {0x8c,0x79,0x5d,0xf1,0x87,0x33,0x5a,0xe6,0x6c,0x07,0x93,0x9b,0x01,0xaa,0x91,0xbb,0x99,0x06,0x2a,0xbe,0x57,0x94,0xc7,0x6d,0xcd,0x53,0x26,0x66,0xb3,0xf4,0xfe,0xec,0x4a,0x9c,0xe6,0xfc,0x27,0x88,0x98,0xfc,0xec,0x92,0xd4,0x26,0x9c,0x2e,0x19,0xc2,0x19,0x69,0x8f,0x79,0x32,0xb4,0x26,0xfc,0x7b,0xc8,0x12,0xed,0xfa,0x51,0xec,0xb8,0x52,0x69,0xe4,0xf6,0xd3,0x0d,0x33,0x6e,0xb5,0x66,0x78,0x85,0x06,0x07,0xa7,0x49,0x51,0x22,0x64,0x4a,0x82,0xde,0x5a,0x90,0x2f,0xf2,0x60,0x70,0x6a,0x6e,0x3b,0x42,0x9a,0x6f,0x33,0xb9,0x24,0x46,0xf7,0x12,0xe3,0x0e,0x10,0xdf,0xb6,0x16,0x80,0xef,0xc5,0xd6,0x3c,0x3e,0x2a,0x13,0x7e,0x81,0x67,0x5d,0x33,0xb9,0xd8,0x73,0xa0,0xbc,0x26,0x6b,0x5b,0x89,0x87,0xed,0xc0,0xe6,0x3a,0x31,0xc8,0xdf,0xc5,0xdc,0x34,0x88,0xf5,0x4e,0x53,0xae,0xf7,0x0f,0x11,0x68,0xd9,0xe0,0x6f,0xd5,0xd3,0x28,0x3e,0x13,0x89,0x09,0xca,0xef,0x5e,0x9a,0x93,0xf7,0x3f,0x1e,0xd2,0xda,0xd8,0xef,0x72,0x56,0x79,0xde,0xb6,0xd2,0x3f,0xd7,0xb5,0x1e,0x87,0x9b,0xe5,0x3e,0xdc,0x4b,0xe5,0xe4,0x4a,0x25,0x09,0x66,0x67,0x1c,0x52,0xcb,0xa7,0x6b,0x68,0x5f,0x41,0x6f,0xbb,0x3d,0x6b,0xdb,0xba,0x68,0xc8,0xfc,0xf9,0xfe,0xf3,0xa9,0x51,0xb1,0xd9,0xb2,0xa8,0x43,0xcd,0x1e,0xdd,0xf9,0x92,0x88,0x71,0x5d,0x15,0x08,0x56,0x19,0xb0,0x7c,0x82,0x9b,0x4d,0x6d,0xc7,0x1d,0xc2,0x18,0x38,0x90,0x8b,0x70,0xda,0xa1,0xbc,0x60,0xf6,0x3b,0x72,0xaf,0xd8,0xb9,0x34,0xae,0x89,0x34,0x44,0xc0,0x5e,0xef,0x27,0x28,0x34,0xf4,0x4b,0x58,0xc2,0xe2,0x56,0xc3,0x6e,0x38,0x71,0xef,0x12,0x7e,0x88,0x57,0x87,0x65,0x77,0x28,0x99,0xab,0x02,0x41,0x68,0xb3,0x63,0xd5,0x43,0x24,0x41,0x2d,0x10,0x2d,0xf2,0x1b,0xca,0x26,0x17,0x1d,0xb8,0x1d,0x84,0x47,0x55,0x1b,0x10,0x7f,0xec,0xa5,0xc9,0xc6,0x6e,0x24,0xf6,0x98,0xc4,0x59,0x42,0x93,0x7f,0xac,0x15,0x2a,0x83,0x4f,0xe3,0x4c,0x48,0x2d,0xc0,0x3d,0xe7,0x9b,0x2c,0xec,0x48,0x93,0x08,0xa1,0xd4,0x65,0x35,0xbd,0xc7};
    std::uint8_t digest79[32] = {0x41,0xa6,0x1e,0x58,0x93,0x72,0x8b,0x20,0xe1,0xd8,0x6a,0xc8,0x96,0x71,0x8d,0x4d,0xeb,0xbf,0xbb,0x06,0x35,0x27,0xda,0x34,0x4c,0xd3,0xc9,0xab,0x72,0x4f,0xf3,0x5d};
    sm3_reset(&ctx);
    block_num = sizeof(msg79) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg79, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg79 + process_n,
                        sizeof(msg79) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest79, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg80[81]    = {0x19,0xc2,0x65,0xdf,0x4b,0x6e,0xae,0xaa,0xd1,0xd1,0x5d,0xa2,0x9b,0xe1,0x7a,0x40,0xe4,0x88,0x64,0x89,0xa3,0x04,0x16,0x0f,0x4b,0x89,0x6b,0xfe,0x11,0xa3,0x8c,0xb7,0xf7,0xc4,0x12,0xf2,0x10,0x7c,0xcb,0xf1,0x11,0x6b,0xd2,0xb5,0x6d,0xd4,0x0a,0x57,0x2a,0xc9,0xeb,0x01,0x75,0x1a,0x79,0xb7,0x1e,0x35,0x6f,0x98,0xb0,0x1a,0x59,0x3f,0xa2,0x34,0x95,0x3f,0xe6,0x93,0xd3,0xf2,0x55,0x3c,0x50,0x03,0x56,0x2c,0x6b,0xe9,0x90};
    std::uint8_t digest80[32] = {0xab,0x8d,0xe1,0xc1,0xb8,0x5b,0xa0,0xaa,0x04,0xe5,0x77,0xa7,0x7d,0x98,0x3b,0xb1,0x4d,0xaf,0x3d,0xc0,0xdd,0x76,0x8e,0x14,0x5b,0x3d,0xb5,0x2f,0x00,0x9f,0x32,0x11};
    sm3_reset(&ctx);
    block_num = sizeof(msg80) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg80, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg80 + process_n,
                        sizeof(msg80) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest80, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg81[229]    = {0x8f,0xd2,0x31,0x6d,0x80,0x70,0x2f,0x1c,0x94,0xf2,0x44,0x81,0x03,0x52,0x24,0xbc,0x38,0xbb,0x78,0xdd,0x13,0xb2,0xa0,0x7c,0x25,0xb3,0x83,0x17,0xbc,0x8b,0xae,0x59,0x2d,0x60,0xcc,0x6f,0x7c,0x6a,0xbd,0xfd,0x87,0xde,0xdc,0x6c,0x42,0xc9,0x80,0x61,0x8a,0x7f,0x77,0x4d,0x69,0x36,0x49,0x07,0x87,0xac,0xea,0xf4,0x81,0x22,0x37,0x82,0xd4,0x4f,0x45,0xf2,0xdd,0x14,0xec,0x9d,0x38,0xd7,0xce,0xcf,0x02,0xa4,0x98,0xfb,0x67,0x86,0xb0,0x32,0x2b,0x8e,0x72,0xe3,0x53,0x4d,0xa0,0x34,0x1a,0x62,0xe6,0x63,0x22,0xa5,0xfd,0x21,0x14,0xca,0x74,0x4f,0xf1,0xa8,0x8f,0x78,0xdd,0x17,0x5f,0xa7,0x07,0xeb,0xaf,0x00,0xa2,0xc6,0x61,0xd1,0xae,0x6e,0x3c,0x54,0x41,0x1b,0x67,0x91,0x65,0x5e,0x4d,0xa3,0x07,0x22,0x61,0x1e,0x9d,0xbc,0x47,0x12,0xd1,0xc1,0x90,0x57,0x56,0xfa,0xcd,0x32,0x6a,0xd7,0x32,0x04,0x0a,0x5c,0x3e,0x21,0xb0,0xb1,0x04,0xff,0x11,0xbe,0x18,0x88,0xb2,0x8c,0x0b,0x0e,0x5a,0xac,0x0c,0x13,0x92,0x1a,0x10,0xa8,0xb0,0x3e,0x4d,0x75,0xe8,0x97,0xc8,0x40,0x2a,0x78,0xbb,0xa3,0x82,0xd9,0x2a,0x60,0x27,0xeb,0x64,0x96,0x54,0x4f,0x1e,0xed,0xed,0xe6,0x04,0x95,0x16,0x58,0xb6,0xc3,0xd0,0x5b,0xe5,0x63,0x34,0x22,0xa9,0x51,0x6a,0x6b,0xb3,0xaa,0x6e,0xeb,0x22,0x5e,0x09,0x7f,0x18,0xf0,0x27};
    std::uint8_t digest81[32] = {0xe3,0xc6,0x97,0x46,0xd6,0x24,0x7a,0x98,0xdd,0x49,0x8b,0x37,0xa1,0x2d,0x01,0x67,0x2f,0xfd,0x93,0x2f,0xeb,0x8a,0xa5,0x9f,0x95,0x9c,0xf6,0xb3,0x42,0xff,0x41,0xc9};
    sm3_reset(&ctx);
    block_num = sizeof(msg81) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg81, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg81 + process_n,
                        sizeof(msg81) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest81, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg82[5]    = {0xe2,0x18,0xf4,0x03,0xa0};
    std::uint8_t digest82[32] = {0x92,0x2d,0x30,0x8c,0x88,0x2a,0xdc,0x66,0xbf,0xf6,0x3d,0x8b,0x06,0x65,0xbc,0x70,0x93,0xac,0x82,0x79,0xc1,0x90,0x42,0x28,0x45,0xc9,0x47,0xd6,0x03,0xc4,0x54,0x72};
    sm3_reset(&ctx);
    block_num = sizeof(msg82) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg82, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg82 + process_n,
                        sizeof(msg82) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest82, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg83[68]    = {0x04,0x17,0x28,0x29,0xf7,0xb3,0x3e,0xd5,0x09,0x3e,0xb5,0xba,0xa3,0x34,0xe4,0x53,0x46,0x79,0x0c,0xaf,0x41,0xf2,0x00,0x69,0x4b,0x5f,0xbe,0x2b,0x35,0x40,0xb9,0xa7,0x1a,0xf2,0x2c,0x9b,0xa9,0xa8,0x83,0x83,0x9b,0x4c,0xfd,0x40,0x0e,0x71,0x4c,0x0d,0xc5,0xdd,0xaf,0x41,0x19,0x3f,0xf4,0x76,0xaa,0x3b,0xa9,0xa6,0x91,0x60,0xf4,0x00,0x02,0x29,0xba,0x83};
    std::uint8_t digest83[32] = {0xb9,0xe2,0x2b,0x9a,0x99,0xe6,0x46,0xa6,0xc7,0xe8,0xe2,0xf1,0x64,0x44,0x6b,0x7b,0x89,0xef,0x47,0xa7,0xb6,0x5c,0x1c,0x01,0x7e,0xfb,0xd9,0x04,0xc4,0xf8,0x56,0xf2};
    sm3_reset(&ctx);
    block_num = sizeof(msg83) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg83, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg83 + process_n,
                        sizeof(msg83) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest83, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg84[164]    = {0x17,0x91,0x80,0xa4,0xc1,0x39,0xbf,0x95,0xda,0x4e,0x24,0x3d,0x46,0x0b,0xa0,0x66,0x11,0x42,0xd0,0x9b,0x83,0x4e,0x91,0xd8,0xb9,0xb0,0xca,0xd2,0x05,0xcd,0xbd,0xc7,0xf2,0xee,0xb0,0xc8,0xcd,0x5a,0xce,0x0e,0x7d,0x9e,0xee,0xd8,0x2f,0xd3,0x9e,0x01,0xb5,0xe1,0x3d,0x6f,0xf4,0x7b,0x5e,0x3f,0xd9,0x57,0x09,0xa2,0xd6,0xac,0x62,0xcb,0x59,0x41,0x08,0x1f,0x3b,0xfd,0xd0,0x2d,0x05,0x1f,0x90,0x53,0x07,0x11,0x34,0x08,0x0e,0xb2,0xb2,0xbb,0x10,0x19,0xdf,0x80,0xcf,0x0e,0x28,0x71,0x0b,0x78,0xa0,0xfe,0x24,0x88,0x34,0x4a,0x27,0x5b,0x49,0x10,0x07,0x30,0xfb,0xda,0xd1,0xa3,0x64,0x26,0xe3,0xdb,0x47,0xbe,0x40,0xf5,0xaa,0xc1,0xc7,0x75,0xca,0xbe,0x32,0x25,0x39,0x92,0x2b,0xfb,0xb4,0x4e,0x2d,0xbc,0x58,0x40,0x97,0x37,0x10,0xb6,0x3b,0x8d,0xba,0x1d,0x10,0x3c,0xa2,0xba,0xba,0x98,0x04,0x49,0xec,0x91,0x45,0x83,0x67,0x72,0x6f,0xdb,0x64,0x0d,0x32,0x8a};
    std::uint8_t digest84[32] = {0x04,0xc9,0xe1,0x74,0x20,0xd6,0xb9,0x07,0x67,0x57,0xf5,0xbe,0x1f,0xde,0x10,0xfd,0x32,0x53,0xd7,0x48,0xc9,0x46,0xdb,0xfd,0x48,0x91,0xf5,0xce,0x8e,0x83,0x65,0x75};
    sm3_reset(&ctx);
    block_num = sizeof(msg84) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg84, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg84 + process_n,
                        sizeof(msg84) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest84, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg85[250]    = {0x2d,0x3d,0xa2,0xc7,0x18,0x9c,0x69,0xf7,0xbc,0xd2,0x95,0x63,0x97,0x74,0x62,0xbe,0xa8,0x6a,0x14,0x7e,0x11,0x5d,0x56,0x78,0xed,0x08,0x1f,0xa8,0xfa,0xfd,0x73,0x31,0x88,0x2b,0x9b,0x88,0x7d,0x11,0xb4,0x0d,0xab,0x0b,0xc8,0x83,0x37,0xb3,0xd3,0xba,0x54,0x8a,0x43,0x48,0xa6,0x10,0x4b,0x72,0xa2,0x57,0x79,0xdc,0xad,0x85,0x4c,0x6d,0x0b,0x64,0xf3,0xf7,0x30,0xe7,0x7b,0x73,0xe5,0xda,0xc3,0xd2,0x5c,0x5c,0x98,0x80,0x6e,0xc2,0x0f,0xfa,0x37,0x9e,0xd9,0x46,0x76,0x1a,0x9b,0xab,0xd8,0x88,0x1d,0x30,0x33,0x60,0xd5,0xe2,0x0f,0xfe,0x8a,0xa3,0x4b,0xb4,0x46,0xca,0x64,0xce,0xad,0xa6,0x89,0xd7,0x9d,0x5f,0x28,0xf3,0x7c,0xa3,0x88,0xd1,0x17,0x0a,0x6a,0xb3,0x63,0x08,0xc8,0x50,0xb1,0x72,0xa3,0x6a,0xfd,0xd1,0x09,0x62,0x93,0xd6,0x20,0x5a,0xbe,0x75,0x03,0x3d,0x0d,0xa5,0xa6,0x5f,0xa5,0x62,0xe8,0xe9,0xdb,0x63,0x27,0x82,0x40,0x51,0x1d,0x44,0xa9,0x30,0xa8,0xa9,0x2f,0x09,0x74,0xf4,0x1b,0xbe,0x06,0x08,0x6e,0x8f,0x68,0x3a,0x2c,0x9f,0x15,0xb7,0x44,0x80,0x06,0x57,0x2b,0xb9,0x49,0x3c,0xc0,0x36,0xfe,0x53,0xa5,0x6f,0xa2,0xde,0xfe,0x74,0xea,0x60,0x52,0xfe,0x81,0x14,0x76,0x5a,0xbc,0x52,0x8a,0xde,0x0e,0x07,0x87,0x7b,0xa2,0x23,0x27,0xc2,0x95,0x39,0xfd,0xa5,0x95,0xbc,0xcd,0x7a,0x0e,0x13,0xe7,0xb2,0x23,0xd4,0x69,0xd3,0x6c,0xc9,0x6c,0x7a,0xa6,0xc4,0xec,0x11,0xb9,0xce,0x65,0x10,0x78,0x34};
    std::uint8_t digest85[32] = {0x06,0x10,0x4b,0x51,0xe3,0x86,0x6e,0x9b,0x3f,0x36,0x87,0x91,0xc7,0xa4,0x88,0x04,0x4f,0xbc,0x66,0x13,0xdb,0x2f,0x62,0x74,0x34,0xce,0xe4,0x70,0xd6,0x56,0x54,0xc8};
    sm3_reset(&ctx);
    block_num = sizeof(msg85) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg85, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg85 + process_n,
                        sizeof(msg85) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest85, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg86[358]    = {0x6e,0xc3,0x49,0x0f,0x5f,0xf1,0x58,0x19,0xe8,0xe9,0xfb,0x1d,0x34,0xda,0x7e,0x16,0x44,0xd6,0x5a,0x23,0xa5,0xa0,0xe6,0x3a,0xef,0x0a,0x9f,0x9e,0x50,0x6b,0xfd,0xa4,0x22,0xea,0xb7,0x72,0x3b,0x73,0x00,0xd7,0xd3,0xe0,0x8b,0x89,0xc2,0x1c,0x97,0x13,0x40,0x21,0xf9,0x26,0xb0,0x14,0x4d,0xb3,0x3f,0x87,0x72,0xc4,0xbb,0x30,0xd0,0xe5,0xd2,0x93,0x0b,0x8d,0x98,0x93,0x99,0x37,0xf1,0x2a,0x0e,0xe1,0x66,0x76,0x52,0xe8,0x87,0xa1,0x67,0xac,0x30,0x69,0x5d,0xc7,0x51,0x8f,0x7f,0xdb,0x20,0x7f,0x4a,0x98,0xd2,0x25,0xaa,0x5d,0xfb,0xfa,0x5c,0x16,0xa2,0x46,0x20,0xae,0xbc,0xf3,0xc8,0x92,0xd2,0x9a,0x80,0x2d,0xbe,0x6c,0x47,0x8e,0xc3,0x8e,0xfe,0x51,0x50,0x22,0x0a,0x28,0xbd,0x00,0x42,0x89,0xe5,0x7d,0x46,0x4b,0x3c,0x6c,0x62,0x9a,0x2b,0x92,0x5f,0x85,0x45,0xd3,0xd5,0xc2,0xca,0x1b,0xb4,0x5b,0xdd,0xfc,0xe2,0x1e,0x45,0x28,0xf6,0xa5,0xf0,0xb3,0x7b,0xf0,0x1e,0xf5,0xd2,0xc9,0x20,0x85,0x70,0x5e,0x7b,0x63,0x0d,0x51,0x4a,0xe5,0xb5,0xfc,0x35,0xf3,0xec,0xe9,0x78,0x8a,0x5d,0x65,0x96,0x80,0xf4,0x09,0x67,0x53,0x7d,0xf4,0xf9,0xe6,0x51,0x3f,0x1f,0x67,0x88,0xea,0x23,0xf1,0x39,0xfb,0xa7,0x76,0x93,0x51,0xca,0x83,0x79,0x9e,0x18,0x34,0x85,0x27,0x8f,0x54,0x91,0x65,0x3b,0x9c,0xa0,0x53,0xbb,0x8b,0xd3,0x20,0xb3,0x9e,0x11,0x42,0x77,0x5b,0x1b,0x65,0xf6,0xae,0xba,0x19,0x57,0x5c,0xb6,0x03,0x00,0x09,0x39,0x6b,0xd0,0x5a,0xd3,0x31,0x0d,0x93,0x0f,0x6e,0x2e,0xb3,0xbf,0xf1,0x43,0xcc,0xde,0x2e,0x8e,0x90,0x30,0xa5,0x5c,0x69,0x2f,0xd0,0xdf,0xa7,0x20,0x6c,0x00,0x30,0x94,0x0e,0x30,0xfe,0xd1,0xf7,0x59,0x75,0x76,0x1e,0xc4,0x94,0xf6,0x83,0x03,0xc8,0x17,0x6b,0x5c,0x88,0xf6,0xd4,0x93,0x67,0x6e,0x5c,0xd4,0x59,0x17,0xde,0x99,0x54,0xcb,0xfd,0x79,0x76,0x08,0x82,0x2d,0xbc,0x47,0x32,0xde,0x3c,0x42,0x93,0x81,0x79,0x36,0xd3,0x1e,0xb8,0x49,0x50,0x57,0x2c,0x06,0x93,0xde,0x94,0xf7,0xaa,0x3a,0x4b,0x84,0x18,0xe4,0xeb,0xc0,0x02,0xb8,0x3e,0xc3,0xc8,0xec,0x3a};
    std::uint8_t digest86[32] = {0x60,0x88,0xbf,0xed,0xe7,0x8d,0x75,0x68,0xbb,0x80,0x73,0xb5,0xcf,0xcd,0x1c,0xfa,0xad,0x6c,0x91,0x8d,0x43,0xde,0x7a,0xe3,0x20,0xd9,0xd1,0x2d,0xbc,0xe0,0x38,0x6d};
    sm3_reset(&ctx);
    block_num = sizeof(msg86) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg86, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg86 + process_n,
                        sizeof(msg86) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest86, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg87[209]    = {0x3a,0xa3,0x0c,0xed,0x00,0x04,0xf0,0xcd,0x6c,0x4b,0xd7,0x2c,0xc3,0xad,0x47,0x6f,0x2a,0x41,0xbe,0x7d,0x64,0xde,0x0e,0xc9,0x77,0x00,0x19,0x8d,0x79,0x68,0xeb,0x41,0x71,0xe5,0x35,0x67,0xa4,0xc3,0x86,0xa8,0x7d,0xdd,0xb3,0xb1,0x3a,0x4f,0xa2,0x0f,0x6f,0xd9,0x3d,0xd5,0xf3,0x9a,0x52,0xdf,0xc1,0xcd,0xd4,0x18,0x16,0x5c,0x1d,0xca,0x88,0x3c,0x75,0x7b,0x51,0xa6,0xc1,0x54,0x76,0x83,0x98,0xe1,0xb5,0x6b,0xcd,0xde,0x48,0x8d,0x47,0x07,0x85,0x6c,0xe0,0xdc,0x07,0xcc,0xc3,0x4a,0xde,0xeb,0x6c,0x8b,0x98,0x0a,0x17,0xfd,0x50,0xa2,0x60,0x36,0x3b,0xf6,0xce,0xca,0xa9,0x58,0x96,0xb4,0xe9,0xab,0xf3,0xa6,0x59,0x92,0x68,0x18,0x11,0xd9,0x37,0xdb,0x2a,0x3f,0x01,0x2e,0x48,0xda,0xd0,0x9b,0xfd,0xbb,0x65,0x5d,0x62,0xe5,0x90,0x95,0x4a,0x56,0x5b,0x14,0x77,0x50,0xa8,0x32,0xd3,0xb2,0x80,0x95,0x9c,0x2a,0x44,0x9b,0xef,0xca,0x0c,0x68,0x7f,0xb3,0xed,0x3e,0xcf,0x87,0x9b,0x57,0x58,0x0d,0xff,0x1e,0x8b,0x74,0x5a,0xb0,0x72,0xa6,0x94,0x3c,0x56,0xaa,0x01,0xa7,0x4a,0xa6,0xf7,0xae,0xca,0xbe,0xd1,0xdb,0x92,0xe2,0xbd,0x80,0xb0,0x18,0xe4,0x26,0xe1,0x3f,0x65,0x9f,0x32,0x53,0x22,0xab,0xd4};
    std::uint8_t digest87[32] = {0x7d,0x52,0xe6,0xd8,0x94,0x11,0x15,0x65,0x19,0x60,0xe7,0xee,0x5e,0xea,0x72,0xac,0x56,0xaf,0x91,0x8b,0x64,0x6f,0x8f,0x48,0xcc,0x0a,0x9e,0x5e,0x29,0x47,0x54,0xb8};
    sm3_reset(&ctx);
    block_num = sizeof(msg87) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg87, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg87 + process_n,
                        sizeof(msg87) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest87, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg88[305]    = {0x65,0x0a,0x81,0xcc,0x09,0x79,0xc1,0x4c,0x99,0x1c,0xe9,0x1a,0x61,0x84,0x9b,0x61,0x61,0xf0,0x6b,0xff,0x88,0x26,0xe7,0x46,0x27,0x3a,0x2d,0x4f,0x8a,0xff,0xff,0x3a,0x67,0x9a,0x39,0x19,0xb3,0xfa,0x3f,0xdf,0x35,0x7e,0x5f,0x4f,0xf6,0x15,0x02,0x41,0xba,0xe6,0xad,0xb3,0x6b,0x1c,0x9a,0x2c,0x9e,0xa4,0xe5,0xe7,0xa7,0x8b,0x73,0x49,0x02,0x63,0xbf,0x60,0x02,0x6f,0x9b,0x0d,0xd4,0xb1,0x6b,0x3a,0xdd,0x83,0x98,0x90,0x1c,0x82,0x35,0x0b,0x06,0x47,0x51,0xac,0x7f,0x04,0x8d,0x5b,0x1a,0x50,0x14,0xf9,0xb8,0xc5,0x26,0xb0,0x0c,0xe1,0x3b,0x59,0xf1,0x78,0xc8,0xa1,0x62,0x25,0xc2,0x8c,0x6e,0x41,0x63,0x5d,0xe5,0x64,0xdd,0x5e,0x2d,0x3b,0xfe,0x4e,0x1e,0x06,0x74,0xba,0x27,0x7d,0xf5,0x7e,0x95,0x5b,0x90,0x72,0xa7,0x10,0x46,0x23,0x8a,0x8a,0xe5,0xcd,0xd4,0xc4,0x88,0x70,0xa9,0x4b,0xd6,0xcc,0xaf,0xab,0x78,0x6d,0x49,0x27,0x78,0x33,0xbe,0x54,0x99,0x69,0xa1,0x45,0x8c,0x83,0x91,0xd9,0x05,0x99,0x4b,0xf3,0x07,0x18,0x8f,0xc1,0x66,0x38,0x6b,0x12,0xb7,0xca,0x35,0x0d,0x82,0xc5,0x43,0xe2,0xe2,0xa6,0xbc,0xd5,0x76,0x91,0xe4,0x88,0x59,0x55,0x30,0xe2,0x9c,0x4a,0x7b,0x7f,0xb9,0xe4,0x65,0x27,0x4e,0xfe,0xd6,0x8b,0xc6,0x84,0x29,0x15,0xb9,0xab,0xa8,0x15,0xd4,0x9c,0x76,0x44,0xad,0x12,0x4b,0xa7,0x9d,0x7d,0x49,0x05,0x6a,0xf4,0x62,0x97,0x79,0x50,0x22,0xc8,0x2d,0x5b,0x11,0x5e,0xd5,0xac,0x8d,0xc3,0xaa,0x4d,0x3d,0xe4,0x16,0x5e,0x94,0x71,0x68,0xd3,0xf3,0x47,0x8b,0x69,0x2b,0x59,0xe1,0x47,0xae,0x1f,0xd0,0x6b,0x35,0x09,0x2e,0xad,0x10,0x12,0x88,0xc6,0x2d,0x95,0x3e,0xfd,0x72,0x3d,0xce,0x45,0x0c,0x7b,0xcf,0x36,0x6d,0x9e,0xa9,0x2d,0xad,0x12,0xe0,0x68,0x74,0xf3,0x69,0xd4,0x52};
    std::uint8_t digest88[32] = {0xb3,0x12,0x6d,0x78,0x5a,0xd2,0xff,0x8f,0x5d,0x40,0x27,0x81,0x15,0x7d,0x87,0x79,0x0e,0xbc,0x49,0xff,0xa0,0x75,0x97,0x0c,0x14,0xd2,0xd5,0xa0,0x5e,0x04,0x8e,0xbd};
    sm3_reset(&ctx);
    block_num = sizeof(msg88) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg88, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg88 + process_n,
                        sizeof(msg88) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest88, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg89[118]    = {0x02,0xfc,0xf3,0x4a,0xa9,0xa5,0x35,0x71,0x89,0xe1,0xf4,0xd9,0x56,0x87,0x68,0x13,0x4f,0x09,0x03,0x1b,0x5a,0x6d,0x94,0xb7,0x0b,0x25,0x71,0xaf,0xe7,0xef,0x0f,0x08,0x3b,0xbf,0x43,0x65,0xae,0x00,0xb1,0xbd,0x8d,0x6a,0x72,0x71,0x2d,0xa6,0x69,0x9d,0x5e,0xb2,0xb8,0xde,0x59,0x7e,0x98,0x1c,0x50,0x02,0x1b,0x74,0x05,0xca,0xd9,0xd6,0xcd,0xab,0x24,0x62,0x2b,0x83,0xaa,0xcf,0xf6,0x47,0x5e,0xf7,0x23,0xbe,0x29,0xc3,0xfd,0xc5,0x85,0xdc,0xfb,0x97,0xda,0x6d,0xb7,0xc7,0x87,0xb0,0xa9,0xd1,0xd8,0x88,0x26,0x31,0xa1,0x8b,0xfc,0xf8,0x5b,0x02,0xde,0x87,0x3a,0xab,0x76,0xc8,0xc2,0x4d,0xbb,0xdb,0x94,0x3a,0xa9,0x29};
    std::uint8_t digest89[32] = {0x1c,0x63,0xef,0x09,0xb0,0x95,0x1b,0x6a,0x08,0xf7,0x2a,0xa9,0xcf,0x36,0x8f,0x7d,0x60,0x45,0xfa,0xcb,0x33,0xaf,0x4b,0xa1,0x1f,0x5f,0x39,0xeb,0x40,0x14,0x0b,0xca};
    sm3_reset(&ctx);
    block_num = sizeof(msg89) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg89, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg89 + process_n,
                        sizeof(msg89) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest89, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg90[345]    = {0x15,0x04,0xa9,0xc4,0x35,0xd5,0x50,0xc1,0x5a,0xe8,0x9c,0x0b,0xe0,0x4b,0x74,0x95,0xb9,0x1f,0xdf,0x1f,0xcd,0xa7,0x7c,0xf4,0xf2,0xa4,0x09,0x5d,0x7c,0x2f,0x82,0xbe,0xc7,0x25,0x8e,0xb5,0xf5,0xae,0x4b,0x39,0xca,0xbf,0x29,0x05,0x27,0x93,0x01,0xc3,0x88,0xf6,0x9f,0x8c,0x69,0xa2,0xfc,0xd3,0x73,0x47,0x4f,0xb6,0x40,0x4c,0x91,0x0d,0x40,0x6e,0x01,0x83,0xa2,0xfe,0xc6,0xd8,0xd7,0x1d,0x59,0x17,0x4d,0x38,0xa8,0x8e,0x13,0x9c,0x13,0x97,0x01,0x89,0x6f,0x14,0xe2,0x5c,0xdd,0xc4,0xd4,0x80,0xd8,0xac,0x6d,0x7e,0xcc,0x18,0x43,0xa6,0x0c,0xf5,0x57,0xf5,0x2f,0x5f,0x61,0xb4,0x79,0x6e,0xea,0x76,0x18,0x75,0xbf,0x3a,0x22,0xab,0x08,0x3f,0xf1,0x39,0x85,0xf9,0x02,0xa5,0x36,0x75,0x7c,0x8b,0xd1,0x7c,0xf4,0xac,0x2e,0x71,0xba,0xbc,0xbd,0x9d,0xa5,0x0e,0x56,0x5c,0xf5,0xd5,0x16,0x7f,0xbe,0xb5,0x08,0xa3,0xea,0x47,0x9b,0x88,0x6b,0xbb,0x4b,0xff,0x11,0x7b,0x39,0xe1,0x29,0xf1,0x30,0xb3,0xce,0x37,0x01,0xea,0xcd,0xfd,0x96,0xb2,0xda,0x54,0x66,0xf5,0xcb,0xcd,0xf7,0x37,0x3c,0x28,0x10,0xea,0x05,0x20,0x3f,0xcb,0x24,0x54,0x03,0xb0,0xe9,0xbd,0x4b,0xe8,0xba,0x04,0xdb,0x17,0x4d,0x9b,0x72,0xe2,0x98,0xb4,0x29,0x2f,0x29,0x12,0xc5,0x5a,0x46,0xfa,0xd6,0xdb,0xb1,0x2a,0xae,0x71,0x95,0x51,0x6e,0x19,0xac,0xdf,0x1a,0xaa,0x1c,0xc8,0x56,0x63,0x8d,0x81,0x12,0xba,0x00,0xea,0xe5,0x62,0xff,0x0f,0xe9,0xdc,0xe0,0xdd,0x68,0x10,0xbe,0x01,0x8c,0xec,0xcd,0x17,0x42,0xc5,0x1d,0xdb,0x37,0xaf,0x9f,0x68,0xca,0x96,0xb5,0x28,0x93,0x98,0x76,0xf0,0x53,0xba,0xb3,0x7c,0x7d,0x25,0x8c,0x76,0x76,0x87,0xc5,0x0f,0xa7,0x76,0xe1,0x9e,0x3b,0xfe,0x04,0x50,0x31,0x39,0xb7,0xa0,0x51,0x57,0x9e,0x58,0xef,0x98,0x93,0xb3,0x54,0xc7,0x19,0xae,0x19,0x7f,0xb8,0xc7,0x71,0x45,0x80,0xa3,0xc9,0x96,0xbe,0x76,0xee,0xdd,0x62,0xf0,0xfb,0x4a,0x14,0xf8,0x58,0xfa,0x14,0xc4,0x62,0x6d,0x51,0x39,0xe8,0x77,0xaa,0x74,0xda};
    std::uint8_t digest90[32] = {0x58,0x69,0xe0,0xe0,0x26,0x1e,0x9d,0xb6,0x48,0x99,0xdd,0x57,0x75,0x1f,0x78,0x24,0x31,0x72,0x99,0x57,0xc5,0xe4,0x23,0x7a,0x99,0xc0,0xc2,0xc0,0x86,0xd5,0x81,0x56};
    sm3_reset(&ctx);
    block_num = sizeof(msg90) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg90, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg90 + process_n,
                        sizeof(msg90) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest90, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg91[120]    = {0x97,0x8f,0xd5,0x36,0x6e,0xe0,0x34,0x28,0xfc,0x98,0xbf,0x4d,0x87,0x9d,0x8c,0xb2,0xee,0x7b,0xe6,0xa4,0x17,0x83,0x21,0xaf,0xae,0x0b,0xdc,0x7e,0x9a,0xc1,0x37,0x9f,0xe0,0x7f,0x5e,0xfa,0xbe,0xe6,0xf1,0x00,0x23,0xd9,0xe8,0xf5,0xfb,0x82,0x3d,0x80,0xd3,0xd6,0x54,0xc7,0x8d,0xa1,0x9d,0x70,0xe4,0xf8,0xd8,0x85,0x70,0x45,0x23,0x42,0xb8,0x32,0x4d,0xd5,0xd7,0x76,0x4b,0xba,0xf3,0xee,0xe3,0x79,0x47,0x38,0x69,0x65,0xc2,0xee,0xb5,0xb5,0x07,0x90,0x94,0x67,0x41,0x42,0xe3,0x44,0x24,0xe4,0xa1,0x51,0x21,0xf1,0x6d,0xdc,0xeb,0xae,0x9d,0x05,0x7e,0xe7,0x48,0x61,0xca,0x82,0x35,0xed,0x24,0xef,0x67,0x2a,0x67,0x52,0xb8,0xa0};
    std::uint8_t digest91[32] = {0x4f,0xe6,0xda,0x05,0xe8,0x93,0x07,0x73,0x84,0x40,0x2d,0x81,0x4a,0xc1,0xec,0x5f,0xf9,0x8f,0x62,0x3d,0x54,0xb1,0xfb,0xe2,0xfc,0xd3,0x3f,0xd7,0x52,0xdd,0x59,0x77};
    sm3_reset(&ctx);
    block_num = sizeof(msg91) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg91, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg91 + process_n,
                        sizeof(msg91) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest91, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg92[512]    = {0x6c,0xcf,0xb6,0x6a,0x57,0xa4,0x3b,0x07,0xff,0x55,0x28,0x8b,0xc7,0x51,0x78,0xdc,0x6f,0x9f,0x36,0x03,0x1e,0x46,0x0f,0x25,0xe7,0x84,0x67,0x7d,0x5b,0xaf,0x69,0x4f,0x2d,0x4f,0x5e,0x75,0xd3,0x15,0xc8,0x59,0xbe,0x5f,0x20,0x61,0xee,0x1d,0x4e,0x89,0xad,0x09,0xea,0x9f,0xae,0x58,0x15,0x32,0x58,0x42,0x14,0x81,0xc9,0x11,0x95,0x58,0x70,0x28,0x9c,0xde,0x49,0x83,0xad,0xd5,0x52,0x62,0xad,0x46,0xea,0xef,0xc9,0x42,0x1c,0x35,0x04,0xe8,0x92,0x40,0x17,0x1b,0xed,0x69,0x18,0x6e,0x24,0xb7,0x96,0xd7,0xdd,0x40,0xca,0xe5,0xd2,0xba,0x62,0x7d,0x4d,0x3c,0x9d,0x80,0xbe,0x44,0xca,0xbb,0xc1,0xde,0xd0,0xb3,0xbf,0x98,0xcd,0x6f,0xce,0xe4,0x60,0x0a,0x6f,0xd6,0xc7,0x97,0x68,0x0d,0x94,0xe0,0xc2,0xa0,0x37,0xc4,0x0d,0xb2,0x9c,0xeb,0x23,0x0d,0x31,0x85,0xf9,0x40,0x46,0xab,0x8a,0x8e,0x58,0x83,0xba,0x5b,0x7e,0x85,0xfe,0x6e,0x60,0x78,0xba,0x06,0x91,0x10,0x75,0x42,0x4e,0x1b,0xfc,0xb3,0x76,0xf5,0x84,0x33,0xd2,0xd4,0x45,0x48,0xd1,0x10,0x17,0xcf,0xcd,0xf0,0x1d,0x29,0x15,0x64,0xa0,0xf2,0x7a,0xa9,0x29,0x05,0x04,0x75,0x6f,0x17,0x12,0x15,0xe9,0x6f,0x03,0x45,0x10,0x0f,0x15,0x28,0x83,0xde,0x58,0x91,0x89,0xef,0xef,0x0b,0x3e,0x9c,0x1f,0x1e,0x75,0xde,0x9d,0x68,0xe9,0x7a,0x39,0xa1,0x95,0xca,0x3d,0x32,0x1f,0x57,0xc6,0xf2,0xce,0x29,0x53,0xde,0x37,0xcb,0xde,0xa2,0x72,0x46,0xb4,0x65,0x48,0xfc,0x18,0x61,0xa0,0xb9,0x52,0x31,0x52,0x13,0x5f,0xbd,0xf0,0x34,0xea,0x25,0x3b,0xa5,0x93,0x7e,0x24,0x28,0xad,0xdf,0x60,0x1d,0x3a,0x57,0xd0,0xfd,0xd3,0x4d,0x7e,0x01,0xfa,0x56,0x1e,0x94,0x7f,0xf7,0xe6,0x66,0x23,0xb8,0x56,0x07,0xcf,0x8c,0xf4,0xfb,0xa8,0xf8,0x61,0x96,0x81,0xbc,0x92,0x68,0x0a,0xc2,0x21,0x78,0xa1,0x99,0x05,0xe4,0xaf,0x31,0x27,0xfe,0x18,0x91,0xeb,0x6c,0x81,0x8d,0xe8,0x0f,0x8c,0xee,0x56,0x2c,0x1c,0x82,0xbb,0x09,0x00,0x21,0x42,0x58,0x47,0xc1,0x9c,0x1d,0xe2,0x16,0x22,0x1b,0xc3,0x4b,0xbb,0x28,0xe5,0xa9,0xd6,0xf4,0x0c,0x74,0x36,0x32,0x8a,0x6a,0x8b,0x4e,0x9c,0x65,0x83,0xcf,0xb1,0xc7,0x68,0x10,0x35,0xf0,0xbc,0x8e,0x19,0xfe,0xc5,0x1c,0x7f,0x07,0x25,0x77,0xca,0x22,0x51,0xa0,0x38,0x30,0xd9,0x24,0x15,0xe8,0xa8,0xa5,0xa5,0xfa,0x9f,0x3b,0x5d,0xd5,0x36,0x1d,0x3d,0xbf,0x15,0x1a,0x36,0x9f,0xec,0xa3,0xc6,0xb0,0x88,0xd5,0xfe,0x67,0x4f,0x1e,0x4a,0x3f,0x82,0x37,0x09,0x4c,0xda,0xce,0x04,0x54,0x43,0xd0,0xa5,0x04,0x34,0xfd,0xdd,0x27,0xa8,0x4c,0xb3,0x0a,0x88,0x6d,0x56,0xb9,0x13,0xe9,0xed,0xb4,0x11,0x82,0x3a,0xb1,0x60,0x36,0x61,0x2a,0x5d,0x16,0x79,0x55,0x94,0xdc,0x26,0x7a,0xec,0xe8,0xcd,0x86,0xde,0xd1,0x04,0x97,0x1c,0x1b,0x19,0xda,0xec,0xb2,0x56,0x51,0xd6,0xf2,0xc3,0x1b,0x3d,0xf0,0x96,0xa8,0xc1,0xb0,0x8e,0x45,0xba,0x70,0x8b,0x50,0xc9,0x4d,0x59,0x1b,0x84,0xfd,0x1f,0x11,0x1e,0x83,0x7d,0x61,0x5d,0x34,0x67,0x40};
    std::uint8_t digest92[32] = {0x05,0x1e,0xb6,0x38,0x06,0x4c,0xfd,0x4f,0xbc,0x97,0xaf,0x17,0x54,0xe2,0x86,0xed,0x6d,0x78,0xac,0x20,0xc8,0x4b,0x29,0xc0,0x16,0xa3,0xb7,0xe2,0x3d,0x81,0x39,0xc6};
    sm3_reset(&ctx);
    block_num = sizeof(msg92) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg92, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg92 + process_n,
                        sizeof(msg92) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest92, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg93[253]    = {0xcb,0x71,0xf0,0x65,0xde,0x39,0xf8,0x56,0xf4,0x42,0xa8,0x6e,0x74,0x14,0x33,0xca,0x13,0x0e,0x8f,0x41,0xda,0x1b,0xaa,0x6a,0x03,0xd5,0x63,0x4d,0x42,0x6d,0xd7,0xfd,0x7e,0x89,0x20,0xbf,0x8a,0x26,0x1b,0x24,0x55,0x93,0xe6,0xba,0x4e,0x29,0x97,0x8c,0xef,0x25,0x15,0x19,0x68,0x74,0xc2,0x12,0xdc,0xb5,0xce,0xe7,0xff,0x90,0x1f,0xea,0xa8,0x13,0x66,0x65,0x74,0x2c,0x4a,0xd5,0x4a,0x24,0x81,0x72,0xe6,0x7c,0xe3,0xc2,0x4d,0xb5,0x57,0xf8,0xd9,0x89,0xe4,0xdb,0xb8,0xbd,0x05,0xc1,0xa1,0x4a,0x02,0x8a,0x75,0x35,0x5c,0x92,0xfc,0x6b,0x7f,0x5d,0x92,0xb3,0x89,0x6a,0x5b,0x8c,0xcf,0x10,0x1a,0xae,0x95,0xad,0x44,0x86,0x69,0x88,0x1c,0x95,0x8a,0x81,0x68,0xc3,0xc9,0x6e,0x38,0xce,0xeb,0xdf,0x10,0x8e,0xf5,0xe9,0xa4,0xa8,0x9f,0xba,0x82,0x84,0xb7,0x0d,0x02,0x94,0x6b,0x1a,0x97,0x63,0x8f,0xc6,0x67,0x88,0xf8,0x45,0x29,0x07,0x57,0x36,0x4b,0xe8,0xed,0x98,0x6b,0x53,0x44,0xf0,0x17,0xa2,0x7d,0xcb,0x6c,0xfd,0x99,0xf2,0xe5,0xea,0x7c,0xd3,0xf6,0x83,0xd0,0x47,0x30,0xbe,0x83,0x6e,0xf6,0x7d,0x79,0x8b,0x79,0xcb,0xa3,0x73,0xcd,0x97,0xdd,0xeb,0xdf,0xbb,0x23,0xd6,0x30,0x31,0xd7,0x5d,0x1a,0x7b,0x7b,0x22,0x43,0x2e,0x35,0x6b,0x59,0xbb,0xb9,0xaa,0x51,0x5f,0x73,0x0b,0x7c,0x9b,0x33,0x12,0x13,0xc1,0xe4,0x81,0xe7,0x0f,0xfb,0x64,0x70,0xe7,0x15,0x50,0xa5,0x16,0x5f,0x8e,0x46,0x09,0xbd,0xa5,0x4d,0xea,0xde,0x88,0x76};
    std::uint8_t digest93[32] = {0xd0,0x3f,0x14,0x58,0x38,0x5c,0x86,0x75,0x57,0x75,0xbb,0x3c,0xfe,0xeb,0xfd,0xc7,0x38,0x1d,0xf1,0x83,0xd9,0xab,0xd6,0xb5,0x32,0x13,0x91,0x96,0x24,0x8f,0x76,0xa0};
    sm3_reset(&ctx);
    block_num = sizeof(msg93) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg93, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg93 + process_n,
                        sizeof(msg93) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest93, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg94[461]    = {0x89,0x2e,0x71,0x52,0x6e,0x9f,0x1c,0x2d,0x72,0xc1,0xbc,0x71,0x5f,0x04,0x42,0x0d,0x77,0x0d,0xb8,0xa9,0x71,0xfe,0x95,0x71,0xad,0x6c,0xa8,0xab,0x33,0xb7,0xe8,0x18,0x68,0x49,0xf9,0x82,0xf3,0x8f,0x62,0x95,0x10,0x45,0xbb,0xe0,0x17,0xee,0xbc,0x47,0xae,0x16,0xa3,0xb3,0xfc,0xb6,0x59,0x0f,0x71,0xae,0xb0,0x36,0xfc,0x70,0xa1,0x6a,0xad,0x19,0xad,0x40,0xbd,0x0c,0xb3,0xf6,0xb9,0xb8,0xd1,0x32,0x76,0x1d,0x8b,0xe5,0x76,0x55,0x71,0xc5,0x72,0xd1,0x49,0xfd,0x16,0x38,0x0a,0x52,0x1e,0x63,0x8b,0xff,0x65,0xe8,0x4d,0xd2,0x83,0x35,0xc3,0x6f,0x67,0x8d,0x5f,0xe2,0x23,0xe0,0x5b,0x50,0x6c,0x24,0x21,0x2d,0x4c,0xca,0x6b,0x77,0x30,0xff,0xf6,0xc3,0x0a,0xc0,0x94,0xb0,0xe1,0x02,0x28,0xb2,0x13,0x0a,0x70,0x18,0xa0,0xf8,0xa5,0x45,0xa2,0x37,0xdb,0xfe,0xc4,0xc4,0x5d,0xe9,0x7e,0xe4,0x95,0x8d,0xba,0x19,0x00,0x14,0xd9,0x95,0x8b,0xbe,0x07,0x2e,0x96,0x6d,0x7b,0x84,0xa5,0xdd,0x18,0x0a,0x02,0xce,0x13,0xbd,0xeb,0xd0,0x4d,0x2a,0x0a,0xad,0x9a,0x3e,0xbc,0x86,0x32,0x0e,0x9b,0x28,0xd6,0x62,0x02,0x5f,0x53,0xea,0xeb,0x66,0xae,0x96,0x41,0x87,0x90,0x3c,0xe9,0xee,0x7b,0x8d,0xb2,0x8c,0xc5,0xf3,0xd7,0xde,0x35,0x23,0xb3,0x41,0x5a,0x06,0x66,0xf5,0x4f,0xfe,0x25,0x01,0xae,0x41,0x58,0x2d,0x51,0x82,0x65,0x82,0xac,0xf0,0x07,0x6c,0x11,0x06,0xe8,0x42,0x50,0x4a,0xb3,0x80,0x9f,0x95,0x60,0x80,0x52,0xe7,0xb1,0xcf,0xda,0x86,0x26,0xa1,0x2b,0xb7,0x77,0x2d,0x45,0x01,0x2e,0x6b,0x15,0x22,0x13,0x55,0xe4,0xe7,0xf7,0xec,0x7a,0x62,0xa0,0x79,0x20,0x79,0x45,0x3f,0xd4,0x0f,0x07,0x87,0x86,0xe6,0xf1,0xd9,0x25,0x0c,0x40,0x37,0x4d,0x94,0xba,0x91,0x16,0x2a,0xb4,0x91,0xda,0xbf,0x6d,0x23,0x08,0x03,0xa3,0x86,0x99,0xa8,0xfa,0xbf,0xe9,0x44,0xff,0x59,0xaa,0x46,0x96,0x0b,0x55,0x6e,0x24,0x30,0x94,0xa1,0x3a,0x4a,0xa7,0x62,0xf1,0x03,0x17,0x7c,0xdb,0x70,0xd1,0xa9,0x01,0xb3,0x8e,0xe0,0x60,0x18,0xfc,0x81,0x14,0x79,0xca,0x4b,0xef,0x9d,0xd0,0xd1,0x42,0x73,0xdf,0x62,0xde,0x02,0xf5,0x5c,0xd3,0x65,0xaf,0x26,0x40,0x8f,0x52,0x4e,0xed,0xd2,0x46,0x63,0x6f,0x3d,0x45,0x04,0x26,0xe4,0x0f,0x68,0x93,0x18,0xa6,0x24,0x8c,0x60,0x06,0xce,0xf3,0x31,0xfc,0x4b,0x00,0x72,0xe5,0x91,0xf3,0x9a,0xab,0x84,0xd9,0xfd,0x1d,0x2a,0x75,0x4a,0x91,0x6d,0x87,0x59,0xaf,0x06,0xd9,0x42,0x6c,0xee,0xcd,0x9f,0xa1,0xc7,0x43,0x04,0x7e,0xae,0x6e,0x8d,0x80,0xb9,0xa9,0xde,0x8b,0x18,0x1d,0xad,0x94,0x98,0x65,0xe9,0x77,0x3c,0x4f,0x69,0x48,0x96,0x32,0x49,0xf4,0x33,0x92,0xb5,0x01,0x85,0x0f,0xed,0x53,0xd1,0xd9,0xd7,0x3c};
    std::uint8_t digest94[32] = {0x90,0xba,0x58,0x88,0xfb,0x25,0x42,0xc3,0xde,0x3d,0x44,0x99,0x1f,0xc6,0x1c,0xff,0xd4,0xac,0x84,0x28,0x9c,0x9c,0xe7,0x52,0x5c,0x49,0x0d,0xd7,0x10,0x52,0xf9,0xc6};
    sm3_reset(&ctx);
    block_num = sizeof(msg94) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg94, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg94 + process_n,
                        sizeof(msg94) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest94, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg95[499]    = {0x72,0xfb,0xbe,0x26,0x55,0xf6,0x21,0xf4,0x45,0x1f,0xd8,0x76,0xb8,0x32,0xfc,0x8f,0x35,0xfc,0x8a,0xbc,0x11,0xfc,0x65,0x1e,0x59,0xd6,0x53,0xec,0x82,0xa1,0xb1,0x6d,0x1f,0xec,0xec,0xeb,0x66,0x28,0xe5,0xc1,0xbf,0x03,0xd5,0x3d,0xf8,0xac,0xca,0xf0,0x6b,0x18,0xe1,0x2a,0xeb,0x76,0x45,0x92,0x37,0x1d,0xec,0x22,0xb9,0x96,0x94,0x28,0x63,0x66,0x6f,0x56,0xee,0x78,0x4a,0x66,0x03,0x28,0xa6,0x9d,0x37,0x3f,0x39,0xff,0x0f,0x9d,0xea,0xbe,0x99,0x43,0x3c,0xeb,0xe7,0xba,0x2a,0x1a,0x53,0x8e,0x61,0xd3,0x0f,0x40,0x55,0x14,0xc8,0x56,0x58,0x9d,0xc3,0xe9,0xb7,0x2b,0x04,0x4e,0xa9,0x45,0xb1,0xf9,0x14,0x63,0x44,0x96,0x09,0x4c,0x9d,0x26,0x5a,0x5c,0xf4,0xc6,0x29,0xc7,0xc1,0xdc,0xc8,0x89,0x88,0xaf,0x5c,0xa8,0x12,0x09,0xad,0x7d,0xf1,0x8f,0xc9,0x0b,0xed,0x1f,0x72,0xc5,0x7d,0x30,0xad,0x91,0xc5,0x25,0x51,0x8a,0x8a,0x25,0xcb,0x62,0x9e,0x06,0x94,0xf5,0x12,0x96,0xb3,0x3e,0xd6,0x15,0x0a,0x0f,0xd9,0x8f,0x0c,0xe4,0xc7,0x8f,0xe3,0x20,0xd5,0xec,0x5b,0x7c,0x32,0xd8,0xa0,0x8f,0x85,0x90,0x16,0xc0,0x3d,0x32,0x79,0x29,0xe1,0xf0,0x54,0x2e,0x44,0xa4,0x24,0x4b,0xa6,0x64,0x7b,0x71,0x97,0x5b,0x2f,0x83,0x5c,0xf3,0x68,0x84,0x6b,0x6a,0xbe,0x8d,0xac,0xc6,0x65,0x70,0xf6,0x13,0x66,0x1d,0x76,0x6a,0xa3,0x5b,0x31,0xab,0x6c,0x64,0xd8,0xef,0x32,0xd1,0xaf,0x9f,0x82,0xd8,0xb9,0x93,0x3e,0xfe,0xf2,0xe6,0x8d,0x15,0xb3,0xb5,0x2c,0x85,0xf5,0x28,0xb0,0x8e,0xbb,0xf9,0xf2,0x6b,0x58,0x17,0x92,0xf6,0xd4,0x8f,0xea,0x3f,0x49,0xd8,0x54,0x0d,0x3c,0x1b,0x4a,0xe5,0xa6,0xde,0x89,0x09,0x94,0xff,0x22,0xfc,0xff,0xbb,0x72,0x85,0xe7,0xc7,0x5c,0x25,0xe0,0x49,0xb6,0x7e,0x6e,0x11,0x4f,0x2a,0xa0,0x36,0x76,0x3c,0x04,0x79,0xb0,0x42,0xa6,0xed,0x13,0x69,0x1f,0x5a,0x75,0x6e,0xd1,0x9f,0x32,0x3d,0x65,0x97,0x5a,0xb4,0x34,0x45,0xd0,0x6d,0x69,0x05,0xaa,0xf4,0xed,0x51,0x77,0xc9,0x53,0xfb,0xca,0x52,0xba,0x14,0x72,0x37,0x26,0x34,0xc1,0x17,0x32,0x9e,0xad,0x2c,0xf9,0xfa,0x2a,0x8d,0x9c,0x43,0x02,0x2f,0xca,0x1c,0x83,0x63,0xcc,0x7f,0xc8,0xe9,0xc9,0xcd,0xce,0xf2,0x46,0x41,0x35,0xf5,0xf9,0xcf,0x9e,0x03,0xf3,0x42,0xaa,0x18,0x0c,0x5b,0x7d,0xd7,0x5d,0x1b,0xe0,0x07,0xb1,0x96,0x29,0x7e,0xb7,0x46,0xa8,0xde,0x66,0xd2,0x7c,0x1a,0x37,0x03,0x77,0x34,0xc5,0xa9,0x2a,0x85,0x55,0xb3,0x52,0xe0,0x08,0xe7,0x77,0xe3,0x88,0x1d,0x02,0x50,0xd3,0x83,0x99,0xb2,0xab,0x57,0x54,0xf0,0x95,0x9c,0xee,0x95,0x17,0xb8,0x79,0x1f,0x21,0xc2,0xbf,0xc7,0x7f,0xf2,0x3a,0x54,0xb7,0x91,0xe3,0x0d,0x6d,0x5d,0xb7,0x84,0xec,0xf8,0xc9,0x67,0xe4,0xfc,0xae,0x32,0xa0,0xa0,0x5c,0x33,0x98,0x7d,0x8f,0x37,0x93,0xcd,0x1a,0xb3,0xda,0x1b,0x5d,0x07,0xee,0x6c,0xaa,0x88,0xb5,0x21,0xd2,0x4c,0x60,0x54,0x09,0x6b,0x04,0xdf,0xda};
    std::uint8_t digest95[32] = {0x23,0x60,0x5c,0xc8,0xfc,0x15,0x33,0x8b,0x0b,0x58,0x27,0x2b,0x4d,0xfc,0xa8,0x4d,0xf2,0xbc,0x0a,0x01,0x99,0x8e,0x2c,0xd4,0xe6,0x31,0xdc,0x45,0x56,0x30,0x10,0x27};
    sm3_reset(&ctx);
    block_num = sizeof(msg95) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg95, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg95 + process_n,
                        sizeof(msg95) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest95, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg96[470]    = {0x5f,0xc0,0x41,0x8a,0xbb,0xc7,0x6f,0x1d,0xa2,0xb3,0x23,0xc2,0x5f,0x7c,0x97,0x63,0x57,0xf5,0x62,0x3a,0x2d,0xbd,0xc9,0x5e,0xc3,0xa9,0xf8,0x70,0x27,0xc8,0x53,0xdc,0xbf,0x34,0xa5,0x46,0x01,0x22,0x4c,0xbd,0x6e,0x01,0x9a,0xd1,0x91,0x1e,0x66,0x28,0xd2,0xb3,0x21,0xe5,0x20,0xc2,0x6a,0x14,0x05,0x7c,0xb9,0xfd,0x12,0xb1,0x8a,0xb4,0x12,0xe3,0x85,0xa1,0x8a,0xcc,0x0e,0x1a,0x28,0xf3,0xbf,0x99,0xf4,0xe9,0x98,0x2c,0x08,0xfa,0x2e,0x2f,0x4a,0x03,0xd1,0xd8,0x9c,0xdb,0x66,0xc5,0xe2,0x24,0x5f,0xbe,0x16,0xef,0x7f,0x39,0xc7,0xfd,0x78,0xec,0xda,0x20,0xdf,0x68,0xeb,0xe0,0xbb,0x13,0x47,0xa3,0x65,0x76,0xdf,0xcb,0x95,0x96,0x4b,0xd7,0x2e,0xf3,0x6a,0x7a,0x56,0xeb,0x7d,0xb9,0x3b,0x9b,0x75,0xe0,0x9d,0x5c,0xa3,0x7b,0x8a,0x48,0x9d,0x11,0xc4,0xbf,0xc2,0x01,0xa0,0xa0,0xa1,0xb4,0x1c,0x37,0x8e,0x8e,0x4d,0x0c,0xaf,0xa4,0x30,0x30,0x76,0xb1,0xd1,0xfe,0xbd,0x0a,0x35,0x9f,0xe3,0x15,0xbc,0x10,0x9f,0xb3,0x40,0x61,0x09,0x6e,0x2a,0x77,0x4d,0xed,0x8e,0x1b,0xea,0x22,0x25,0xda,0x7f,0xfc,0xc8,0xef,0xdd,0x1b,0xbe,0x4e,0x4c,0x06,0x07,0x8a,0xad,0xea,0xd9,0xa3,0x87,0x00,0xd8,0x24,0xb3,0xb2,0xa0,0x28,0x12,0x28,0x82,0x1c,0x5e,0x39,0xb1,0x6f,0x08,0xea,0xb8,0x3b,0xb8,0xd4,0x33,0x06,0xba,0x55,0xd6,0x0b,0xd9,0xff,0xd6,0x34,0x81,0x19,0x6d,0x54,0xb0,0x8c,0xc3,0x66,0xae,0xa3,0xbb,0xa4,0x84,0xd3,0xa2,0x29,0x9f,0x14,0x2e,0x99,0x98,0x6b,0xeb,0x75,0x8d,0x27,0x2b,0x33,0x01,0x84,0xf5,0xb4,0x8a,0xe5,0xb1,0x49,0xcf,0x43,0x24,0xfd,0xa7,0x81,0xfa,0xb5,0xbb,0x8c,0xa3,0x32,0x8d,0x66,0xbd,0xe2,0x8b,0x64,0x92,0xd2,0x7f,0xf2,0x8d,0x0e,0x85,0xf7,0x99,0x43,0xe2,0x3e,0xe5,0xee,0xc5,0x2a,0x3d,0xea,0xe3,0x6f,0x42,0xb0,0xb6,0x0f,0xde,0x49,0x0a,0x78,0x8b,0x87,0xe2,0x52,0x03,0x55,0xec,0xc9,0x81,0x3a,0x8d,0x07,0x19,0x7d,0x8f,0x78,0xf7,0x25,0xbb,0xae,0xc5,0xe2,0x70,0xb9,0x4b,0x7d,0x01,0x7f,0x72,0xf5,0x31,0xd7,0xd3,0xc3,0x27,0x36,0xa3,0x8a,0x21,0x66,0xe6,0xa1,0x10,0x23,0x3a,0x56,0xfd,0xa8,0xf0,0x99,0x99,0x19,0x51,0xf3,0xc4,0xda,0x84,0x61,0x91,0x76,0x21,0x41,0x2f,0xd1,0xaa,0x5c,0xc1,0x9b,0xa3,0x58,0x6f,0xaf,0x3c,0x43,0x8d,0x01,0x21,0x1f,0x17,0x0c,0xfa,0xcb,0x39,0x71,0x6a,0xcc,0xf9,0x84,0x1b,0x4a,0x3f,0xcc,0x1b,0x60,0x75,0x20,0xd7,0xb5,0x0f,0x39,0x14,0x30,0x1b,0xfb,0xc3,0x69,0x55,0xa2,0x8b,0xe5,0x25,0x92,0xb9,0xfc,0x11,0x34,0xd2,0x81,0x5a,0xbf,0xa2,0xba,0xe8,0x65,0xa6,0x56,0x8b,0x47,0x71,0x04,0x20,0x8d,0x7b,0x39,0x36,0xe9,0x35,0xa9,0x52,0x84,0xdd,0xb0,0x30,0x04,0x44,0xa3,0xaa,0x57,0x0c,0xa7,0x1e,0xd6};
    std::uint8_t digest96[32] = {0xa9,0x89,0x99,0x38,0x81,0x57,0x5b,0xa4,0x63,0x97,0xfd,0xaa,0x0b,0x52,0x9a,0x1d,0xd2,0xbe,0x1e,0x55,0x5d,0x0b,0x74,0xab,0x43,0x7c,0xb8,0xc2,0xf2,0xe0,0xfa,0xbc};
    sm3_reset(&ctx);
    block_num = sizeof(msg96) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg96, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg96 + process_n,
                        sizeof(msg96) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest96, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg97[301]    = {0x7a,0x35,0xaa,0xdd,0x38,0x0c,0xd0,0x41,0xd4,0xef,0x47,0x39,0xa0,0xb6,0xc6,0xc2,0x28,0x78,0x6e,0x0d,0xec,0xf1,0xd4,0xc7,0x5b,0xbb,0xa3,0xbb,0x1b,0x10,0x6f,0x1d,0x2b,0x19,0xf7,0xb3,0x14,0x4e,0xdd,0x36,0x10,0xd7,0x80,0xad,0xff,0x77,0xb3,0x91,0x48,0x56,0xb7,0xe2,0x89,0x45,0xe6,0x46,0x03,0xc0,0x62,0xaf,0x3d,0xaa,0xff,0x29,0xb3,0x9e,0xc6,0xad,0x2b,0x7f,0x3e,0x56,0x4b,0xcc,0x55,0x7c,0x87,0x7a,0x75,0x14,0x6f,0x96,0x58,0x82,0x45,0xe6,0xd4,0xb7,0x42,0xa7,0x03,0x57,0x56,0xfc,0xa0,0x0d,0x45,0x49,0x8e,0xc1,0x0b,0x5a,0x90,0x3a,0x91,0xf2,0x62,0x29,0x37,0xcc,0x9b,0xc0,0x1a,0x27,0x50,0x79,0x27,0x89,0x65,0x43,0x14,0x9c,0x76,0x76,0x19,0x48,0x9f,0xa7,0x87,0xd5,0xd8,0xe2,0x5d,0xb6,0x1d,0x74,0x72,0xf1,0xdd,0xe0,0xf5,0x71,0x4f,0xf9,0x67,0xd3,0x6c,0x97,0x1f,0x3f,0x36,0x5e,0x23,0x12,0xbc,0x1a,0x8a,0xab,0x14,0x1a,0x73,0xce,0xb1,0xe8,0xe0,0xdc,0x3e,0xda,0x2f,0xb1,0xe9,0xcb,0x5b,0x43,0x5d,0xe9,0xe9,0xa9,0x94,0x12,0xae,0xce,0x0a,0x10,0x9e,0xaf,0x7d,0x90,0xf6,0xe8,0xbf,0x3b,0x9e,0xa0,0x8e,0xd2,0xc5,0x78,0x09,0xa6,0x3c,0x4d,0xd1,0x27,0x5d,0x05,0x30,0xbf,0x3a,0xbe,0x9a,0xd9,0x72,0x12,0x6a,0x20,0xc5,0x50,0xa8,0x30,0x68,0x8b,0x00,0x81,0xd1,0xda,0xc1,0x9b,0xac,0x1b,0x76,0xf8,0xef,0x20,0x05,0xcb,0x49,0x80,0x74,0xb4,0xd3,0x3c,0xb4,0xf9,0xbd,0x49,0x19,0xdb,0xbd,0x3e,0xb3,0x98,0x08,0xaa,0x53,0x22,0xb8,0xc7,0x1b,0xeb,0x68,0x22,0xfa,0xad,0x0b,0x45,0x55,0x45,0x58,0xc6,0x6c,0x77,0xad,0xc9,0x2a,0xea,0xc6,0xa5,0x74,0x39,0x81,0x9f,0xf5,0xce,0xaa,0x17,0x92,0x9d,0x5d,0x9a,0xf8,0x2d,0x3d,0xa7,0x69,0x46,0xd8,0x1f,0xbc,0x32,0xc3};
    std::uint8_t digest97[32] = {0x38,0x90,0x7c,0x05,0xc2,0x39,0x0f,0x50,0xe0,0x5f,0x2a,0xcc,0xe3,0x62,0x96,0x82,0xd6,0xaf,0xe5,0xb9,0x4d,0xba,0xcb,0x3f,0x71,0x0f,0x09,0x44,0xf3,0x46,0x38,0x1a};
    sm3_reset(&ctx);
    block_num = sizeof(msg97) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg97, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg97 + process_n,
                        sizeof(msg97) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest97, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg98[349]    = {0x6c,0xec,0x5b,0x88,0x12,0xe2,0x1e,0x09,0x22,0xd7,0x98,0x91,0x53,0xc1,0x8a,0xce,0xe2,0x51,0x45,0x66,0x2a,0xe6,0x01,0x97,0x88,0xe2,0x01,0x18,0xe4,0x7e,0xd8,0x8d,0xfe,0xcb,0x63,0xcb,0x18,0xa3,0x83,0x0f,0x25,0x71,0xa6,0xc1,0x28,0x27,0x97,0xb5,0x8e,0x08,0x60,0x60,0x8a,0x88,0x91,0xbd,0x86,0xc3,0xe9,0x20,0xc2,0x9d,0x10,0x5c,0x5a,0x6d,0x14,0x61,0x58,0x83,0xda,0xc8,0x5b,0x91,0x94,0x93,0xfd,0x62,0x0a,0xd8,0x64,0xf9,0xdf,0xd6,0xee,0x2d,0xc4,0xb7,0x4e,0xdd,0xa7,0xfd,0x03,0x46,0x4f,0x04,0x35,0x5d,0x1f,0x9c,0xe0,0xa4,0xf1,0xa7,0xd7,0xdb,0x8d,0x7d,0x5c,0xb8,0xad,0x6a,0xb0,0xcd,0xe0,0x92,0x4b,0x99,0xa2,0x01,0xdf,0x41,0x00,0x3c,0x35,0x2f,0x49,0x02,0xa3,0xb8,0x6c,0xba,0x4b,0x70,0xf0,0x0f,0xc0,0x80,0xf5,0x16,0x28,0x22,0x1b,0x1a,0x8d,0x9a,0x99,0x80,0x4b,0xb9,0xaf,0x88,0xdc,0x70,0xfe,0x07,0x62,0xa4,0x83,0x4f,0xc0,0x3e,0x58,0x64,0x96,0xf0,0x2d,0xc1,0xb0,0x41,0x6d,0xd6,0x3a,0x81,0xe0,0xd7,0xa0,0x95,0x90,0xcf,0xa0,0x22,0xb7,0x39,0x0c,0xbb,0x92,0x14,0x7a,0xea,0xe3,0xc3,0xf6,0x36,0x37,0x89,0x1a,0x2b,0xd1,0xc8,0x96,0x4b,0x8c,0xbf,0x59,0x4b,0x8c,0xc4,0xa2,0x7c,0xe6,0x05,0xa7,0x20,0x9c,0xb9,0x66,0x92,0x5c,0x48,0x5f,0x34,0x82,0x80,0xa4,0xa9,0x7a,0x2d,0xb8,0x3a,0x98,0x9c,0x35,0x0b,0x88,0xad,0x06,0x3a,0xc6,0xa9,0x29,0x67,0x8e,0x04,0x09,0x56,0xba,0x6d,0x9b,0xa1,0xcd,0x5f,0xf4,0x54,0xa9,0x5d,0xf5,0x58,0x3a,0xb8,0x32,0xd4,0x7e,0x73,0xa2,0x58,0x1b,0x53,0x9e,0x91,0x03,0xa4,0x85,0x86,0x07,0xf4,0xa9,0x14,0x29,0xbb,0xf8,0xc5,0xf8,0xd3,0x3a,0x4b,0xb3,0xdd,0x49,0x49,0xb0,0x73,0xa6,0x25,0x08,0x08,0xbc,0x92,0x87,0xa0,0x5b,0x45,0x5e,0x73,0x00,0x27,0x87,0x53,0xa4,0x80,0x09,0xc8,0xfa,0x07,0x23,0xd1,0x73,0xea,0x76,0xac,0x63,0xa5,0x7a,0xea,0xf5,0xfb,0x60,0x32,0x70,0x2b,0x50,0xfd,0xd3,0x48,0x72,0x16,0xc9,0x0f,0x49,0x36,0x02,0xa2,0x5d,0x87,0xf7,0xd7,0xfd,0xa1,0xa2};
    std::uint8_t digest98[32] = {0x8c,0x8b,0xb1,0xcc,0xa9,0x27,0xce,0x54,0x2e,0xee,0x5d,0x1d,0xd3,0x49,0x0d,0xbf,0x1f,0x39,0x7c,0x4e,0x8c,0x31,0xeb,0x00,0xc6,0xb8,0x6d,0x3c,0x1d,0x82,0xbe,0x85};
    sm3_reset(&ctx);
    block_num = sizeof(msg98) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg98, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg98 + process_n,
                        sizeof(msg98) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest98, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }

    std::uint8_t msg99[465]    = {0xf1,0xd2,0xa1,0x0e,0x0e,0xdf,0x5f,0xf8,0x85,0x3f,0xdb,0x9f,0x93,0xd3,0x40,0x94,0x84,0xce,0x31,0x44,0xa0,0xfe,0xc8,0xcc,0x39,0xd4,0x35,0xda,0x80,0x19,0xfa,0xf6,0x2e,0x49,0x1a,0xc5,0x8b,0xb5,0xd0,0x19,0xeb,0x7d,0x20,0xfc,0xb5,0xc5,0xef,0xf1,0x70,0x24,0xc4,0x7f,0x0d,0xc6,0x37,0x5c,0x2f,0x67,0x1c,0xaa,0x57,0xc9,0x54,0xb8,0x14,0x37,0x3b,0x9c,0xcf,0x73,0x9e,0x3b,0xed,0x53,0x74,0x60,0x08,0xba,0x77,0x01,0x13,0x1c,0x52,0x1f,0xac,0xe6,0xed,0x18,0xf9,0x7f,0xfd,0xbe,0xa8,0x90,0xf2,0x8e,0x7a,0x6a,0xe5,0x33,0x30,0x5b,0xc2,0xc9,0x73,0x4c,0x6b,0x39,0x1b,0x99,0x7d,0x1f,0xef,0x0a,0x64,0x49,0x63,0x04,0xe6,0x2d,0xa4,0x3d,0x25,0xb2,0xfc,0xbb,0xf7,0xfb,0x6c,0x65,0x18,0x9c,0x23,0x57,0x24,0x28,0xa6,0x8c,0xd0,0xfe,0x10,0x9f,0x64,0x27,0x2a,0x35,0xc9,0x45,0xac,0x03,0xe7,0x12,0x99,0xb7,0x6f,0x27,0xcf,0x1d,0x3d,0x1a,0x5f,0x13,0x6d,0x82,0xcd,0xc8,0x62,0xa8,0xc4,0x75,0xe6,0xe1,0xab,0xf2,0x3d,0xb1,0x31,0xee,0xb9,0x0a,0xa2,0x92,0x33,0xd7,0xd6,0x8e,0xd0,0x9d,0xa8,0x36,0xea,0xa1,0x85,0x78,0x11,0xd5,0x3c,0x51,0xcd,0xc5,0x01,0xbd,0x8e,0xef,0xcc,0xfd,0xae,0x81,0xb0,0x9d,0xa3,0xd3,0x0c,0x26,0xcc,0x10,0x70,0x36,0xb2,0x82,0xb7,0xb8,0x06,0xd2,0x0d,0x4f,0xb1,0xe5,0xa6,0x63,0x2c,0xba,0x46,0x81,0x18,0x6b,0x42,0x96,0xcf,0xb1,0xd7,0x57,0xe1,0x9e,0xeb,0x48,0xba,0x4d,0x98,0x21,0x93,0x4e,0x2b,0xc5,0x30,0x52,0x85,0x43,0xf9,0x89,0x02,0xa8,0x5f,0x12,0x7f,0x60,0x78,0x94,0x59,0x42,0x88,0xb6,0x5f,0xb6,0x8a,0x09,0x08,0xa7,0xa7,0x70,0xaf,0x60,0x3b,0xcd,0x0d,0x3b,0x4c,0x06,0x89,0x11,0x7c,0x93,0x78,0xc3,0x67,0xdc,0xb6,0x48,0x69,0xfb,0x6b,0x79,0x9f,0x56,0xd1,0x8b,0xc9,0x18,0x17,0x7a,0x25,0x1a,0x6b,0xcc,0x3a,0xdb,0xe2,0x7f,0x47,0x51,0x08,0xf4,0xbb,0xc3,0xb5,0x65,0x2e,0x1d,0x9c,0x22,0x0e,0x14,0xbc,0x55,0x23,0x36,0xed,0x94,0x90,0x6d,0x0d,0x51,0xe6,0xc5,0x53,0x78,0x0b,0xb8,0xa1,0xc9,0x45,0x13,0x2e,0x43,0x04,0xfd,0x9f,0x7c,0x80,0xf7,0x7f,0x2b,0x4c,0x32,0xc7,0x85,0xdc,0xdd,0xed,0x49,0x0f,0x8a,0x87,0xd3,0x78,0x26,0xc3,0x3a,0xcc,0x17,0x9c,0xb1,0xf0,0x4e,0xff,0xae,0x78,0x20,0x5a,0xae,0x6c,0x07,0xe8,0xb0,0xc8,0xd7,0x29,0x65,0x47,0x25,0x89,0xbd,0x59,0xa5,0xcf,0x2d,0xd9,0x91,0x49,0x1c,0xc4,0x3d,0xbc,0xf6,0xa3,0xa8,0xe9,0xa1,0x4c,0xa3,0xa4,0xdf,0x08,0xbf,0x5f,0x14,0xde,0xda,0x90,0xcc,0x42,0x6c,0xd0,0x2f,0x4f,0x0d,0x31,0xc9,0x9d,0x60,0xf7,0xd6,0x2d,0x08,0x9f,0x44,0xa5,0x62,0x77,0x6b,0x68,0x2c,0x7d,0xb2,0xaf,0xb1,0xcc,0xe9,0xf4,0x4d,0x0b,0xef,0x96,0x4d,0x69};
    std::uint8_t digest99[32] = {0x16,0x85,0x9d,0x6c,0x51,0xa2,0x3e,0x98,0xb3,0x48,0xcc,0x5b,0x1f,0x42,0xef,0x99,0xd3,0xc2,0x4f,0xbf,0x85,0xe4,0xe6,0x5f,0x17,0x12,0x71,0x66,0x82,0x59,0x6c,0xf3};
    sm3_reset(&ctx);
    block_num = sizeof(msg99) / SM3_BLOCK_SIZE;
    process_n = block_num * SM3_BLOCK_SIZE;
    if (sm3_update_blocks(&ctx, msg99, block_num))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (sm3_final_block(&ctx, digest, msg99 + process_n,
                        sizeof(msg99) - process_n))
    {
        throw std::runtime_error("err in sm3_common");
    }
    if (std::memcmp(digest99, digest, SM3_DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3_common");
    }
}