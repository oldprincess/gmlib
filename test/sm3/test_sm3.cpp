#include <gmlib/sm3/sm3.h>

#include <cstring>
#include <stdexcept>

using namespace sm3;

void test_sm3()
{
    SM3          hash;
    std::uint8_t digest[SM3::DIGEST_SIZE];

    std::uint8_t msg0[485] = {
        0x22, 0x7a, 0xef, 0xca, 0xab, 0xeb, 0xa8, 0xb4, 0xd7, 0x49, 0x39, 0x94,
        0x86, 0x36, 0x8b, 0x80, 0x74, 0xa2, 0xaa, 0x3f, 0xd8, 0xfc, 0x0c, 0x4d,
        0x5b, 0x8e, 0x05, 0x24, 0x1f, 0xe6, 0xda, 0x5d, 0x29, 0xd5, 0xd4, 0x6d,
        0xaa, 0xdd, 0x6b, 0x75, 0xbd, 0x7e, 0x4c, 0x12, 0xf4, 0x7a, 0x37, 0xc3,
        0x0c, 0x7c, 0x33, 0x5d, 0x49, 0xcf, 0xa1, 0x82, 0x25, 0x07, 0x1b, 0x32,
        0xca, 0x0d, 0xaa, 0x86, 0xc0, 0x95, 0x0a, 0x17, 0x28, 0xa7, 0x88, 0x57,
        0x56, 0xc8, 0x83, 0x17, 0x46, 0x75, 0x2b, 0x48, 0xd3, 0xaf, 0xb9, 0x84,
        0xf3, 0x5c, 0x2a, 0x45, 0x4b, 0x17, 0x40, 0xed, 0x28, 0x1b, 0x42, 0x84,
        0x65, 0x6f, 0xd2, 0x26, 0x17, 0x7e, 0x96, 0xa0, 0x00, 0x53, 0x7f, 0xd6,
        0x58, 0xa2, 0xb0, 0xc3, 0x88, 0x46, 0x21, 0xc2, 0x90, 0x65, 0x7e, 0xc9,
        0x03, 0x2a, 0xf4, 0xfb, 0xd2, 0x3f, 0xe0, 0xa7, 0xf2, 0xc2, 0x2b, 0xd2,
        0x9b, 0x75, 0xeb, 0xa9, 0x44, 0x93, 0x5f, 0xf3, 0x10, 0x8e, 0xa9, 0xae,
        0x6d, 0xd0, 0x24, 0x73, 0xbc, 0x1d, 0x00, 0xf7, 0x0b, 0xef, 0x7d, 0xbf,
        0x6d, 0x22, 0x60, 0xc2, 0x25, 0x47, 0x69, 0x28, 0x7e, 0xf3, 0x67, 0x48,
        0xaa, 0x91, 0xd0, 0xad, 0xaf, 0x57, 0xf7, 0x86, 0x59, 0xe9, 0x16, 0x31,
        0x08, 0x38, 0x52, 0x2b, 0x95, 0xd2, 0xb4, 0x7c, 0xcc, 0x66, 0x94, 0x2e,
        0xfa, 0x94, 0x4c, 0x0c, 0x1a, 0xa8, 0x04, 0x39, 0xbe, 0x43, 0xd8, 0x85,
        0x1e, 0xb4, 0x1e, 0xd0, 0x38, 0x32, 0x18, 0x69, 0xfe, 0x08, 0x0f, 0x9f,
        0xe3, 0x2e, 0xae, 0x83, 0x8f, 0x95, 0xde, 0xa4, 0xee, 0x69, 0x67, 0xfb,
        0x5c, 0x4c, 0xc3, 0xa5, 0xee, 0x58, 0x02, 0x5e, 0x80, 0xf3, 0xb5, 0xe2,
        0x9c, 0xe6, 0x58, 0xe1, 0xed, 0x97, 0x3a, 0xa9, 0xa6, 0x4c, 0x11, 0xac,
        0x0f, 0x96, 0x2d, 0xbc, 0xe2, 0x4d, 0x7f, 0x24, 0x62, 0x9b, 0x02, 0xae,
        0x91, 0x4d, 0xea, 0x28, 0xba, 0x20, 0xa3, 0xe9, 0xe1, 0x8e, 0x0b, 0x64,
        0x6e, 0x80, 0x8a, 0x1c, 0x0c, 0x8e, 0xcc, 0x9d, 0xc3, 0xa2, 0x93, 0x99,
        0xac, 0x4e, 0x4d, 0xf2, 0x49, 0x30, 0x66, 0x30, 0xa6, 0xd7, 0xc2, 0xb6,
        0xda, 0x69, 0x5a, 0x7f, 0x94, 0x99, 0x21, 0x1a, 0xcd, 0x53, 0xee, 0x45,
        0x11, 0x00, 0x0b, 0xcd, 0xc7, 0x33, 0xb7, 0x54, 0xc0, 0xdf, 0xaa, 0xf4,
        0x9e, 0x22, 0x02, 0x96, 0xe4, 0xd4, 0xb9, 0x72, 0xe6, 0xf2, 0xa4, 0x91,
        0x49, 0x80, 0x4c, 0xeb, 0x32, 0x15, 0xcb, 0xc5, 0x61, 0xdc, 0x41, 0x11,
        0x51, 0x58, 0x72, 0xd0, 0x68, 0xce, 0x8f, 0xc5, 0x6f, 0xfe, 0x39, 0xbb,
        0xdf, 0x47, 0xc4, 0x2b, 0xbe, 0xd9, 0x0d, 0xf4, 0x01, 0x22, 0x40, 0xc1,
        0xdd, 0x2f, 0x8f, 0xca, 0x57, 0x25, 0xbb, 0xd2, 0x18, 0x41, 0xde, 0x9d,
        0xed, 0x96, 0x6f, 0xdb, 0x4f, 0x47, 0x38, 0xcf, 0x70, 0x30, 0x3f, 0xe1,
        0x9a, 0x1f, 0xfc, 0x3c, 0x92, 0x12, 0x70, 0xfc, 0x85, 0x74, 0x13, 0xf6,
        0xe6, 0x66, 0x53, 0xa2, 0xaa, 0x5d, 0x59, 0x99, 0x18, 0xa0, 0x57, 0xfd,
        0x8a, 0x66, 0x29, 0xd2, 0x57, 0x85, 0xb6, 0x49, 0xd0, 0x67, 0x1d, 0x11,
        0xc2, 0x4d, 0xd0, 0x0e, 0x6b, 0x96, 0x0d, 0xe5, 0x1b, 0x82, 0x15, 0xcb,
        0x50, 0x53, 0x9e, 0x16, 0x1f, 0xff, 0x30, 0xf3, 0x1f, 0xf4, 0x08, 0x4b,
        0x14, 0xbd, 0xdb, 0xe3, 0xb9, 0xd1, 0xf0, 0x10, 0xdb, 0x24, 0x10, 0x93,
        0x41, 0xb9, 0x52, 0xae, 0xd9, 0xec, 0x48, 0x47, 0x1f, 0x30, 0x6f, 0xdd,
        0x5b, 0x55, 0x84, 0xae, 0x8c};
    std::uint8_t digest0[32] = {0x6a, 0x36, 0x2f, 0x68, 0x35, 0xbf, 0xd7, 0x45,
                                0x7a, 0xc8, 0x9e, 0x9e, 0xbd, 0x6e, 0x0d, 0x9f,
                                0x47, 0xbb, 0x84, 0xc8, 0xa2, 0xfe, 0xc3, 0x6b,
                                0x92, 0x61, 0x62, 0x94, 0x3d, 0x00, 0x5f, 0x4b};
    hash.reset();
    hash.do_final(digest, msg0, sizeof(msg0));
    if (std::memcmp(digest0, digest, SM3::DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3");
    }

    std::uint8_t msg1[111] = {
        0x1b, 0x24, 0xa4, 0x2a, 0xfa, 0x28, 0xa5, 0xf6, 0x81, 0xbd, 0x6a, 0xb0,
        0x17, 0x5d, 0xca, 0xcf, 0x29, 0xd8, 0x66, 0x50, 0xfe, 0x3d, 0x09, 0xfe,
        0xa2, 0x0f, 0x79, 0xe0, 0x9f, 0x6d, 0x18, 0xdf, 0x83, 0xee, 0xd6, 0x35,
        0x8f, 0x4a, 0x58, 0x85, 0xf4, 0xcc, 0x94, 0x6c, 0x95, 0x35, 0x68, 0x56,
        0x68, 0xea, 0xa5, 0xe4, 0x90, 0x83, 0x20, 0xc3, 0x71, 0xb4, 0xda, 0xb8,
        0x59, 0x37, 0x8a, 0x15, 0x26, 0xac, 0x70, 0xc3, 0xb1, 0x6f, 0xce, 0x89,
        0xe6, 0x67, 0x09, 0xcc, 0xc3, 0x68, 0x4b, 0xf7, 0xdd, 0xd4, 0xc5, 0xca,
        0xc7, 0x46, 0xfb, 0x85, 0x40, 0xfa, 0x09, 0x14, 0xf3, 0x23, 0x19, 0x60,
        0xb1, 0x7c, 0x21, 0xfc, 0xd6, 0x10, 0x39, 0x31, 0xa3, 0x0d, 0x9b, 0x09,
        0x04, 0x01, 0x23};
    std::uint8_t digest1[32] = {0x64, 0x7a, 0x6b, 0x0e, 0x8a, 0x26, 0xba, 0xe5,
                                0x78, 0xa7, 0xb9, 0xca, 0xe8, 0xe3, 0x0f, 0x6f,
                                0xdb, 0xe7, 0x7e, 0x34, 0x2c, 0x96, 0x7d, 0x47,
                                0x0f, 0xe8, 0x83, 0x4d, 0xd4, 0x68, 0x33, 0x89};
    hash.reset();
    hash.do_final(digest, msg1, sizeof(msg1));
    if (std::memcmp(digest1, digest, SM3::DIGEST_SIZE) != 0)
    {
        throw std::runtime_error("err in sm3");
    }
}