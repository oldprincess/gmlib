#if defined(CPU_FLAG_MOVBE) && defined(CPU_FLAG_BMI2)
#include <gmlib/number/internal/mont256_x64.h>
#include <gmlib/number/internal/uint256_x64.h>
#include <stdexcept>
#include <cstring>

using namespace number::internal::x64;

static std::uint8_t  P_data[32]      = {0xff,0xff,0xff,0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
static std::uint8_t  P_SUB2_data[32] = {0xff,0xff,0xff,0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfd};
static std::uint8_t  R_data[32]      = {0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01};
static std::uint8_t  R_POW2_data[32] = {0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x03};
static std::uint32_t N_              = 1;

void test_mont256_x64_pow()
{
    uint256_t P, P_SUB2, R, R_POW2;
    uint256_from_bytes(P, P_data);
    uint256_from_bytes(P_SUB2, P_SUB2_data);
    uint256_from_bytes(R, R_data);
    uint256_from_bytes(R_POW2, R_POW2_data);

    Mont256CTX ctx;
    ctx.P = P, ctx.P_SUB2 = P_SUB2;
    ctx.R = R, ctx.R_POW2 = R_POW2;
    ctx.N_ = N_;

    mont256_t    base, exponent, power;
    std::uint8_t power_data[32];

    std::uint8_t base0[32]     = {0xef,0xc1,0xbb,0x06,0xe8,0x51,0xd7,0x9a,0xa6,0x9c,0x06,0xee,0xb4,0xea,0xed,0x32,0x15,0xf9,0xa7,0x0f,0x99,0x87,0x92,0xc0,0x81,0x87,0xbf,0x5a,0x4a,0x86,0xaf,0x44};
    std::uint8_t exponent0[32] = {0xdc,0xd3,0x0f,0x6e,0x92,0x60,0x84,0x7d,0x5f,0xf3,0xf7,0x4c,0x6e,0x64,0x10,0xe4,0xa0,0xa4,0x37,0xbd,0x73,0x4b,0x0d,0xae,0x86,0xd9,0x57,0x1c,0x17,0x72,0x97,0xbe};
    std::uint8_t power0[32]    = {0xf6,0x43,0x68,0x88,0x4d,0x4c,0xa4,0x38,0x2c,0x0a,0x4f,0xe1,0xed,0x18,0x6d,0xce,0x59,0x1e,0x8f,0xf8,0xc1,0x5f,0x01,0x18,0xfe,0xd4,0x2a,0x12,0xaa,0x01,0xaa,0xcc};
    mont256_from_bytes(&ctx, base, base0);
    uint256_from_bytes(exponent, exponent0);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power0, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base1[32]     = {0xbe,0xa6,0x7f,0xb3,0xb6,0x4e,0xf7,0x61,0xfd,0x0b,0x87,0xdc,0x78,0x8d,0x88,0xd5,0x2a,0xf7,0x4c,0x40,0x4b,0x45,0x41,0xe3,0x4c,0x64,0xa5,0xaf,0xf1,0x8a,0x24,0xe7};
    std::uint8_t exponent1[32] = {0x96,0x25,0xd8,0xa4,0x19,0x4d,0xe6,0xce,0xcd,0xf4,0x7e,0x48,0x40,0x54,0x8b,0xd1,0xd7,0xac,0x89,0x3e,0xd5,0xab,0xd2,0xc8,0x4f,0x1b,0x7b,0x2b,0x36,0x2e,0xed,0x62};
    std::uint8_t power1[32]    = {0xfb,0xc9,0xd7,0x7d,0xe9,0x59,0x61,0x10,0xc3,0xb0,0x14,0x49,0x10,0x4c,0xbc,0xfe,0x35,0xbd,0x0e,0x29,0x90,0xae,0x96,0x0a,0xec,0x9e,0x8a,0x81,0xd5,0xa9,0xd3,0xcb};
    mont256_from_bytes(&ctx, base, base1);
    uint256_from_bytes(exponent, exponent1);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power1, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base2[32]     = {0x38,0x71,0xac,0xdd,0xb7,0xb7,0x5c,0x80,0x15,0xc1,0x41,0x60,0x7e,0x87,0x13,0x77,0x6d,0x78,0xfc,0x50,0x96,0x23,0x37,0xce,0x4e,0x8a,0x09,0x90,0x62,0x95,0x4d,0xad};
    std::uint8_t exponent2[32] = {0x1b,0x0b,0x0a,0x68,0x4c,0xb9,0xa7,0x43,0x98,0x94,0x32,0x00,0x68,0xc0,0x8e,0xb9,0xa7,0x1b,0x66,0x65,0x93,0x27,0x84,0xf6,0x32,0x20,0x7d,0x04,0x0c,0x5b,0x8c,0xc1};
    std::uint8_t power2[32]    = {0x9e,0x47,0x01,0xa0,0x55,0x23,0x4b,0x48,0xab,0x75,0xcf,0x0e,0x02,0xb3,0x82,0xc7,0xec,0x61,0x8e,0x89,0xc9,0x9b,0xd1,0x89,0x9b,0x0d,0xef,0x89,0xa4,0xcf,0x0f,0x51};
    mont256_from_bytes(&ctx, base, base2);
    uint256_from_bytes(exponent, exponent2);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power2, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base3[32]     = {0xac,0xb8,0xe9,0xbd,0xb4,0xc1,0xcb,0xe3,0x1e,0xd0,0x6d,0xdf,0xdf,0xf6,0xa5,0xc7,0x28,0xe6,0xa4,0xc7,0x19,0xc8,0xc4,0x39,0x51,0x51,0x58,0xf1,0x01,0x34,0xba,0xd4};
    std::uint8_t exponent3[32] = {0x0b,0x5f,0x38,0xe7,0x06,0x4d,0x13,0x45,0x7d,0x25,0x95,0x25,0x12,0x58,0x01,0x0e,0xd3,0x3e,0xfe,0x36,0x31,0xa0,0xb4,0x77,0x39,0x02,0x89,0x3a,0x6b,0x6f,0x80,0x16};
    std::uint8_t power3[32]    = {0xbf,0x80,0x6f,0xd4,0x7b,0xbe,0x1d,0x65,0x4b,0x03,0x8f,0x8a,0x8c,0x3f,0xb0,0xda,0x9c,0x08,0xc4,0xe8,0x1a,0xd6,0x55,0xcc,0x6e,0x5d,0x40,0xd2,0x28,0xc0,0xce,0x6f};
    mont256_from_bytes(&ctx, base, base3);
    uint256_from_bytes(exponent, exponent3);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power3, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base4[32]     = {0x2a,0xda,0xaf,0xcb,0x0a,0xc0,0x25,0x80,0x37,0xb8,0xbb,0x1a,0x7e,0xaa,0x6c,0x1b,0xa5,0x6c,0x6c,0xb4,0xf9,0x7f,0x1a,0x25,0xa1,0xa9,0xb8,0xd7,0x02,0x16,0xd6,0x38};
    std::uint8_t exponent4[32] = {0x48,0x59,0x73,0xc5,0xac,0x86,0x72,0x81,0x9d,0x01,0x3f,0x5f,0xfa,0xc3,0x77,0x46,0xd5,0xb9,0x0c,0xf6,0xe2,0x2e,0xf4,0x70,0x96,0x34,0x54,0x77,0xe3,0xb1,0xe0,0x33};
    std::uint8_t power4[32]    = {0x15,0xa7,0x29,0xf8,0x98,0x98,0x43,0xb6,0x7b,0x6e,0x17,0xe2,0xc0,0x7b,0xff,0x96,0x20,0xba,0xdc,0x48,0xec,0xe9,0x93,0xce,0x99,0x4c,0x81,0x72,0xb3,0xcb,0xac,0x85};
    mont256_from_bytes(&ctx, base, base4);
    uint256_from_bytes(exponent, exponent4);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power4, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base5[32]     = {0x4e,0x4d,0xdb,0x91,0x47,0x00,0x0f,0xcc,0x70,0x7e,0xd3,0x36,0x5c,0x96,0xaa,0x1e,0x6e,0x51,0x07,0x16,0x2f,0x18,0xc2,0x75,0x59,0xcb,0x49,0x06,0xc4,0x0e,0x8c,0xf8};
    std::uint8_t exponent5[32] = {0x09,0xa9,0xae,0xac,0x8a,0x7d,0x12,0x26,0x42,0x29,0x72,0xa4,0x77,0x40,0x58,0x93,0x32,0x5c,0xe7,0xda,0xaa,0x69,0x07,0x2f,0x6a,0x26,0x19,0x82,0x14,0xa4,0xc6,0xeb};
    std::uint8_t power5[32]    = {0x3c,0x7b,0x71,0x56,0x47,0xa9,0x4b,0x8e,0x99,0x32,0x4f,0xc0,0xb3,0x37,0x10,0x45,0x9f,0x57,0xe4,0xac,0x8c,0x86,0xf1,0x9d,0x70,0x60,0x83,0xbf,0x89,0x02,0x4d,0x81};
    mont256_from_bytes(&ctx, base, base5);
    uint256_from_bytes(exponent, exponent5);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power5, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base6[32]     = {0xfb,0xb0,0x6b,0xbb,0x11,0x72,0xda,0xb5,0xab,0xd5,0xa2,0x53,0x97,0xa0,0x6e,0xb0,0xe4,0xd1,0x11,0x3c,0xcf,0x9f,0xe5,0xe5,0x0f,0x75,0x4a,0xa1,0x9d,0x12,0x8c,0x5b};
    std::uint8_t exponent6[32] = {0x21,0x22,0xdf,0x44,0xfb,0x81,0x05,0xf5,0xac,0xa2,0xe6,0x25,0x81,0x99,0x0c,0xe3,0xe1,0x13,0x62,0xf1,0x46,0x78,0x7d,0x6f,0x60,0x99,0x89,0x02,0x0d,0x10,0x7a,0x5c};
    std::uint8_t power6[32]    = {0x6e,0x04,0x53,0xcf,0x6d,0x53,0x68,0x4a,0x68,0x23,0x90,0x0b,0x28,0x0f,0x53,0x69,0x48,0x64,0xd0,0x58,0xd5,0xd0,0x84,0x12,0x70,0x04,0x2c,0x0e,0xf6,0x15,0x9e,0xe3};
    mont256_from_bytes(&ctx, base, base6);
    uint256_from_bytes(exponent, exponent6);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power6, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base7[32]     = {0xae,0x15,0x5f,0x1a,0x72,0xfc,0x25,0x27,0xd6,0x19,0x01,0x18,0x64,0xfa,0x4c,0xad,0xf0,0xf4,0x8b,0x2c,0x52,0x7d,0x35,0x95,0xc8,0x16,0x20,0x73,0x95,0x20,0x7b,0x84};
    std::uint8_t exponent7[32] = {0xb2,0xec,0x90,0x4b,0x5a,0x00,0xcb,0x1b,0x3d,0xf4,0xd7,0x5a,0xfd,0x5f,0xab,0xa5,0x1d,0x64,0x87,0x94,0x03,0xdd,0x1e,0x68,0xcc,0x54,0x5e,0xf8,0xf7,0xe3,0x63,0xff};
    std::uint8_t power7[32]    = {0x16,0x79,0x1b,0x3b,0x5f,0x72,0xf4,0x40,0xd2,0x52,0xae,0x0f,0xe9,0x40,0xa3,0x2e,0x97,0x63,0xe5,0x63,0x63,0xcc,0x17,0xc2,0xcd,0x7f,0x4d,0x55,0xba,0xe4,0xd9,0xb0};
    mont256_from_bytes(&ctx, base, base7);
    uint256_from_bytes(exponent, exponent7);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power7, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base8[32]     = {0xdb,0xb7,0xd0,0xdd,0x58,0xe8,0x3c,0x02,0xf9,0xc6,0xf3,0xcf,0x2f,0xba,0x06,0xa1,0xb0,0x6a,0x94,0x7c,0xf9,0x50,0x9a,0x4d,0xab,0x9d,0x38,0x4c,0x08,0x58,0x63,0x58};
    std::uint8_t exponent8[32] = {0x23,0x2c,0x16,0x00,0x1b,0x05,0x2e,0x4f,0xa7,0x2a,0x8c,0x9b,0xd6,0x9f,0x9e,0x6d,0x57,0x59,0x93,0x74,0xd1,0x11,0x5a,0x1e,0xbd,0x51,0xc1,0xc3,0xa6,0xe3,0x35,0x17};
    std::uint8_t power8[32]    = {0x4f,0xcb,0xfe,0x04,0x4c,0x24,0x32,0x48,0xe0,0x0a,0x3b,0x32,0x01,0xaf,0x3c,0xc9,0xf2,0x7e,0x30,0x4e,0x4b,0x5b,0x58,0xb8,0x58,0xc1,0x05,0x6c,0x75,0x78,0x63,0xb5};
    mont256_from_bytes(&ctx, base, base8);
    uint256_from_bytes(exponent, exponent8);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power8, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base9[32]     = {0x3a,0x7b,0xa8,0xaf,0xb7,0x2a,0xb3,0xdd,0xe7,0x2f,0x8a,0x0e,0x46,0x86,0x9d,0x9d,0xc9,0xf4,0xc7,0xf5,0x39,0x5f,0x0f,0xd2,0x90,0x0e,0x72,0x7d,0xdd,0x64,0x9d,0xe3};
    std::uint8_t exponent9[32] = {0xfb,0x80,0x67,0x55,0x64,0xb1,0x24,0xc0,0x37,0x1f,0x80,0x55,0x10,0x62,0x3e,0x9c,0xe4,0x1f,0xed,0xee,0x81,0x8e,0x75,0x02,0x6e,0xb2,0xcc,0x0b,0xd7,0x0a,0xff,0xde};
    std::uint8_t power9[32]    = {0x43,0xc2,0x9b,0x8e,0x22,0x1e,0x4c,0x25,0x75,0x77,0x15,0x82,0x49,0x04,0x78,0x7a,0xd1,0x47,0x20,0x05,0xfb,0x2d,0x19,0x73,0xe7,0x21,0xb6,0x12,0xd5,0x65,0xd7,0x6e};
    mont256_from_bytes(&ctx, base, base9);
    uint256_from_bytes(exponent, exponent9);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power9, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base10[32]     = {0xf4,0xfd,0x9a,0x03,0xcc,0x50,0xcd,0xe6,0xc0,0x36,0xca,0x20,0x64,0x9e,0xeb,0xf9,0x21,0x60,0x4e,0x66,0x20,0x4e,0xa1,0x96,0xee,0xe2,0x8b,0xbf,0x7c,0x16,0xb2,0xf9};
    std::uint8_t exponent10[32] = {0x47,0x49,0xd0,0x58,0x79,0x96,0x0e,0x0a,0xd3,0x0c,0x5f,0x09,0xc1,0x6a,0x98,0x83,0xd9,0xf0,0xc3,0x24,0xa4,0x80,0xaa,0x7a,0xfc,0x87,0x94,0x14,0x03,0x68,0xce,0xd7};
    std::uint8_t power10[32]    = {0x26,0xb9,0x0a,0x62,0x35,0x5c,0xd4,0xe6,0x95,0x18,0xa6,0xfd,0x42,0x4f,0xd7,0xe2,0x36,0x89,0xcb,0x1a,0x65,0x73,0xa1,0xed,0x08,0xa9,0x16,0xc3,0x80,0xc9,0x10,0xbe};
    mont256_from_bytes(&ctx, base, base10);
    uint256_from_bytes(exponent, exponent10);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power10, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base11[32]     = {0x76,0x12,0xaa,0xb8,0x3e,0x26,0xbd,0xe3,0x8c,0xf9,0x2d,0xaa,0x8d,0xe8,0x21,0x11,0x54,0x2d,0x20,0x1b,0x4d,0xa0,0xe4,0x62,0x69,0xee,0x94,0x91,0xf0,0x5c,0x0e,0x15};
    std::uint8_t exponent11[32] = {0x8e,0xb6,0x3f,0x96,0xdb,0x41,0x65,0xfa,0xe1,0xc6,0x70,0xe8,0x70,0xe8,0x28,0xbc,0x6b,0x02,0x27,0x73,0x17,0x50,0xf2,0xc1,0xfd,0x5a,0x46,0xbc,0x87,0x94,0x63,0x92};
    std::uint8_t power11[32]    = {0xd2,0x03,0x60,0xaf,0x7a,0xe3,0xd0,0x94,0x89,0x00,0x66,0x06,0x13,0x0e,0x3a,0xbe,0x36,0x64,0xfb,0xe7,0x90,0xb6,0x0b,0x2a,0xbe,0x8b,0xe2,0x62,0x0e,0x42,0x83,0x96};
    mont256_from_bytes(&ctx, base, base11);
    uint256_from_bytes(exponent, exponent11);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power11, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base12[32]     = {0x0b,0xb2,0xae,0x07,0xac,0xfe,0x8e,0x28,0x12,0xee,0xdf,0x89,0x2c,0x23,0x52,0xd0,0xc8,0x63,0xcb,0x21,0xe4,0x71,0x31,0xa3,0xc1,0x16,0x4d,0xec,0x88,0x53,0x74,0xf5};
    std::uint8_t exponent12[32] = {0xc2,0xca,0x87,0x51,0x27,0xbf,0xf3,0x26,0x7a,0xc3,0x34,0x5a,0x00,0x12,0x1b,0x89,0x24,0xa1,0x99,0x94,0x85,0xfe,0xab,0x2b,0xc5,0x02,0x15,0x2c,0x3c,0x14,0xee,0x34};
    std::uint8_t power12[32]    = {0x49,0x49,0x8e,0x70,0x3e,0xc9,0x65,0x09,0x76,0xee,0x01,0xec,0x29,0x11,0x0d,0x7f,0x06,0x4a,0xe4,0x5c,0x4f,0xef,0xd1,0x65,0xf3,0x81,0xec,0xdb,0x61,0x6f,0x61,0xde};
    mont256_from_bytes(&ctx, base, base12);
    uint256_from_bytes(exponent, exponent12);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power12, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base13[32]     = {0x0a,0x6b,0xd4,0x9e,0x5c,0x03,0x6d,0x07,0x78,0xd0,0x17,0xae,0x81,0x30,0x24,0x3e,0x27,0x6c,0x22,0x0d,0x2e,0x53,0x56,0x3a,0x5e,0x05,0xac,0xf1,0x06,0xd8,0x2a,0x77};
    std::uint8_t exponent13[32] = {0xb0,0xa1,0x7d,0x24,0x52,0x3b,0x87,0x59,0x0e,0xeb,0xcb,0x75,0x6c,0x9b,0x3c,0xc5,0x96,0xa0,0x4a,0xd4,0xf2,0x1b,0x7a,0x7e,0x47,0x1e,0x47,0xfc,0x53,0x70,0x65,0x38};
    std::uint8_t power13[32]    = {0x37,0x98,0x25,0x56,0x3a,0x97,0x44,0x81,0x51,0xee,0x4c,0x6d,0x46,0x78,0x7c,0x39,0xa9,0x38,0x56,0x1b,0xe8,0xd3,0x4f,0xec,0xe2,0x65,0x4a,0x60,0xa5,0x40,0x38,0xdf};
    mont256_from_bytes(&ctx, base, base13);
    uint256_from_bytes(exponent, exponent13);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power13, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base14[32]     = {0xac,0x7b,0x0e,0x49,0xd5,0x96,0x0c,0xb3,0x81,0x4f,0x6a,0xf0,0x0d,0x18,0x2e,0xff,0xff,0xd0,0x8e,0xae,0x48,0x43,0xbe,0x26,0x58,0x76,0xcc,0x6d,0x19,0xee,0x8e,0x06};
    std::uint8_t exponent14[32] = {0xf3,0xee,0xf3,0x30,0xce,0x0d,0x9b,0x3d,0x48,0x4a,0x93,0xe1,0xef,0x18,0x03,0x78,0x0e,0x8e,0xba,0x72,0x31,0x99,0x0a,0x82,0xd9,0x58,0xde,0x18,0x34,0x8a,0x3e,0xba};
    std::uint8_t power14[32]    = {0x85,0x5c,0x23,0x5c,0xa4,0xa5,0xaf,0x94,0xeb,0x7c,0x99,0x0e,0x39,0x68,0xef,0x04,0x65,0x97,0xa0,0x73,0xd2,0xdf,0x41,0x07,0x9a,0x3e,0x5f,0xe4,0xf0,0xe0,0xcc,0xf4};
    mont256_from_bytes(&ctx, base, base14);
    uint256_from_bytes(exponent, exponent14);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power14, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base15[32]     = {0x03,0x10,0x1f,0x07,0xfd,0x5e,0x94,0x1b,0x8e,0xf9,0x68,0xc7,0x14,0x64,0xb5,0x15,0xfe,0x0e,0x27,0x05,0xb4,0x3d,0xd1,0x23,0xff,0x3a,0xfa,0xe7,0x85,0x9d,0x04,0xae};
    std::uint8_t exponent15[32] = {0xd6,0x25,0x5d,0x82,0xd0,0x00,0x70,0xa1,0x40,0x00,0xec,0xba,0xd0,0x6a,0xb2,0xb7,0xa3,0xf1,0x8d,0xe6,0xbc,0x25,0xb0,0x86,0x14,0x5e,0x0f,0xc1,0x35,0xc9,0x4a,0x01};
    std::uint8_t power15[32]    = {0xfb,0xf3,0xbb,0x61,0x25,0x12,0x94,0xc2,0x5e,0x61,0x92,0x49,0x50,0xce,0xf6,0x8d,0x9d,0x4b,0x60,0x1b,0x09,0x15,0x83,0xdc,0xd6,0xe2,0xb4,0x56,0x96,0xed,0x6d,0x9d};
    mont256_from_bytes(&ctx, base, base15);
    uint256_from_bytes(exponent, exponent15);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power15, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base16[32]     = {0x4c,0xc1,0x1d,0x26,0x99,0x73,0x57,0x63,0xb8,0xee,0x01,0xfe,0xd2,0xb0,0x64,0xc5,0x5f,0x6b,0x5a,0x8d,0xf8,0x8d,0x09,0x83,0xc6,0xf4,0xd7,0xdf,0x63,0x39,0x70,0x12};
    std::uint8_t exponent16[32] = {0x61,0xd5,0x5f,0x04,0xc6,0x0b,0x54,0x3d,0xcf,0xdc,0xe8,0xd0,0x27,0xd8,0x6d,0xab,0x46,0xe4,0x8a,0xc0,0xa9,0xaa,0x6d,0xbc,0xf8,0x74,0xe2,0x42,0x73,0x1c,0x9b,0x7d};
    std::uint8_t power16[32]    = {0xed,0x9b,0xcf,0x5e,0x66,0xef,0x14,0x4b,0x3a,0xd8,0x8f,0x51,0x91,0x09,0x92,0xca,0x24,0x06,0xe1,0xb0,0x39,0xd6,0xba,0x0d,0x63,0xe8,0x18,0x14,0x0a,0x7e,0x1c,0x9e};
    mont256_from_bytes(&ctx, base, base16);
    uint256_from_bytes(exponent, exponent16);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power16, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base17[32]     = {0xac,0x40,0xcf,0x36,0x26,0x9c,0x03,0x2c,0xd5,0x24,0x98,0x2a,0x4b,0x5b,0x36,0x1c,0x91,0xaa,0x8a,0xca,0xf1,0xd4,0x6f,0x8e,0xeb,0x46,0x48,0x06,0xe6,0x4b,0x54,0x78};
    std::uint8_t exponent17[32] = {0x79,0xd5,0xb4,0xa3,0x20,0x8d,0x3c,0x60,0x58,0x04,0x72,0x8b,0x44,0x0d,0xc6,0x3f,0x39,0x43,0xaa,0x95,0xc6,0x5d,0x2e,0x06,0x35,0xc9,0x3c,0xda,0x69,0xac,0xad,0x18};
    std::uint8_t power17[32]    = {0xc9,0xcf,0x66,0x5d,0x80,0xbe,0xd3,0xd4,0xdf,0x4c,0xff,0x1c,0xa1,0x93,0xd1,0x72,0x34,0x0f,0x84,0x09,0xd4,0x20,0xae,0x96,0xc6,0x38,0x87,0x5c,0x17,0x0f,0x84,0x13};
    mont256_from_bytes(&ctx, base, base17);
    uint256_from_bytes(exponent, exponent17);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power17, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base18[32]     = {0xa2,0x6e,0x05,0x62,0x62,0xb0,0x11,0x1d,0x7b,0x83,0x1a,0x00,0x52,0xe8,0x29,0x9b,0x0c,0x9a,0xe9,0xaf,0x82,0xd4,0x45,0xcc,0x65,0x02,0xb1,0xfc,0xb2,0xbf,0x4c,0x2a};
    std::uint8_t exponent18[32] = {0x15,0x26,0x2b,0xcc,0x82,0x38,0x9f,0x56,0x8c,0x3b,0xe4,0xc4,0x7e,0xcd,0x28,0xf3,0x5d,0xbb,0x14,0x8b,0xd3,0xd1,0xf2,0x85,0xd4,0x59,0x0c,0x66,0xa5,0x50,0x52,0x89};
    std::uint8_t power18[32]    = {0x43,0x5f,0x21,0x10,0x48,0x63,0x7a,0x0c,0x60,0xc8,0x75,0xb5,0x7f,0x1d,0xb0,0x56,0xcf,0x26,0x93,0xe5,0x4c,0x6a,0x33,0xf7,0x83,0x75,0x57,0x92,0xca,0x28,0x49,0x46};
    mont256_from_bytes(&ctx, base, base18);
    uint256_from_bytes(exponent, exponent18);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power18, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base19[32]     = {0xb2,0x23,0x08,0xc3,0xb5,0x3e,0x3a,0x5b,0xcf,0x39,0xb4,0xda,0x8d,0xd4,0xf1,0x3c,0x02,0xa2,0x80,0xab,0xdf,0x6e,0x71,0xe4,0xd9,0xad,0x91,0x9f,0x1e,0xb5,0x1c,0x3f};
    std::uint8_t exponent19[32] = {0x73,0x45,0x17,0xae,0xcd,0x1c,0x46,0x55,0xb6,0x11,0xd2,0xee,0xdf,0xc6,0xb2,0xfe,0x08,0x1c,0x48,0xf2,0x5f,0xe1,0x1a,0x8e,0x5e,0xba,0x95,0x37,0xe6,0xf9,0x24,0x8f};
    std::uint8_t power19[32]    = {0x1c,0x90,0xd7,0x75,0xfe,0x6b,0x0b,0x42,0x7d,0x87,0x41,0xdb,0xa6,0x3b,0x07,0x9a,0xa9,0xd3,0xe6,0xf2,0xaa,0xf9,0x7a,0x9f,0xb9,0x10,0x85,0xcc,0x61,0xb0,0x43,0xc7};
    mont256_from_bytes(&ctx, base, base19);
    uint256_from_bytes(exponent, exponent19);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power19, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base20[32]     = {0x65,0x93,0xc6,0x45,0x05,0x5f,0xad,0xe6,0x66,0x0b,0x06,0xb0,0x29,0x1b,0x7b,0xe8,0x46,0xbe,0x06,0x02,0x99,0xea,0x16,0x77,0xf1,0xd2,0x86,0x8a,0x9b,0x54,0xdf,0x1f};
    std::uint8_t exponent20[32] = {0x2b,0x50,0x73,0x6d,0x2e,0xd8,0x54,0xe3,0x18,0x6b,0x30,0x27,0x1f,0x9f,0x74,0xe5,0xee,0xdf,0xe8,0x51,0x72,0x19,0xdf,0xab,0x05,0xc8,0xa0,0xf2,0xfc,0xb5,0xf6,0xc1};
    std::uint8_t power20[32]    = {0xa6,0x5a,0x76,0x77,0xaa,0x74,0xef,0x77,0x81,0xaf,0x35,0x17,0xf0,0xe8,0xda,0xb7,0xb5,0x2c,0xaf,0x85,0xdd,0x9a,0x03,0x62,0xe2,0x51,0xc3,0x86,0x9f,0x9f,0x35,0x8f};
    mont256_from_bytes(&ctx, base, base20);
    uint256_from_bytes(exponent, exponent20);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power20, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base21[32]     = {0x32,0xad,0x7e,0x97,0xb0,0x39,0x33,0xdc,0x6e,0x52,0xdb,0x40,0x5e,0xc6,0x54,0xd3,0x33,0xa6,0x86,0x05,0xe8,0x18,0xde,0x4c,0x36,0x03,0xcc,0xb6,0x63,0x4e,0x19,0xf9};
    std::uint8_t exponent21[32] = {0x51,0x10,0x7e,0xc9,0x70,0xb7,0x32,0x67,0xf8,0x40,0x0f,0x68,0xbb,0x86,0xd6,0xc1,0x6e,0x32,0xe8,0x50,0x57,0x04,0xb5,0x5b,0x8e,0xb0,0xd0,0xb9,0x51,0xec,0xb7,0x9c};
    std::uint8_t power21[32]    = {0x4a,0xff,0xda,0xab,0x97,0x21,0xb7,0xc4,0x14,0xb5,0x9e,0xf1,0xc7,0x28,0xc5,0x09,0xeb,0x77,0xbc,0x51,0xae,0x78,0x30,0x9c,0x32,0xeb,0xb1,0x83,0xb8,0x9a,0x7c,0x7a};
    mont256_from_bytes(&ctx, base, base21);
    uint256_from_bytes(exponent, exponent21);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power21, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base22[32]     = {0xed,0x22,0xdb,0xe7,0x02,0x5d,0x3d,0xe5,0x04,0xb9,0xd7,0xb4,0x2c,0xca,0x1a,0x0d,0x0c,0x49,0x51,0xb3,0x1f,0x8d,0xd9,0xe1,0x74,0xb5,0x18,0x03,0xec,0x89,0xfb,0xb1};
    std::uint8_t exponent22[32] = {0x0a,0x2b,0xfd,0x08,0xe1,0x3a,0x9a,0xa2,0xea,0x3a,0x14,0xe7,0x2f,0x47,0xc0,0x08,0xb5,0xdb,0x8c,0x49,0x91,0x80,0x25,0xbb,0x59,0x7f,0xcc,0x91,0xd2,0x44,0xed,0x65};
    std::uint8_t power22[32]    = {0x55,0xd7,0x13,0x0d,0x65,0xe9,0x72,0x99,0x42,0x6c,0x0c,0x5d,0x26,0xef,0xb9,0xcf,0xf9,0x2e,0x0c,0x7c,0xf6,0xd0,0xeb,0x37,0x41,0x1e,0x32,0x97,0xc9,0x5d,0xd6,0xba};
    mont256_from_bytes(&ctx, base, base22);
    uint256_from_bytes(exponent, exponent22);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power22, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base23[32]     = {0x3b,0x27,0xa5,0xbc,0xc8,0x71,0x39,0xdf,0x71,0x82,0xfb,0x00,0x5f,0x17,0xca,0x59,0x32,0x4f,0x54,0xea,0x10,0x73,0x4f,0x2e,0x43,0xde,0x17,0xd9,0xbe,0x76,0x69,0xbe};
    std::uint8_t exponent23[32] = {0xed,0x42,0xdb,0x7a,0x00,0x83,0x4f,0xb3,0x16,0x8c,0x94,0x93,0xd6,0x7b,0x08,0x5c,0x00,0xc6,0xed,0x13,0xbe,0x03,0xf9,0xb9,0x74,0x6f,0x71,0x07,0x7c,0xf2,0x81,0xa8};
    std::uint8_t power23[32]    = {0xe1,0xe7,0x27,0xe5,0x1b,0xf0,0x07,0x8d,0x10,0x87,0x1c,0x64,0x96,0xad,0x7c,0xa5,0x90,0xba,0x82,0x21,0x6e,0x5f,0xb9,0x1d,0xc6,0xaf,0x0b,0x95,0x5a,0x8a,0xcd,0x69};
    mont256_from_bytes(&ctx, base, base23);
    uint256_from_bytes(exponent, exponent23);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power23, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base24[32]     = {0xdd,0x63,0xf4,0x8e,0xea,0xb6,0xa0,0xf7,0x30,0x98,0xf5,0x8c,0x07,0xa3,0x16,0xae,0xbd,0x52,0x3b,0x6d,0x97,0xe5,0xad,0xc9,0xc5,0x91,0x0d,0xb4,0xfd,0x44,0x21,0xe5};
    std::uint8_t exponent24[32] = {0xec,0x0a,0xc7,0xbf,0x5b,0xc3,0x24,0x30,0xde,0xce,0x85,0x01,0xaf,0x82,0x8f,0x4f,0x9e,0x65,0xaf,0xcb,0x67,0x23,0x02,0xa4,0x96,0x04,0xbc,0x44,0x3a,0xda,0xe9,0x01};
    std::uint8_t power24[32]    = {0xee,0xa1,0x05,0x05,0x65,0x81,0x4f,0x9d,0x44,0xfb,0x81,0x15,0xf4,0xf2,0x23,0x99,0x93,0xdd,0x09,0xcb,0xcd,0x36,0xac,0x2b,0xbd,0x92,0x09,0x4f,0xea,0xbb,0xdf,0xc8};
    mont256_from_bytes(&ctx, base, base24);
    uint256_from_bytes(exponent, exponent24);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power24, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base25[32]     = {0xfb,0x4a,0x69,0xaf,0xfe,0x93,0x99,0xc5,0xc6,0xc7,0xc3,0x7c,0x6d,0xa7,0xfe,0xd9,0x13,0x46,0x73,0x51,0x51,0x51,0xdf,0x42,0x2c,0xe0,0x01,0x58,0xbe,0x68,0xb2,0x76};
    std::uint8_t exponent25[32] = {0xad,0x98,0xe8,0x27,0x0d,0x41,0xcb,0x9e,0x93,0x9e,0x67,0x8a,0x2e,0xae,0x2d,0x5b,0xbf,0x40,0x94,0xa8,0xdd,0xe3,0x5d,0xf0,0xe4,0x02,0x43,0x15,0x88,0xe2,0xa9,0xce};
    std::uint8_t power25[32]    = {0x2c,0x34,0xd2,0x49,0x46,0xdd,0x35,0xe9,0xd8,0x64,0xab,0x01,0x12,0x28,0x12,0x4e,0x34,0x50,0xfb,0xd2,0xbd,0x9f,0x27,0x58,0x34,0x8f,0x5b,0x22,0xdc,0xce,0xb4,0xb9};
    mont256_from_bytes(&ctx, base, base25);
    uint256_from_bytes(exponent, exponent25);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power25, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base26[32]     = {0xb8,0x72,0xd5,0xc3,0x01,0xcd,0x61,0x73,0xfa,0x02,0x63,0x83,0x6c,0x42,0xc5,0xf0,0xd3,0x2b,0x5d,0xd3,0x9b,0x19,0x60,0xb0,0xdc,0xf6,0x42,0xdc,0xa4,0x31,0xbd,0x21};
    std::uint8_t exponent26[32] = {0x36,0x1d,0x5b,0xaa,0x81,0x4c,0x6c,0x71,0xbe,0x62,0x1e,0x25,0xef,0x9a,0x3e,0xc3,0xa1,0xf2,0xbf,0x71,0xe3,0x55,0x96,0xcb,0x32,0xa2,0x45,0xda,0xd0,0xa5,0xf1,0x6c};
    std::uint8_t power26[32]    = {0x48,0x58,0xaf,0xf6,0x8c,0x5a,0xf8,0x85,0x8a,0x17,0xe3,0x0f,0x4b,0xdc,0x0c,0x8c,0x3d,0x46,0xcf,0xe9,0x0c,0x12,0x0e,0x6e,0xf1,0x4a,0x23,0x57,0x34,0xf9,0xb1,0xc5};
    mont256_from_bytes(&ctx, base, base26);
    uint256_from_bytes(exponent, exponent26);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power26, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base27[32]     = {0x16,0x57,0x3c,0xf4,0xcb,0x58,0x71,0x01,0xa4,0xe4,0x8e,0x58,0x11,0xa4,0x29,0xd0,0x7d,0xaf,0x00,0x5f,0xe1,0x5a,0x00,0xcf,0x27,0x37,0xc6,0x4c,0x83,0x32,0x77,0x23};
    std::uint8_t exponent27[32] = {0x0c,0x71,0x64,0x72,0x63,0x34,0x46,0xe7,0xd1,0x26,0x24,0xf7,0xf7,0x9c,0x8d,0xfb,0xc8,0x4d,0x36,0xc3,0x78,0x10,0x70,0xe3,0x78,0xe2,0xb4,0x14,0x58,0x46,0xaa,0x2c};
    std::uint8_t power27[32]    = {0x7e,0x59,0x37,0x6d,0x1d,0x86,0x52,0x56,0x80,0x38,0xeb,0x51,0x15,0xd4,0x99,0x60,0x44,0xe8,0x9d,0x51,0xa9,0x85,0x0e,0x84,0x81,0x53,0x68,0xca,0xf5,0x46,0xb2,0x6b};
    mont256_from_bytes(&ctx, base, base27);
    uint256_from_bytes(exponent, exponent27);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power27, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base28[32]     = {0x8f,0x97,0xb0,0x11,0x93,0x68,0xf8,0x6c,0x75,0x18,0x8e,0x24,0x68,0xfd,0x2d,0xce,0xfa,0x57,0x64,0x48,0x23,0xac,0xaf,0x76,0xb1,0x73,0x0a,0x05,0x8b,0x6f,0x84,0xb3};
    std::uint8_t exponent28[32] = {0x90,0xfd,0x67,0x6e,0x4e,0xf9,0x2f,0x56,0xd0,0x48,0x7b,0x52,0xf1,0xb5,0xfd,0x55,0xc6,0x2b,0x86,0x6d,0xe4,0x25,0xf1,0x85,0x64,0x43,0x28,0xa8,0x7a,0x04,0x7d,0x7f};
    std::uint8_t power28[32]    = {0x75,0x05,0xd4,0xd3,0x7d,0x45,0x8e,0x10,0x86,0xc1,0xe8,0xa5,0x8a,0x0b,0x3e,0x4d,0xa0,0xa7,0x5c,0x40,0xce,0x8e,0x00,0x51,0xf1,0xa3,0xed,0xa4,0xfd,0x98,0x89,0xd7};
    mont256_from_bytes(&ctx, base, base28);
    uint256_from_bytes(exponent, exponent28);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power28, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base29[32]     = {0xd0,0xc9,0xe4,0xa6,0x58,0x3d,0x19,0xd1,0x7d,0x42,0xe6,0x96,0x08,0x00,0x7a,0xee,0x8a,0xe2,0x0e,0x5f,0x72,0x1d,0x5a,0x42,0x33,0xfa,0xed,0xab,0xf2,0xa0,0x4d,0xa2};
    std::uint8_t exponent29[32] = {0x51,0x2f,0x06,0xbb,0xd6,0xd3,0x7d,0xba,0xf4,0xd5,0x39,0xbf,0x50,0x2a,0xa5,0x7f,0x91,0xff,0x8b,0x15,0x2d,0x4b,0x6b,0xed,0xf2,0x35,0xc5,0x6e,0x6f,0x97,0x82,0x60};
    std::uint8_t power29[32]    = {0x77,0x8d,0x19,0x65,0x33,0x54,0x42,0x8f,0x4c,0xcb,0xfa,0x6a,0xb4,0x4e,0x83,0x45,0xf8,0xb3,0x84,0x82,0x8b,0xc5,0x6a,0x53,0x38,0x6d,0x3f,0xd9,0x77,0x18,0x91,0xc5};
    mont256_from_bytes(&ctx, base, base29);
    uint256_from_bytes(exponent, exponent29);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power29, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base30[32]     = {0x5c,0xfc,0x3d,0x97,0x3c,0xa2,0xd5,0x57,0xc8,0x44,0x72,0x08,0x00,0x99,0x3b,0x5e,0xa7,0x72,0xaa,0xf4,0x95,0xe4,0x9c,0x91,0x1c,0x19,0x69,0x26,0x9d,0xf1,0xe1,0x4c};
    std::uint8_t exponent30[32] = {0x69,0x4e,0xdf,0x9b,0x81,0x89,0x2d,0xb5,0x42,0x83,0x8d,0xd6,0x5f,0xfd,0xde,0x97,0x13,0x3b,0x71,0x4d,0x73,0x4e,0xc8,0x3a,0xfa,0x15,0xd4,0x1f,0x13,0xb2,0x3a,0x7b};
    std::uint8_t power30[32]    = {0x33,0x0b,0x06,0x73,0x0f,0x8d,0x8e,0x7f,0xa4,0xa7,0x39,0x13,0xd3,0x60,0x1c,0x41,0x6a,0x61,0xa4,0x84,0x9e,0x05,0xb9,0x96,0xd7,0xfb,0x79,0xe1,0x25,0xa5,0x00,0xb7};
    mont256_from_bytes(&ctx, base, base30);
    uint256_from_bytes(exponent, exponent30);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power30, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base31[32]     = {0xb6,0xb2,0xf9,0xf8,0xd0,0xe9,0xca,0x4f,0xbc,0xa9,0x11,0x0b,0xf4,0xcc,0x87,0x1d,0xa8,0xd4,0xf5,0x5d,0x3a,0x1c,0xf7,0x4b,0x7f,0x4f,0xb3,0xaa,0xf1,0xb1,0xf6,0x15};
    std::uint8_t exponent31[32] = {0xa2,0x0e,0xd4,0xef,0x5e,0x47,0x0a,0x7b,0xb1,0xa6,0xaf,0x83,0x8e,0x71,0x21,0x60,0x82,0xfb,0x82,0xba,0xd2,0xd6,0x74,0x1a,0xae,0x7b,0x40,0x4f,0x9c,0x9e,0x24,0x2b};
    std::uint8_t power31[32]    = {0xda,0xcb,0x19,0x58,0xc8,0x68,0xe7,0x4d,0xb4,0x31,0x74,0x89,0xe0,0x73,0x13,0x50,0x59,0xdf,0x60,0x46,0xa6,0x5b,0x7b,0x6f,0x8a,0x85,0xe4,0xd7,0x67,0xf5,0x24,0xbc};
    mont256_from_bytes(&ctx, base, base31);
    uint256_from_bytes(exponent, exponent31);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power31, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base32[32]     = {0xcb,0xe2,0x09,0x41,0x18,0x96,0xac,0x4e,0xbd,0x77,0xf6,0x99,0xd1,0xc5,0x73,0x14,0x65,0x20,0xac,0x88,0x1d,0xf3,0x89,0xac,0xc3,0x75,0xdb,0xc2,0xb4,0xbe,0xae,0xa0};
    std::uint8_t exponent32[32] = {0x07,0x98,0x67,0xba,0xfb,0x3d,0xf5,0x76,0x6b,0x96,0xa0,0x7e,0x9c,0x31,0xc2,0x0a,0xfb,0xad,0xe2,0x53,0xc6,0xec,0xc5,0xaf,0x46,0xe6,0x32,0xad,0x94,0x6d,0xcb,0x77};
    std::uint8_t power32[32]    = {0x32,0x42,0x5b,0xba,0x77,0x6f,0x25,0x83,0xdc,0xd6,0x10,0xf1,0xc6,0xa6,0x39,0xe3,0x24,0x77,0xf8,0x17,0x24,0xfb,0x9a,0xf7,0xa0,0x7c,0xc0,0xfb,0x92,0x4e,0x7b,0x97};
    mont256_from_bytes(&ctx, base, base32);
    uint256_from_bytes(exponent, exponent32);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power32, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base33[32]     = {0x88,0xfb,0xe9,0x2c,0xf8,0x0e,0xb2,0xa8,0xaa,0xcb,0xf8,0xb8,0x99,0xb0,0xe6,0x28,0x45,0x2b,0xef,0xa6,0x7f,0xdc,0x0c,0xe4,0x24,0xbb,0xbb,0xeb,0xe0,0xf0,0x7c,0xca};
    std::uint8_t exponent33[32] = {0x05,0xc4,0xb5,0x7f,0x1a,0x6a,0xef,0x4a,0x6e,0x29,0x22,0x9c,0x78,0x72,0xd5,0x4c,0x26,0x04,0xa6,0xfc,0xe0,0x69,0xbf,0xcf,0x25,0xe1,0x1a,0xec,0x0f,0xc5,0x55,0x21};
    std::uint8_t power33[32]    = {0x9d,0xfc,0x0a,0x8b,0x30,0xe7,0x9a,0xd9,0x2a,0xd7,0xc2,0x3e,0xf8,0xdf,0x34,0x0c,0x26,0xd0,0x15,0x79,0x81,0x77,0x04,0x52,0xb6,0xf7,0x22,0xd6,0x06,0x16,0xf9,0x18};
    mont256_from_bytes(&ctx, base, base33);
    uint256_from_bytes(exponent, exponent33);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power33, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base34[32]     = {0x4f,0x15,0xd6,0xe7,0x3b,0x88,0x09,0x17,0xf1,0x93,0x9b,0x69,0x96,0x22,0x74,0xfb,0x2f,0xe7,0x05,0x52,0x0c,0x2f,0x56,0xc3,0x4c,0x06,0x4f,0xf1,0x79,0x25,0xa2,0xcf};
    std::uint8_t exponent34[32] = {0x8e,0x49,0xc8,0x9a,0x4d,0xd4,0xc0,0x3b,0x8b,0x93,0x60,0xfa,0xf5,0x71,0x34,0x4d,0xa4,0xee,0x0e,0x1e,0x86,0xeb,0x63,0xd8,0x18,0x47,0x65,0x73,0xe9,0x7f,0x9e,0xe3};
    std::uint8_t power34[32]    = {0xdb,0xf7,0x59,0x68,0xf8,0x23,0x75,0xef,0xd8,0xcb,0x2f,0x39,0x0c,0xaa,0x70,0xcd,0xc2,0xc9,0xad,0x51,0x7a,0x26,0x2f,0xef,0x5a,0xe6,0xf0,0xd8,0x20,0x5a,0xc7,0x6e};
    mont256_from_bytes(&ctx, base, base34);
    uint256_from_bytes(exponent, exponent34);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power34, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base35[32]     = {0x07,0x78,0x92,0x9e,0xfe,0xfe,0xaa,0x1b,0xde,0x11,0x2e,0xfa,0x1b,0x2e,0x1b,0x92,0x56,0xb2,0x9f,0xc6,0x8d,0xfe,0x93,0x9e,0xbe,0xbc,0x87,0xb3,0x44,0x0f,0x57,0xf6};
    std::uint8_t exponent35[32] = {0x63,0x98,0xc9,0x4a,0x68,0xf2,0xbd,0xdf,0xba,0xc8,0xaf,0x1d,0x84,0x3d,0x33,0xeb,0xec,0x04,0x9a,0xdb,0x25,0x9f,0x34,0x9b,0x94,0x0d,0x02,0xba,0xae,0x69,0x0c,0x25};
    std::uint8_t power35[32]    = {0x6d,0xd4,0xb2,0x55,0xc9,0x4f,0x8c,0x6d,0xb4,0xdb,0x87,0x5c,0xc9,0xd1,0x12,0x02,0x9f,0xcb,0x45,0x43,0x9a,0x22,0xc6,0xcd,0x3a,0x41,0x19,0xcf,0xff,0x11,0x01,0x0a};
    mont256_from_bytes(&ctx, base, base35);
    uint256_from_bytes(exponent, exponent35);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power35, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base36[32]     = {0x67,0xfe,0xe2,0x5d,0x3b,0xaa,0x66,0x45,0xfa,0x0c,0x91,0x09,0xe7,0xa4,0xb2,0xe7,0xd8,0x68,0xc4,0xe8,0xaa,0xc9,0x42,0x27,0x3a,0xfa,0x66,0x7a,0x4e,0x4b,0xec,0xb5};
    std::uint8_t exponent36[32] = {0xf5,0x95,0x8c,0xda,0x1a,0x92,0x05,0x09,0x19,0x02,0x7c,0x91,0x17,0xa9,0x99,0xb4,0x81,0x83,0x81,0x69,0x68,0xea,0xa2,0x98,0x45,0xec,0xbd,0xac,0xa8,0x61,0x84,0xc4};
    std::uint8_t power36[32]    = {0x73,0xab,0x91,0xca,0x52,0x9f,0x33,0xe0,0x24,0x70,0xe2,0x48,0x7e,0x76,0x67,0xb9,0xdb,0x12,0x62,0xab,0xed,0xb8,0x0d,0x52,0x2d,0x4a,0x03,0xcf,0xb9,0x14,0x7a,0x7e};
    mont256_from_bytes(&ctx, base, base36);
    uint256_from_bytes(exponent, exponent36);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power36, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base37[32]     = {0x07,0x8a,0x41,0x47,0xfb,0xdb,0x5f,0x18,0x92,0xeb,0x83,0x65,0x5c,0x63,0xe5,0xcc,0xad,0xf5,0xec,0x03,0x33,0xec,0x00,0x90,0x52,0x51,0x92,0x43,0x29,0x99,0xff,0xeb};
    std::uint8_t exponent37[32] = {0xad,0x7a,0xb2,0x66,0x19,0x6f,0xff,0x0e,0x03,0x27,0xcf,0x92,0x2c,0x10,0x5a,0x47,0x1b,0x99,0x07,0x49,0x64,0x54,0x2a,0xc1,0x7b,0x33,0xb7,0xb9,0xd5,0xd7,0xf9,0x44};
    std::uint8_t power37[32]    = {0x41,0xa4,0xe4,0x84,0x18,0x59,0x2f,0xde,0xa6,0x0c,0x2c,0x65,0x37,0xed,0xca,0x89,0xe5,0x42,0xcd,0x46,0x25,0x2d,0x48,0x28,0xa1,0x95,0x2e,0x2a,0x2c,0xca,0xae,0x84};
    mont256_from_bytes(&ctx, base, base37);
    uint256_from_bytes(exponent, exponent37);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power37, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base38[32]     = {0xc6,0x51,0xf7,0x19,0x7d,0xca,0xfb,0x5f,0x6a,0x6b,0x83,0x79,0xba,0xc9,0x76,0xce,0xbe,0xa4,0x7b,0xde,0x6b,0xf5,0x79,0xe9,0x37,0xde,0xd4,0x8b,0x34,0xb3,0x0b,0xdd};
    std::uint8_t exponent38[32] = {0xcc,0x58,0xf7,0x1c,0xbf,0xcb,0x0d,0xf2,0x3a,0x93,0xdf,0xad,0x07,0xff,0x74,0x6f,0x0b,0x03,0x4c,0xb4,0x20,0xd2,0xa3,0x6c,0xda,0x98,0xc2,0x15,0xc9,0x78,0x43,0x07};
    std::uint8_t power38[32]    = {0xa4,0xfe,0xcb,0x68,0x09,0xce,0x08,0x2c,0x36,0x7a,0xec,0xab,0x6f,0xd2,0xe1,0xa1,0xea,0xbd,0x3e,0x6a,0xeb,0xf6,0x16,0x21,0x62,0xe5,0xbe,0xdc,0x4a,0x0e,0x3b,0xb4};
    mont256_from_bytes(&ctx, base, base38);
    uint256_from_bytes(exponent, exponent38);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power38, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base39[32]     = {0x64,0x55,0x39,0x74,0xc4,0xe3,0xbb,0x6a,0xa9,0x65,0x4f,0xc0,0x6f,0x1f,0x5b,0x9c,0x65,0x62,0xc7,0x4d,0x7d,0x31,0xa1,0x69,0x7b,0xdf,0x64,0x23,0xd1,0x69,0x71,0x6b};
    std::uint8_t exponent39[32] = {0x2b,0x79,0xa8,0xd4,0x69,0x6a,0x55,0xd3,0xaa,0x71,0x3e,0xc5,0x7f,0xcc,0x59,0xc8,0x33,0x79,0xea,0x92,0xbc,0x65,0x37,0xf4,0x4e,0xc7,0x7f,0xa4,0x46,0x82,0xeb,0x58};
    std::uint8_t power39[32]    = {0xc1,0xd0,0xa9,0xd5,0x80,0x0b,0x42,0x98,0xab,0xf9,0x77,0xee,0xd1,0x03,0xb7,0x16,0x8a,0xa9,0x28,0x96,0x67,0xca,0xfa,0x12,0x99,0x9d,0x71,0xba,0x23,0x29,0x76,0x9d};
    mont256_from_bytes(&ctx, base, base39);
    uint256_from_bytes(exponent, exponent39);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power39, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base40[32]     = {0x00,0x7b,0x74,0x9f,0x25,0xf3,0x27,0x07,0xcc,0x4c,0xbe,0x3a,0xb6,0xe0,0x56,0xd8,0x2f,0x10,0x90,0xf0,0x48,0xfe,0x08,0xd6,0x31,0x49,0xa3,0x69,0xc9,0xa1,0x94,0xf2};
    std::uint8_t exponent40[32] = {0x8b,0x58,0xce,0xc5,0x79,0xea,0x85,0xa3,0x46,0x87,0x20,0xce,0xfb,0x6c,0xd2,0xab,0x1c,0xb3,0xcc,0x65,0xb8,0x66,0x48,0x4b,0x8c,0x7a,0x97,0x95,0x44,0xee,0x0a,0x3c};
    std::uint8_t power40[32]    = {0x79,0xb8,0xcb,0x6b,0x52,0xd8,0x55,0xc5,0x1e,0xe5,0x98,0x98,0xb4,0xd4,0x15,0x91,0x82,0xdf,0x59,0xcc,0x2c,0x33,0x44,0xb2,0x3e,0xb8,0x4a,0xa0,0xe5,0x22,0xd1,0xe2};
    mont256_from_bytes(&ctx, base, base40);
    uint256_from_bytes(exponent, exponent40);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power40, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base41[32]     = {0xcb,0x85,0x6e,0x55,0x37,0x00,0x21,0x58,0x82,0xf3,0x4c,0xfa,0xed,0x04,0x05,0xb1,0xa9,0x84,0x14,0x0c,0xbc,0x73,0x64,0xd3,0xb1,0x23,0x81,0x70,0x97,0xd6,0x6e,0xc3};
    std::uint8_t exponent41[32] = {0x33,0x25,0x7d,0xc4,0xe3,0xf4,0x94,0x72,0xe3,0xbf,0xfd,0x5f,0x45,0xc9,0x27,0x36,0x1e,0x9c,0x1c,0xf9,0xba,0x3a,0xbc,0x63,0xc6,0xea,0x3f,0xb7,0x4e,0xd6,0xef,0x82};
    std::uint8_t power41[32]    = {0x43,0x52,0x60,0x11,0xf3,0xca,0x90,0x0e,0x27,0xe0,0x17,0x16,0x1d,0xba,0x2e,0x91,0x95,0x49,0x7b,0x99,0xba,0xb3,0x1d,0xf1,0xfb,0xe7,0xdf,0x00,0xd4,0xf8,0x98,0xdf};
    mont256_from_bytes(&ctx, base, base41);
    uint256_from_bytes(exponent, exponent41);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power41, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base42[32]     = {0x24,0xd1,0xe9,0x0b,0x44,0xa5,0xbc,0xa3,0xd9,0x6c,0xd0,0x67,0xca,0xdb,0x19,0x0a,0x33,0xbb,0x2f,0x88,0x0c,0xe7,0xb2,0xdf,0xfb,0xe3,0x37,0xc0,0x71,0x0e,0xb0,0x2a};
    std::uint8_t exponent42[32] = {0x96,0x0d,0xfd,0xef,0xee,0xd3,0x28,0x58,0xb3,0x6b,0x14,0xa8,0x32,0x83,0x61,0xdb,0x81,0x5f,0xdb,0x5c,0xdb,0x7b,0xbe,0x5c,0xbb,0x0c,0x8e,0x14,0xcb,0x17,0xf7,0xa5};
    std::uint8_t power42[32]    = {0xb4,0xa4,0x1c,0x3a,0x27,0x68,0x54,0x08,0x11,0x8a,0xf4,0x1b,0x1c,0x2b,0xb6,0x7f,0xa8,0x2e,0x3b,0xa7,0xb3,0x5d,0x4e,0xf8,0xee,0xcb,0xdf,0xe1,0x6d,0xfd,0xa1,0xa8};
    mont256_from_bytes(&ctx, base, base42);
    uint256_from_bytes(exponent, exponent42);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power42, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base43[32]     = {0x2a,0x03,0x06,0x34,0x53,0xf3,0xa0,0x04,0x38,0xf1,0x66,0xcd,0xb2,0x52,0x0d,0xdf,0x43,0x56,0x15,0x2a,0x4a,0xc5,0x8f,0xe9,0x99,0xe9,0xa0,0xa8,0x61,0x41,0x0c,0xe6};
    std::uint8_t exponent43[32] = {0xa8,0xc3,0xe6,0x92,0x36,0x09,0x6c,0x10,0xe4,0xd6,0xcf,0x64,0x7a,0x4e,0xe2,0x2e,0x1c,0x43,0xf5,0x6a,0x19,0xf0,0xaf,0x03,0xd7,0x22,0x30,0xc4,0x39,0xa5,0x95,0xb5};
    std::uint8_t power43[32]    = {0x6c,0x48,0x09,0x0e,0xe2,0x98,0xdd,0x15,0xa0,0xcf,0x3f,0xb4,0xd2,0xf9,0xae,0xcb,0x68,0x88,0x8e,0x4f,0x48,0xb7,0xb0,0x10,0xec,0x34,0xaf,0x37,0xae,0xa4,0xad,0x35};
    mont256_from_bytes(&ctx, base, base43);
    uint256_from_bytes(exponent, exponent43);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power43, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base44[32]     = {0xf3,0x86,0x36,0xad,0x84,0x41,0x50,0xad,0xd6,0x23,0x0b,0x11,0xa0,0x95,0x02,0xa8,0xa8,0x6a,0xb0,0x6a,0x28,0x68,0x49,0x18,0x10,0x37,0x01,0x97,0x99,0x1f,0x49,0x1c};
    std::uint8_t exponent44[32] = {0x2c,0xd4,0xeb,0x8c,0x1c,0x49,0xc9,0xdd,0xf0,0xcb,0x5b,0x05,0x2c,0x2f,0xff,0x68,0x96,0xce,0x31,0x69,0x87,0xa4,0xf1,0x48,0x4f,0x15,0xdf,0xbc,0x8c,0x02,0x75,0xb9};
    std::uint8_t power44[32]    = {0x97,0x83,0x25,0xa3,0x11,0x37,0x10,0x7e,0xb3,0x3f,0x00,0x31,0xe0,0x2f,0x18,0x82,0x3a,0xf5,0x23,0x73,0x43,0xcd,0x9c,0x36,0x45,0x45,0xb4,0x28,0x72,0x27,0xcf,0xbf};
    mont256_from_bytes(&ctx, base, base44);
    uint256_from_bytes(exponent, exponent44);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power44, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base45[32]     = {0x69,0x61,0xbc,0x02,0x18,0xbe,0xe1,0x62,0xf6,0x2c,0x29,0x7a,0x53,0x25,0xa1,0xee,0xf9,0x49,0xc9,0xf7,0xca,0x23,0xb0,0xb0,0x67,0x25,0x21,0x3a,0x5c,0x95,0xf3,0x3d};
    std::uint8_t exponent45[32] = {0x76,0xb9,0x42,0x08,0x26,0x1c,0x4e,0x9a,0xa2,0x5c,0x02,0x62,0x5a,0xd3,0x42,0x92,0x1d,0xfe,0x2c,0xdd,0xae,0x04,0x4e,0x61,0x03,0xab,0x82,0xd4,0xe3,0x35,0x27,0xca};
    std::uint8_t power45[32]    = {0x8a,0x4a,0x8a,0xdc,0x5a,0xbf,0x3d,0x52,0xe6,0x87,0x0d,0xcd,0xe1,0x97,0x7c,0x0b,0x5b,0x7b,0x05,0x5a,0xbe,0x52,0xf1,0x57,0x58,0x1d,0x2a,0xba,0x8f,0xd4,0x4b,0xd6};
    mont256_from_bytes(&ctx, base, base45);
    uint256_from_bytes(exponent, exponent45);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power45, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base46[32]     = {0x63,0xb3,0x95,0x12,0xb0,0x91,0x8d,0xb4,0xf5,0x4a,0xb3,0x0e,0xb5,0x5f,0xf7,0xb7,0xe7,0xd9,0x1d,0x85,0x22,0xa7,0x17,0x2c,0xf1,0xaf,0x53,0x17,0xa6,0x14,0xcb,0x4a};
    std::uint8_t exponent46[32] = {0xbe,0xb2,0xb2,0xaf,0x83,0xbf,0x59,0x1c,0x0a,0xa5,0xa2,0x18,0x01,0x72,0x65,0x98,0x6e,0xde,0x3b,0x21,0x34,0xa6,0xbc,0xaf,0x20,0x9f,0x90,0x67,0x08,0xc0,0x28,0x42};
    std::uint8_t power46[32]    = {0xac,0xeb,0xe8,0x9c,0x45,0xb9,0xde,0x05,0x61,0x91,0xf9,0xb0,0xe0,0x0f,0x03,0x73,0x4d,0x28,0x67,0x76,0x3d,0x5f,0x64,0x45,0xdc,0xa4,0x62,0xcc,0xf3,0x36,0x94,0x89};
    mont256_from_bytes(&ctx, base, base46);
    uint256_from_bytes(exponent, exponent46);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power46, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base47[32]     = {0x02,0xe1,0x7d,0xf9,0x22,0x1b,0xdc,0x81,0x68,0xd1,0xf7,0xb3,0xfc,0x4a,0xd7,0x47,0x97,0x5b,0x9f,0x6b,0x0f,0x8f,0x42,0x1f,0xfb,0xf8,0x45,0xde,0x41,0x12,0x16,0x37};
    std::uint8_t exponent47[32] = {0x6a,0x43,0xd6,0x54,0x73,0xea,0x48,0xca,0xf6,0xe5,0xe0,0x8e,0x04,0x41,0x33,0x44,0x6e,0x4d,0x74,0xa3,0x39,0x41,0xfa,0xfc,0x58,0xfd,0x60,0x0c,0x1a,0x2d,0x10,0x87};
    std::uint8_t power47[32]    = {0xf6,0x0a,0x1d,0xed,0xa2,0xb1,0x3a,0xb0,0x65,0x9b,0xea,0x29,0xeb,0xdf,0xd9,0xb9,0xce,0xb9,0x1d,0xdd,0x92,0x11,0x11,0xee,0x42,0x65,0x10,0xe4,0x53,0x48,0xd2,0xdc};
    mont256_from_bytes(&ctx, base, base47);
    uint256_from_bytes(exponent, exponent47);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power47, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base48[32]     = {0xa0,0xd6,0xdc,0x6c,0xea,0xd3,0x4c,0x5f,0x52,0xaf,0x73,0x3a,0xb8,0x02,0xfc,0x49,0x53,0xde,0xe2,0xd1,0x5d,0xae,0x3a,0xa8,0x3a,0x79,0xe1,0xd5,0xcb,0x39,0x89,0xc2};
    std::uint8_t exponent48[32] = {0xde,0xbe,0x2d,0x28,0xc3,0x3a,0x23,0x60,0x7f,0x7f,0xe5,0x86,0xc9,0xf0,0x0c,0xbf,0xf3,0xa2,0xfa,0x98,0x8b,0x57,0x75,0xdc,0x7e,0x58,0x55,0x1c,0x0e,0xdc,0xc8,0x45};
    std::uint8_t power48[32]    = {0x35,0x7b,0x24,0xa7,0x4b,0x66,0x41,0x52,0x1f,0x28,0x1e,0x5c,0xd8,0xc2,0xc7,0x83,0x54,0xcf,0x7c,0xbe,0xab,0x3b,0x32,0xdb,0xaa,0xd6,0x01,0xf1,0xff,0x16,0xcb,0x8a};
    mont256_from_bytes(&ctx, base, base48);
    uint256_from_bytes(exponent, exponent48);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power48, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base49[32]     = {0x04,0xad,0xb7,0x21,0x59,0xaf,0xa1,0x5b,0xa6,0x9b,0x22,0x84,0x14,0xd7,0x5c,0xd4,0x00,0xa7,0x99,0x0a,0x6a,0xaa,0x74,0xe0,0x05,0xc7,0xa8,0xd6,0xec,0xa4,0x2c,0xd2};
    std::uint8_t exponent49[32] = {0x8f,0x9c,0xfd,0x5f,0x80,0x2b,0xdf,0xea,0x72,0x59,0x7d,0xcd,0xde,0x60,0x02,0x57,0xf0,0x39,0x2e,0x34,0x6f,0x29,0xab,0x5c,0xad,0x9e,0xfd,0x96,0x6a,0x92,0xbd,0x5f};
    std::uint8_t power49[32]    = {0x7c,0x41,0xe9,0x58,0x61,0x79,0x8d,0x9a,0xc5,0x49,0xc2,0x57,0xd0,0x3e,0x01,0xeb,0x51,0xd5,0xde,0x7c,0x00,0xc2,0xdb,0x34,0xf6,0x9c,0xd8,0x70,0x31,0x42,0xe2,0xb0};
    mont256_from_bytes(&ctx, base, base49);
    uint256_from_bytes(exponent, exponent49);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power49, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base50[32]     = {0xd2,0x0a,0xd9,0xb2,0x9c,0x0c,0x46,0x3f,0x4b,0xfd,0x08,0xfa,0xd0,0xf5,0xb6,0x39,0xed,0xa5,0xa1,0x7f,0xf0,0x88,0xba,0xcf,0x15,0xc9,0xbe,0xc8,0xd6,0xb5,0xeb,0x81};
    std::uint8_t exponent50[32] = {0x3c,0x7b,0xa5,0x9b,0xa8,0x96,0xd1,0xa8,0x29,0xac,0x14,0x5e,0x99,0x09,0xd1,0x61,0xce,0x3c,0x5e,0x41,0xac,0x02,0xf0,0xdc,0x8c,0x53,0x81,0xca,0xbe,0x48,0x56,0x2a};
    std::uint8_t power50[32]    = {0xb6,0x6b,0x9a,0x34,0x6e,0x70,0xd0,0x3f,0x55,0x87,0x80,0x27,0x45,0xe0,0x92,0xc0,0x20,0x8a,0x4e,0x18,0xb1,0x8b,0x3c,0x4b,0x99,0xa7,0x8c,0x03,0xb8,0xfa,0xaf,0xaf};
    mont256_from_bytes(&ctx, base, base50);
    uint256_from_bytes(exponent, exponent50);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power50, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base51[32]     = {0xac,0x10,0x8d,0x15,0xa0,0xa9,0x4e,0xf4,0xa6,0x17,0xbe,0x67,0x1c,0x22,0x6d,0x27,0x08,0xaf,0xe1,0x60,0x72,0x3d,0xa7,0x01,0x73,0xbe,0xa1,0xcd,0xd0,0x7e,0xb9,0x4d};
    std::uint8_t exponent51[32] = {0x63,0xb9,0xf0,0x65,0x01,0x59,0x0a,0x67,0x87,0x1e,0x61,0x9a,0xc2,0xc7,0xb3,0x2d,0xea,0xe6,0x0e,0xe0,0x01,0x5b,0x77,0x2f,0x35,0x7f,0x7b,0x18,0x9d,0x2b,0xc6,0x07};
    std::uint8_t power51[32]    = {0x64,0x80,0x6b,0xbc,0x96,0x23,0xe6,0xa0,0x8e,0xa9,0x3b,0x7b,0x4b,0x05,0x8b,0xde,0x28,0xce,0x5b,0x5a,0x5f,0xa9,0x9b,0x35,0x25,0xfd,0xf3,0xf0,0x4a,0xe3,0xf5,0x2d};
    mont256_from_bytes(&ctx, base, base51);
    uint256_from_bytes(exponent, exponent51);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power51, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base52[32]     = {0x8a,0x6b,0x1d,0x04,0x26,0x6a,0x2f,0xb3,0xeb,0x5b,0xf4,0x38,0x3c,0xa8,0xaa,0xfd,0x47,0x33,0xcc,0x0f,0x64,0x1c,0x3b,0x81,0x9e,0x16,0xc4,0x87,0x87,0x37,0x3e,0x87};
    std::uint8_t exponent52[32] = {0xa3,0xb0,0xd9,0xfb,0xb8,0x7f,0xcc,0x94,0xbf,0xef,0x07,0xfe,0xd7,0x59,0x84,0x07,0x2c,0xc1,0xa9,0xa8,0x87,0xad,0xed,0x7b,0x7e,0x9f,0x12,0x2c,0xc4,0x36,0xd7,0xc0};
    std::uint8_t power52[32]    = {0x98,0xd0,0x21,0x5c,0x46,0xfb,0xe9,0xcc,0x1c,0xe9,0xb8,0x3c,0xf2,0x2d,0x9e,0xb6,0xc6,0xda,0x55,0xea,0xe4,0xa1,0x83,0x5a,0x65,0xbd,0xd4,0xc6,0xf3,0x31,0x75,0x75};
    mont256_from_bytes(&ctx, base, base52);
    uint256_from_bytes(exponent, exponent52);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power52, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base53[32]     = {0x73,0xe5,0xbf,0xa0,0x5d,0x93,0x82,0x4c,0x9b,0xe4,0xe9,0x25,0x6e,0x17,0x6f,0x26,0x27,0xc2,0x4b,0x90,0x74,0x3e,0x5a,0x81,0x01,0x43,0xd9,0x71,0x09,0xe2,0x0f,0x33};
    std::uint8_t exponent53[32] = {0xeb,0x57,0x4c,0x9f,0x27,0x9b,0x9d,0xb4,0x7d,0x74,0xae,0x00,0x7d,0xbe,0x6d,0x0b,0xf9,0x22,0x02,0x82,0xf5,0x1f,0xe4,0xcb,0x33,0x9d,0x91,0xc2,0x63,0xf8,0x17,0x5c};
    std::uint8_t power53[32]    = {0x7b,0x42,0xa4,0x76,0x3d,0xf2,0x08,0x25,0x94,0x9f,0x2c,0xbd,0xc8,0xd0,0xc3,0xa8,0x7d,0xf1,0xbf,0x7f,0xbc,0x7f,0x74,0x76,0x3e,0xec,0x23,0x6f,0x2b,0x07,0x28,0x05};
    mont256_from_bytes(&ctx, base, base53);
    uint256_from_bytes(exponent, exponent53);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power53, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base54[32]     = {0x5c,0x85,0xcc,0x12,0xce,0xf6,0x6e,0x87,0xb9,0xff,0x89,0x25,0xe8,0x0d,0xbc,0x77,0xfd,0xf0,0x13,0x7a,0x86,0x1b,0x19,0x43,0xd6,0x01,0xa5,0x28,0x01,0x55,0x8a,0xb5};
    std::uint8_t exponent54[32] = {0xc4,0x45,0x74,0xa3,0xf9,0x61,0xa7,0x2f,0xd6,0xd0,0xf0,0xfa,0x96,0x5e,0xb4,0x2f,0xce,0xed,0xe1,0xf1,0xfe,0x89,0xe1,0x4c,0x74,0xc9,0x1c,0x15,0xea,0xf2,0x0c,0x3c};
    std::uint8_t power54[32]    = {0x5b,0x0d,0x7f,0x20,0x9b,0x1d,0x10,0x29,0x88,0x68,0x83,0xb9,0x97,0xb5,0x73,0x7e,0x08,0x88,0x84,0xdc,0x09,0x87,0x5e,0x78,0x5b,0x6f,0xc6,0x96,0x97,0x3c,0xa8,0x9f};
    mont256_from_bytes(&ctx, base, base54);
    uint256_from_bytes(exponent, exponent54);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power54, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base55[32]     = {0x78,0xc3,0x64,0xb8,0x13,0x6c,0xf8,0xd9,0xd8,0x05,0x74,0xb4,0x17,0xb0,0x71,0x25,0x68,0x39,0x30,0xef,0x7e,0x52,0x1b,0xcb,0xba,0x52,0x89,0x54,0x5d,0xe4,0x9f,0xf9};
    std::uint8_t exponent55[32] = {0xda,0x76,0x41,0x02,0xfb,0x69,0x6a,0x1f,0x47,0x9d,0x2c,0xab,0xa3,0x51,0xae,0x44,0xe2,0x2e,0x3c,0x76,0xd4,0x32,0x2b,0xb0,0x54,0xc6,0x9e,0xef,0x5c,0x76,0xb8,0x21};
    std::uint8_t power55[32]    = {0x14,0xf9,0xaa,0x84,0xcc,0x2e,0x0b,0xe2,0x90,0xda,0xc6,0x66,0x16,0x4c,0x25,0xfe,0xc5,0xd5,0x56,0xce,0xb7,0x18,0xb1,0x1e,0x5d,0x48,0xa7,0xe6,0xbc,0x22,0xd1,0x28};
    mont256_from_bytes(&ctx, base, base55);
    uint256_from_bytes(exponent, exponent55);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power55, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base56[32]     = {0x15,0xde,0xbf,0x67,0x16,0xa1,0x7f,0x96,0x61,0xbd,0x10,0x7a,0xd9,0x04,0xfc,0xd4,0xe4,0xd6,0xfc,0xc0,0xb7,0xf9,0x5b,0x68,0x95,0x2e,0xc5,0x86,0x97,0x87,0xf8,0xf9};
    std::uint8_t exponent56[32] = {0x75,0x47,0x2e,0x64,0xf1,0x76,0x35,0xa0,0xe1,0x04,0xec,0x37,0x8b,0x25,0xde,0x7c,0x65,0x96,0x3f,0x76,0x04,0xa4,0x6b,0x9d,0x32,0x5b,0x3f,0x58,0x1b,0x7c,0x0d,0x8d};
    std::uint8_t power56[32]    = {0x9b,0x9d,0xa6,0xd9,0xeb,0x89,0x80,0xb5,0x85,0x85,0xc4,0x86,0x7d,0xd5,0x11,0x4a,0x81,0xf1,0x44,0xde,0x88,0x0b,0x5b,0x29,0x34,0x5a,0xc4,0xf4,0xb4,0xf3,0x0d,0x2a};
    mont256_from_bytes(&ctx, base, base56);
    uint256_from_bytes(exponent, exponent56);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power56, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base57[32]     = {0x46,0xc4,0x51,0x81,0x42,0xf4,0x4d,0x7d,0x53,0xd3,0x45,0x97,0xfe,0x72,0x6c,0x4b,0x31,0x5b,0x61,0x94,0x2a,0xdd,0x91,0x86,0x45,0x30,0xb1,0x38,0x5d,0x3b,0x77,0x5d};
    std::uint8_t exponent57[32] = {0xba,0xc8,0x65,0xc0,0xb6,0xc3,0xfa,0x9f,0xc6,0x83,0x7d,0x22,0xc8,0x66,0x50,0x11,0x92,0x48,0xbc,0x9d,0x5a,0x99,0x2b,0xa3,0xcc,0x7f,0x9b,0xb1,0x68,0x73,0xec,0x51};
    std::uint8_t power57[32]    = {0x05,0x30,0x38,0x58,0xc5,0xc1,0x3f,0xc0,0xe2,0x79,0xb9,0x26,0x26,0x7e,0x8e,0xbe,0xef,0x24,0xe1,0x51,0x17,0x36,0x00,0x2b,0xa3,0x10,0x71,0x50,0x06,0xa8,0xee,0xb9};
    mont256_from_bytes(&ctx, base, base57);
    uint256_from_bytes(exponent, exponent57);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power57, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base58[32]     = {0xd3,0x00,0x4c,0xd4,0x66,0xab,0xd2,0xe0,0x79,0x89,0x75,0x17,0xdf,0xde,0x42,0x42,0xa4,0x6b,0x18,0xbc,0x7d,0x8f,0x46,0x07,0xbe,0xba,0x87,0xf8,0x6c,0x08,0xbf,0x70};
    std::uint8_t exponent58[32] = {0x03,0xb6,0x28,0x7c,0x53,0x2c,0xce,0xf3,0xd9,0xa8,0xf6,0xee,0xc8,0x77,0x31,0xb3,0xf9,0x79,0xc9,0xc5,0x69,0x3e,0x75,0x79,0xfb,0x1f,0xeb,0x78,0x05,0xe4,0x1b,0x69};
    std::uint8_t power58[32]    = {0x84,0x28,0x59,0x58,0x75,0x72,0x45,0xd0,0x1e,0x94,0x47,0x25,0x85,0xd1,0xbe,0xdb,0x91,0xc8,0x3d,0x17,0xde,0xef,0x4a,0x54,0xed,0x7b,0x35,0x83,0x6c,0x17,0x66,0x4f};
    mont256_from_bytes(&ctx, base, base58);
    uint256_from_bytes(exponent, exponent58);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power58, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base59[32]     = {0xf4,0x4c,0xb2,0xef,0xb1,0x73,0x25,0xac,0xe6,0xb5,0x4d,0x8e,0x89,0x48,0x86,0x22,0x87,0x69,0x4b,0x88,0x62,0xeb,0x16,0xd6,0x04,0xda,0xae,0x4d,0x87,0x66,0xf0,0x91};
    std::uint8_t exponent59[32] = {0xd0,0x32,0x23,0x9b,0xa9,0xae,0x7b,0xbd,0x2a,0xa9,0x34,0xa5,0xe1,0x20,0xe5,0x17,0xf4,0x93,0x43,0x01,0x64,0x63,0x69,0x77,0x11,0xe0,0x96,0x1a,0x52,0xbe,0x23,0x28};
    std::uint8_t power59[32]    = {0xc1,0x43,0xda,0x64,0xf6,0x9c,0x59,0x51,0xc4,0xbf,0xc8,0x64,0x4f,0x7b,0x78,0xb4,0xbc,0x1b,0xd3,0x34,0xc2,0x5f,0x14,0xea,0xec,0xf8,0x9e,0x99,0x8d,0xf9,0xfa,0x83};
    mont256_from_bytes(&ctx, base, base59);
    uint256_from_bytes(exponent, exponent59);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power59, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base60[32]     = {0xaf,0x6b,0x6d,0x21,0x53,0x91,0xe3,0xee,0x14,0xac,0x51,0xd6,0x8f,0xf2,0x67,0x1f,0xf1,0x00,0x4d,0x28,0xec,0xf5,0x0e,0xbb,0x56,0x65,0xf2,0x5a,0x6a,0x1d,0xe8,0x6d};
    std::uint8_t exponent60[32] = {0xf8,0x68,0xbd,0x6a,0x37,0xc4,0x4b,0xfc,0x4e,0xd6,0x2c,0x76,0x0d,0xec,0x93,0xaf,0x42,0xc8,0xc1,0x83,0x44,0x49,0x6c,0x28,0xb2,0x61,0x55,0xf8,0x0d,0x42,0x35,0xeb};
    std::uint8_t power60[32]    = {0xcc,0x7c,0xe9,0xa0,0x46,0x3a,0xdd,0x62,0xa3,0x68,0x09,0x55,0xa4,0x6d,0xd3,0xc2,0x51,0x72,0x54,0xbe,0x52,0xa2,0x4f,0x59,0x24,0xc1,0x56,0x4e,0xaf,0xff,0xd4,0xc6};
    mont256_from_bytes(&ctx, base, base60);
    uint256_from_bytes(exponent, exponent60);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power60, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base61[32]     = {0x3a,0xb7,0x8f,0x1d,0xdf,0xff,0x4e,0x9b,0xd2,0x9d,0x47,0x45,0xcb,0xf0,0xd8,0x56,0xea,0x75,0x97,0x9f,0x2d,0xda,0x97,0x31,0x15,0xb1,0xd2,0xbf,0x45,0x29,0xff,0x06};
    std::uint8_t exponent61[32] = {0x04,0x4e,0x92,0xf1,0x6a,0x22,0xae,0x61,0xf3,0xc6,0x0d,0x49,0x42,0x02,0x78,0xcf,0x52,0x6d,0x71,0xd3,0x6e,0x52,0x55,0xf4,0xa3,0xdc,0xcd,0x64,0xce,0xdd,0xc6,0x85};
    std::uint8_t power61[32]    = {0x4a,0x33,0xf9,0xaf,0x5d,0x9c,0x45,0x51,0xc6,0x88,0xa1,0x52,0xa9,0x14,0x65,0x56,0xca,0xd0,0xca,0x39,0xc3,0x27,0x84,0x1d,0x28,0xfe,0x60,0x31,0xbb,0xe1,0x3b,0xc1};
    mont256_from_bytes(&ctx, base, base61);
    uint256_from_bytes(exponent, exponent61);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power61, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base62[32]     = {0x53,0x36,0x17,0x7c,0x98,0xa6,0xfe,0x22,0xb7,0xea,0x40,0xc4,0x2b,0xc1,0x4a,0xe1,0x9e,0xf4,0xd6,0x32,0x6b,0x5d,0x85,0x9d,0x39,0x48,0x90,0x76,0xdd,0x59,0xf7,0x84};
    std::uint8_t exponent62[32] = {0x12,0x77,0xda,0x1b,0xbd,0xb9,0x3a,0xe2,0x67,0xf3,0x69,0xf9,0x6a,0x36,0x57,0xe8,0x32,0x7e,0xb6,0xac,0x83,0xf0,0x88,0xe1,0x3d,0xfe,0xb0,0x90,0x85,0x3f,0x08,0x27};
    std::uint8_t power62[32]    = {0xd3,0x8a,0xbf,0x30,0x59,0xd9,0x1a,0xa0,0x53,0x11,0x86,0x18,0x1c,0xcd,0xfd,0x5d,0x00,0xc5,0xb9,0x31,0x43,0x3a,0x2e,0xa0,0x66,0x2e,0x1e,0x2a,0x34,0xb3,0x3d,0xcd};
    mont256_from_bytes(&ctx, base, base62);
    uint256_from_bytes(exponent, exponent62);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power62, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base63[32]     = {0x6f,0x1c,0xe3,0x94,0x13,0x52,0xe9,0x1b,0xe1,0x8f,0x6a,0x66,0x5f,0xe9,0xef,0xde,0x8b,0xa5,0xdd,0x89,0x2e,0x50,0x70,0x98,0x9e,0xf6,0x79,0xb0,0xb3,0xa3,0x96,0xe0};
    std::uint8_t exponent63[32] = {0x81,0x9d,0x24,0x5b,0x59,0xee,0xab,0x70,0x36,0x55,0x9d,0x66,0x31,0x30,0x50,0x0b,0x0c,0x0f,0xb2,0x9c,0xae,0xd5,0x95,0x37,0x61,0x19,0xd3,0x6e,0xa2,0xff,0x77,0xae};
    std::uint8_t power63[32]    = {0xba,0x44,0xe7,0xbe,0x22,0x28,0x78,0xb6,0x15,0xd0,0x4a,0x7f,0xb6,0xc9,0x3d,0xaf,0x04,0x5f,0x61,0x24,0x0f,0x8a,0x1b,0x82,0x2c,0xaf,0x54,0xe6,0xd3,0x22,0x48,0x7d};
    mont256_from_bytes(&ctx, base, base63);
    uint256_from_bytes(exponent, exponent63);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power63, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base64[32]     = {0x51,0x64,0xd0,0xff,0x5c,0x46,0x10,0x1c,0x9e,0xdd,0x3f,0x1e,0x92,0x1a,0x84,0x7e,0x66,0x4b,0x2b,0x86,0xb8,0x8a,0x95,0x6c,0xd9,0xf1,0x19,0xf8,0x27,0x43,0xa9,0xd6};
    std::uint8_t exponent64[32] = {0xcc,0x4b,0x54,0x9b,0x84,0xe3,0x9e,0x5e,0x56,0x29,0xe5,0xb0,0xd9,0x2f,0x47,0xdf,0x2c,0x68,0x3a,0x3f,0xbe,0x21,0x43,0x2d,0xc1,0xe2,0xb6,0x4c,0x25,0x53,0xe1,0xb7};
    std::uint8_t power64[32]    = {0x0f,0x1f,0xaf,0xb1,0x70,0x6b,0x05,0x41,0x07,0x45,0x64,0xe3,0x79,0xaf,0x90,0xa9,0xa0,0xa6,0x49,0x1a,0x9e,0x8d,0xff,0x1b,0x43,0x21,0xd7,0x29,0xcc,0x6a,0xe7,0x38};
    mont256_from_bytes(&ctx, base, base64);
    uint256_from_bytes(exponent, exponent64);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power64, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base65[32]     = {0x75,0x41,0xbc,0xd9,0xfa,0xcb,0x72,0x17,0x65,0x7f,0x97,0x57,0xee,0x5b,0xe0,0x11,0xb2,0xc9,0x1c,0xd4,0x30,0x75,0x81,0xfe,0xe0,0x2f,0x90,0x2b,0x0f,0x36,0x74,0x1b};
    std::uint8_t exponent65[32] = {0x0d,0xe9,0x0c,0x66,0xb0,0x4c,0xc7,0x65,0x8c,0xf5,0x03,0x70,0xc3,0x48,0xa7,0xd3,0x61,0xab,0x7e,0xa5,0x99,0x20,0xc0,0xdf,0x75,0x5d,0xc0,0x76,0x68,0x44,0x7c,0xbc};
    std::uint8_t power65[32]    = {0xdf,0x62,0x3e,0x31,0xce,0x65,0x2d,0x9d,0xf6,0x68,0x95,0x54,0xd4,0x70,0xb5,0x20,0xf5,0xfb,0x4a,0xc8,0x6d,0xf1,0x8c,0x79,0xe7,0x22,0x99,0x7b,0x06,0x13,0x19,0xc0};
    mont256_from_bytes(&ctx, base, base65);
    uint256_from_bytes(exponent, exponent65);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power65, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base66[32]     = {0x63,0x52,0xd3,0x0f,0xdf,0x88,0x47,0x36,0x87,0x10,0x7a,0xe2,0x31,0xa1,0xb8,0xd3,0x84,0x6c,0xf7,0x92,0xac,0xe3,0x34,0xc9,0x70,0xfa,0xa7,0xef,0x16,0x16,0x33,0x2c};
    std::uint8_t exponent66[32] = {0x38,0x45,0x88,0xf1,0x4e,0x9b,0x6a,0x6d,0xc6,0xa0,0xf3,0x69,0xfe,0xfb,0xe8,0xf2,0x64,0x16,0x38,0x76,0x88,0xe1,0xb6,0xc8,0xcc,0x77,0x78,0x35,0x1f,0xfb,0xcb,0xa2};
    std::uint8_t power66[32]    = {0x6b,0xa1,0xd8,0x1d,0xd5,0x3e,0x67,0x12,0x8f,0xc2,0x98,0x6e,0xd1,0xcd,0x29,0x20,0x6c,0x89,0x36,0x2b,0x88,0xdb,0xf8,0x2d,0x55,0xbc,0x94,0x91,0xdf,0xa9,0xb3,0x9d};
    mont256_from_bytes(&ctx, base, base66);
    uint256_from_bytes(exponent, exponent66);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power66, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base67[32]     = {0x5a,0x8f,0x9c,0x18,0xf9,0x70,0xad,0xd0,0x12,0xd2,0x56,0x9d,0x0a,0x37,0x5a,0x9b,0x63,0x1e,0x5a,0xf5,0xbc,0x1e,0x99,0x36,0x8d,0x96,0x21,0xd8,0x66,0x5a,0x6a,0x05};
    std::uint8_t exponent67[32] = {0xeb,0xdb,0xaa,0x77,0xda,0x06,0xd5,0x40,0xcf,0x4b,0xc4,0xed,0x40,0x1d,0x54,0x11,0x73,0x9c,0xfd,0x07,0xed,0xd7,0x99,0xff,0x97,0xf8,0xd3,0xc1,0xbe,0x6e,0xb2,0x8a};
    std::uint8_t power67[32]    = {0x4e,0x34,0x14,0x4b,0xce,0xd9,0x36,0x72,0x84,0xba,0x14,0x60,0x22,0xe0,0xef,0x8c,0xd8,0x0e,0xa7,0x83,0x92,0x0e,0x6d,0x3e,0x69,0x51,0x7b,0x50,0xb4,0x5d,0x0f,0xbd};
    mont256_from_bytes(&ctx, base, base67);
    uint256_from_bytes(exponent, exponent67);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power67, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base68[32]     = {0x51,0xa5,0xae,0x96,0x18,0x40,0x10,0x77,0xa7,0xb6,0xd2,0x80,0xc8,0x59,0x47,0x57,0x3f,0xe5,0xc1,0xc2,0xfa,0x46,0x12,0x7e,0x9e,0x95,0x28,0x76,0x37,0x35,0x3b,0x68};
    std::uint8_t exponent68[32] = {0x2b,0xe7,0x7c,0x99,0xcd,0xaf,0x54,0x1f,0xab,0xae,0x40,0x32,0xbf,0x7c,0x59,0x76,0x9b,0x66,0xec,0x0c,0xc2,0x7d,0x19,0xa4,0x21,0x5a,0x54,0x4c,0x72,0xe5,0xe2,0x02};
    std::uint8_t power68[32]    = {0x9c,0x53,0xe8,0x18,0xd0,0xb2,0xc1,0xcc,0xcd,0x88,0x5d,0x19,0x67,0xe1,0xd7,0x2c,0xc9,0xa5,0xec,0xe0,0x99,0x09,0x88,0x81,0x04,0x00,0xee,0x80,0x72,0x4d,0x0d,0x82};
    mont256_from_bytes(&ctx, base, base68);
    uint256_from_bytes(exponent, exponent68);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power68, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base69[32]     = {0x26,0x1a,0x2a,0x18,0x38,0x3c,0x54,0x42,0x54,0x61,0xa2,0xfc,0x39,0xf2,0x53,0x93,0xcd,0xa8,0xea,0x87,0xfc,0xd8,0x0a,0xc6,0x0c,0xed,0xdb,0x0d,0xfb,0xb8,0xcd,0x80};
    std::uint8_t exponent69[32] = {0x3b,0xa9,0xe1,0x20,0x93,0x1d,0xd7,0x77,0x69,0xf9,0xb6,0x6b,0x23,0x4f,0xe4,0xf2,0xae,0x01,0x01,0xf6,0x9d,0xe6,0x8f,0x59,0x80,0xa9,0x59,0xbe,0x67,0x08,0x5c,0x7b};
    std::uint8_t power69[32]    = {0xde,0x71,0x69,0x7f,0x0c,0x77,0x7f,0xa5,0xc6,0x6e,0x46,0xf5,0x6b,0x73,0x5f,0xfb,0xad,0xf3,0x4b,0x52,0xf5,0xe4,0x65,0xfc,0xd2,0xe4,0xbb,0x66,0x93,0xcd,0x09,0x62};
    mont256_from_bytes(&ctx, base, base69);
    uint256_from_bytes(exponent, exponent69);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power69, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base70[32]     = {0x18,0xe8,0x07,0xf6,0x03,0x38,0xbd,0x38,0xad,0xc0,0xf4,0x47,0x0b,0xd1,0xc0,0xdf,0x0f,0xd3,0x35,0x7a,0xe0,0xfe,0x41,0x81,0x72,0x8c,0x24,0x0d,0x35,0xbf,0xd8,0xdc};
    std::uint8_t exponent70[32] = {0x29,0xe6,0x55,0xd8,0x9d,0x3f,0x45,0xca,0x2b,0xbb,0xa4,0xe3,0x05,0x79,0xfa,0x20,0xdb,0x92,0xe3,0xfa,0x19,0x46,0xe1,0x03,0x67,0xf8,0xbf,0xda,0x5a,0xc8,0x69,0x88};
    std::uint8_t power70[32]    = {0x7c,0x39,0x99,0x10,0x9b,0x00,0x14,0xeb,0xd4,0x4e,0x61,0x68,0xc8,0x21,0x1c,0x79,0x3e,0xc6,0x05,0x1a,0xb2,0x89,0xfd,0x73,0x4e,0x1f,0x0c,0x95,0x09,0xbe,0x21,0x16};
    mont256_from_bytes(&ctx, base, base70);
    uint256_from_bytes(exponent, exponent70);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power70, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base71[32]     = {0x64,0x02,0xd3,0xa2,0x06,0x41,0x19,0x2e,0x6f,0x2a,0xd3,0x7e,0xe2,0x6e,0x4b,0xec,0x95,0x23,0x4c,0x2e,0x0b,0x08,0xd7,0x01,0x8f,0xcf,0x9d,0xe6,0x45,0xe4,0x4c,0x4c};
    std::uint8_t exponent71[32] = {0xf3,0xe1,0x02,0x7d,0x7a,0xdb,0x8a,0xcb,0xc2,0x9e,0x91,0xae,0x59,0xbb,0x50,0x3a,0xfb,0xee,0x94,0xc9,0x7e,0x58,0x50,0x79,0xe0,0x05,0x90,0x4f,0xe5,0x49,0xfa,0x87};
    std::uint8_t power71[32]    = {0x1a,0x3e,0x76,0x16,0x9e,0xbe,0xa8,0xaf,0xe5,0xfd,0x0f,0x3c,0xb1,0x51,0x09,0x6f,0x72,0x82,0x83,0x56,0xc1,0x71,0x3c,0x99,0x82,0x8c,0xe0,0x4a,0x01,0x35,0x20,0x32};
    mont256_from_bytes(&ctx, base, base71);
    uint256_from_bytes(exponent, exponent71);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power71, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base72[32]     = {0xb1,0xab,0xe1,0x7c,0x21,0x5d,0xbb,0x72,0x54,0xa3,0x3b,0x52,0x61,0x27,0x08,0x18,0x67,0x75,0xde,0x1b,0x4f,0x60,0xad,0x9f,0x8c,0xac,0x3a,0xe8,0x31,0x82,0x40,0xdd};
    std::uint8_t exponent72[32] = {0xc9,0xd4,0xc8,0x7a,0x8c,0x5b,0x2f,0x27,0x4d,0xd2,0x3e,0x6a,0xb6,0x44,0x2a,0xff,0xae,0x93,0x6a,0x34,0x21,0x27,0xcf,0x83,0xb7,0x4d,0x64,0x8c,0x74,0xa6,0x82,0xa3};
    std::uint8_t power72[32]    = {0xed,0xab,0x45,0x3b,0x67,0xeb,0xd8,0x9e,0x41,0x90,0xf2,0x2d,0xde,0x0c,0x4a,0xdd,0xcd,0x25,0xcf,0x3b,0x7d,0x47,0x2a,0x83,0xd4,0xae,0xcc,0x08,0x99,0xa4,0xc2,0xbc};
    mont256_from_bytes(&ctx, base, base72);
    uint256_from_bytes(exponent, exponent72);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power72, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base73[32]     = {0x7f,0x9e,0x1c,0x9e,0x68,0xab,0xb0,0x8f,0x0a,0x17,0xb7,0xa5,0x97,0x90,0x23,0x3c,0xf9,0xfd,0xd1,0x59,0x45,0xe1,0x91,0xeb,0xaa,0xd5,0x80,0xca,0xa4,0x7a,0x8d,0x1e};
    std::uint8_t exponent73[32] = {0x58,0x24,0x6d,0x74,0x27,0x30,0xac,0x40,0x30,0x92,0xaf,0x32,0x2f,0x28,0xd0,0xfe,0xc3,0xe2,0x34,0xaf,0x09,0x7b,0x7f,0x50,0xed,0xb5,0xa2,0x42,0x95,0xd0,0xcf,0x42};
    std::uint8_t power73[32]    = {0xd3,0xbd,0x6e,0xd0,0x1d,0x6f,0x1b,0x3d,0xd9,0xfe,0xfe,0x33,0xa6,0xca,0xb0,0x0e,0x14,0x5c,0x67,0x50,0x69,0xc3,0x65,0xea,0xe3,0xf9,0xe9,0x4d,0xdf,0x7c,0xae,0xdc};
    mont256_from_bytes(&ctx, base, base73);
    uint256_from_bytes(exponent, exponent73);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power73, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base74[32]     = {0x29,0x5e,0xdf,0xc6,0xdf,0xef,0x05,0x33,0x0f,0xff,0xb5,0x2a,0x62,0x49,0xb0,0x5a,0xf7,0x24,0x25,0x93,0x18,0x0b,0x6b,0x7c,0xc6,0x32,0xdd,0xa8,0x47,0x1d,0x61,0xf2};
    std::uint8_t exponent74[32] = {0x42,0x54,0xdb,0xee,0xc6,0x36,0x47,0xfc,0x1e,0xae,0xac,0xb4,0xc7,0x1f,0x14,0x63,0x02,0x36,0xde,0x25,0x77,0x82,0x86,0xfe,0xd0,0x13,0xee,0xa4,0x28,0xbb,0x04,0x1d};
    std::uint8_t power74[32]    = {0xf6,0x98,0xe6,0xf2,0xad,0x7f,0xe8,0x95,0xc9,0xdf,0x45,0xaf,0xde,0x20,0x39,0x5b,0xde,0x22,0x91,0x65,0xa6,0x00,0xce,0x11,0x4d,0x38,0xf2,0x3c,0x07,0xb2,0x6a,0x3f};
    mont256_from_bytes(&ctx, base, base74);
    uint256_from_bytes(exponent, exponent74);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power74, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base75[32]     = {0xc2,0x90,0x52,0xf4,0xdb,0x94,0xb5,0x21,0x11,0xb5,0xeb,0xa8,0x94,0x18,0xe9,0x5e,0x5e,0xa5,0x35,0xc3,0xfa,0x57,0x2c,0x8b,0x91,0xbe,0xe4,0x6a,0x22,0x85,0x90,0x90};
    std::uint8_t exponent75[32] = {0xbf,0x9e,0x48,0x28,0x8e,0x02,0x36,0x15,0x42,0xa1,0xe7,0x2e,0xb9,0xd1,0x8c,0x63,0xab,0x18,0xc4,0x4c,0x09,0xc0,0xe2,0xec,0xba,0x82,0x44,0x3e,0xd1,0xb3,0x1c,0xfe};
    std::uint8_t power75[32]    = {0xf1,0x7e,0x60,0x59,0xb3,0x9c,0xb0,0x9e,0xf1,0xcb,0x0a,0xe6,0x8d,0xee,0x78,0xbf,0x38,0x35,0x3f,0xa2,0x01,0x35,0x01,0x85,0xef,0x8f,0x45,0x8b,0x5c,0xe8,0x91,0x59};
    mont256_from_bytes(&ctx, base, base75);
    uint256_from_bytes(exponent, exponent75);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power75, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base76[32]     = {0x69,0x9b,0xb0,0x17,0x92,0x98,0x58,0x54,0xb4,0x4f,0xc7,0x82,0xd7,0xd1,0x0f,0xd7,0x45,0xcd,0x40,0x7e,0xe8,0x1a,0x95,0xdb,0x66,0xa6,0x36,0x9d,0xc2,0x15,0xc5,0xc4};
    std::uint8_t exponent76[32] = {0x9f,0xde,0x2c,0x35,0xdd,0x31,0xb6,0x4a,0x58,0x62,0xdd,0xa3,0x40,0x04,0x3c,0x2a,0xb8,0x95,0x25,0x26,0xd5,0x71,0x62,0xad,0x33,0x9f,0xea,0xa2,0x6f,0xd5,0xf3,0x4b};
    std::uint8_t power76[32]    = {0x52,0x59,0x57,0xad,0x9a,0x83,0x76,0x46,0xf1,0x38,0x95,0x1a,0xa5,0xe7,0x24,0xe3,0x57,0xe4,0x7d,0xba,0x3d,0x03,0xe8,0x9b,0x03,0xdd,0x6c,0x7a,0x88,0x80,0xc1,0x01};
    mont256_from_bytes(&ctx, base, base76);
    uint256_from_bytes(exponent, exponent76);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power76, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base77[32]     = {0xbf,0xe2,0xd9,0x78,0xc9,0x33,0x6f,0x2e,0xa9,0x74,0x7e,0x8a,0x0b,0x89,0xed,0x04,0xba,0x14,0xcc,0xb5,0x87,0xf2,0x1e,0x4e,0x9b,0xb6,0x04,0x16,0x6e,0xf9,0xd5,0x75};
    std::uint8_t exponent77[32] = {0x74,0xa0,0x1a,0xfb,0x49,0x42,0xa1,0x9b,0x99,0x2b,0x75,0x5a,0x88,0x7b,0x84,0xf7,0xc4,0x0b,0xb4,0x8c,0xd9,0x4f,0xa1,0xf3,0xb0,0x42,0x89,0xa2,0x1a,0x90,0xd8,0xa1};
    std::uint8_t power77[32]    = {0xf1,0x00,0xdc,0x90,0xb7,0x26,0xe2,0xf5,0x46,0x3d,0x7c,0xcc,0x72,0x7e,0x93,0x79,0x48,0x08,0x7b,0xfd,0x05,0xa5,0xc2,0x4e,0x03,0x41,0x13,0x9f,0xf7,0xdf,0x7b,0x70};
    mont256_from_bytes(&ctx, base, base77);
    uint256_from_bytes(exponent, exponent77);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power77, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base78[32]     = {0x1b,0x73,0xbb,0x9f,0x43,0x9d,0xfa,0x10,0x81,0xbd,0x6c,0x8b,0xad,0xaa,0x7d,0x58,0x2e,0x41,0xc8,0x79,0x10,0x6f,0xd9,0xcc,0xd9,0xe1,0xb5,0xb5,0x3c,0x8c,0x8e,0xc4};
    std::uint8_t exponent78[32] = {0xf0,0x1d,0xc8,0x3a,0xd3,0x04,0x39,0xb3,0x7c,0x86,0x84,0x8b,0x82,0xbc,0x90,0xcc,0x54,0x8c,0x7c,0x96,0x4e,0x39,0xf8,0xe8,0xda,0xf4,0x83,0xf6,0x1d,0x12,0x0a,0x90};
    std::uint8_t power78[32]    = {0x99,0x1f,0x1c,0x15,0x1e,0xba,0x61,0xd1,0x97,0x8f,0x04,0x20,0x7f,0x21,0x6b,0x27,0x99,0x96,0x3f,0xe0,0x91,0x86,0x89,0x57,0xb0,0x9b,0xff,0xaa,0xe7,0x08,0x82,0x3d};
    mont256_from_bytes(&ctx, base, base78);
    uint256_from_bytes(exponent, exponent78);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power78, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base79[32]     = {0x70,0x16,0x3f,0x06,0x10,0x89,0x03,0x66,0x72,0x5f,0x04,0x89,0x61,0xa3,0xe0,0x6c,0x95,0xd3,0xf8,0xff,0x34,0x1a,0x90,0xe7,0xd0,0x12,0xe5,0xb6,0x63,0xbe,0xc5,0x83};
    std::uint8_t exponent79[32] = {0xe7,0xea,0xb7,0xc6,0x38,0x8d,0x76,0x31,0xa2,0xcd,0x5e,0xa9,0xa3,0x12,0x46,0xd3,0x4b,0x39,0x0f,0x1c,0x62,0x95,0x0e,0x26,0x8c,0x1b,0x51,0x72,0x73,0x3a,0x21,0xac};
    std::uint8_t power79[32]    = {0xb1,0xea,0x67,0xd4,0x12,0x50,0xe8,0x59,0xa2,0x4f,0x8b,0x0b,0xd2,0x5a,0x72,0x69,0x98,0x00,0x33,0xc3,0x06,0x20,0x04,0x9f,0xa1,0x9a,0xc4,0x85,0xc2,0x1c,0xd1,0xb1};
    mont256_from_bytes(&ctx, base, base79);
    uint256_from_bytes(exponent, exponent79);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power79, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base80[32]     = {0xdc,0x97,0x3b,0x57,0x32,0x83,0x5e,0x1c,0x9c,0x70,0xb8,0xcc,0x19,0x3f,0x1a,0x3d,0x20,0x26,0xf1,0x56,0xc5,0xb0,0x93,0xeb,0xb1,0x94,0x2a,0xfc,0x28,0xd4,0xc2,0xc5};
    std::uint8_t exponent80[32] = {0x00,0xbd,0x85,0xd0,0x76,0xad,0x64,0xaf,0x15,0xae,0xc8,0x1d,0xf8,0x59,0xc0,0x4b,0x3a,0x3c,0x46,0x5a,0xe5,0x59,0x1b,0x7a,0xd7,0x47,0x39,0x2e,0x5b,0xaf,0x57,0x3a};
    std::uint8_t power80[32]    = {0x62,0x21,0x1a,0x28,0xf4,0xfa,0x49,0x04,0x96,0xd9,0x5c,0x42,0xb5,0x78,0xd3,0x17,0x87,0xc6,0xd1,0xe4,0xb9,0x4e,0x4b,0xd1,0x2f,0x81,0xe5,0xc7,0xac,0x98,0x76,0x00};
    mont256_from_bytes(&ctx, base, base80);
    uint256_from_bytes(exponent, exponent80);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power80, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base81[32]     = {0x09,0x3f,0xda,0x7e,0xca,0x39,0x35,0x83,0x33,0x52,0xc3,0xf8,0x98,0x7b,0x7f,0x43,0x6e,0x5e,0x59,0x9c,0x84,0x83,0x97,0xa6,0x96,0xc5,0x9f,0x36,0x4e,0xab,0x6b,0xb1};
    std::uint8_t exponent81[32] = {0xb2,0x23,0x0f,0x0a,0x0f,0x2f,0x08,0xb3,0x6a,0x52,0xe0,0x38,0xd1,0x6c,0x76,0xe6,0x20,0xd0,0x55,0x2a,0x6c,0x0c,0xb0,0x87,0x02,0xa3,0x67,0xd3,0xc9,0x4c,0xbb,0xe3};
    std::uint8_t power81[32]    = {0xf3,0x1c,0x2f,0x20,0x8c,0xd9,0xc1,0xf0,0x65,0xa4,0xb7,0xf5,0xde,0xbe,0xea,0xec,0x85,0x94,0x1a,0xe0,0x63,0x6b,0x6d,0xc1,0x15,0x28,0xe8,0x98,0xb0,0xc8,0x78,0xc1};
    mont256_from_bytes(&ctx, base, base81);
    uint256_from_bytes(exponent, exponent81);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power81, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base82[32]     = {0xec,0x9a,0x21,0xf7,0x96,0xa8,0xb6,0x79,0x74,0x94,0xe2,0xf6,0xcb,0x2d,0x3c,0xcd,0x33,0xd5,0xc6,0x56,0xc6,0x36,0x7a,0x40,0xcd,0xf2,0x2e,0xd6,0x0e,0x35,0xda,0xa2};
    std::uint8_t exponent82[32] = {0xad,0x3f,0xbb,0xf0,0xf3,0xe6,0xd1,0x8d,0x03,0x9d,0xf7,0x3f,0xd7,0xc9,0xe7,0x28,0x3c,0x99,0x69,0x2e,0x5d,0xb7,0xfd,0x1e,0x64,0x47,0x94,0x8b,0x1b,0xe2,0x2e,0xcf};
    std::uint8_t power82[32]    = {0x36,0xe6,0xd3,0x91,0x23,0xf3,0xb6,0x1a,0x74,0x04,0xca,0xe6,0x8d,0xb9,0xf8,0x16,0x82,0xc0,0xf4,0xe0,0x2f,0x00,0xad,0xc3,0x2d,0xa5,0xee,0xa7,0x4d,0x25,0xed,0x89};
    mont256_from_bytes(&ctx, base, base82);
    uint256_from_bytes(exponent, exponent82);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power82, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base83[32]     = {0x4b,0x6f,0x5b,0xa9,0x75,0x50,0xe4,0x48,0xa7,0xba,0xe9,0xcf,0x3b,0x60,0xb2,0x01,0x12,0xc5,0x82,0x98,0x06,0x7d,0xaf,0xf6,0x7c,0x23,0x1e,0x19,0x67,0x64,0x42,0x8b};
    std::uint8_t exponent83[32] = {0x56,0xe5,0x3c,0x47,0x9d,0x85,0x4d,0x9f,0xe4,0x65,0xd3,0x4a,0xa3,0x42,0xd4,0x3b,0x15,0x91,0x13,0xe6,0x29,0x49,0xa4,0xd7,0x17,0x35,0x4f,0x96,0xbd,0x6b,0xd1,0x87};
    std::uint8_t power83[32]    = {0xca,0xcf,0xad,0x0d,0xef,0x1b,0x7d,0xa4,0xc8,0x73,0x98,0x26,0x29,0xa2,0x14,0xfd,0x7c,0xbf,0xec,0x3d,0x36,0xbf,0x7b,0x26,0xfa,0x89,0xd3,0xc6,0x82,0x77,0x09,0xeb};
    mont256_from_bytes(&ctx, base, base83);
    uint256_from_bytes(exponent, exponent83);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power83, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base84[32]     = {0x78,0x85,0xa3,0xda,0xf1,0x7a,0x77,0x7c,0x1e,0x47,0x90,0x82,0x81,0x9c,0xdb,0x49,0x5c,0xb7,0xb6,0x00,0xfc,0xae,0xdb,0x97,0x77,0x53,0xf2,0x74,0xda,0x39,0x17,0x6d};
    std::uint8_t exponent84[32] = {0xdf,0x01,0xaf,0x5a,0xfe,0x0a,0x48,0x6f,0x50,0xf5,0x45,0xf2,0x90,0x49,0x8a,0x59,0x0b,0x25,0x0a,0x76,0x38,0x26,0x88,0x02,0xdc,0xf4,0xe9,0xcd,0xed,0x8d,0xde,0x4c};
    std::uint8_t power84[32]    = {0xd5,0x78,0x19,0x4d,0x17,0xca,0xc7,0xd2,0xd1,0xca,0x7d,0x99,0x30,0x46,0xd4,0x8f,0x7a,0x33,0x1a,0xea,0xe2,0xec,0x5e,0xa0,0xc6,0x2a,0xe0,0x08,0xbf,0x27,0x22,0x6e};
    mont256_from_bytes(&ctx, base, base84);
    uint256_from_bytes(exponent, exponent84);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power84, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base85[32]     = {0x61,0x41,0x9a,0xc6,0x5f,0x4f,0x8e,0x90,0x0a,0x75,0x23,0x3c,0x51,0x87,0x01,0x95,0x0e,0xfe,0xea,0x7d,0x87,0x8b,0x6e,0x09,0x9e,0xca,0x81,0x99,0x53,0xbe,0x77,0xec};
    std::uint8_t exponent85[32] = {0xf4,0xce,0xf2,0x9e,0xba,0xfe,0x33,0xc8,0xbd,0xd6,0x7f,0xbb,0x7a,0x75,0x9d,0xeb,0xe8,0x4c,0x0f,0xd7,0x24,0x71,0x94,0x29,0xc6,0xa8,0xeb,0x85,0x11,0xa8,0x5d,0x09};
    std::uint8_t power85[32]    = {0x7e,0x33,0x7e,0x44,0xab,0xe8,0x45,0x5b,0x78,0xf1,0xc2,0x30,0x0b,0xfa,0xf2,0x8f,0xc3,0x4b,0xbe,0x38,0x0b,0xc5,0xc5,0x43,0x45,0x36,0xb9,0x1a,0xca,0xca,0xdb,0x96};
    mont256_from_bytes(&ctx, base, base85);
    uint256_from_bytes(exponent, exponent85);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power85, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base86[32]     = {0x57,0x56,0xeb,0xca,0x1f,0xb7,0x4e,0x25,0x69,0x19,0x73,0x9f,0xb4,0xc2,0x0e,0x5b,0x74,0x0c,0x6f,0x8d,0x89,0x13,0x19,0x84,0x81,0xf7,0x7a,0xeb,0xd1,0x71,0xfc,0xf8};
    std::uint8_t exponent86[32] = {0x81,0x24,0xb0,0x95,0xd5,0x94,0x09,0x54,0xbd,0xea,0xab,0x72,0x19,0x8a,0x89,0xcf,0xaa,0x04,0x06,0xb3,0x1f,0xd6,0x9a,0x3a,0x9a,0x0b,0x10,0x66,0x2d,0xac,0xc6,0x81};
    std::uint8_t power86[32]    = {0x13,0x72,0xa3,0xf1,0x29,0xca,0x4b,0x40,0x03,0x87,0x30,0xa1,0xa5,0xf1,0x7c,0xe7,0xd1,0xde,0xc8,0x1d,0xe2,0x11,0x05,0x27,0xf7,0x5d,0xa5,0xa9,0x79,0x12,0x2d,0xb9};
    mont256_from_bytes(&ctx, base, base86);
    uint256_from_bytes(exponent, exponent86);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power86, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base87[32]     = {0xb2,0x27,0xfb,0x0c,0x64,0xab,0xc4,0xfb,0x6b,0xb8,0xe8,0x12,0xa2,0x13,0xf3,0xa5,0xe2,0x4e,0x2e,0xf9,0x0c,0xe1,0x77,0x56,0x84,0x8b,0xc7,0xef,0x07,0xa2,0xd0,0x93};
    std::uint8_t exponent87[32] = {0x6a,0x54,0x79,0x53,0xf2,0x2d,0xee,0x52,0xa6,0xab,0xe3,0x35,0x67,0x0d,0x76,0x5e,0xdd,0x36,0xa8,0xbb,0xa7,0xf3,0x55,0xd4,0x04,0x10,0x6e,0xd5,0x91,0xcf,0x3c,0x44};
    std::uint8_t power87[32]    = {0x40,0x54,0x08,0x94,0xe7,0x6a,0x66,0x3e,0x5f,0xc5,0xf0,0x35,0xfd,0xe2,0x2d,0x76,0xc3,0xcf,0x46,0x63,0x52,0xfa,0x43,0x36,0x6a,0xf2,0x3a,0xb2,0xca,0x83,0xcd,0x5a};
    mont256_from_bytes(&ctx, base, base87);
    uint256_from_bytes(exponent, exponent87);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power87, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base88[32]     = {0xe3,0x96,0xed,0xc2,0x56,0x11,0x1d,0xf9,0xb8,0x77,0x2d,0xf9,0xc2,0x9e,0x17,0xb1,0xe8,0xc9,0x88,0xd2,0xb6,0x75,0x0c,0x88,0xa3,0x57,0xa6,0xe1,0x62,0xc7,0x12,0xd9};
    std::uint8_t exponent88[32] = {0xd5,0x0b,0x2d,0x86,0x3d,0x46,0x39,0x47,0xb6,0x5a,0xda,0xc9,0x0a,0x95,0x41,0x2f,0x30,0x9a,0x55,0x9f,0xb9,0xd3,0x27,0x7a,0x69,0x81,0x30,0x11,0x55,0x83,0x0e,0x41};
    std::uint8_t power88[32]    = {0x00,0x80,0xb0,0x3e,0x64,0xd2,0x29,0x24,0x7a,0xde,0x8b,0xc4,0x8e,0xb0,0xda,0xcd,0x3d,0xfb,0x00,0x49,0xfb,0x78,0xb9,0x5c,0x57,0x02,0x20,0x3c,0x01,0xb4,0x3f,0xac};
    mont256_from_bytes(&ctx, base, base88);
    uint256_from_bytes(exponent, exponent88);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power88, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base89[32]     = {0x8d,0x9b,0xc6,0x5c,0x80,0x44,0x4c,0xf2,0x14,0xbf,0xd6,0xf5,0x17,0x41,0xcf,0x69,0xe0,0xfc,0xf5,0x41,0x75,0x4f,0x2a,0x3e,0xea,0x42,0x0f,0x3d,0x7e,0x80,0xa4,0xf1};
    std::uint8_t exponent89[32] = {0x37,0x85,0xff,0x98,0x3b,0xaa,0x67,0x8a,0xe3,0x9b,0x76,0x0b,0xc0,0xf6,0xab,0xa4,0xba,0xa8,0x91,0xcc,0xe2,0xeb,0xf1,0x42,0x15,0x90,0x8c,0x34,0xa6,0x9e,0x6b,0xa8};
    std::uint8_t power89[32]    = {0x5b,0x35,0x7e,0xa4,0x49,0x37,0x1c,0x6e,0x67,0x2c,0xd1,0xec,0x79,0x73,0x98,0x15,0x4c,0x8e,0xd2,0x38,0x6d,0x63,0x04,0x6c,0xae,0xad,0xee,0x9d,0xa0,0x35,0x1e,0x4c};
    mont256_from_bytes(&ctx, base, base89);
    uint256_from_bytes(exponent, exponent89);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power89, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base90[32]     = {0xac,0x6d,0x44,0xa4,0xc2,0xca,0x4f,0x9d,0x11,0xd2,0x30,0xc8,0xc2,0xcd,0x84,0xe9,0xfa,0xe8,0xc9,0x41,0x68,0xc1,0xde,0x02,0x76,0xe0,0x87,0xfa,0xa6,0x1f,0x9e,0x64};
    std::uint8_t exponent90[32] = {0x4e,0x9a,0x21,0x0e,0xb8,0x72,0x95,0x56,0x49,0x4d,0x96,0x78,0xd8,0x28,0xa0,0x04,0x38,0x88,0x99,0x53,0xa2,0x7b,0x4f,0xa4,0x1f,0xbf,0xdd,0x21,0xc5,0xfa,0x41,0x69};
    std::uint8_t power90[32]    = {0x31,0x43,0x91,0x1d,0x47,0x00,0xf4,0x54,0xe0,0x8b,0xb3,0xd5,0x2f,0xc7,0x32,0xae,0x60,0x6b,0x1b,0x1f,0x8e,0xce,0xba,0xe9,0x73,0xe6,0x92,0xc9,0x82,0x6e,0x7b,0x84};
    mont256_from_bytes(&ctx, base, base90);
    uint256_from_bytes(exponent, exponent90);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power90, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base91[32]     = {0xa9,0x7a,0x34,0x20,0x43,0x91,0x44,0x77,0x27,0x00,0x2f,0x3d,0xcb,0x90,0x2e,0x36,0x6b,0x47,0xe1,0xf7,0x33,0xef,0x6f,0x90,0x9f,0x16,0xc2,0xd2,0x7d,0x23,0xde,0x31};
    std::uint8_t exponent91[32] = {0x08,0x77,0x42,0xa4,0x36,0x46,0xcb,0x26,0x97,0x69,0xa2,0x88,0xfc,0xf8,0x2f,0x38,0x72,0xf2,0xc7,0xbb,0xa3,0xd5,0xa7,0x56,0x0f,0x5f,0xce,0x33,0x1a,0x96,0x3f,0x21};
    std::uint8_t power91[32]    = {0x6d,0xb9,0xb8,0xfd,0x84,0x51,0xf0,0xf8,0x5c,0x8e,0x63,0x5b,0x45,0x24,0xa9,0x1d,0x41,0xa7,0x24,0xb9,0x25,0xd9,0x46,0x4a,0x02,0x66,0x52,0x67,0x71,0xc9,0x22,0xd2};
    mont256_from_bytes(&ctx, base, base91);
    uint256_from_bytes(exponent, exponent91);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power91, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base92[32]     = {0xea,0xc8,0x0e,0x5b,0x54,0x59,0xbc,0x7c,0xc0,0x2d,0x92,0x53,0x2c,0xd9,0xb9,0x1c,0x2d,0xf0,0x43,0x52,0x76,0x90,0x40,0x92,0x35,0x5e,0xb8,0xc9,0xcf,0x17,0xb2,0xd6};
    std::uint8_t exponent92[32] = {0x9f,0xc0,0xbc,0x6f,0x89,0x9e,0xa7,0x8f,0x68,0xfd,0x7f,0xc3,0xe8,0x2d,0xd2,0x2b,0x97,0x29,0x22,0xb8,0xf8,0x2c,0xbe,0xfd,0x76,0x7a,0x18,0x5a,0xf4,0xd6,0x73,0x0b};
    std::uint8_t power92[32]    = {0xe0,0x0c,0x51,0x6b,0x40,0xc4,0x2e,0xd1,0xb0,0x6a,0xe7,0x3a,0x65,0xd9,0xa7,0x29,0x7c,0x95,0xf5,0xc8,0x84,0x0a,0x2a,0xe9,0xcf,0x03,0xd6,0x09,0xf4,0xe5,0x6e,0x72};
    mont256_from_bytes(&ctx, base, base92);
    uint256_from_bytes(exponent, exponent92);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power92, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base93[32]     = {0xee,0x76,0xfc,0xee,0xf0,0xff,0x04,0xd7,0x81,0x42,0x26,0x66,0xd9,0x8a,0xac,0x39,0xbe,0x68,0xab,0x6c,0x48,0xba,0xc4,0x7a,0xc6,0xbd,0x98,0x17,0x02,0xe7,0x25,0xba};
    std::uint8_t exponent93[32] = {0x53,0x7c,0x15,0xe4,0x79,0xa2,0x19,0xa3,0x23,0x16,0xb5,0x59,0xb4,0x68,0x0b,0x7f,0x43,0x8d,0xc5,0x46,0x96,0xf6,0x42,0xfd,0x6a,0xf5,0x0e,0xd3,0x76,0xe6,0xef,0xf7};
    std::uint8_t power93[32]    = {0x8b,0x6b,0x60,0x0d,0x86,0xb3,0xe1,0xf2,0xb1,0xe7,0xfd,0x50,0xb9,0x11,0x3e,0x2c,0x86,0x08,0xf7,0x36,0xcf,0x5f,0xf1,0x57,0x1b,0x06,0x31,0x1f,0x55,0x86,0xfe,0xe7};
    mont256_from_bytes(&ctx, base, base93);
    uint256_from_bytes(exponent, exponent93);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power93, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base94[32]     = {0x1b,0xe5,0x8b,0x06,0x8b,0xbf,0xfa,0x98,0xc3,0xc8,0x40,0xb2,0xc2,0x0b,0x30,0x04,0x65,0x4e,0xe6,0x97,0x1d,0xd2,0x4e,0xad,0xe6,0x1e,0x82,0xae,0x4c,0x99,0x07,0xe7};
    std::uint8_t exponent94[32] = {0xab,0x41,0x55,0x70,0xfc,0x04,0x4f,0x2a,0x46,0xa1,0xac,0x00,0x51,0x5d,0x9b,0x35,0x43,0x6e,0xe9,0xd5,0x65,0xf2,0x84,0xcf,0x4a,0xbd,0x5d,0x49,0xf9,0x0a,0xd2,0xef};
    std::uint8_t power94[32]    = {0x60,0x19,0x0e,0xaf,0xc4,0xea,0x1e,0x7a,0x17,0x23,0x7d,0x21,0xce,0x60,0xfa,0x6e,0x4c,0x68,0x73,0x30,0xe4,0x89,0xc3,0x1d,0x4c,0xb7,0x5f,0x8c,0xbd,0x64,0x96,0x01};
    mont256_from_bytes(&ctx, base, base94);
    uint256_from_bytes(exponent, exponent94);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power94, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base95[32]     = {0x98,0x00,0x74,0x42,0x08,0x0c,0x4a,0xef,0x6b,0x23,0x3f,0x2f,0xe5,0x0c,0x15,0x4c,0x00,0x19,0xef,0x14,0x66,0x2c,0x64,0x8e,0x08,0x2c,0x55,0xf5,0x36,0x77,0x69,0x69};
    std::uint8_t exponent95[32] = {0x16,0x61,0xf6,0xca,0x2e,0xef,0xa6,0x22,0xa7,0x89,0x11,0x68,0x54,0x5c,0x34,0x3b,0x4e,0x85,0x8d,0x3c,0x2b,0xaa,0x5d,0xec,0xf8,0x3d,0x19,0xc2,0x61,0x22,0xea,0xf5};
    std::uint8_t power95[32]    = {0x8b,0xb7,0x9f,0xf2,0x15,0x8d,0xda,0x3b,0xc0,0x3e,0x3b,0x4c,0x75,0x7a,0x6c,0xf1,0x49,0x4b,0xc4,0xf5,0x29,0x46,0xca,0xfd,0x2a,0x64,0xcf,0x98,0x6c,0x61,0x2d,0xf6};
    mont256_from_bytes(&ctx, base, base95);
    uint256_from_bytes(exponent, exponent95);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power95, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base96[32]     = {0x4f,0xdc,0xa1,0x34,0xef,0x0f,0x5a,0x75,0x1b,0x60,0xb0,0x6a,0x8d,0x18,0xcc,0xa9,0x27,0x62,0x81,0x49,0x93,0xb4,0xcf,0x7b,0x3c,0x45,0x53,0x20,0x51,0xa8,0x4a,0x26};
    std::uint8_t exponent96[32] = {0xb9,0x91,0xd6,0x26,0xd4,0xc2,0x88,0x46,0x10,0x44,0x2c,0xb6,0x7f,0xf3,0x5c,0xe5,0x85,0x31,0x33,0x5c,0x28,0x11,0x3c,0x02,0xda,0xc3,0x57,0x18,0x2e,0xd6,0x7a,0x70};
    std::uint8_t power96[32]    = {0x7e,0xe6,0x0b,0x4e,0x94,0x9d,0xd0,0x38,0xe8,0x12,0xeb,0x8f,0x97,0x20,0xe3,0x26,0x59,0xb0,0x72,0x49,0xbd,0x44,0x45,0xdb,0xe4,0x7b,0xa5,0x13,0x22,0x4a,0x40,0x39};
    mont256_from_bytes(&ctx, base, base96);
    uint256_from_bytes(exponent, exponent96);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power96, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base97[32]     = {0xba,0xd5,0xe7,0xc2,0xc5,0x62,0x6a,0x32,0x6d,0x0c,0x67,0xcc,0x44,0xe0,0xef,0x74,0x9b,0x93,0x51,0xa3,0xba,0x75,0x2e,0x52,0xe5,0xbd,0x97,0x96,0x33,0xfd,0x89,0x34};
    std::uint8_t exponent97[32] = {0x05,0xf2,0x82,0xaf,0x13,0x4a,0xc8,0x5d,0xac,0xf1,0x1a,0x3d,0xde,0xb8,0x92,0xd1,0x5a,0x4c,0xb2,0x44,0x33,0x3d,0xdc,0x3b,0x90,0xf1,0xd0,0x3f,0x32,0xb0,0x7d,0x93};
    std::uint8_t power97[32]    = {0x10,0xbf,0x88,0x14,0x45,0x94,0x44,0xc0,0x99,0x7a,0x8f,0xf3,0x51,0x00,0x33,0x98,0x8e,0xa6,0x4f,0xcb,0xaf,0xf8,0x3e,0x92,0x2f,0x60,0x4e,0x66,0x7b,0xc8,0x51,0x36};
    mont256_from_bytes(&ctx, base, base97);
    uint256_from_bytes(exponent, exponent97);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power97, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base98[32]     = {0x00,0x1c,0x0e,0xa8,0xa5,0x9f,0x03,0xbe,0x6a,0xb4,0x09,0x16,0xc6,0x6c,0x57,0x8b,0x36,0x9c,0x68,0x8c,0xe6,0x4e,0x7c,0xb7,0xe2,0x82,0xa6,0xa4,0x42,0xe5,0xf9,0x82};
    std::uint8_t exponent98[32] = {0x63,0x7e,0x8a,0xbc,0x42,0xd6,0x90,0x50,0xe7,0xea,0x55,0x65,0x97,0x0a,0xa2,0xb1,0xd3,0x9d,0x1e,0x54,0xae,0xc1,0x47,0x53,0xaa,0xce,0xc0,0x77,0x00,0xdd,0x34,0x1e};
    std::uint8_t power98[32]    = {0xc3,0x04,0x74,0x9a,0x71,0x7b,0xf3,0xd6,0x0f,0x14,0x2c,0xf1,0x91,0xc4,0xe2,0x6b,0x99,0x0e,0xe4,0x42,0x09,0x3b,0xe7,0xcd,0xed,0x65,0x0d,0xeb,0x9b,0x86,0x62,0x43};
    mont256_from_bytes(&ctx, base, base98);
    uint256_from_bytes(exponent, exponent98);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power98, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }

    std::uint8_t base99[32]     = {0x78,0x86,0x10,0x32,0xd0,0xe8,0x49,0x2c,0xc8,0x0c,0x99,0x6e,0x3a,0xd7,0x32,0x9e,0x2e,0xb4,0xb5,0x16,0x4a,0xf8,0xaf,0xb6,0x79,0xf8,0x2e,0xe6,0xbe,0xad,0x2f,0xef};
    std::uint8_t exponent99[32] = {0x8a,0xf2,0x3e,0x0e,0x15,0xa8,0x22,0xce,0x86,0x71,0xbe,0x12,0x72,0xfb,0xc8,0x5e,0x0c,0xde,0x37,0x0d,0x0d,0x96,0x5d,0x23,0x5e,0x60,0xe9,0xe0,0x07,0xf2,0x94,0x8f};
    std::uint8_t power99[32]    = {0xd2,0x88,0xf4,0x99,0xb4,0xb3,0xac,0x4c,0x90,0x32,0x56,0xd7,0x3b,0x94,0xd1,0xc2,0xb9,0x22,0xf2,0x34,0x96,0x1a,0x78,0x43,0xdb,0x31,0x03,0x57,0xd0,0xfe,0xbb,0x04};
    mont256_from_bytes(&ctx, base, base99);
    uint256_from_bytes(exponent, exponent99);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power99, power_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_pow");
    }
}
#else
void test_mont256_x64_pow()
{
}
#endif