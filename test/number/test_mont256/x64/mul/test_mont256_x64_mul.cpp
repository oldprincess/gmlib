#if defined(CPU_FLAG_MOVBE) && defined(CPU_FLAG_BMI2)
#include <gmlib/number/internal/mont256_x64.h>
#include <gmlib/number/internal/uint256_x64.h>
#include <stdexcept>
#include <cstring>

using namespace number::internal::x64;

static std::uint8_t  P_data[32]      = {0xff,0xff,0xff,0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
static std::uint8_t  P_SUB2_data[32] = {0xff,0xff,0xff,0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfd};
static std::uint8_t  R_data[32]      = {0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01};
static std::uint8_t  R_POW2_data[32] = {0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x03};
static std::uint32_t N_              = 1;

void test_mont256_x64_mul()
{
    uint256_t P, P_SUB2, R, R_POW2;
    uint256_from_bytes(P, P_data);
    uint256_from_bytes(P_SUB2, P_SUB2_data);
    uint256_from_bytes(R, R_data);
    uint256_from_bytes(R_POW2, R_POW2_data);

    Mont256CTX ctx;
    ctx.P = P, ctx.P_SUB2 = P_SUB2;
    ctx.R = R, ctx.R_POW2 = R_POW2;
    ctx.N_ = N_;

    mont256_t    multiplier, multiplicand, product;
    std::uint8_t product_data[32];

    std::uint8_t multiplier0[32]   = {0x7f,0x7f,0x1a,0x90,0x4c,0x3a,0x4d,0xc5,0x44,0x90,0x48,0x00,0x14,0x36,0xa5,0xdd,0x20,0x56,0xfc,0x0f,0xdf,0xe7,0xba,0xe0,0x20,0xf8,0x29,0x63,0x8f,0xf8,0xb8,0x14};
    std::uint8_t multiplicand0[32] = {0xd9,0x7d,0xa9,0x0f,0xa0,0x5e,0x3c,0xed,0xd3,0xc3,0xd1,0x0b,0x9b,0x34,0xe5,0x53,0x1e,0xe8,0x52,0x43,0x76,0x61,0xc6,0x1c,0x9b,0xa0,0x03,0x5b,0xf2,0x1a,0xc8,0x5c};
    std::uint8_t product0[32]      = {0x3d,0x4b,0x1e,0x16,0x8d,0x96,0x79,0xb2,0x30,0x7b,0x83,0x17,0xd1,0x38,0x29,0x91,0xa4,0xc6,0xf2,0x82,0xb9,0x8e,0x40,0x10,0xcb,0xf2,0xb2,0x4e,0x22,0x9c,0x00,0x62};
    mont256_from_bytes(&ctx, multiplier, multiplier0);
    mont256_from_bytes(&ctx, multiplicand, multiplicand0);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product0, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier1[32]   = {0xcb,0xe8,0x98,0xa5,0xf9,0x44,0x91,0x0a,0x91,0x33,0xa0,0x78,0x06,0xe1,0xb5,0x07,0x5a,0xa4,0x35,0x33,0x17,0xbf,0x0a,0x20,0x91,0x87,0xf8,0x72,0xde,0xa8,0x5a,0xc0};
    std::uint8_t multiplicand1[32] = {0x5d,0xd9,0x50,0x83,0x9f,0x91,0xac,0xea,0x09,0xf2,0x79,0x92,0x1b,0x11,0x28,0x09,0x9b,0xcd,0xe9,0x33,0x0f,0xc9,0x72,0x08,0x6f,0x3e,0x6f,0x48,0xbc,0x4c,0x0f,0x1b};
    std::uint8_t product1[32]      = {0xba,0x07,0xb2,0x11,0x10,0x26,0xbf,0xff,0xd3,0xdf,0x89,0x83,0x4d,0x53,0xeb,0x68,0x01,0xd3,0x06,0x1a,0xc6,0x38,0x42,0xff,0x45,0xb6,0xeb,0xaa,0xef,0x11,0x48,0x34};
    mont256_from_bytes(&ctx, multiplier, multiplier1);
    mont256_from_bytes(&ctx, multiplicand, multiplicand1);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product1, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier2[32]   = {0x63,0xab,0x38,0x91,0x51,0xf8,0xc5,0x30,0x9e,0x16,0x57,0x9a,0xc6,0xb4,0x39,0x6c,0x37,0xc4,0xff,0x30,0x21,0x67,0x86,0x44,0x14,0xa8,0x83,0x61,0x18,0x4c,0xfc,0x16};
    std::uint8_t multiplicand2[32] = {0x33,0x29,0x43,0xd7,0x5f,0x6e,0x66,0xcc,0x51,0x73,0x08,0xca,0x8b,0xc8,0xf2,0xa3,0xe4,0xdf,0xa4,0x60,0x9f,0x89,0xa4,0x97,0xb4,0xda,0xb4,0x96,0xc2,0x71,0xe9,0x22};
    std::uint8_t product2[32]      = {0xe1,0x5f,0xee,0xe8,0x59,0x89,0x3b,0x1b,0x7d,0x1c,0x0c,0x62,0xce,0xf9,0x78,0x9d,0x02,0xd2,0x25,0xca,0xec,0x04,0xd3,0xb1,0x68,0xcc,0x38,0xb0,0x80,0xa6,0x76,0x2b};
    mont256_from_bytes(&ctx, multiplier, multiplier2);
    mont256_from_bytes(&ctx, multiplicand, multiplicand2);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product2, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier3[32]   = {0x1d,0x9a,0x52,0xdd,0x15,0xe2,0x2f,0x1c,0xd2,0x8a,0x48,0x95,0x79,0xf3,0x18,0x28,0xd2,0x2b,0x72,0x42,0xdb,0x3c,0x7e,0x9f,0xc5,0xd4,0x33,0xf3,0x00,0x97,0x49,0x30};
    std::uint8_t multiplicand3[32] = {0xfc,0x04,0xa2,0xf8,0xa2,0x51,0x57,0xa0,0x61,0x53,0x7c,0xc4,0x49,0x0a,0xec,0x6b,0x89,0xbb,0xd0,0xdf,0x88,0xbb,0x2c,0xca,0xb1,0x4b,0x73,0x1d,0xc0,0x2a,0x30,0x02};
    std::uint8_t product3[32]      = {0xfa,0xfe,0x86,0x7f,0x79,0x59,0x1b,0x51,0xde,0x03,0x64,0x32,0x3b,0x04,0xb5,0x6d,0xec,0x2a,0xfe,0x7e,0x74,0xe9,0x00,0x5e,0x86,0x9c,0xac,0xb8,0xed,0x41,0x29,0xf1};
    mont256_from_bytes(&ctx, multiplier, multiplier3);
    mont256_from_bytes(&ctx, multiplicand, multiplicand3);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product3, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier4[32]   = {0x7d,0x57,0x36,0x11,0xc6,0x6f,0x58,0x11,0xc2,0x2a,0xd5,0x9d,0xf8,0xec,0x05,0xea,0x31,0xdb,0xba,0x9d,0x4c,0xe5,0x55,0x3f,0x5c,0x43,0x56,0x9b,0xb5,0x87,0x08,0xb2};
    std::uint8_t multiplicand4[32] = {0x71,0x4c,0x5f,0xec,0x3b,0x59,0x56,0xe4,0xe8,0xc8,0xd0,0x59,0xd3,0x12,0x51,0x60,0x67,0x16,0xbc,0x89,0x05,0x98,0xa7,0xae,0x31,0xa6,0xdd,0xf8,0x8c,0x22,0x3a,0x5d};
    std::uint8_t product4[32]      = {0xaf,0x69,0x98,0x85,0x5a,0x60,0x7e,0x4a,0x4a,0x2b,0xe0,0x1f,0xf4,0x51,0x98,0xcd,0x2b,0x77,0x8c,0x6a,0x89,0xdc,0x6c,0xe3,0x01,0xae,0x6d,0xf0,0xc9,0x27,0x73,0x97};
    mont256_from_bytes(&ctx, multiplier, multiplier4);
    mont256_from_bytes(&ctx, multiplicand, multiplicand4);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product4, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier5[32]   = {0x7e,0x23,0x3b,0x3e,0xc2,0x8e,0x7f,0x56,0xc8,0xbc,0xd2,0xaf,0x05,0x84,0x1f,0x21,0xf9,0x32,0x46,0xed,0x3c,0x5d,0xc2,0x74,0x7c,0x89,0x4f,0xb3,0x1b,0xc8,0xb1,0x38};
    std::uint8_t multiplicand5[32] = {0x4f,0xe4,0x5d,0x95,0xb8,0xec,0xc6,0x2a,0xb2,0x4e,0x0e,0xd9,0xd1,0x5d,0xb1,0x3b,0x0c,0x5d,0x9f,0x1a,0x6e,0x4c,0xcb,0x9f,0x78,0x25,0xbf,0xee,0x91,0x4b,0xc8,0xc3};
    std::uint8_t product5[32]      = {0xb5,0x4c,0x22,0x34,0x8d,0xca,0xb7,0x09,0x1e,0x7a,0x01,0x71,0x31,0xaf,0x67,0x74,0x6e,0x3f,0x64,0xc9,0xbd,0xdb,0x13,0x5d,0xb5,0x3d,0xac,0xd5,0x89,0xf0,0xb7,0x18};
    mont256_from_bytes(&ctx, multiplier, multiplier5);
    mont256_from_bytes(&ctx, multiplicand, multiplicand5);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product5, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier6[32]   = {0x7f,0xfc,0x2b,0xbf,0xfc,0x00,0x66,0x3c,0xe3,0xf3,0x3b,0xa8,0xef,0x04,0xea,0x5c,0xb3,0x8c,0xca,0x8b,0xf7,0xdd,0xcf,0x75,0x92,0x3f,0xa0,0x3c,0x21,0x3e,0x70,0xbb};
    std::uint8_t multiplicand6[32] = {0xf9,0x86,0xe6,0x05,0xda,0x1e,0x23,0x3b,0xc8,0x70,0xfe,0xe8,0x67,0xbe,0x14,0xea,0x8a,0x27,0xc5,0xd0,0xd4,0x31,0x2e,0xe9,0x07,0x8d,0x65,0xeb,0x0f,0xaf,0x8e,0x92};
    std::uint8_t product6[32]      = {0xd6,0x40,0x9e,0x92,0x2a,0xa0,0x68,0xa2,0x12,0xe1,0x6b,0x3c,0xcd,0x16,0x0e,0x8a,0xb3,0xba,0xf6,0x67,0xc7,0x7d,0x85,0x9d,0xa5,0xa3,0x01,0x78,0x33,0x0c,0xd2,0x0d};
    mont256_from_bytes(&ctx, multiplier, multiplier6);
    mont256_from_bytes(&ctx, multiplicand, multiplicand6);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product6, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier7[32]   = {0x5c,0x74,0x35,0x1f,0x31,0x70,0x4d,0x39,0x06,0xcf,0x3a,0x80,0x6e,0x7a,0xae,0x2c,0x72,0xeb,0x75,0x6e,0x30,0x59,0xca,0xd3,0x3b,0x7d,0x6e,0x73,0x30,0x9b,0x7a,0x41};
    std::uint8_t multiplicand7[32] = {0x79,0xa1,0x75,0xf6,0x16,0x10,0xb4,0xf2,0x8b,0xeb,0x61,0x0a,0xc7,0xf4,0xba,0xe5,0x9b,0x0d,0x44,0x53,0x24,0x77,0x70,0x36,0x0e,0x13,0x26,0x93,0xcb,0x17,0xd5,0x96};
    std::uint8_t product7[32]      = {0xc0,0x75,0x9f,0x95,0x0e,0xd0,0xa5,0x1d,0x08,0xfe,0xc1,0x99,0xee,0x0f,0x69,0x76,0xba,0x0b,0xfc,0x69,0x1b,0x9d,0xc2,0xe2,0xea,0x7b,0xa4,0x35,0x80,0x35,0xbc,0xad};
    mont256_from_bytes(&ctx, multiplier, multiplier7);
    mont256_from_bytes(&ctx, multiplicand, multiplicand7);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product7, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier8[32]   = {0xb5,0xd1,0xa3,0x63,0xc3,0x94,0x46,0x80,0x10,0xd5,0x44,0x26,0xbf,0x70,0x68,0x80,0x1d,0x26,0x55,0x58,0x06,0x8a,0x0c,0xbd,0x9e,0xef,0x37,0x8e,0xaf,0xc3,0xda,0xf0};
    std::uint8_t multiplicand8[32] = {0x13,0x09,0xbc,0x6e,0x5b,0xe0,0x74,0x62,0xc4,0x37,0x9b,0x1a,0x89,0xa4,0xfa,0x10,0xee,0x69,0x79,0x28,0x45,0x60,0xce,0x28,0x31,0xbd,0x8f,0x19,0xdd,0x80,0x2f,0xa5};
    std::uint8_t product8[32]      = {0xcb,0xd6,0xf2,0x03,0xc8,0xfe,0xd0,0x3f,0x1e,0x05,0xc3,0x75,0x67,0x95,0xad,0xb3,0x7d,0xca,0xa2,0x5c,0x4f,0xa4,0xe2,0x3c,0x7e,0xfd,0xdb,0xab,0x1d,0xfb,0x78,0x2c};
    mont256_from_bytes(&ctx, multiplier, multiplier8);
    mont256_from_bytes(&ctx, multiplicand, multiplicand8);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product8, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier9[32]   = {0x63,0x7d,0xd6,0x4f,0xc9,0x75,0xaf,0xe9,0x29,0x39,0x71,0x5a,0xed,0xbd,0xc8,0xb5,0x88,0x22,0x36,0x48,0xd0,0x53,0x75,0xd1,0xad,0x70,0x96,0x88,0x13,0x53,0xd6,0x74};
    std::uint8_t multiplicand9[32] = {0x22,0x3b,0x84,0xdf,0x8d,0xbb,0x49,0x2b,0x6f,0x6e,0xb5,0x88,0x1c,0xe6,0xa7,0xc5,0x04,0x51,0xe7,0x8e,0xf3,0xf7,0x30,0xcf,0x61,0x9c,0x86,0x94,0x99,0x13,0x24,0x1c};
    std::uint8_t product9[32]      = {0xb2,0x97,0x43,0xd9,0xbb,0x82,0xf1,0xe0,0xa9,0x65,0x41,0x49,0xff,0xa1,0x5b,0x1d,0x14,0x01,0x5d,0x8a,0x77,0xff,0xc9,0xe5,0xf7,0xe2,0x37,0x88,0x16,0xd0,0x33,0x22};
    mont256_from_bytes(&ctx, multiplier, multiplier9);
    mont256_from_bytes(&ctx, multiplicand, multiplicand9);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product9, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier10[32]   = {0x38,0x9c,0xf2,0x7b,0x60,0xdb,0x1d,0x8b,0x35,0x90,0x82,0x20,0xfd,0xd9,0x16,0x64,0xe3,0x64,0xe8,0x1e,0x9a,0xa6,0x62,0x86,0x99,0x02,0x27,0x07,0x64,0xdc,0x23,0x28};
    std::uint8_t multiplicand10[32] = {0xc4,0x6e,0x1e,0x2a,0x81,0xf3,0xae,0xc7,0x05,0x10,0x9b,0xfa,0x13,0x96,0x3f,0x82,0x48,0x31,0xe7,0x3a,0x5a,0x69,0x8c,0xd4,0xe9,0xcb,0xe1,0xf3,0x77,0x35,0xd2,0x80};
    std::uint8_t product10[32]      = {0xdc,0xc7,0x84,0xe6,0x64,0x06,0xdc,0xf7,0x98,0x8b,0x67,0x74,0xc6,0xeb,0x5e,0x2b,0x35,0x77,0xd8,0x3d,0x1a,0xd3,0x3e,0x1c,0x07,0x14,0xde,0x9f,0x4f,0x63,0xc2,0xae};
    mont256_from_bytes(&ctx, multiplier, multiplier10);
    mont256_from_bytes(&ctx, multiplicand, multiplicand10);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product10, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier11[32]   = {0x80,0xd8,0x2d,0x70,0x09,0x79,0xea,0x68,0xa6,0x64,0x91,0xf4,0x22,0x20,0x24,0x85,0xef,0xf3,0x29,0xc0,0x25,0x3c,0x41,0x66,0xde,0x7a,0xc9,0x27,0xa2,0x22,0x4c,0x4c};
    std::uint8_t multiplicand11[32] = {0xaa,0x7d,0xc2,0x10,0xe7,0xfb,0x24,0xd1,0x38,0x01,0x27,0xe2,0x27,0x4a,0x97,0x32,0x5a,0x04,0x1e,0xa9,0xbe,0xff,0xbd,0xa6,0xca,0x11,0xd9,0xab,0x31,0x8f,0xc9,0x14};
    std::uint8_t product11[32]      = {0x3c,0x7f,0x56,0xc0,0x24,0xa4,0xba,0x06,0x89,0x64,0x04,0xf4,0x02,0x9c,0x08,0x09,0x95,0xd0,0xfd,0xb7,0x50,0x17,0xae,0x3e,0x0a,0x7a,0x6d,0xa1,0xc9,0x95,0x63,0x6d};
    mont256_from_bytes(&ctx, multiplier, multiplier11);
    mont256_from_bytes(&ctx, multiplicand, multiplicand11);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product11, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier12[32]   = {0x15,0xd8,0x38,0x47,0xea,0x2f,0x77,0x2e,0x0d,0xd0,0xfa,0xad,0xcf,0xf3,0xf5,0x4b,0xc2,0x5c,0xbf,0x6d,0x74,0x09,0x15,0x71,0xf0,0x62,0xa9,0x8f,0xcf,0x19,0x52,0x23};
    std::uint8_t multiplicand12[32] = {0xa2,0x54,0xe2,0x59,0x87,0xf7,0xf9,0xb2,0x32,0xd2,0xcc,0xf1,0x98,0xaf,0xbe,0x70,0x65,0xc4,0xec,0x54,0xa0,0xd4,0xe2,0x5b,0xb6,0x97,0xb2,0x82,0xd8,0x22,0xcb,0xd0};
    std::uint8_t product12[32]      = {0x19,0xc5,0x3f,0x9a,0xbb,0xff,0xd9,0xb7,0x01,0x7b,0xc5,0x1b,0x87,0x27,0xb5,0x74,0x9c,0x00,0x34,0x0b,0x42,0x2c,0x27,0xda,0xbf,0xeb,0x47,0x6c,0x14,0x64,0x8a,0xae};
    mont256_from_bytes(&ctx, multiplier, multiplier12);
    mont256_from_bytes(&ctx, multiplicand, multiplicand12);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product12, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier13[32]   = {0xf1,0x49,0x7a,0xe0,0x0f,0xb2,0x3c,0x1e,0x9e,0xab,0xf8,0x9d,0xd7,0x36,0xef,0x1c,0x1d,0x20,0xcd,0x4a,0xd4,0x93,0xa3,0xe7,0xe0,0xff,0xdc,0xf2,0xbd,0x77,0x77,0xee};
    std::uint8_t multiplicand13[32] = {0xc4,0xc1,0x52,0x78,0xda,0x60,0x2d,0x38,0xf4,0xd3,0x16,0x60,0xa5,0x54,0xbe,0xdb,0x69,0x2c,0xbb,0x5d,0x68,0x95,0x21,0xde,0x38,0x40,0x56,0x12,0x7a,0xa5,0xfc,0x21};
    std::uint8_t product13[32]      = {0xaa,0x2f,0x9e,0x45,0x0c,0x48,0xa2,0xf0,0xa8,0xd1,0x76,0x80,0xe6,0xcc,0xfc,0x6e,0x69,0xc3,0x5a,0x23,0x34,0xce,0xc9,0x04,0x50,0x2f,0x33,0x8b,0xd5,0x81,0xf5,0x79};
    mont256_from_bytes(&ctx, multiplier, multiplier13);
    mont256_from_bytes(&ctx, multiplicand, multiplicand13);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product13, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier14[32]   = {0xe0,0xa6,0xde,0x72,0xd2,0x1e,0xe9,0xe4,0xe0,0xca,0xd7,0xb8,0xfb,0xfc,0x46,0x4b,0xce,0x7b,0x06,0xb3,0xc4,0xb7,0x70,0xcf,0xcc,0x1e,0x31,0xfb,0x51,0xf9,0x92,0x47};
    std::uint8_t multiplicand14[32] = {0x2f,0xbf,0x92,0xfa,0x8d,0x04,0x49,0xa5,0x5c,0x6b,0xef,0x70,0x73,0xa8,0xae,0xe4,0xec,0x73,0x96,0xf3,0xfb,0x15,0x21,0x8a,0x86,0xa7,0x97,0x1a,0xb7,0xd1,0x96,0x6b};
    std::uint8_t product14[32]      = {0xbd,0xb6,0x05,0xc8,0x60,0x96,0x4c,0x76,0xb8,0x37,0x11,0x10,0x65,0xc0,0xa5,0xfa,0xae,0x35,0x71,0xee,0x99,0xef,0xd2,0x7f,0x19,0x38,0xe5,0x40,0x86,0xff,0xc2,0xd6};
    mont256_from_bytes(&ctx, multiplier, multiplier14);
    mont256_from_bytes(&ctx, multiplicand, multiplicand14);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product14, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier15[32]   = {0x11,0x65,0xfd,0x20,0x11,0x04,0xc9,0xcf,0x07,0xb8,0xed,0x28,0x2a,0x60,0x5e,0x1d,0x78,0xae,0x94,0xd1,0x76,0x90,0x18,0x7a,0x0c,0x40,0xdf,0x34,0xe3,0x03,0x2f,0x7c};
    std::uint8_t multiplicand15[32] = {0xdc,0x2a,0x86,0xce,0x03,0x5e,0x89,0xe9,0x30,0xf0,0xd5,0xea,0xfa,0xb9,0xcc,0x8b,0xd9,0x24,0x80,0x61,0xa7,0x54,0x24,0x38,0x17,0x31,0x3e,0x36,0x17,0x5e,0xac,0x9e};
    std::uint8_t product15[32]      = {0x7d,0x0f,0xe9,0x88,0xdb,0x44,0xa7,0x08,0xf2,0x27,0x8a,0x89,0x6a,0xda,0xc0,0xe5,0x40,0x7f,0x0a,0xe6,0x9e,0xff,0x49,0x90,0x5f,0x9a,0xec,0x4d,0xe0,0x20,0x34,0x7c};
    mont256_from_bytes(&ctx, multiplier, multiplier15);
    mont256_from_bytes(&ctx, multiplicand, multiplicand15);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product15, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier16[32]   = {0x27,0x0c,0xfd,0x89,0x00,0x52,0x2b,0x46,0x02,0x74,0xec,0x3a,0x72,0x16,0xb7,0xcd,0xe5,0x5a,0x45,0x91,0x12,0xd3,0x98,0x0f,0xb0,0x96,0x01,0x0f,0x6d,0xb1,0x11,0xcc};
    std::uint8_t multiplicand16[32] = {0x9f,0x6a,0x5f,0x2d,0x71,0xba,0x03,0xfc,0x0a,0x77,0xe4,0x47,0xf3,0x79,0x93,0xbe,0x47,0x20,0xcd,0xaf,0xe2,0xb5,0x0c,0x52,0xa9,0x85,0x6b,0x3e,0x92,0x38,0x7e,0x20};
    std::uint8_t product16[32]      = {0x74,0x00,0x11,0x0f,0x05,0x85,0x3c,0xe5,0xdc,0xd4,0x15,0x0f,0xe8,0x9b,0xdd,0x5d,0x8e,0xf2,0x62,0x02,0x91,0x0e,0xb4,0xfe,0x87,0xc2,0x1a,0xcd,0x2a,0xf9,0x27,0x47};
    mont256_from_bytes(&ctx, multiplier, multiplier16);
    mont256_from_bytes(&ctx, multiplicand, multiplicand16);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product16, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier17[32]   = {0x2f,0x79,0x82,0x75,0xa7,0xa7,0x4d,0xde,0xe5,0xb8,0x96,0xae,0x31,0xf1,0xa9,0x3f,0xed,0xbb,0x2e,0x89,0xf8,0x93,0x1a,0x30,0x0b,0xff,0xf2,0xee,0x27,0xd6,0x19,0x8f};
    std::uint8_t multiplicand17[32] = {0xd3,0x13,0x1b,0x68,0xb1,0x68,0xfe,0x68,0xdb,0x79,0x86,0x2c,0x97,0xa8,0x28,0xa2,0xa9,0xba,0x7e,0x7f,0xce,0x30,0x4a,0x14,0xe5,0xd9,0x45,0x46,0x36,0x36,0x32,0xe6};
    std::uint8_t product17[32]      = {0x92,0x1b,0xae,0xef,0x42,0x74,0x83,0x16,0x8b,0x9f,0xe0,0x19,0x46,0xaa,0x54,0x67,0x6c,0xb8,0xb1,0x1d,0x61,0xb0,0x0e,0x3b,0x28,0x59,0xc8,0x0b,0xcc,0xb5,0xda,0xff};
    mont256_from_bytes(&ctx, multiplier, multiplier17);
    mont256_from_bytes(&ctx, multiplicand, multiplicand17);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product17, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier18[32]   = {0x06,0x04,0x76,0xa4,0x12,0x4a,0x07,0x99,0x58,0xa2,0x44,0x41,0xec,0x86,0x6b,0x37,0x90,0xc8,0x7f,0xf7,0x92,0xba,0xd7,0x81,0x7c,0xca,0xfc,0xf5,0x7f,0x5c,0x4c,0xe2};
    std::uint8_t multiplicand18[32] = {0x69,0x63,0x47,0xe6,0xaf,0x6c,0xba,0x09,0x97,0x4b,0x89,0x0b,0x8d,0xd0,0x47,0xc9,0x9c,0x49,0xfe,0x05,0x75,0xf6,0xb9,0x27,0x72,0x4b,0xe9,0xd7,0x11,0xa4,0x40,0x38};
    std::uint8_t product18[32]      = {0x41,0xdc,0x32,0x52,0x25,0x3c,0x67,0x51,0x43,0x8a,0x38,0x76,0x7c,0x2e,0x4b,0x27,0x3e,0xf4,0xb8,0x0c,0x1c,0xc4,0x2a,0xd9,0xcd,0x18,0x85,0x3c,0xf0,0x10,0xad,0x31};
    mont256_from_bytes(&ctx, multiplier, multiplier18);
    mont256_from_bytes(&ctx, multiplicand, multiplicand18);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product18, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier19[32]   = {0x56,0x0e,0xb9,0xdf,0x62,0xd6,0x0f,0x79,0x38,0x19,0x9a,0x56,0x95,0x41,0x69,0xbe,0xf0,0xff,0xa7,0x16,0x61,0x09,0x81,0x1e,0x7b,0x41,0xff,0x51,0x4f,0x6b,0x9f,0x29};
    std::uint8_t multiplicand19[32] = {0xf4,0x06,0x6f,0x27,0x7c,0x7f,0xf1,0x2c,0xd6,0x20,0xdc,0x5c,0x12,0x1b,0x1a,0x5d,0xaf,0xd0,0x97,0x08,0xb7,0x01,0x31,0xbb,0x6a,0x57,0xb1,0xac,0xe9,0x98,0xcf,0xce};
    std::uint8_t product19[32]      = {0x50,0xe7,0xf3,0xaf,0x71,0x0e,0xad,0xee,0xc9,0x8c,0x2b,0xff,0xfb,0x83,0x41,0xa0,0x2c,0xba,0x98,0xad,0xb9,0x3c,0x4e,0x0b,0x90,0x68,0x1c,0x87,0x69,0xb2,0x15,0x91};
    mont256_from_bytes(&ctx, multiplier, multiplier19);
    mont256_from_bytes(&ctx, multiplicand, multiplicand19);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product19, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier20[32]   = {0x51,0x74,0x7d,0x93,0x7d,0xac,0xc7,0xf0,0x87,0x97,0xeb,0xd3,0xe8,0x0b,0x66,0x62,0x24,0xc6,0x39,0x78,0xc3,0xce,0x29,0x5f,0xb2,0xa3,0x75,0x41,0x94,0x89,0x37,0x51};
    std::uint8_t multiplicand20[32] = {0x5a,0xfa,0x5f,0x0d,0x0a,0x36,0xee,0xde,0xba,0x91,0xeb,0x84,0xa8,0x13,0x74,0xcf,0xde,0xab,0x9d,0xa0,0xe0,0x70,0x49,0xf0,0x5a,0x0a,0x76,0x62,0x46,0x70,0x16,0x90};
    std::uint8_t product20[32]      = {0x8a,0x17,0x9c,0x8c,0x61,0x0c,0x55,0xe3,0x46,0xf4,0x8d,0x49,0xaa,0x4a,0x5f,0x2e,0x32,0xfd,0x22,0xc4,0xd8,0x30,0x96,0xda,0x2b,0x31,0x97,0x21,0x48,0xf0,0x25,0x2f};
    mont256_from_bytes(&ctx, multiplier, multiplier20);
    mont256_from_bytes(&ctx, multiplicand, multiplicand20);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product20, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier21[32]   = {0xee,0x17,0x16,0xd8,0xa0,0xc7,0x11,0x15,0xd4,0xd1,0x76,0xbc,0x81,0x8a,0x17,0x99,0xd1,0xe7,0x72,0x3d,0x28,0xde,0xb6,0xbc,0xc0,0xfa,0x65,0x70,0x9e,0xb4,0x45,0xb4};
    std::uint8_t multiplicand21[32] = {0xa8,0x5f,0x96,0x0a,0x5b,0x65,0x23,0x4a,0xc8,0xe4,0x04,0x64,0x53,0x47,0xb4,0x15,0xbd,0x99,0xa6,0x7b,0xb2,0x68,0x1f,0x24,0x17,0xfe,0x44,0x1c,0xc5,0xef,0xfe,0x94};
    std::uint8_t product21[32]      = {0x59,0x95,0x55,0x34,0x7a,0x51,0xb9,0x60,0x02,0x83,0xd8,0x6f,0x76,0xe3,0xe5,0xd3,0x15,0x09,0xf0,0xa9,0x2b,0x6c,0x21,0xbd,0x79,0x98,0xcc,0x45,0xa7,0x0b,0xda,0x53};
    mont256_from_bytes(&ctx, multiplier, multiplier21);
    mont256_from_bytes(&ctx, multiplicand, multiplicand21);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product21, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier22[32]   = {0x58,0xc2,0xc3,0xda,0x12,0x73,0x50,0x9a,0x80,0xe3,0x48,0x6e,0x6c,0x8e,0x29,0x49,0xd7,0x57,0x12,0x3c,0x5f,0xa1,0x75,0x34,0xc8,0x0d,0xd5,0xf0,0x41,0xca,0x78,0xac};
    std::uint8_t multiplicand22[32] = {0xb0,0x4e,0xa1,0xaf,0xd3,0x51,0x4d,0x5e,0x4a,0xa6,0x3c,0x12,0x87,0xdd,0xaa,0x62,0xa5,0x5a,0xa6,0x55,0x79,0x8c,0x6a,0x82,0xc2,0x74,0x7c,0xdc,0x23,0xb8,0x30,0xdd};
    std::uint8_t product22[32]      = {0xc8,0x68,0x1f,0xbd,0xc7,0x56,0xb0,0x98,0xe6,0x09,0x8a,0xdf,0x4b,0x3f,0x0a,0x07,0x81,0x5f,0xf7,0xc7,0x91,0x82,0xbd,0xce,0x86,0x6b,0xf2,0x72,0x09,0xf2,0x2f,0x8c};
    mont256_from_bytes(&ctx, multiplier, multiplier22);
    mont256_from_bytes(&ctx, multiplicand, multiplicand22);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product22, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier23[32]   = {0xc3,0x5d,0xc5,0xda,0x60,0x16,0xfe,0xd4,0x32,0x77,0xc7,0x3e,0xef,0x0c,0xb4,0xd5,0xe0,0x28,0xe5,0xc5,0x12,0x4b,0x9a,0x9f,0x1b,0x04,0x17,0xbb,0x08,0x22,0x05,0x24};
    std::uint8_t multiplicand23[32] = {0x6a,0x62,0xb5,0x74,0x12,0xcc,0x86,0x40,0xb0,0x65,0xe1,0x90,0x47,0x1d,0xd6,0x67,0x03,0x86,0x7f,0x20,0x7e,0x68,0x33,0x6f,0x6f,0xe9,0x66,0x03,0xc7,0x6e,0xb5,0x59};
    std::uint8_t product23[32]      = {0xad,0xe6,0xb2,0x99,0xe6,0x72,0x6d,0x3e,0xe0,0xef,0x29,0xde,0x44,0xf6,0xba,0x19,0xaa,0x61,0x83,0xa1,0x6b,0xbd,0x0d,0x0e,0xe1,0x71,0xe3,0xaf,0xcc,0x5c,0x85,0xff};
    mont256_from_bytes(&ctx, multiplier, multiplier23);
    mont256_from_bytes(&ctx, multiplicand, multiplicand23);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product23, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier24[32]   = {0x55,0xe8,0x26,0x09,0x98,0x2f,0x4b,0x51,0x75,0x06,0xdd,0xbd,0x9b,0x59,0x79,0xfb,0x9f,0x14,0xfd,0x37,0x09,0x38,0x98,0xf3,0xc2,0x1b,0x49,0x01,0xd3,0x8f,0xb2,0xd6};
    std::uint8_t multiplicand24[32] = {0x23,0xd5,0x2f,0xab,0x97,0x7f,0xc3,0x91,0x79,0x04,0xf4,0x23,0x9d,0x5f,0x3e,0x5a,0x17,0x17,0x27,0x5c,0x6e,0x6b,0x3e,0x49,0x07,0x93,0x69,0x71,0x7f,0xb1,0xe0,0x53};
    std::uint8_t product24[32]      = {0x3a,0x1f,0xe8,0x7b,0xfc,0x84,0x98,0x18,0x0d,0xde,0x5d,0xbf,0x4a,0x29,0x7d,0x81,0xc2,0xaf,0xc5,0xe9,0x8f,0xff,0x31,0xc4,0x6c,0x9a,0x0e,0xee,0xdf,0x24,0x07,0xfb};
    mont256_from_bytes(&ctx, multiplier, multiplier24);
    mont256_from_bytes(&ctx, multiplicand, multiplicand24);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product24, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier25[32]   = {0xfa,0x7f,0xe3,0xfd,0xbc,0x5d,0x32,0x61,0x96,0xee,0xbe,0xcb,0x72,0xdf,0xe0,0x8f,0x7e,0xdd,0xb6,0x83,0x0b,0x9a,0x20,0xbc,0xef,0x5b,0x5d,0x17,0xcf,0xd9,0x6e,0x34};
    std::uint8_t multiplicand25[32] = {0xc6,0x61,0x51,0xd2,0xc7,0x5e,0x9e,0x86,0xd1,0x21,0xc2,0xb0,0x8c,0x09,0x18,0xc5,0x43,0x1e,0x8d,0x49,0xa7,0x6e,0x34,0x35,0xf8,0xf3,0x07,0x3a,0x04,0xdd,0x3f,0x4d};
    std::uint8_t product25[32]      = {0x18,0xde,0xdc,0xdb,0xb9,0xfa,0xe5,0x28,0x90,0x9b,0xd0,0xf1,0x9c,0x47,0x3d,0x13,0x3b,0xe1,0xa8,0xe0,0x2d,0xf3,0xbf,0xfc,0x23,0xcd,0x26,0xfb,0xac,0x07,0x28,0x69};
    mont256_from_bytes(&ctx, multiplier, multiplier25);
    mont256_from_bytes(&ctx, multiplicand, multiplicand25);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product25, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier26[32]   = {0x49,0x6b,0xf1,0x6b,0xf8,0x62,0x02,0x17,0x1b,0x0a,0x90,0xd5,0xb2,0xa2,0x1d,0xab,0x14,0xf5,0x52,0x73,0x7f,0xe6,0xc4,0x04,0x94,0xa1,0xe3,0x04,0x83,0x31,0x73,0x1f};
    std::uint8_t multiplicand26[32] = {0xd3,0x4b,0x61,0x19,0xda,0x16,0x80,0xc2,0x37,0xc1,0x09,0x35,0xf4,0x63,0xc8,0x72,0xfd,0xa3,0x46,0x18,0x4c,0x66,0x01,0x2a,0xc1,0xc2,0x63,0xa9,0xa8,0x0a,0x7f,0xe0};
    std::uint8_t product26[32]      = {0xef,0x89,0x9f,0x8f,0xb5,0x28,0x88,0x07,0xe0,0xa6,0x78,0xc7,0xad,0xad,0x9b,0xcd,0x28,0x9f,0xca,0xda,0x3f,0x33,0x49,0xd9,0x1e,0xf9,0x23,0x37,0x64,0x5f,0x91,0x86};
    mont256_from_bytes(&ctx, multiplier, multiplier26);
    mont256_from_bytes(&ctx, multiplicand, multiplicand26);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product26, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier27[32]   = {0x5b,0x71,0xee,0xec,0xfa,0xf4,0xd3,0x01,0xda,0x16,0xd1,0x1a,0x75,0xf5,0x8c,0xf3,0x9f,0xde,0xe2,0x1b,0xdb,0x15,0xd4,0xbe,0xf0,0x4b,0x93,0xd3,0x24,0x6d,0x87,0xd7};
    std::uint8_t multiplicand27[32] = {0xf5,0xd7,0xde,0xac,0xfa,0x0c,0xe5,0x8c,0xc6,0x84,0x8b,0x95,0x09,0x73,0x5a,0x90,0xf2,0x74,0x58,0x6d,0xb9,0x1d,0x0f,0xf2,0xec,0x94,0x58,0x69,0x1f,0xae,0x39,0x86};
    std::uint8_t product27[32]      = {0xb8,0xde,0xab,0x9d,0x7c,0x8d,0x2a,0xf5,0x5b,0xb6,0x58,0x1b,0x1e,0x1a,0x29,0xb4,0x5c,0x57,0x60,0x27,0x75,0x5e,0xd6,0xd9,0x40,0x72,0x1a,0xdf,0x2b,0x05,0x58,0x5f};
    mont256_from_bytes(&ctx, multiplier, multiplier27);
    mont256_from_bytes(&ctx, multiplicand, multiplicand27);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product27, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier28[32]   = {0x19,0xb8,0x33,0x9a,0x3e,0x04,0x54,0x5f,0x28,0xd7,0xfa,0xfa,0x52,0x2f,0xf3,0x1f,0x53,0x76,0xd0,0x9b,0xf9,0xfb,0x0a,0x22,0x79,0x63,0x13,0xdf,0xd3,0xa3,0x64,0x87};
    std::uint8_t multiplicand28[32] = {0xc6,0x54,0x64,0xc1,0x64,0xac,0xf1,0x27,0x2d,0x80,0x39,0xaa,0xff,0x38,0x9b,0x35,0x03,0x9d,0x63,0x29,0x01,0xf7,0xb9,0x9e,0xf8,0xe9,0x3c,0x32,0x7c,0x2d,0xa1,0xc0};
    std::uint8_t product28[32]      = {0x74,0xc1,0xe9,0x97,0x9d,0x46,0x05,0xfc,0xba,0xc4,0x02,0xc6,0x06,0x35,0x78,0x13,0xce,0x67,0x42,0xbb,0x16,0xe8,0x6a,0x33,0x6f,0x79,0x03,0xea,0x20,0x2d,0x72,0x7e};
    mont256_from_bytes(&ctx, multiplier, multiplier28);
    mont256_from_bytes(&ctx, multiplicand, multiplicand28);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product28, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier29[32]   = {0xc2,0xbd,0xe2,0xdf,0x8d,0x9e,0x3b,0x34,0x8e,0x64,0x7f,0xb6,0x53,0x95,0x90,0xb4,0x62,0xba,0xb0,0x6c,0x03,0x6b,0xb4,0x8b,0x8f,0x47,0xbb,0x95,0xa4,0x31,0xa9,0x15};
    std::uint8_t multiplicand29[32] = {0xeb,0xc4,0xa0,0xe4,0xbb,0x9c,0x95,0x98,0x46,0x51,0x2a,0xae,0xbe,0xf9,0xc1,0xa0,0x04,0x11,0x8c,0x0d,0x0d,0x79,0x16,0x20,0x92,0xd7,0xa9,0xa5,0xd7,0x8a,0xe9,0x5b};
    std::uint8_t product29[32]      = {0x29,0x77,0x77,0xe2,0x4a,0x62,0xdb,0x9d,0xee,0x57,0x4d,0x6e,0xa0,0x1b,0x4d,0xd5,0x74,0x1d,0xab,0x24,0xe3,0x65,0xd8,0xa6,0x4b,0x7b,0x68,0x3f,0x62,0x78,0xa9,0x04};
    mont256_from_bytes(&ctx, multiplier, multiplier29);
    mont256_from_bytes(&ctx, multiplicand, multiplicand29);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product29, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier30[32]   = {0x02,0x0a,0x6f,0x96,0xa6,0xf8,0x4f,0x15,0x07,0x27,0x1a,0x6f,0xb7,0xb2,0x01,0xbd,0x5b,0x09,0xa8,0x5a,0xee,0x8d,0xd5,0x03,0xd4,0x9d,0xe4,0x21,0x76,0x21,0x90,0x77};
    std::uint8_t multiplicand30[32] = {0x4d,0xa3,0x45,0x2b,0x70,0xd0,0x5e,0x74,0x7f,0xda,0xf6,0x0b,0xc3,0xf9,0x9f,0x86,0x1e,0x76,0x74,0x93,0x6c,0xf9,0x1c,0x7d,0xb0,0x93,0x29,0xe8,0x2e,0x62,0xa0,0xc1};
    std::uint8_t product30[32]      = {0x73,0x77,0xe6,0x80,0x5e,0xf4,0x52,0x10,0x00,0x46,0x90,0xa2,0x9b,0x9c,0x81,0xbf,0xa9,0x28,0x47,0x65,0x7b,0x2b,0xdb,0x0d,0x06,0x82,0x7a,0x11,0xca,0xe4,0x28,0x03};
    mont256_from_bytes(&ctx, multiplier, multiplier30);
    mont256_from_bytes(&ctx, multiplicand, multiplicand30);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product30, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier31[32]   = {0x9c,0x39,0x88,0x5f,0x0f,0xe9,0x96,0x07,0x68,0x9c,0xb4,0x60,0xb0,0x02,0x3c,0x70,0x94,0x9c,0xdb,0x42,0x26,0xa5,0xe3,0xc1,0x40,0xb3,0x06,0xf6,0xd6,0xc0,0x36,0x6c};
    std::uint8_t multiplicand31[32] = {0xb7,0x33,0x27,0x1a,0x6a,0x09,0x4f,0x29,0xd1,0x47,0xad,0xec,0xd1,0x53,0xa9,0x74,0x6b,0x3f,0x22,0x70,0x05,0x2f,0x5f,0x17,0x67,0x6a,0x67,0x68,0xc2,0xcb,0x9c,0x17};
    std::uint8_t product31[32]      = {0x88,0x9a,0x80,0x3b,0xa5,0x0b,0xe1,0x85,0x2d,0x2d,0x7b,0xcc,0xc9,0xfb,0x99,0x73,0x19,0xee,0x75,0x6d,0x24,0x13,0x2c,0x10,0xe5,0xe4,0xfb,0x82,0xb4,0xd7,0x0a,0x15};
    mont256_from_bytes(&ctx, multiplier, multiplier31);
    mont256_from_bytes(&ctx, multiplicand, multiplicand31);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product31, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier32[32]   = {0x7b,0xe8,0x6c,0xfc,0x1e,0xbe,0x55,0x7c,0x44,0xbe,0x5f,0xca,0xb5,0xae,0x9f,0xb4,0x45,0xbb,0x52,0x6c,0xfa,0xa0,0xcd,0xb9,0x64,0x5e,0x50,0x80,0x34,0xc9,0x67,0x5f};
    std::uint8_t multiplicand32[32] = {0xe1,0x8f,0x67,0xf4,0x2b,0x1b,0xd2,0x69,0x7c,0x5e,0x70,0x25,0xa5,0x82,0xf1,0xc1,0xbe,0x7d,0xcd,0xb0,0x9a,0x44,0x91,0x45,0x99,0xc0,0xb3,0x15,0x87,0x09,0x7d,0x64};
    std::uint8_t product32[32]      = {0x22,0x27,0x2f,0x84,0x65,0x2b,0x3f,0x71,0x1d,0x43,0xb9,0xd8,0x40,0x07,0x00,0x93,0x47,0x74,0x23,0x83,0x69,0x1b,0x8f,0xea,0x99,0x03,0x3d,0xa2,0xee,0x52,0x94,0xc6};
    mont256_from_bytes(&ctx, multiplier, multiplier32);
    mont256_from_bytes(&ctx, multiplicand, multiplicand32);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product32, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier33[32]   = {0xcc,0xc5,0xaa,0xa0,0x29,0x90,0xc6,0xe9,0x35,0x7d,0x9a,0x6f,0x9f,0x3d,0xe6,0xcc,0xab,0xc9,0xa8,0x2d,0xff,0x9f,0x99,0x4c,0x4a,0x5b,0xd0,0xfd,0x78,0x09,0x4d,0x54};
    std::uint8_t multiplicand33[32] = {0x29,0xc6,0x41,0x82,0x37,0x9b,0x1a,0x49,0x85,0x66,0xaf,0x0f,0x27,0xcd,0x6f,0xad,0x33,0x38,0x19,0x91,0xee,0x4d,0x10,0x72,0x40,0x4f,0xec,0x32,0x8d,0xce,0x76,0x86};
    std::uint8_t product33[32]      = {0x72,0xf9,0x26,0xd8,0x3c,0xe7,0x7e,0x6e,0x47,0xea,0xfc,0x6b,0xf9,0xc3,0xe8,0x09,0xb8,0x70,0xf2,0xf2,0x5c,0x47,0xb1,0xcd,0x07,0x1c,0x43,0x5d,0x6e,0x5f,0x5e,0x4a};
    mont256_from_bytes(&ctx, multiplier, multiplier33);
    mont256_from_bytes(&ctx, multiplicand, multiplicand33);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product33, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier34[32]   = {0xae,0x48,0xfc,0xdd,0x19,0x68,0xc0,0x92,0xb3,0x7a,0x85,0x4a,0xfa,0xf6,0x4a,0x8c,0xd8,0x1c,0x8e,0x9f,0xf4,0xc6,0xd8,0x20,0x2d,0x53,0x03,0x5f,0x58,0xf7,0xb5,0xde};
    std::uint8_t multiplicand34[32] = {0xb9,0xa4,0xfb,0xbf,0x29,0xb7,0xbc,0x1c,0x20,0xdb,0x0c,0x9d,0x3e,0x96,0x30,0x15,0xed,0x17,0x17,0xd4,0x5a,0xa9,0xa9,0x42,0xc3,0x88,0xc4,0x5b,0xe6,0x6e,0xe1,0x57};
    std::uint8_t product34[32]      = {0x64,0xaa,0x22,0xb0,0xbe,0xd7,0xd8,0x39,0x36,0x06,0xa0,0xaf,0x11,0x90,0xc7,0x9b,0xc9,0xfc,0x9c,0xb9,0x05,0xa1,0x96,0x00,0xac,0xd2,0x6c,0xc4,0x81,0x98,0xc2,0xb2};
    mont256_from_bytes(&ctx, multiplier, multiplier34);
    mont256_from_bytes(&ctx, multiplicand, multiplicand34);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product34, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier35[32]   = {0x3d,0xfb,0x78,0x12,0x25,0x8e,0x3c,0x0e,0x08,0xd7,0xfc,0x0b,0x66,0x50,0x81,0x7d,0x7b,0x02,0x81,0xa2,0x2d,0x59,0x45,0x4f,0x5f,0x72,0x45,0x81,0xae,0x90,0xb0,0xd2};
    std::uint8_t multiplicand35[32] = {0x7b,0xfc,0xe0,0x22,0xd0,0x93,0x73,0xf4,0x64,0xe1,0xc3,0x36,0x0a,0x10,0x36,0x88,0x31,0x9b,0x80,0x2d,0xe1,0x14,0xe1,0xee,0x58,0x6c,0x76,0xf0,0x55,0xe2,0x60,0x21};
    std::uint8_t product35[32]      = {0xd5,0xe6,0x70,0xeb,0xf1,0xbc,0xdd,0x20,0x55,0xb1,0x83,0xa2,0x0f,0xf2,0xff,0xf4,0x39,0x2c,0xd5,0x71,0x69,0x26,0xbe,0xa3,0x29,0xaa,0x50,0x5d,0xef,0x75,0x02,0x2e};
    mont256_from_bytes(&ctx, multiplier, multiplier35);
    mont256_from_bytes(&ctx, multiplicand, multiplicand35);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product35, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier36[32]   = {0x14,0x26,0x9b,0x38,0x4f,0xdc,0x12,0x53,0xe5,0xfd,0x0c,0x38,0x40,0xa0,0xe6,0x51,0xf8,0x98,0xbd,0x32,0x98,0xcd,0x8e,0xa3,0xc2,0xc6,0x5b,0x5c,0x7c,0x0a,0xaf,0xb7};
    std::uint8_t multiplicand36[32] = {0x6c,0x96,0x61,0x63,0xee,0xab,0x1b,0x8b,0x13,0xb5,0x17,0x09,0x75,0xe8,0xd4,0xb3,0xce,0x0d,0x2e,0x00,0xa9,0xcd,0xcd,0x9b,0x4e,0x78,0x32,0x36,0xd0,0xed,0x39,0x95};
    std::uint8_t product36[32]      = {0xa0,0xd3,0xa7,0xa5,0x0c,0xdc,0x14,0xbe,0x7a,0xf8,0x5f,0xed,0x5e,0xb5,0x2c,0x5e,0x66,0x7c,0x2f,0x18,0x06,0x61,0xb2,0xb5,0xc6,0xbc,0x93,0x86,0x20,0x25,0x1d,0xf5};
    mont256_from_bytes(&ctx, multiplier, multiplier36);
    mont256_from_bytes(&ctx, multiplicand, multiplicand36);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product36, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier37[32]   = {0xad,0xc5,0xc3,0xd4,0x0b,0x42,0x79,0xc9,0xd4,0x45,0xa5,0x32,0xeb,0xc2,0xc3,0xb7,0x8e,0x50,0x89,0xb3,0x3d,0x1b,0xe2,0x07,0x5f,0x6b,0x9e,0x9a,0x62,0x8c,0x83,0x9c};
    std::uint8_t multiplicand37[32] = {0x4b,0x4c,0x62,0xe5,0x4e,0x96,0xe7,0x82,0x59,0x75,0x77,0x68,0x78,0xc7,0xd8,0x61,0xa8,0x14,0xc2,0x0f,0xba,0x61,0xc4,0xfb,0xe8,0x74,0x82,0x97,0x40,0xd9,0x21,0x10};
    std::uint8_t product37[32]      = {0x7c,0xc5,0xc3,0x51,0x8b,0x33,0x32,0x5a,0x51,0x2f,0x39,0x37,0xf8,0x53,0x76,0xb3,0x15,0x23,0xbd,0x7f,0x5a,0xa7,0x98,0x03,0x31,0x7d,0x75,0x11,0x19,0x07,0xdf,0xd5};
    mont256_from_bytes(&ctx, multiplier, multiplier37);
    mont256_from_bytes(&ctx, multiplicand, multiplicand37);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product37, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier38[32]   = {0x9f,0x13,0x1e,0xdc,0xf1,0xef,0x6c,0xc2,0x07,0xd1,0x88,0xc8,0x61,0x3b,0x0b,0x91,0xc9,0xe1,0x32,0x00,0x71,0xc3,0xdd,0x95,0x56,0xb2,0x49,0x7f,0x93,0x0a,0x5e,0xed};
    std::uint8_t multiplicand38[32] = {0xce,0x6e,0xca,0xaa,0x13,0x36,0x4b,0x7b,0x2d,0x0a,0xe3,0x2f,0x14,0xfe,0xd6,0x4d,0x2b,0x7a,0xed,0x8d,0x84,0x7a,0xfc,0x9a,0x54,0x71,0xde,0xbe,0xc3,0x69,0x88,0xa0};
    std::uint8_t product38[32]      = {0xd4,0x9c,0x00,0x32,0xeb,0xc1,0x47,0xc2,0x17,0xd2,0xf3,0x42,0x04,0x7c,0xa2,0xc1,0xfb,0x91,0x14,0xff,0xe0,0x01,0xaf,0x81,0xe1,0x64,0x94,0xe4,0x51,0x1c,0x6b,0xc2};
    mont256_from_bytes(&ctx, multiplier, multiplier38);
    mont256_from_bytes(&ctx, multiplicand, multiplicand38);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product38, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier39[32]   = {0x36,0x89,0x6a,0x3e,0x3b,0xb3,0x54,0xbf,0x9f,0xea,0xef,0x4c,0xc6,0x97,0xe7,0xbf,0xe8,0xc9,0xd6,0xd1,0xc1,0x9d,0xbc,0xfd,0xf1,0xa5,0xad,0xa2,0x98,0x65,0xa9,0x95};
    std::uint8_t multiplicand39[32] = {0x6d,0x98,0x9b,0xdd,0x95,0x86,0x23,0x47,0xbb,0xb5,0x05,0xfe,0xda,0x59,0x74,0xe4,0xd5,0x95,0xda,0x19,0x72,0xa0,0x62,0x3f,0x0e,0xf1,0x47,0x41,0xa7,0x52,0xec,0xbd};
    std::uint8_t product39[32]      = {0x0f,0xf7,0x7a,0xa9,0x22,0x9b,0x42,0x16,0x07,0x09,0xf0,0x8e,0xfc,0xdf,0x09,0xc2,0x72,0x5f,0x26,0x38,0x78,0x02,0x73,0xe9,0x15,0xe9,0x15,0x2c,0x36,0x35,0x7f,0x8c};
    mont256_from_bytes(&ctx, multiplier, multiplier39);
    mont256_from_bytes(&ctx, multiplicand, multiplicand39);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product39, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier40[32]   = {0x4c,0x13,0xe7,0x4a,0x9b,0xe1,0xc4,0x10,0x4e,0xad,0x3e,0x72,0x5c,0x95,0x1e,0x13,0xf5,0x93,0x6c,0x61,0xef,0xd8,0xfb,0xb8,0x4d,0xfd,0xbf,0x40,0xcd,0x0c,0x0f,0x72};
    std::uint8_t multiplicand40[32] = {0x8e,0xf9,0x5f,0xdf,0x17,0xe5,0x57,0x7a,0xd9,0x52,0x75,0x29,0x0f,0x47,0xc1,0x36,0x8b,0x3e,0x24,0x42,0xc0,0x18,0x91,0x9e,0x4e,0xe2,0xeb,0xca,0x65,0x6c,0xb4,0xcf};
    std::uint8_t product40[32]      = {0x62,0x5d,0x2e,0x60,0xb8,0xff,0xb4,0x27,0xc8,0xa2,0x73,0x72,0x92,0x7e,0x4b,0xb9,0x07,0x2f,0x85,0xb2,0x8a,0x17,0x93,0xf9,0xef,0x81,0xfc,0x81,0x92,0xad,0x17,0x08};
    mont256_from_bytes(&ctx, multiplier, multiplier40);
    mont256_from_bytes(&ctx, multiplicand, multiplicand40);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product40, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier41[32]   = {0x9c,0x1d,0xe2,0x9f,0x13,0x48,0xb8,0x8a,0xe0,0x07,0x36,0x14,0xd9,0x1a,0x51,0x01,0x65,0x8a,0x56,0xc7,0xe1,0x2e,0xd1,0xe9,0xa7,0x85,0xa8,0xa1,0x4c,0x7a,0xb1,0x77};
    std::uint8_t multiplicand41[32] = {0x7f,0xb7,0x86,0xeb,0x5f,0xef,0xb1,0xc5,0x39,0x6f,0x72,0xa5,0xfb,0x4d,0x23,0x1d,0x90,0x6e,0x46,0x1e,0x29,0x76,0x9c,0x4f,0x61,0x9a,0x9c,0x69,0xdd,0x76,0x21,0x5b};
    std::uint8_t product41[32]      = {0xb7,0x57,0x7f,0xca,0xcc,0x94,0x3d,0x46,0xc1,0xb0,0x1f,0x5e,0xb0,0xa7,0xe0,0x5d,0xf8,0xc0,0xd5,0xe2,0xf4,0x1d,0xa1,0x73,0x15,0x70,0xcb,0x96,0xe3,0x7c,0x36,0x7e};
    mont256_from_bytes(&ctx, multiplier, multiplier41);
    mont256_from_bytes(&ctx, multiplicand, multiplicand41);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product41, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier42[32]   = {0xf1,0xba,0xdb,0xfe,0x78,0x4f,0xbc,0x48,0xa0,0x89,0x10,0x4c,0x0d,0xe9,0x1d,0x26,0xcf,0x40,0x20,0xdc,0xe9,0xf5,0x9f,0x89,0xb1,0x13,0x12,0x2a,0x21,0x17,0x92,0xb2};
    std::uint8_t multiplicand42[32] = {0xd2,0x1f,0x56,0x55,0x78,0x06,0xba,0x3a,0xbb,0xc8,0x65,0x8b,0xd2,0xec,0xa0,0xfb,0x06,0x02,0xe8,0x1f,0x91,0xf9,0xe4,0x92,0xe3,0xe2,0xdd,0x54,0x26,0x26,0xf2,0x68};
    std::uint8_t product42[32]      = {0x38,0xfd,0x6b,0x4a,0xa1,0x4b,0x8f,0xa7,0x70,0xfc,0xa5,0x2e,0xd7,0x97,0x86,0xbc,0xc7,0x9f,0x52,0x78,0xa1,0x13,0x18,0x8b,0xec,0xbd,0xc7,0x8f,0xe1,0xcc,0xc7,0x48};
    mont256_from_bytes(&ctx, multiplier, multiplier42);
    mont256_from_bytes(&ctx, multiplicand, multiplicand42);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product42, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier43[32]   = {0x78,0x1b,0xe3,0xbd,0x68,0x92,0x77,0x44,0xe5,0x21,0x8c,0x15,0x6c,0x20,0x41,0x4e,0xba,0x69,0xe7,0x2b,0x23,0xee,0x4b,0x53,0xf9,0x10,0xa1,0x82,0x0c,0xc6,0x04,0xb7};
    std::uint8_t multiplicand43[32] = {0xd6,0x4d,0xf0,0xe8,0x70,0x5d,0x28,0x48,0xd5,0x83,0x80,0x87,0x5c,0x4e,0x02,0xbf,0x6a,0x35,0x48,0xaf,0xd5,0x97,0xe4,0xb3,0xe2,0xdd,0x96,0xc9,0x73,0x2b,0x6c,0x6d};
    std::uint8_t product43[32]      = {0xc5,0xe3,0x20,0xe1,0xe3,0x66,0x53,0x5e,0xf1,0xff,0x1c,0x29,0x34,0xca,0xbe,0xb3,0x6e,0xde,0x88,0x27,0x8a,0xd9,0x8e,0x05,0x43,0x93,0xa5,0x9b,0x12,0xbb,0x1f,0x93};
    mont256_from_bytes(&ctx, multiplier, multiplier43);
    mont256_from_bytes(&ctx, multiplicand, multiplicand43);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product43, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier44[32]   = {0xa2,0x81,0xf6,0xf9,0xc2,0x7a,0xe4,0x94,0x5b,0xe2,0x57,0xab,0x01,0x54,0x54,0x5a,0x44,0x7e,0x56,0x89,0xe4,0x70,0x42,0x50,0xf7,0x47,0xcd,0x96,0x3e,0x29,0x98,0xb8};
    std::uint8_t multiplicand44[32] = {0x97,0xc9,0x8b,0xf0,0xf6,0x97,0x70,0x9d,0xc6,0x36,0xb3,0xcf,0x41,0xe3,0xc1,0x58,0x84,0x7a,0xc4,0xb8,0xef,0x88,0x6e,0xf9,0x6b,0x70,0xc0,0x38,0xcc,0x7c,0xa1,0x8a};
    std::uint8_t product44[32]      = {0xbc,0xda,0x26,0x35,0xea,0x83,0xf6,0x46,0x70,0x91,0xf2,0x21,0x32,0xc0,0xf0,0x08,0xe0,0x5c,0x3e,0xe3,0xa5,0xe7,0x9b,0xbf,0x51,0x42,0xad,0xb9,0x8e,0xd0,0xa1,0xa7};
    mont256_from_bytes(&ctx, multiplier, multiplier44);
    mont256_from_bytes(&ctx, multiplicand, multiplicand44);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product44, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier45[32]   = {0x18,0x63,0xac,0x94,0x40,0xf5,0x31,0x31,0x50,0x25,0x4a,0xb6,0x31,0x50,0x1b,0x6d,0x81,0x57,0x0e,0x07,0x44,0x55,0x2c,0x62,0xd6,0x7e,0xae,0x1e,0xe1,0x01,0x1f,0x24};
    std::uint8_t multiplicand45[32] = {0xe1,0x40,0xf2,0xca,0xf1,0xd0,0xa4,0xb0,0xe6,0x0a,0xd5,0x49,0xe4,0xca,0xc9,0xb3,0xd7,0x8f,0xfe,0x84,0x95,0x11,0xd8,0xb0,0x26,0x45,0x9d,0x97,0x75,0x4a,0x01,0x11};
    std::uint8_t product45[32]      = {0x60,0x5c,0x40,0xf2,0x3a,0x50,0x98,0x72,0x0b,0xec,0xc7,0xbe,0xae,0x70,0x5a,0x49,0x23,0x61,0x41,0xc9,0xd2,0xac,0xef,0xfb,0x18,0x16,0x54,0x39,0x44,0x40,0xe0,0xd9};
    mont256_from_bytes(&ctx, multiplier, multiplier45);
    mont256_from_bytes(&ctx, multiplicand, multiplicand45);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product45, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier46[32]   = {0xdd,0x5e,0xd7,0xa8,0x88,0x56,0xa5,0xdf,0x08,0x11,0xa8,0xe7,0xa5,0x70,0x44,0xdb,0xef,0x28,0x67,0xfe,0xc1,0x7e,0x2e,0x2a,0x96,0xa3,0x57,0x68,0x94,0xd8,0x25,0xdd};
    std::uint8_t multiplicand46[32] = {0x26,0x4c,0xbc,0xfb,0x2c,0xca,0x39,0x52,0xf7,0x21,0x8f,0x27,0xa2,0x91,0x60,0x39,0x13,0xdd,0x59,0xdd,0x41,0xd5,0x22,0x72,0x5b,0xd0,0x45,0x3b,0x97,0xfd,0x49,0x18};
    std::uint8_t product46[32]      = {0x30,0x40,0x08,0xae,0x70,0xcc,0x31,0x3e,0xef,0xdb,0x54,0xeb,0xaa,0x86,0x37,0x1f,0xdf,0xc0,0x35,0x58,0x9a,0x1f,0xc6,0x55,0x79,0x04,0x48,0xb3,0x4c,0xa8,0x7e,0xe2};
    mont256_from_bytes(&ctx, multiplier, multiplier46);
    mont256_from_bytes(&ctx, multiplicand, multiplicand46);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product46, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier47[32]   = {0x94,0x49,0x2c,0x7a,0x18,0xc9,0xb3,0x6f,0xf1,0xc3,0x4d,0xe0,0x05,0x7d,0x47,0xfd,0x76,0x3b,0xed,0x3f,0x84,0x07,0xa6,0x97,0x08,0x89,0xb9,0xc2,0xa6,0xbc,0xe3,0xc7};
    std::uint8_t multiplicand47[32] = {0x3e,0xec,0xa8,0xb5,0x60,0xaf,0xf8,0x22,0x1c,0xd9,0x39,0x1a,0x2c,0xa3,0x07,0xc2,0xd2,0x32,0x31,0x05,0x29,0x9d,0x1e,0x2f,0xa4,0x16,0xd6,0x30,0x86,0xce,0x2a,0xb8};
    std::uint8_t product47[32]      = {0xb3,0xac,0xbb,0xf3,0x82,0xd0,0xa1,0x7a,0x7d,0x65,0x85,0xe5,0xf5,0x6d,0x5d,0x07,0xff,0x07,0x07,0x39,0xbd,0x78,0x7b,0x90,0x22,0xc9,0x3f,0x92,0x95,0xab,0x01,0x0d};
    mont256_from_bytes(&ctx, multiplier, multiplier47);
    mont256_from_bytes(&ctx, multiplicand, multiplicand47);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product47, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier48[32]   = {0x7d,0xfb,0xfe,0x63,0x43,0x3b,0xbe,0x57,0x48,0xfc,0x81,0xbd,0x3c,0x47,0x2a,0xd9,0xf2,0xf2,0xc7,0x7b,0x27,0x57,0x58,0x06,0xdd,0x9c,0x04,0x23,0x48,0x5e,0x62,0xe2};
    std::uint8_t multiplicand48[32] = {0x69,0x30,0xc8,0x7a,0x35,0xbc,0xd3,0x96,0x4b,0xf7,0x29,0x77,0x9e,0x5e,0x65,0x8e,0xec,0x80,0x8e,0x92,0x77,0x2c,0x1d,0x49,0xf4,0x55,0x71,0x44,0xa5,0x6d,0x06,0x3f};
    std::uint8_t product48[32]      = {0x2c,0xb7,0x4f,0x25,0xec,0xf8,0x39,0xb1,0x54,0x83,0x67,0xde,0x03,0xdb,0x4a,0x1d,0x28,0x9b,0x45,0x76,0xf3,0x60,0xb8,0xca,0x0b,0x2d,0x3e,0x74,0x8d,0x70,0x01,0x1e};
    mont256_from_bytes(&ctx, multiplier, multiplier48);
    mont256_from_bytes(&ctx, multiplicand, multiplicand48);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product48, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier49[32]   = {0xe0,0xe1,0x36,0x37,0xca,0xe4,0x13,0xbc,0x44,0x06,0x45,0xcf,0xd2,0x0e,0xa5,0x35,0xa9,0x32,0x61,0x33,0x2d,0xd0,0x72,0x48,0xc8,0xba,0x5a,0xc1,0xfa,0x1c,0x9e,0x06};
    std::uint8_t multiplicand49[32] = {0xa5,0x3f,0xcb,0x68,0x93,0xa5,0x06,0x33,0xe5,0x2b,0x2b,0x7c,0xc8,0xbb,0x32,0x1a,0xf8,0xf2,0x2f,0x16,0x23,0x96,0xc8,0x92,0x10,0xd9,0xed,0xfc,0xc9,0xa8,0x61,0xd4};
    std::uint8_t product49[32]      = {0xa2,0x10,0x60,0x73,0x4b,0x18,0x45,0x91,0x24,0x55,0x1f,0x04,0x83,0x20,0x84,0x69,0x88,0x78,0x16,0x19,0x45,0x75,0x30,0xb4,0xa6,0x85,0xfe,0xbd,0x9f,0x57,0xa0,0x55};
    mont256_from_bytes(&ctx, multiplier, multiplier49);
    mont256_from_bytes(&ctx, multiplicand, multiplicand49);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product49, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier50[32]   = {0x59,0x15,0xaa,0x0e,0x87,0xbf,0xf5,0xd8,0x57,0x06,0x44,0xca,0x7e,0x50,0xc4,0x46,0xe1,0x09,0xbf,0xb1,0x21,0x1f,0xa7,0xcd,0x97,0x0f,0x6e,0x47,0x97,0x42,0x8c,0xc2};
    std::uint8_t multiplicand50[32] = {0x72,0x55,0x3c,0xee,0xc0,0x68,0xd8,0x1e,0x52,0x74,0xc1,0x6b,0x65,0x02,0xd4,0x99,0xb6,0x45,0x82,0x06,0x40,0xb1,0x57,0x40,0x02,0x17,0xec,0x6d,0xbe,0x9e,0x86,0xb7};
    std::uint8_t product50[32]      = {0xfc,0x71,0x4a,0xec,0xa6,0x3b,0xac,0x0b,0xe1,0x55,0xde,0xf6,0xcc,0x01,0x7b,0xc2,0x07,0x45,0xa6,0xdf,0x5b,0x08,0xe8,0xd7,0x8f,0x5a,0x03,0x48,0x15,0xc8,0x32,0x1a};
    mont256_from_bytes(&ctx, multiplier, multiplier50);
    mont256_from_bytes(&ctx, multiplicand, multiplicand50);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product50, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier51[32]   = {0xa3,0x55,0xdb,0x7e,0xc3,0x3d,0x3d,0x79,0xd6,0x20,0xe2,0x12,0x6d,0x95,0xba,0x89,0xef,0x37,0x9b,0x20,0xd8,0x71,0xa2,0x6e,0xdb,0xf9,0xae,0x26,0x71,0xde,0xd5,0xd1};
    std::uint8_t multiplicand51[32] = {0xf4,0x82,0x5b,0xe9,0x1e,0xaa,0x6e,0x8f,0x88,0xe6,0xc0,0xf4,0x3d,0xb4,0xe6,0x85,0x83,0x70,0xe9,0x17,0xf6,0x06,0xc6,0xf6,0xd4,0x5b,0x32,0xb8,0xaf,0xf5,0x1d,0x8d};
    std::uint8_t product51[32]      = {0xa6,0x56,0x0f,0xc1,0x55,0xdf,0x35,0xcb,0x6b,0x6d,0xd5,0xa1,0xaf,0x54,0x38,0x5a,0xbd,0x2b,0xe1,0x9d,0xd4,0xc0,0x05,0x34,0x24,0x14,0xdd,0xcb,0xe7,0xbb,0x4c,0x99};
    mont256_from_bytes(&ctx, multiplier, multiplier51);
    mont256_from_bytes(&ctx, multiplicand, multiplicand51);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product51, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier52[32]   = {0x6a,0xf6,0x0d,0x6f,0x63,0x29,0x97,0x6b,0x81,0xe4,0x82,0xe5,0x28,0x08,0xd4,0x8a,0x4e,0x90,0xc5,0xea,0xaa,0x39,0xea,0x70,0x3e,0x1f,0x20,0x01,0x45,0x04,0x46,0x1b};
    std::uint8_t multiplicand52[32] = {0xab,0x36,0x16,0xe3,0x92,0x9d,0xf7,0x19,0xb6,0xe7,0x40,0xa4,0x19,0x9f,0x0d,0x6f,0xf3,0x92,0xae,0xd9,0x02,0xe8,0x2c,0xa9,0x4c,0x5c,0x57,0xda,0x18,0xa3,0xa3,0x95};
    std::uint8_t product52[32]      = {0x4c,0x2b,0x42,0x19,0x0e,0x8a,0xe3,0x62,0x56,0x50,0xf2,0xda,0xe8,0x8c,0x47,0xfc,0x64,0x7d,0xd6,0xf6,0x67,0x80,0xc4,0xe0,0x63,0x41,0xa0,0xe7,0x88,0x69,0x3f,0x34};
    mont256_from_bytes(&ctx, multiplier, multiplier52);
    mont256_from_bytes(&ctx, multiplicand, multiplicand52);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product52, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier53[32]   = {0xf5,0x30,0x73,0x59,0x30,0xe9,0x72,0x7d,0x12,0x78,0x9e,0x75,0x45,0x9d,0x42,0xa0,0x43,0x2b,0x5b,0x55,0xd2,0xc2,0x3e,0x57,0x24,0x12,0x4b,0x8a,0xaf,0x2f,0x2a,0x91};
    std::uint8_t multiplicand53[32] = {0x62,0xfa,0x69,0x5b,0x20,0xfd,0x4e,0x89,0xf2,0x09,0x4e,0x67,0xa2,0x36,0x88,0xc5,0x93,0xe7,0xb9,0x17,0xa2,0x73,0xc0,0x37,0xe9,0x62,0x9e,0x6c,0x07,0x7d,0x1e,0xf0};
    std::uint8_t product53[32]      = {0x7b,0x85,0x05,0x75,0xfc,0xdc,0x58,0x31,0x1c,0x53,0x6f,0xa5,0x0b,0x9a,0x0f,0x28,0x02,0x8d,0xc0,0xc8,0x09,0x99,0xd9,0x9f,0x39,0x48,0x86,0x33,0x82,0xb5,0x47,0x56};
    mont256_from_bytes(&ctx, multiplier, multiplier53);
    mont256_from_bytes(&ctx, multiplicand, multiplicand53);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product53, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier54[32]   = {0x9a,0x17,0xde,0x1e,0x64,0x98,0x1d,0x96,0xc6,0x19,0xf6,0x8f,0x89,0x62,0xc9,0x84,0xb0,0x92,0xee,0x5e,0x8a,0x11,0xdb,0xc2,0xab,0x2c,0x8e,0xcb,0xbc,0xae,0x63,0x2a};
    std::uint8_t multiplicand54[32] = {0x2e,0xad,0x64,0x1c,0x2b,0x25,0xf0,0xef,0x36,0x50,0xa5,0x13,0x15,0x42,0x31,0x00,0xbc,0x86,0x87,0xae,0xac,0xa9,0x8c,0x70,0x67,0x68,0xa4,0x84,0xb7,0x43,0xe1,0x74};
    std::uint8_t product54[32]      = {0x41,0x0e,0x3c,0xe1,0x8e,0x86,0x30,0x24,0x8b,0xbb,0x42,0xe9,0x7a,0xe4,0x41,0xec,0xae,0x3c,0x22,0x51,0x62,0x7d,0x66,0x7b,0x6b,0xe5,0x92,0x8c,0x1f,0xf0,0x92,0x1b};
    mont256_from_bytes(&ctx, multiplier, multiplier54);
    mont256_from_bytes(&ctx, multiplicand, multiplicand54);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product54, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier55[32]   = {0x96,0x65,0x46,0x09,0x62,0x7c,0x3d,0x9f,0x16,0xc1,0xad,0x3b,0x3c,0xec,0xf1,0xe8,0xaa,0x4c,0x58,0x17,0x2d,0xaf,0x58,0xa9,0xd8,0x4a,0xa6,0x0c,0x54,0x4c,0xdd,0x32};
    std::uint8_t multiplicand55[32] = {0x08,0xf5,0xde,0x07,0x4e,0x2c,0x50,0x35,0x62,0x5d,0xe5,0xcc,0xb2,0x65,0x6f,0x7b,0x91,0xe0,0xbd,0xce,0x66,0xe6,0x8b,0xd2,0xf0,0x77,0x07,0xfa,0xb4,0x1f,0x23,0x34};
    std::uint8_t product55[32]      = {0x2a,0xa7,0x81,0xfe,0x23,0xb2,0xe1,0xd2,0x20,0x1f,0x22,0x59,0xdb,0xcd,0x3b,0xdf,0x6e,0xf3,0xc7,0xa1,0xda,0x9d,0xb2,0x23,0x2e,0x05,0x16,0x12,0x1f,0xd8,0xba,0x5c};
    mont256_from_bytes(&ctx, multiplier, multiplier55);
    mont256_from_bytes(&ctx, multiplicand, multiplicand55);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product55, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier56[32]   = {0xb3,0x28,0x55,0xe3,0x78,0xb6,0x81,0x34,0x19,0x7c,0xe9,0x39,0x34,0xdd,0x14,0xb9,0x8d,0x9f,0x1b,0xf1,0xb3,0x83,0x66,0xd5,0xed,0x23,0x0a,0x7c,0x73,0x34,0xbc,0x7b};
    std::uint8_t multiplicand56[32] = {0xcc,0x4f,0xe3,0x89,0x15,0x38,0x12,0x07,0x33,0xae,0x7c,0xd7,0x0e,0x0a,0x02,0xd7,0xbd,0x6f,0x57,0x57,0x49,0x74,0x2e,0xcc,0xb7,0x79,0xd7,0x49,0x5b,0x73,0x9c,0xaa};
    std::uint8_t product56[32]      = {0xfa,0x9a,0x4a,0xe6,0xc3,0x7f,0x34,0x0b,0x30,0xa3,0xb4,0xe7,0x51,0xf5,0x69,0xa8,0x45,0x50,0x5a,0x05,0xc5,0x59,0x17,0xbe,0x78,0x56,0x6a,0xdb,0xcc,0xf4,0x64,0x8e};
    mont256_from_bytes(&ctx, multiplier, multiplier56);
    mont256_from_bytes(&ctx, multiplicand, multiplicand56);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product56, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier57[32]   = {0x05,0x69,0x98,0x3d,0xfa,0xf5,0x70,0x97,0x19,0x1b,0x24,0xab,0xf2,0x5e,0x67,0x6c,0x6b,0x50,0x30,0xd9,0x67,0x40,0x07,0xa0,0x74,0x2d,0x7c,0x2e,0x09,0xe3,0xbc,0x6b};
    std::uint8_t multiplicand57[32] = {0xb0,0x35,0xe3,0x18,0x56,0xf4,0x51,0x89,0x69,0x75,0xf7,0xe2,0x6d,0xfe,0x77,0x2d,0xd6,0x69,0xaf,0x6a,0x6f,0xc7,0xba,0x48,0xfa,0x1a,0xc0,0x02,0xfc,0xad,0x01,0x94};
    std::uint8_t product57[32]      = {0x53,0x43,0x0e,0xca,0xb7,0x89,0x04,0x88,0xd7,0x08,0x1e,0x93,0x0e,0xf5,0xdb,0x16,0x46,0x16,0xaa,0x67,0xfb,0x2c,0xc0,0xe9,0x54,0x41,0xcc,0x1a,0x2a,0x4d,0x3b,0xf9};
    mont256_from_bytes(&ctx, multiplier, multiplier57);
    mont256_from_bytes(&ctx, multiplicand, multiplicand57);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product57, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier58[32]   = {0x64,0x07,0x8a,0x93,0xd4,0x49,0xe4,0xe3,0xbf,0xaa,0x2e,0x40,0x25,0x67,0x27,0x36,0x94,0x7d,0xf8,0x93,0xa3,0x1f,0x9d,0x21,0x50,0x61,0x6c,0xa0,0xaa,0xa4,0xfa,0x87};
    std::uint8_t multiplicand58[32] = {0xfd,0x6c,0x8e,0xcb,0xef,0xa0,0xfe,0xdd,0x65,0xc6,0x42,0xfa,0x27,0x67,0xd2,0xd7,0xa1,0x00,0xf4,0x31,0x8d,0xe1,0x4b,0x16,0xd7,0xac,0x53,0x1c,0xe9,0xe8,0x17,0xbc};
    std::uint8_t product58[32]      = {0xea,0xa7,0x3c,0x0c,0xc1,0x37,0x93,0x3f,0x44,0xae,0x49,0x8a,0xb1,0xa7,0x4a,0x4d,0xc7,0xf7,0x96,0x09,0x62,0xfa,0x5b,0x67,0x99,0xa1,0xa1,0xa0,0xa9,0xf7,0xe8,0xc7};
    mont256_from_bytes(&ctx, multiplier, multiplier58);
    mont256_from_bytes(&ctx, multiplicand, multiplicand58);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product58, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier59[32]   = {0x5d,0xfe,0x97,0x89,0xa2,0x19,0x96,0xfa,0x83,0x4a,0xa0,0x61,0xbb,0xdd,0x88,0xa4,0x34,0x01,0x49,0x1d,0x13,0x3a,0x82,0xa8,0xca,0x5c,0xcf,0x30,0x0d,0x42,0xa0,0xef};
    std::uint8_t multiplicand59[32] = {0xcb,0x03,0x02,0x44,0x8d,0x04,0x80,0x3f,0x06,0xec,0xbe,0xa6,0x4d,0x3d,0x2d,0xd9,0xd5,0x26,0x43,0xe6,0x83,0x4b,0x8a,0x92,0x81,0xec,0x40,0x81,0x83,0x17,0xa3,0x43};
    std::uint8_t product59[32]      = {0xb5,0x6c,0x48,0x35,0xb8,0xf4,0x0b,0x57,0x3c,0x2a,0x35,0x96,0x75,0xeb,0x51,0xf6,0x7d,0xd7,0xcf,0xb3,0x46,0x65,0xcf,0x2b,0x23,0x31,0x1f,0xfe,0x1d,0xe8,0x64,0x71};
    mont256_from_bytes(&ctx, multiplier, multiplier59);
    mont256_from_bytes(&ctx, multiplicand, multiplicand59);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product59, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier60[32]   = {0x7a,0x54,0xcd,0x25,0xbb,0xbc,0x91,0x35,0xe9,0x9e,0xf1,0x80,0xc9,0xe3,0x81,0x7c,0xa1,0xf1,0x6f,0xaa,0xba,0xbd,0x83,0x5e,0xac,0x75,0xed,0x5c,0x95,0x39,0x67,0xeb};
    std::uint8_t multiplicand60[32] = {0x68,0x04,0x86,0x3a,0x22,0xda,0x7b,0x9b,0xbf,0x94,0x16,0xa2,0x6b,0xb7,0x67,0x4c,0x7f,0xc7,0x92,0x74,0x67,0xad,0x58,0xda,0xb8,0x17,0xdd,0x90,0xc0,0x89,0x37,0xb9};
    std::uint8_t product60[32]      = {0xd0,0x54,0xc7,0x89,0x2b,0xdc,0x35,0x8c,0xda,0x4e,0xa3,0xf5,0xed,0x73,0xd5,0x9d,0x48,0x5f,0x5c,0xd2,0x37,0x23,0xda,0xb3,0xe3,0x49,0xa5,0xf2,0x96,0x64,0xd6,0x22};
    mont256_from_bytes(&ctx, multiplier, multiplier60);
    mont256_from_bytes(&ctx, multiplicand, multiplicand60);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product60, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier61[32]   = {0xd9,0xff,0x40,0x04,0x27,0x9a,0xeb,0x22,0x35,0x70,0xf4,0x00,0x4b,0x27,0x08,0x82,0x52,0x3b,0xdf,0x53,0x11,0xd0,0xaf,0xe1,0xfa,0xa8,0x5d,0xed,0x74,0x7b,0x00,0xc8};
    std::uint8_t multiplicand61[32] = {0xcf,0x33,0x75,0xb0,0xd3,0x15,0xcf,0xdb,0x00,0xc0,0x1d,0x74,0xa6,0x34,0x18,0x6c,0xe1,0x2f,0xb3,0xca,0x0f,0x89,0xf8,0x82,0xe3,0x37,0xaf,0xa0,0x66,0x6c,0xab,0x22};
    std::uint8_t product61[32]      = {0xf0,0xe3,0xb4,0xd8,0x5a,0xf4,0xf4,0xdb,0x06,0x35,0x71,0x93,0x62,0x79,0xc4,0xfd,0x8b,0x6b,0xfa,0x5a,0x3c,0x15,0x69,0x87,0x1c,0x0c,0xac,0xc1,0x02,0x0e,0x01,0x7d};
    mont256_from_bytes(&ctx, multiplier, multiplier61);
    mont256_from_bytes(&ctx, multiplicand, multiplicand61);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product61, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier62[32]   = {0x98,0x28,0x61,0x03,0x3b,0x75,0x6e,0xdc,0x50,0xc8,0x22,0xc9,0xb6,0x7d,0xb3,0xca,0x21,0x28,0xaf,0xfd,0xd8,0x3c,0x7b,0x6f,0x83,0xa6,0xfb,0xef,0xff,0x1f,0x55,0xd6};
    std::uint8_t multiplicand62[32] = {0x4a,0xb3,0x6b,0xa6,0x41,0xbd,0x5e,0x62,0x0b,0x91,0x8a,0x96,0x59,0x7d,0xfc,0x8a,0x5d,0x74,0x66,0xa0,0x60,0x15,0x43,0xf1,0xff,0x28,0x9a,0x69,0x4f,0x3e,0x62,0xf1};
    std::uint8_t product62[32]      = {0x1c,0xc6,0x22,0x25,0xd3,0x44,0xb9,0x7e,0x1e,0xf1,0x01,0x98,0x34,0xbd,0x2b,0xf1,0x6f,0x12,0x2c,0x20,0xc9,0xba,0x83,0x19,0xaa,0xe2,0xe6,0x1d,0x3f,0x6a,0xa7,0x4f};
    mont256_from_bytes(&ctx, multiplier, multiplier62);
    mont256_from_bytes(&ctx, multiplicand, multiplicand62);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product62, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier63[32]   = {0xfd,0x1e,0xc9,0xa7,0xf3,0x92,0x12,0xe2,0xee,0x8e,0x75,0xfb,0x40,0x2b,0xf0,0xd2,0xaf,0x24,0x98,0xd7,0xa8,0xfc,0xa9,0xf0,0x5f,0xb8,0x5c,0x40,0x7d,0x96,0x0c,0xa5};
    std::uint8_t multiplicand63[32] = {0x6c,0xaa,0x10,0x36,0xe5,0xc2,0x3b,0x3c,0x94,0x47,0xd2,0x88,0x80,0xbe,0x71,0x1d,0x4c,0x0b,0x78,0x33,0xb1,0xc6,0xb7,0x72,0xe3,0xaa,0x0a,0x8f,0x72,0xe7,0x2c,0x34};
    std::uint8_t product63[32]      = {0x28,0x5d,0xf2,0xa9,0x8f,0xb0,0xa1,0xff,0x25,0xa6,0x65,0xe3,0xd6,0xa2,0xff,0x0f,0x08,0x53,0x62,0x66,0xf1,0x92,0x30,0x38,0xcd,0x9d,0x83,0x9e,0xf2,0x8c,0xa5,0x59};
    mont256_from_bytes(&ctx, multiplier, multiplier63);
    mont256_from_bytes(&ctx, multiplicand, multiplicand63);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product63, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier64[32]   = {0xed,0x78,0x63,0x31,0x72,0xc4,0x2d,0x73,0x03,0x76,0x7c,0x6c,0xa4,0xd6,0x73,0x09,0x63,0x93,0x43,0xea,0xa0,0x76,0x53,0xa0,0xd7,0xa4,0x12,0x9e,0xbe,0xa9,0x4b,0xf5};
    std::uint8_t multiplicand64[32] = {0x8c,0xee,0x13,0xcb,0xaa,0xba,0xf0,0xd5,0x2d,0x37,0xba,0x80,0x13,0x1c,0xfa,0x1a,0xf3,0x6e,0x8c,0xa1,0x4d,0x41,0x80,0x5c,0x45,0x6c,0x67,0x52,0x10,0xb4,0x88,0x25};
    std::uint8_t product64[32]      = {0xaf,0x3f,0xf4,0xe4,0xff,0x8a,0xfd,0x44,0x25,0x6c,0xca,0x48,0xbe,0xd6,0x33,0xaf,0x89,0x96,0x4d,0xa3,0x26,0x49,0xf7,0xfb,0xec,0xee,0x05,0xc8,0xe8,0x0d,0xb6,0x8e};
    mont256_from_bytes(&ctx, multiplier, multiplier64);
    mont256_from_bytes(&ctx, multiplicand, multiplicand64);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product64, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier65[32]   = {0xa9,0xe7,0x0c,0xad,0x61,0x26,0x25,0x7c,0x84,0x04,0x5f,0xfd,0x2a,0x1e,0x29,0xdd,0xf8,0xc8,0x5a,0x9c,0xe8,0xe1,0x35,0x2d,0x40,0x0c,0xc8,0xb9,0x0f,0x15,0x3c,0x25};
    std::uint8_t multiplicand65[32] = {0x9e,0x0e,0xed,0x44,0xad,0xb2,0xcd,0xcb,0x62,0x6b,0x5c,0x47,0xb9,0x0d,0x6f,0x86,0x0a,0xa3,0x43,0xa4,0x94,0x8d,0xe3,0x79,0x72,0xda,0x34,0xd9,0xb1,0xe2,0x53,0x07};
    std::uint8_t product65[32]      = {0x20,0x88,0x2e,0xa2,0x10,0xb0,0xba,0x11,0xf4,0x05,0x3f,0xa5,0x68,0xeb,0xe4,0x44,0x74,0xb2,0xa5,0x66,0xff,0x13,0xbc,0x40,0xb6,0x8a,0x39,0xab,0x93,0x19,0x81,0xb9};
    mont256_from_bytes(&ctx, multiplier, multiplier65);
    mont256_from_bytes(&ctx, multiplicand, multiplicand65);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product65, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier66[32]   = {0x20,0x44,0xf0,0xef,0xac,0x16,0x0d,0x53,0xd4,0xdb,0x3b,0x5f,0x7d,0xc1,0x06,0xf9,0x99,0xa7,0xd8,0x74,0xc7,0xec,0x4c,0xc4,0x19,0xdb,0x77,0xe7,0x97,0x41,0x40,0xbd};
    std::uint8_t multiplicand66[32] = {0x53,0x18,0x5b,0x70,0x85,0x72,0xc3,0x84,0x4e,0x8d,0x33,0xf7,0x9b,0xae,0xe7,0x75,0xfc,0x26,0xd2,0x9b,0x42,0xe8,0x09,0x10,0xc4,0x82,0x63,0x1b,0x03,0xbf,0xc2,0xd5};
    std::uint8_t product66[32]      = {0x69,0x51,0x8b,0x48,0x3a,0xca,0x70,0x6a,0x66,0x47,0x62,0xbf,0xf2,0xfc,0x1a,0x50,0x1f,0xf4,0x00,0xab,0x1e,0x67,0xfb,0x8b,0x71,0xa2,0xba,0x95,0x84,0xe3,0x30,0xd1};
    mont256_from_bytes(&ctx, multiplier, multiplier66);
    mont256_from_bytes(&ctx, multiplicand, multiplicand66);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product66, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier67[32]   = {0x54,0x56,0x5c,0x3e,0x85,0x5d,0xd8,0x7b,0xa0,0xaf,0x7a,0xa3,0x98,0x3f,0x58,0x6f,0x55,0x2a,0x57,0x93,0x35,0xeb,0x97,0xbe,0x87,0x72,0xa8,0x05,0x2f,0xbd,0xa1,0xf1};
    std::uint8_t multiplicand67[32] = {0x0d,0x8d,0x92,0x2e,0xa3,0x47,0x1f,0xdc,0xf1,0x81,0x74,0x84,0x12,0x4d,0x5c,0x0b,0x2f,0xad,0x5a,0x79,0x2c,0x08,0x50,0x39,0x94,0xd8,0xdf,0x40,0x87,0x93,0xef,0x42};
    std::uint8_t product67[32]      = {0x92,0x78,0x1b,0x8d,0xd8,0x59,0x45,0xce,0x13,0xe6,0x60,0xc3,0x68,0x01,0xa7,0xaf,0x21,0x4d,0x74,0x9f,0x84,0xb8,0x03,0x03,0x70,0xde,0xe6,0x6f,0xa2,0xd6,0xf1,0xac};
    mont256_from_bytes(&ctx, multiplier, multiplier67);
    mont256_from_bytes(&ctx, multiplicand, multiplicand67);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product67, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier68[32]   = {0x98,0xa6,0x7a,0xa0,0x0c,0xf8,0x34,0x7c,0x02,0x00,0xc1,0x2f,0xd7,0xca,0x43,0x6c,0x64,0xcf,0x76,0x13,0x00,0x7d,0x15,0x1b,0xb3,0xf4,0x84,0x23,0x2b,0x01,0xa5,0x07};
    std::uint8_t multiplicand68[32] = {0x2c,0x82,0x71,0x06,0x67,0xc4,0x0c,0x7d,0x94,0x18,0xa2,0x23,0xba,0x0e,0x42,0xc0,0x24,0x48,0x37,0x39,0x38,0x2d,0x50,0x54,0xa1,0xf6,0x2e,0xbb,0x7d,0xd4,0x5a,0xf4};
    std::uint8_t product68[32]      = {0xc1,0x90,0x02,0xd4,0x22,0xb2,0x51,0xbf,0xba,0x39,0xb7,0x05,0x8f,0xce,0xd1,0xb3,0x26,0x41,0x45,0x6c,0x3d,0x0d,0x8b,0x9d,0xb2,0x5d,0xc1,0x20,0xab,0x81,0xb6,0xfe};
    mont256_from_bytes(&ctx, multiplier, multiplier68);
    mont256_from_bytes(&ctx, multiplicand, multiplicand68);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product68, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier69[32]   = {0xa3,0xfc,0x22,0x89,0x68,0x49,0xcf,0x55,0x99,0x34,0x9b,0x53,0x6f,0x2a,0x6f,0x87,0x8c,0x0b,0xc9,0x4b,0x19,0x37,0x92,0xb6,0x10,0x69,0x21,0x6c,0xe9,0x67,0x3b,0xdd};
    std::uint8_t multiplicand69[32] = {0xb6,0x38,0x1a,0x82,0x57,0x6e,0xc2,0xc5,0xe8,0x09,0x4c,0x00,0x7d,0x0d,0x0d,0x1a,0xa7,0xc5,0xac,0x7e,0xc9,0x18,0xfc,0x98,0xae,0x50,0xfd,0xf5,0x09,0xae,0x8c,0x4f};
    std::uint8_t product69[32]      = {0xd9,0xf3,0xd6,0x45,0xe9,0x10,0x00,0x71,0xb3,0xa9,0x1a,0x4c,0xb4,0x7e,0x51,0x9a,0xf8,0xf9,0xfe,0xae,0x99,0x16,0xbc,0xcf,0x9d,0x8a,0x73,0xdd,0x8d,0x52,0xb0,0xe4};
    mont256_from_bytes(&ctx, multiplier, multiplier69);
    mont256_from_bytes(&ctx, multiplicand, multiplicand69);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product69, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier70[32]   = {0x1c,0x3b,0xc1,0x92,0x22,0xbd,0x93,0xd1,0xa3,0xed,0x20,0x39,0xdb,0x16,0x61,0x12,0xa1,0xb9,0x9c,0xe0,0x10,0x98,0x9e,0x6e,0x30,0xdb,0x77,0xf5,0xa5,0x67,0xbe,0xa6};
    std::uint8_t multiplicand70[32] = {0x2a,0xfa,0x52,0xd4,0x39,0x09,0xc6,0xa5,0x5b,0x00,0xc8,0x44,0xfc,0x55,0x44,0x1c,0x06,0x78,0x0d,0x78,0xe1,0xc7,0x05,0x8e,0x1f,0x21,0xf7,0xb6,0x4d,0xb8,0x3a,0x98};
    std::uint8_t product70[32]      = {0x84,0x9a,0x4f,0x10,0xed,0xce,0x34,0x12,0x24,0x8d,0xf8,0xa6,0xdb,0xe7,0xb4,0x75,0x98,0x62,0xa8,0x6e,0x06,0xc1,0x62,0xf7,0xf0,0xba,0xc3,0x11,0x7a,0x42,0xf9,0x7f};
    mont256_from_bytes(&ctx, multiplier, multiplier70);
    mont256_from_bytes(&ctx, multiplicand, multiplicand70);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product70, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier71[32]   = {0x72,0xb1,0xc0,0x84,0xa4,0x62,0xee,0xdf,0x27,0xe3,0x2a,0x21,0x64,0x56,0x93,0x4b,0x05,0xf1,0xf3,0xc0,0x1c,0x42,0x36,0x8b,0x6e,0xd3,0xc4,0x7c,0x75,0x7e,0x0c,0x68};
    std::uint8_t multiplicand71[32] = {0xaf,0xa7,0xbb,0x90,0xfa,0xce,0x9b,0x01,0x42,0x0e,0x81,0xe4,0xae,0xe3,0xae,0x25,0x91,0x61,0xab,0xbe,0x12,0x36,0x45,0x3d,0x16,0xca,0x65,0x72,0x2d,0xc2,0x1a,0x6f};
    std::uint8_t product71[32]      = {0xea,0x4f,0x24,0xd9,0xa5,0xee,0x4f,0xb3,0x4b,0x83,0x5c,0x5d,0x7a,0x3b,0x4c,0xb3,0xf2,0xac,0xed,0x6d,0x05,0x57,0x24,0x40,0xf7,0xba,0x69,0x2e,0x50,0x58,0xae,0xd6};
    mont256_from_bytes(&ctx, multiplier, multiplier71);
    mont256_from_bytes(&ctx, multiplicand, multiplicand71);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product71, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier72[32]   = {0x60,0xa2,0x94,0xb4,0xd2,0x19,0x61,0x82,0x0d,0x5b,0x04,0xff,0x01,0x6c,0x2a,0x32,0xe8,0xcd,0xbf,0x15,0x52,0x03,0xda,0x73,0xf5,0xf3,0xa2,0xdd,0x41,0xb8,0x24,0x24};
    std::uint8_t multiplicand72[32] = {0x52,0x43,0x93,0xe6,0x49,0x15,0xb7,0x0d,0xa1,0xcd,0x82,0x0a,0x4b,0xf0,0x26,0xa0,0xc4,0xc4,0x6f,0x11,0x6c,0x51,0x22,0xa0,0x03,0x4d,0x1c,0x92,0x2f,0xb0,0x09,0x5f};
    std::uint8_t product72[32]      = {0x78,0xeb,0x7d,0x36,0xf1,0x25,0x8f,0x7d,0x6b,0x7d,0x62,0x05,0x3a,0x96,0xf8,0xbf,0x96,0xf9,0x77,0x12,0x2f,0xf2,0xd8,0x96,0xaa,0x91,0x91,0x32,0x9b,0x29,0x98,0x1f};
    mont256_from_bytes(&ctx, multiplier, multiplier72);
    mont256_from_bytes(&ctx, multiplicand, multiplicand72);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product72, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier73[32]   = {0xaf,0xfe,0x05,0x83,0x8e,0x4c,0x7d,0xe9,0x84,0x8e,0xf4,0x21,0x84,0xe9,0x38,0x1e,0xfb,0xbd,0x8b,0x08,0xce,0x74,0xfa,0x41,0xba,0x67,0xfd,0x64,0x1d,0x2a,0x2d,0x4d};
    std::uint8_t multiplicand73[32] = {0xcb,0x85,0xc9,0x05,0x1a,0x2e,0xba,0x06,0x2e,0xbb,0x93,0xdf,0x2a,0xf6,0x35,0x9b,0x22,0xe2,0xf8,0xe6,0xcf,0x4c,0xf4,0x64,0xf9,0x57,0x27,0xdd,0xeb,0x9a,0xcc,0x49};
    std::uint8_t product73[32]      = {0x2f,0x8c,0xbb,0xd6,0x4a,0xac,0x56,0xc3,0x6c,0x1b,0xd9,0x92,0x8c,0x22,0x4d,0x1f,0x12,0xc7,0x37,0x2d,0x3e,0x13,0xc7,0x15,0xb3,0xdd,0x10,0x3b,0x15,0xd6,0x18,0xdf};
    mont256_from_bytes(&ctx, multiplier, multiplier73);
    mont256_from_bytes(&ctx, multiplicand, multiplicand73);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product73, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier74[32]   = {0x86,0x96,0xdc,0x4d,0xe6,0x02,0x49,0xa9,0xf4,0x7c,0x26,0x51,0x67,0xe1,0x2d,0x26,0x6e,0x1b,0x0d,0x17,0xe5,0xf7,0xcb,0x81,0xa1,0x31,0xdd,0x37,0xe4,0xd8,0x9a,0x45};
    std::uint8_t multiplicand74[32] = {0x0d,0x37,0x2b,0xf6,0xd5,0x2e,0xd2,0xe0,0x9f,0xdf,0x64,0x67,0x08,0x14,0x1d,0x17,0x0e,0x88,0x1f,0x3f,0x2c,0x63,0x2e,0x4d,0x50,0xf3,0x5a,0xba,0x2f,0x47,0x3d,0xca};
    std::uint8_t product74[32]      = {0xe6,0xa0,0x8a,0x9f,0xc6,0x8c,0x86,0x6e,0xd0,0xc2,0x31,0xf5,0xf9,0xac,0xbc,0xab,0xb0,0xc0,0x71,0x44,0xd5,0xd7,0x3d,0x4f,0x94,0x1d,0x59,0x0c,0x24,0xb9,0xf7,0x04};
    mont256_from_bytes(&ctx, multiplier, multiplier74);
    mont256_from_bytes(&ctx, multiplicand, multiplicand74);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product74, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier75[32]   = {0xfc,0xbd,0x1f,0x7a,0x5e,0x9e,0xbf,0x22,0x13,0x0f,0xc6,0x84,0xfd,0x07,0xb7,0x65,0x7d,0x90,0x90,0x87,0xf0,0x65,0xa4,0xa8,0x98,0x35,0x70,0x21,0x29,0x4c,0x5f,0xa2};
    std::uint8_t multiplicand75[32] = {0xf6,0x0d,0x2c,0x3d,0x7b,0x28,0x6c,0xa1,0x8e,0xdb,0xb5,0xcf,0x2d,0x43,0xb9,0x86,0x62,0x82,0x9e,0xbd,0x70,0x0c,0x71,0x30,0xc7,0x74,0x58,0xed,0xfb,0x7c,0xbf,0x57};
    std::uint8_t product75[32]      = {0x27,0x88,0xb3,0x6b,0xf6,0x59,0x5a,0xa1,0x4d,0x9f,0xef,0xf7,0x56,0xea,0xba,0x9c,0x2a,0xd1,0x97,0x51,0x11,0x47,0xe1,0xc0,0x5a,0xe6,0x75,0xf3,0xa7,0xdf,0x31,0x7f};
    mont256_from_bytes(&ctx, multiplier, multiplier75);
    mont256_from_bytes(&ctx, multiplicand, multiplicand75);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product75, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier76[32]   = {0x96,0xcf,0xbf,0xbc,0xad,0xd9,0x71,0xd3,0x0f,0x8c,0xc2,0x06,0xfc,0xf4,0x04,0xea,0xd3,0x8a,0x86,0xd9,0x69,0xf7,0xf5,0x9b,0xfe,0x32,0x42,0x72,0x50,0xdf,0x9d,0xd3};
    std::uint8_t multiplicand76[32] = {0xca,0x3b,0xcc,0x8c,0x8b,0x18,0xb3,0xe9,0xe0,0x28,0xe5,0x64,0x7e,0x9f,0x67,0xde,0x86,0x7e,0x72,0xc0,0x2b,0xcf,0xec,0x36,0x5f,0xb8,0x6f,0x57,0x95,0x37,0xba,0x3a};
    std::uint8_t product76[32]      = {0x6a,0xe3,0x02,0xe0,0x6d,0x38,0xbf,0x24,0xf5,0x43,0x44,0xe3,0x52,0xfb,0xd7,0x86,0xec,0xf9,0x99,0x60,0xd9,0x28,0x0a,0xed,0x9b,0x21,0x9a,0x6a,0x61,0x8a,0xf0,0x03};
    mont256_from_bytes(&ctx, multiplier, multiplier76);
    mont256_from_bytes(&ctx, multiplicand, multiplicand76);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product76, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier77[32]   = {0xb1,0xf9,0x0c,0x1b,0x36,0xb4,0xb3,0x76,0xfe,0x20,0xcd,0x12,0x68,0x77,0xd8,0x2d,0x76,0xee,0xd2,0x54,0xc9,0xd8,0x02,0x09,0xbd,0x52,0x0d,0xa2,0x17,0xa9,0x62,0x78};
    std::uint8_t multiplicand77[32] = {0x13,0x08,0x26,0x7f,0xb9,0x05,0x80,0xe1,0xd8,0xb2,0xe7,0x74,0xe5,0x8c,0x46,0x70,0x6f,0xf3,0xcb,0x01,0x08,0x4f,0xf3,0x9a,0xba,0xb3,0xda,0x21,0x09,0x6b,0x14,0x1a};
    std::uint8_t product77[32]      = {0x7f,0xfb,0x5e,0xe8,0xfd,0xcd,0x1f,0xad,0x01,0x42,0xb4,0x98,0x09,0x5b,0xf1,0x8c,0x10,0x65,0xbe,0xfb,0x09,0x06,0xac,0x61,0x5e,0x27,0x38,0xe8,0xe5,0x9b,0x8c,0xbd};
    mont256_from_bytes(&ctx, multiplier, multiplier77);
    mont256_from_bytes(&ctx, multiplicand, multiplicand77);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product77, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier78[32]   = {0x58,0xdf,0x56,0xff,0x6b,0x65,0x42,0x50,0xe4,0x69,0xdb,0x4e,0xb1,0x01,0x97,0xa5,0x4d,0x16,0x98,0x97,0xc9,0x9c,0xd7,0xca,0x54,0x5a,0xf5,0x97,0xd2,0xdd,0x5b,0x0b};
    std::uint8_t multiplicand78[32] = {0xfd,0x8c,0xf3,0xe6,0x92,0xe6,0xd8,0x5e,0xc4,0x4b,0xa8,0x8d,0xf6,0xe0,0xba,0xf8,0x4d,0x5b,0xf7,0xae,0x48,0x12,0x35,0x9c,0x3c,0x7c,0xd1,0x1f,0x63,0xa4,0x0e,0x2f};
    std::uint8_t product78[32]      = {0x33,0x21,0x9f,0x9f,0xa9,0x44,0x38,0x93,0x4d,0x15,0x89,0xc4,0x4e,0xd9,0xfd,0xd1,0xc1,0x93,0x46,0xa7,0x0e,0xdd,0x50,0xcb,0x31,0x6d,0x5f,0x75,0xb2,0x38,0x66,0x10};
    mont256_from_bytes(&ctx, multiplier, multiplier78);
    mont256_from_bytes(&ctx, multiplicand, multiplicand78);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product78, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier79[32]   = {0x8a,0x28,0xe7,0x53,0x09,0x30,0x8d,0x45,0x76,0x11,0xdb,0xe5,0xec,0xeb,0xf4,0x65,0x7f,0x87,0x3c,0x53,0x7a,0x31,0x32,0xf7,0x28,0xb0,0x74,0xb9,0xae,0x29,0xb4,0xd1};
    std::uint8_t multiplicand79[32] = {0x0a,0x88,0x2a,0x13,0xf0,0x4a,0x2e,0x27,0xf2,0x98,0x86,0x34,0x33,0xf6,0x78,0x6c,0xd7,0x07,0x67,0x44,0xfe,0xd9,0x1b,0x64,0xc6,0xa1,0xed,0x18,0xa0,0x83,0x36,0x65};
    std::uint8_t product79[32]      = {0x9e,0xa3,0xb1,0x38,0xc5,0x83,0xe2,0x22,0x09,0xcd,0x2f,0x80,0x01,0x61,0x28,0x5c,0x0d,0x7e,0x9b,0x08,0x0d,0x24,0x47,0xeb,0xbe,0x10,0xc1,0x9f,0x29,0xcf,0xeb,0xb9};
    mont256_from_bytes(&ctx, multiplier, multiplier79);
    mont256_from_bytes(&ctx, multiplicand, multiplicand79);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product79, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier80[32]   = {0x3a,0x24,0xc8,0xca,0xcd,0x32,0x9e,0xd4,0x9c,0x66,0x10,0x0a,0xab,0x4f,0xf9,0x08,0xf3,0x9a,0xce,0xa1,0xb3,0xe7,0x5d,0xe5,0x71,0xef,0xe6,0x8d,0x9c,0x81,0xf3,0x5d};
    std::uint8_t multiplicand80[32] = {0x2f,0x7d,0xcf,0xb3,0x9b,0x81,0x93,0x38,0xc9,0x6d,0x20,0x27,0xf3,0x4d,0x38,0x5e,0x29,0xfd,0xe2,0x6b,0x67,0xf2,0xf1,0x40,0x17,0xde,0xb9,0x61,0xd9,0x70,0x8e,0xbb};
    std::uint8_t product80[32]      = {0x21,0xb6,0x8c,0xe6,0xe1,0x00,0x5f,0x0f,0x15,0x0c,0x24,0x39,0x8a,0xad,0xa5,0x20,0x56,0x80,0x00,0xba,0xf5,0xa3,0x69,0xd7,0xce,0x3e,0xde,0xe0,0x64,0x4f,0xc9,0xf2};
    mont256_from_bytes(&ctx, multiplier, multiplier80);
    mont256_from_bytes(&ctx, multiplicand, multiplicand80);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product80, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier81[32]   = {0x51,0x21,0x9a,0xd1,0xff,0xe4,0xbf,0xa1,0x99,0x30,0x59,0x65,0xab,0xe2,0xf3,0xdf,0x73,0x4e,0x2c,0xe3,0xb9,0x2e,0xfc,0x32,0xd4,0x95,0x78,0x07,0x28,0x50,0x79,0xbe};
    std::uint8_t multiplicand81[32] = {0xb1,0xd7,0x16,0xae,0xfd,0xd1,0x3e,0x46,0xa2,0x60,0xd8,0x37,0x99,0xad,0x50,0xa8,0x4d,0x5a,0x52,0x99,0x03,0x1f,0xad,0xaa,0x50,0xa0,0x34,0x72,0xae,0xd7,0x62,0xeb};
    std::uint8_t product81[32]      = {0x3f,0x98,0x34,0x75,0x6a,0xe9,0x77,0x3f,0x37,0xf4,0x52,0xb0,0xbb,0x08,0xcf,0x71,0xb0,0x9c,0x23,0x70,0x10,0x7c,0x54,0x4c,0x34,0xb6,0x2d,0x5c,0x87,0x59,0xd4,0x90};
    mont256_from_bytes(&ctx, multiplier, multiplier81);
    mont256_from_bytes(&ctx, multiplicand, multiplicand81);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product81, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier82[32]   = {0x20,0xa6,0xcf,0x24,0x8e,0x83,0x2b,0xd4,0xf9,0x31,0x90,0xb1,0x1e,0xce,0xd5,0xca,0x78,0xd5,0x58,0x18,0xa3,0xa7,0x11,0x3c,0x82,0x18,0x5e,0x5f,0xb2,0x52,0x5a,0x13};
    std::uint8_t multiplicand82[32] = {0xc1,0x7e,0xdb,0x05,0x61,0x0a,0xb8,0x14,0x16,0x56,0xf4,0x25,0x7b,0xf6,0x9b,0x08,0xf5,0x42,0x1b,0x07,0x3c,0xe4,0xf2,0x21,0xb5,0x69,0x52,0x3a,0xe4,0x01,0x32,0x10};
    std::uint8_t product82[32]      = {0x47,0x4b,0x2e,0x69,0x1c,0x84,0x9f,0xf6,0x19,0xe9,0x85,0xcb,0xa8,0xc0,0x3d,0x6c,0x15,0xfd,0xb9,0x6b,0x4f,0xb4,0x2f,0x96,0xdc,0x07,0x7e,0xc5,0x0f,0x05,0xb2,0x3b};
    mont256_from_bytes(&ctx, multiplier, multiplier82);
    mont256_from_bytes(&ctx, multiplicand, multiplicand82);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product82, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier83[32]   = {0x74,0x86,0xf0,0x2f,0xc1,0x65,0x01,0x7c,0x47,0x6d,0x3a,0xec,0x17,0x5c,0x74,0xc8,0xaf,0x84,0x21,0xa2,0xff,0x58,0x03,0xbb,0xb7,0xe7,0x54,0xd3,0x68,0x5a,0x54,0xd0};
    std::uint8_t multiplicand83[32] = {0x2f,0x8c,0xd3,0x08,0xb3,0x43,0x7e,0xde,0xb9,0x52,0xdf,0x5f,0xc4,0xab,0xb6,0xea,0x73,0x78,0xe7,0x23,0x19,0x00,0x17,0x65,0xd6,0x56,0x7b,0xd6,0x0f,0x18,0x3f,0xe3};
    std::uint8_t product83[32]      = {0xa8,0xcd,0x26,0x3d,0xd7,0x61,0x98,0x2d,0x60,0xe4,0xc9,0x7d,0xcd,0xb4,0xc5,0x3c,0x3e,0x94,0x3b,0xff,0x54,0x23,0xff,0x95,0xbc,0xa6,0xf4,0xf3,0xcd,0xa9,0xdf,0xc0};
    mont256_from_bytes(&ctx, multiplier, multiplier83);
    mont256_from_bytes(&ctx, multiplicand, multiplicand83);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product83, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier84[32]   = {0x06,0xf6,0xbd,0xc2,0x1b,0x84,0x93,0x60,0x72,0x74,0x82,0x1a,0xa5,0x21,0x25,0x5d,0x4e,0xd3,0xe3,0x97,0xe0,0x55,0x8c,0xb0,0xb9,0x84,0xcf,0x4d,0xa3,0xb4,0x53,0x6f};
    std::uint8_t multiplicand84[32] = {0x45,0xce,0xa7,0x86,0x9a,0x09,0xbe,0xe0,0xa8,0xa3,0xbf,0xfc,0x50,0x69,0x57,0x88,0x19,0xd2,0x82,0xcb,0xcb,0x1f,0x68,0x28,0x4f,0x3a,0x0b,0x4a,0x9d,0x39,0x31,0x46};
    std::uint8_t product84[32]      = {0x98,0x89,0x1b,0x38,0x02,0x30,0x62,0x73,0xe3,0x65,0x5b,0x27,0x82,0xd8,0x57,0x15,0xeb,0x45,0x31,0x2e,0x8f,0x3a,0x4a,0xcd,0x61,0x7d,0xd4,0x50,0xd9,0x48,0xdc,0x06};
    mont256_from_bytes(&ctx, multiplier, multiplier84);
    mont256_from_bytes(&ctx, multiplicand, multiplicand84);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product84, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier85[32]   = {0xbb,0xd3,0x0b,0x19,0x87,0x1c,0x6b,0x8d,0x34,0xb1,0x0f,0xd2,0x87,0x0e,0xe6,0xf3,0x1e,0xbd,0x61,0x9b,0x36,0xee,0xa3,0x82,0x7f,0xbe,0x30,0x3b,0xa8,0x66,0xa8,0xb4};
    std::uint8_t multiplicand85[32] = {0xde,0x18,0x1a,0x66,0x4a,0xf8,0x4a,0xa5,0x28,0x44,0x9f,0xd8,0x38,0x13,0xae,0x73,0x84,0x22,0x44,0x50,0x1c,0x0d,0x3d,0x3e,0x1b,0xd9,0x79,0xf2,0xcb,0xe5,0xbc,0x4e};
    std::uint8_t product85[32]      = {0x18,0x7d,0xef,0x3b,0x6b,0x12,0x22,0x4f,0x6a,0xe1,0xc4,0x51,0xcc,0x6b,0xc4,0x1e,0x16,0x31,0x51,0x86,0xfc,0x7f,0xe0,0x5a,0xdc,0xc4,0x42,0xb8,0x69,0x42,0xdc,0x03};
    mont256_from_bytes(&ctx, multiplier, multiplier85);
    mont256_from_bytes(&ctx, multiplicand, multiplicand85);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product85, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier86[32]   = {0xcb,0x46,0xa8,0xb4,0x9e,0xeb,0x7e,0x28,0x2d,0x5a,0x6a,0x4b,0x71,0xb6,0x5f,0x04,0x92,0x6e,0x9b,0x00,0x9c,0x2e,0x43,0x6a,0xf1,0x87,0xea,0xd1,0x31,0x50,0x38,0xc3};
    std::uint8_t multiplicand86[32] = {0x84,0xf5,0xe5,0x12,0x9f,0x4c,0xbe,0xbd,0x3c,0x31,0x33,0xb5,0x57,0x22,0x9f,0x9f,0x67,0x13,0xa5,0x82,0xf8,0x1b,0xf0,0x1e,0x0e,0xd7,0xcc,0x95,0xe5,0xf7,0x2c,0x0e};
    std::uint8_t product86[32]      = {0x79,0xc2,0xb7,0x6f,0x18,0xbe,0x77,0x98,0xd2,0xea,0x21,0x30,0xb9,0xf5,0x5d,0xea,0x97,0xe4,0x5c,0xa0,0x72,0x9e,0x7f,0xd4,0xee,0x19,0x78,0x10,0x65,0xb7,0x07,0xce};
    mont256_from_bytes(&ctx, multiplier, multiplier86);
    mont256_from_bytes(&ctx, multiplicand, multiplicand86);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product86, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier87[32]   = {0xe6,0x5c,0xee,0x01,0xac,0xed,0x0b,0x12,0x8d,0xf8,0xec,0xe7,0xbb,0x41,0xd4,0x6c,0x63,0xb1,0xd0,0x0f,0x9c,0xe9,0x8c,0x6f,0xd9,0xd5,0xba,0x5d,0x2e,0x0a,0xe9,0x59};
    std::uint8_t multiplicand87[32] = {0xcc,0xf0,0x5c,0x1a,0x84,0x07,0xb5,0xc4,0xa6,0x13,0x48,0x46,0x0d,0xc9,0x32,0xf6,0xa4,0x31,0xda,0xef,0x99,0x75,0xeb,0x31,0xdc,0x35,0x9c,0xff,0xce,0x3d,0xa1,0xac};
    std::uint8_t product87[32]      = {0x1f,0xf0,0x78,0x2f,0x3f,0x48,0x47,0x54,0x7a,0x16,0x2e,0x00,0x55,0xf4,0x74,0xf5,0x40,0x69,0x3d,0xf5,0x10,0xaa,0xf3,0x2a,0x03,0xd2,0xf1,0xa6,0xcf,0xdc,0xdf,0xcf};
    mont256_from_bytes(&ctx, multiplier, multiplier87);
    mont256_from_bytes(&ctx, multiplicand, multiplicand87);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product87, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier88[32]   = {0x18,0xc7,0xa3,0xf9,0xf0,0xaf,0x59,0x34,0xf9,0x9c,0xbd,0x59,0xb3,0x4c,0x17,0x06,0xc6,0x9d,0x62,0xc6,0xe7,0xd3,0x9a,0x6f,0xe6,0xd1,0xf4,0xa7,0xb0,0x8a,0x4c,0xad};
    std::uint8_t multiplicand88[32] = {0x3c,0x53,0x00,0x0f,0xbf,0x69,0x3e,0xdd,0x09,0x5a,0x57,0xa7,0x26,0xa3,0xc3,0xb5,0x4d,0x9f,0xa8,0x66,0xb5,0xb0,0x45,0xd8,0xd4,0xbb,0xcd,0xb5,0x74,0xc5,0x57,0x53};
    std::uint8_t product88[32]      = {0x06,0x1e,0xdd,0x7b,0x01,0xb7,0xe2,0x05,0x76,0xc9,0x3e,0xac,0x08,0x41,0x40,0xb9,0x01,0xcc,0x95,0x74,0x04,0x84,0x96,0xec,0x3a,0xb7,0x74,0x73,0x3e,0x87,0xfe,0x10};
    mont256_from_bytes(&ctx, multiplier, multiplier88);
    mont256_from_bytes(&ctx, multiplicand, multiplicand88);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product88, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier89[32]   = {0x34,0x71,0x40,0xf9,0xd6,0x68,0x54,0x9c,0x5c,0xc0,0x9d,0x13,0x3b,0xe9,0xc5,0xda,0x55,0xbd,0x8c,0xbe,0xc3,0xf7,0x87,0x7f,0xbe,0x7b,0x7f,0x70,0x32,0xf3,0x8b,0xee};
    std::uint8_t multiplicand89[32] = {0x9f,0xf8,0x4d,0x32,0x8b,0xfc,0x08,0x1f,0x9f,0x0b,0x3f,0xf3,0x55,0x03,0x6b,0x0b,0x1d,0xfc,0x61,0x12,0x49,0xd8,0xa0,0x28,0x05,0xdf,0x53,0x44,0xd5,0x8e,0x39,0x50};
    std::uint8_t product89[32]      = {0x73,0x91,0xd7,0xb1,0xc5,0x7a,0x0e,0x8e,0x75,0x5f,0x8f,0x4b,0xe4,0xaf,0x45,0xb9,0x0f,0xd0,0x48,0xfe,0xf1,0x33,0xef,0x21,0x71,0x60,0x48,0xf1,0xc0,0xbd,0x04,0x8e};
    mont256_from_bytes(&ctx, multiplier, multiplier89);
    mont256_from_bytes(&ctx, multiplicand, multiplicand89);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product89, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier90[32]   = {0x42,0x95,0x79,0x03,0xc0,0xef,0xe6,0x5c,0xbe,0x1e,0x2b,0x3a,0x4e,0xf9,0xb4,0x44,0x2e,0x9b,0xfe,0xfd,0x13,0x17,0xdc,0x4d,0x33,0xeb,0x7d,0x61,0xd7,0xa6,0x8e,0xb5};
    std::uint8_t multiplicand90[32] = {0xa0,0x41,0x2f,0x44,0xb9,0x8f,0x5e,0x18,0x99,0x11,0x9d,0x53,0xf1,0xcd,0xf1,0xa5,0xa8,0xef,0xb9,0xb8,0x2f,0x25,0xa5,0xe3,0x64,0x3d,0x43,0xd1,0xc4,0x58,0x1a,0xa4};
    std::uint8_t product90[32]      = {0xb9,0x66,0xfc,0x80,0xa7,0xee,0x34,0x97,0xe8,0x20,0xf2,0x8a,0xb6,0x6d,0xb8,0x7d,0x3c,0x96,0x8e,0xe2,0x2f,0x5c,0x49,0x6a,0x7d,0x82,0x31,0x38,0xf5,0x4b,0x46,0xd5};
    mont256_from_bytes(&ctx, multiplier, multiplier90);
    mont256_from_bytes(&ctx, multiplicand, multiplicand90);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product90, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier91[32]   = {0x9d,0xa3,0x7a,0xc6,0xae,0x69,0x9b,0x1c,0x77,0xd1,0x77,0x52,0x73,0xb5,0x4a,0x55,0x87,0xa7,0x09,0x3f,0x32,0x0a,0x88,0x27,0x2b,0xde,0x93,0x6e,0x85,0xdc,0x0a,0x5a};
    std::uint8_t multiplicand91[32] = {0x9a,0xdf,0x8d,0x89,0x89,0x34,0x30,0x6e,0x9b,0xd3,0x86,0x6b,0x34,0xd8,0xff,0x3c,0x5c,0xb9,0x11,0xa3,0xf5,0x1a,0xac,0x34,0x94,0x01,0x7c,0x5b,0x7c,0xa8,0x0b,0xdf};
    std::uint8_t product91[32]      = {0xe2,0xe3,0x43,0x3d,0x11,0x19,0x1c,0x88,0x24,0xd4,0x38,0x67,0x77,0xf4,0xcc,0x52,0x2d,0x8f,0x0c,0x2a,0x8f,0x8e,0x0e,0xbb,0xc7,0x5e,0x12,0x28,0xe2,0xa8,0x48,0x8c};
    mont256_from_bytes(&ctx, multiplier, multiplier91);
    mont256_from_bytes(&ctx, multiplicand, multiplicand91);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product91, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier92[32]   = {0xbb,0x7b,0xa6,0x25,0x20,0x81,0x81,0xb8,0x2e,0x34,0xb5,0x8a,0xd7,0x2c,0x80,0xff,0x5d,0x6a,0x80,0xc5,0x28,0xf5,0x1d,0xc6,0x5b,0x8f,0xa4,0xf0,0x31,0xc5,0x08,0xa7};
    std::uint8_t multiplicand92[32] = {0xfa,0x35,0xbf,0x8d,0x70,0x00,0x4c,0x03,0x0b,0x01,0xab,0x83,0x43,0x41,0x6e,0xe2,0x36,0x1f,0x5b,0x65,0x82,0x68,0x02,0x6c,0x20,0x8e,0xac,0x3f,0xb2,0xe2,0x44,0xbf};
    std::uint8_t product92[32]      = {0x00,0x17,0x0b,0xa0,0x3e,0x15,0xd2,0x34,0xc7,0x66,0xa7,0x61,0x99,0x65,0x5f,0x26,0x89,0xc9,0x1b,0xa7,0x55,0x76,0x7d,0x10,0xc3,0x9a,0x8f,0x50,0xab,0xb3,0x81,0x58};
    mont256_from_bytes(&ctx, multiplier, multiplier92);
    mont256_from_bytes(&ctx, multiplicand, multiplicand92);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product92, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier93[32]   = {0x1e,0x5e,0xd2,0xd3,0xc1,0xcd,0x3e,0x05,0x64,0xd6,0xce,0x5f,0xc6,0x0b,0x19,0x9a,0x26,0x80,0x43,0x5c,0x38,0x31,0xbf,0x34,0x1e,0x0a,0x83,0x0f,0xda,0xf5,0xfd,0x22};
    std::uint8_t multiplicand93[32] = {0xa7,0x6d,0xc4,0x53,0xd4,0xb1,0x48,0xfb,0x0d,0xaf,0x06,0x63,0xd0,0xca,0xbd,0x01,0x00,0x31,0xc5,0x28,0x33,0x37,0x49,0xda,0xfa,0x00,0x36,0xa4,0xb3,0xc2,0xe1,0xbe};
    std::uint8_t product93[32]      = {0x8d,0x05,0x3d,0xb8,0x7a,0xd0,0xb8,0xf4,0xec,0xed,0x78,0x48,0xc6,0xe8,0x7b,0x2b,0xc9,0x5f,0x24,0x5f,0x61,0x22,0x4c,0x4c,0x84,0x6a,0xc1,0x3b,0x47,0xff,0xf9,0xb4};
    mont256_from_bytes(&ctx, multiplier, multiplier93);
    mont256_from_bytes(&ctx, multiplicand, multiplicand93);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product93, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier94[32]   = {0xb3,0x9e,0x54,0xe5,0x07,0x8c,0x26,0x6c,0x03,0x4e,0xf6,0x06,0xf2,0xc5,0x12,0xc2,0x50,0xa9,0xab,0xfe,0x02,0x8f,0x30,0x50,0xb5,0xe2,0x33,0x65,0x37,0xc7,0x2f,0xa5};
    std::uint8_t multiplicand94[32] = {0x6d,0x15,0xb7,0x5a,0xee,0xf9,0x31,0x37,0xdc,0x1e,0x46,0xad,0xfb,0x09,0xdd,0x70,0x7f,0x22,0x7e,0x5e,0x6f,0x1c,0x29,0x96,0xa6,0xb9,0xf5,0xc3,0xc4,0xbe,0xc2,0x0f};
    std::uint8_t product94[32]      = {0x39,0xe4,0x0b,0xcb,0x4a,0x5a,0xc1,0x6d,0xb6,0x4b,0x4a,0x7c,0x39,0xff,0x59,0xfc,0x2c,0xdd,0x49,0x6f,0x36,0x41,0x65,0xdc,0xf0,0xf6,0x73,0x6f,0x3c,0x49,0x8f,0x65};
    mont256_from_bytes(&ctx, multiplier, multiplier94);
    mont256_from_bytes(&ctx, multiplicand, multiplicand94);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product94, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier95[32]   = {0x5f,0xb4,0x16,0x71,0xd4,0xd0,0x51,0xd0,0xe0,0xcb,0xc1,0x87,0xf8,0x58,0x5d,0x07,0x69,0xd2,0x51,0xd0,0x77,0x45,0x60,0x76,0x13,0xcf,0x39,0x71,0x95,0x79,0xe2,0xb8};
    std::uint8_t multiplicand95[32] = {0x7e,0x3d,0x47,0xcc,0xbd,0xb1,0xa2,0x6e,0x1a,0x0c,0x05,0x43,0xd1,0xe2,0x21,0x3c,0xbb,0xd8,0xc7,0x0b,0x46,0x0d,0x22,0x1c,0x13,0x70,0x9e,0x8c,0x99,0xd3,0xa1,0xd6};
    std::uint8_t product95[32]      = {0x56,0xea,0xd6,0xfa,0xfa,0x5f,0x8e,0xf7,0xa3,0x84,0xb5,0x8e,0x10,0x6c,0xc2,0x07,0xfd,0x66,0xb8,0x5a,0x1b,0x39,0xf0,0x6f,0x1b,0x76,0xb3,0x8e,0x45,0xee,0xc9,0x01};
    mont256_from_bytes(&ctx, multiplier, multiplier95);
    mont256_from_bytes(&ctx, multiplicand, multiplicand95);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product95, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier96[32]   = {0xc7,0x68,0xa4,0x75,0x3b,0x85,0x28,0xf6,0x99,0x8f,0xb0,0x23,0x9b,0x3c,0xd0,0x20,0xf6,0x8b,0x3a,0x18,0x66,0xfb,0xc2,0x6a,0xd1,0x77,0x26,0x57,0x9b,0xe8,0xda,0xce};
    std::uint8_t multiplicand96[32] = {0x7a,0xd5,0xfa,0xd7,0xdb,0x77,0x92,0x40,0x2c,0x1c,0x0c,0x4c,0xf8,0x84,0xfa,0x5e,0x96,0x28,0x0c,0x33,0x78,0x13,0xfd,0x38,0x2f,0x73,0x4a,0x7d,0xcd,0xb7,0xc3,0xd2};
    std::uint8_t product96[32]      = {0x1a,0x79,0x3d,0xc4,0x08,0x66,0x6a,0x47,0x05,0x17,0x93,0xc4,0x4e,0xa0,0x2e,0x08,0xac,0x66,0xd8,0xae,0x95,0x8b,0x6b,0xf9,0x95,0x83,0x20,0x13,0x13,0x71,0x15,0xf7};
    mont256_from_bytes(&ctx, multiplier, multiplier96);
    mont256_from_bytes(&ctx, multiplicand, multiplicand96);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product96, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier97[32]   = {0xbe,0x44,0xec,0xa4,0x96,0xcc,0x57,0xf0,0x13,0xf7,0x59,0x61,0x23,0x55,0xcc,0xe3,0x13,0xa5,0x31,0x91,0x04,0xd4,0xb0,0xe0,0xb9,0xcb,0xf8,0x1e,0x9a,0xd7,0x92,0x10};
    std::uint8_t multiplicand97[32] = {0x11,0x50,0x4a,0xc2,0x22,0xda,0xcf,0x83,0x24,0x62,0xc2,0xae,0x17,0x47,0x26,0x97,0xfb,0x50,0xae,0xf6,0xfb,0x20,0x81,0xbe,0x01,0xce,0x9c,0xe1,0xaf,0xce,0x2e,0x7f};
    std::uint8_t product97[32]      = {0xba,0xb8,0x1b,0xcc,0xd6,0xca,0x88,0xcb,0x41,0x5b,0x86,0xe8,0x2d,0x05,0xa2,0x8e,0x0c,0xf4,0x92,0xf0,0x0d,0x93,0xfc,0x89,0x11,0xc3,0x19,0x69,0x80,0x05,0xb6,0x9e};
    mont256_from_bytes(&ctx, multiplier, multiplier97);
    mont256_from_bytes(&ctx, multiplicand, multiplicand97);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product97, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier98[32]   = {0xef,0xe4,0x42,0xe6,0x6b,0xf1,0x97,0x24,0x8f,0xe9,0x80,0x28,0x44,0x7a,0x69,0xe2,0xef,0x26,0xa7,0xa2,0x98,0x1e,0xac,0xeb,0xb6,0x3f,0x25,0x32,0x22,0x27,0xce,0x91};
    std::uint8_t multiplicand98[32] = {0xde,0xc4,0xdc,0x31,0x1c,0x75,0xef,0xa9,0x69,0xf0,0x4c,0xac,0x09,0xe4,0xf5,0x7a,0xa5,0xd0,0x85,0xb7,0xe0,0x9c,0xb6,0xcf,0x4d,0x83,0x43,0xc1,0x64,0xee,0x8b,0x41};
    std::uint8_t product98[32]      = {0x52,0x20,0xca,0xf4,0x26,0xf9,0x3c,0x10,0xfa,0xa3,0xbb,0x52,0x63,0xa0,0xd6,0x80,0x81,0x32,0x22,0x76,0x65,0x47,0x69,0x07,0x0f,0xbf,0x6b,0xc9,0x1c,0xe5,0xd2,0xf2};
    mont256_from_bytes(&ctx, multiplier, multiplier98);
    mont256_from_bytes(&ctx, multiplicand, multiplicand98);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product98, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }

    std::uint8_t multiplier99[32]   = {0x16,0x2e,0x05,0xb6,0xd4,0x93,0x56,0xc8,0x58,0x6e,0x93,0x4f,0x9d,0x3d,0xe1,0xe1,0x4c,0xa1,0xdc,0x4e,0x2b,0x5b,0x6a,0x48,0x4b,0xc6,0xd5,0x62,0x37,0xb9,0x4b,0x5a};
    std::uint8_t multiplicand99[32] = {0x13,0x46,0x8a,0x84,0x73,0x5e,0x1b,0x52,0xe2,0xe9,0x52,0x51,0x66,0x48,0x0b,0xf5,0xe8,0x1b,0x97,0x68,0xe4,0xb3,0x9b,0x43,0xf9,0x51,0x6d,0x8f,0x01,0x27,0xbe,0x3d};
    std::uint8_t product99[32]      = {0x34,0x97,0xb4,0x40,0xdc,0x25,0x88,0x54,0x5c,0xed,0xb9,0xc8,0x57,0xb5,0x81,0x60,0x65,0xa1,0xe3,0x77,0xc0,0x3f,0x9b,0xb2,0xbf,0xde,0x1d,0x46,0xc0,0x8d,0x72,0x41};
    mont256_from_bytes(&ctx, multiplier, multiplier99);
    mont256_from_bytes(&ctx, multiplicand, multiplicand99);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product99, product_data, 32) != 0)
    {
        throw std::runtime_error("err in x64::mont256_mul");
    }
}
#else
void test_mont256_x64_mul()
{
}
#endif