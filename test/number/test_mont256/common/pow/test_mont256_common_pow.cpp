#include <gmlib/number/internal/mont256_common.h>
#include <gmlib/number/internal/uint256_common.h>
#include <stdexcept>
#include <cstring>

using namespace number::internal::common;

static std::uint8_t  P_data[32]      = {0xff,0xff,0xff,0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
static std::uint8_t  P_SUB2_data[32] = {0xff,0xff,0xff,0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfd};
static std::uint8_t  R_data[32]      = {0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01};
static std::uint8_t  R_POW2_data[32] = {0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x03};
static std::uint32_t N_              = 1;

void test_mont256_common_pow()
{
    uint256_t P, P_SUB2, R, R_POW2;
    uint256_from_bytes(P, P_data);
    uint256_from_bytes(P_SUB2, P_SUB2_data);
    uint256_from_bytes(R, R_data);
    uint256_from_bytes(R_POW2, R_POW2_data);

    Mont256CTX ctx;
    ctx.P = P, ctx.P_SUB2 = P_SUB2;
    ctx.R = R, ctx.R_POW2 = R_POW2;
    ctx.N_ = N_;

    mont256_t    base, exponent, power;
    std::uint8_t power_data[32];

    std::uint8_t base0[32]     = {0x7d,0x61,0xe5,0x2c,0x06,0x6f,0x60,0x61,0x32,0x63,0xdc,0x72,0x3b,0x22,0x0c,0xee,0xf1,0x44,0x10,0x0a,0xa0,0x90,0x1a,0xa0,0x42,0x94,0xe0,0x82,0x76,0x83,0x0b,0x9e};
    std::uint8_t exponent0[32] = {0xfd,0x3c,0x90,0x44,0x56,0xd9,0x79,0xf5,0x22,0x49,0x6b,0x73,0xb4,0xc0,0x00,0xdb,0xab,0x58,0x9a,0x97,0xef,0xd4,0x2a,0x2b,0xdc,0x2e,0xa5,0xf1,0x2e,0x8e,0xe9,0x39};
    std::uint8_t power0[32]    = {0x8b,0x3b,0xbb,0xc4,0xa3,0xf5,0xe6,0xb4,0xe4,0xf6,0x2d,0x70,0xd0,0x49,0x0b,0xc3,0x04,0xc6,0x9d,0x66,0xd6,0x3c,0x10,0x06,0xa4,0xc2,0x05,0xc1,0xd1,0xcd,0x4a,0x92};
    mont256_from_bytes(&ctx, base, base0);
    uint256_from_bytes(exponent, exponent0);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power0, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base1[32]     = {0x7b,0x2a,0x61,0xb2,0x00,0x6c,0xdc,0xc9,0x6c,0xac,0x30,0x67,0xd0,0xfa,0xfc,0x6a,0x18,0x16,0x92,0x9c,0xa4,0x14,0xae,0xbe,0xd7,0x93,0xa6,0xea,0x22,0x26,0xbe,0x11};
    std::uint8_t exponent1[32] = {0x60,0xac,0x3f,0xc1,0x23,0x83,0xd2,0xd3,0x64,0x7e,0xd2,0x77,0x25,0x11,0x7d,0xe9,0x91,0xbb,0x5c,0x56,0xf5,0xd5,0x55,0xa4,0x3b,0x09,0xf6,0xc2,0x93,0x0d,0x32,0x8d};
    std::uint8_t power1[32]    = {0x13,0x1f,0x65,0xcf,0x82,0x51,0x05,0x79,0x4f,0x02,0x55,0x6b,0xee,0xb8,0x70,0x1e,0xfd,0xbc,0xb8,0xdd,0xc7,0xdd,0x0d,0x13,0x72,0x23,0x83,0x93,0x54,0xa9,0x6f,0x2e};
    mont256_from_bytes(&ctx, base, base1);
    uint256_from_bytes(exponent, exponent1);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power1, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base2[32]     = {0x1e,0xcc,0xa9,0xe9,0xc0,0x1e,0x46,0xfe,0xc0,0x56,0x33,0xe0,0x6b,0x89,0x68,0x4c,0x97,0x8f,0xd9,0xbc,0x43,0x57,0xc5,0xec,0xb0,0xda,0x50,0x5a,0x3e,0x5f,0x9e,0x28};
    std::uint8_t exponent2[32] = {0x4d,0xe2,0xea,0xa9,0x25,0xac,0x38,0xf3,0x89,0xef,0x2e,0x3c,0x1e,0x4c,0x50,0xf9,0xbc,0x22,0x4e,0x92,0xdb,0xe5,0x71,0x4e,0x1b,0x5a,0xf0,0x5b,0x17,0x48,0xed,0x19};
    std::uint8_t power2[32]    = {0xc9,0xfa,0xf1,0x4d,0x64,0xf2,0xe5,0x36,0x27,0xc5,0xb0,0x4c,0xfc,0x75,0xca,0x2a,0x2e,0xe0,0xf2,0x17,0xc8,0x01,0xc4,0xa5,0xce,0x91,0x2d,0x09,0x26,0xa8,0x97,0x97};
    mont256_from_bytes(&ctx, base, base2);
    uint256_from_bytes(exponent, exponent2);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power2, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base3[32]     = {0x4b,0x19,0x31,0x1b,0x8f,0x74,0x10,0x3c,0x53,0x5f,0xba,0x06,0x8c,0x15,0xfd,0xed,0xa8,0xcf,0x21,0x1c,0x6c,0x63,0x13,0x31,0xec,0x85,0x50,0x02,0xe6,0x4f,0x15,0x38};
    std::uint8_t exponent3[32] = {0xfd,0x50,0xda,0x2d,0xd4,0xc3,0xce,0x9c,0x8d,0x64,0x19,0xae,0x6d,0xa8,0x8f,0x92,0x05,0xee,0x19,0x22,0xef,0x74,0xce,0x85,0xa7,0xc4,0x6e,0xb7,0x49,0x6c,0x6c,0x7c};
    std::uint8_t power3[32]    = {0x59,0x80,0x0b,0xa4,0x52,0xab,0x53,0x4a,0x7a,0xa9,0xeb,0xda,0xa3,0x89,0x3a,0x44,0x98,0xc6,0xa2,0xe7,0x37,0x39,0x73,0xde,0xf4,0x50,0x7c,0x34,0xaa,0xac,0x00,0x03};
    mont256_from_bytes(&ctx, base, base3);
    uint256_from_bytes(exponent, exponent3);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power3, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base4[32]     = {0xa8,0xc5,0x3f,0xf3,0x5a,0x9c,0x3e,0xfc,0xd4,0x19,0x07,0xb9,0xfb,0xed,0x4c,0x65,0x38,0x26,0xbf,0xe3,0xd6,0x85,0xe7,0x8a,0xfa,0xe8,0x28,0x3d,0x4f,0xce,0xb9,0x06};
    std::uint8_t exponent4[32] = {0xdf,0x6e,0x6b,0x8f,0x91,0x71,0x4d,0x85,0x55,0xbc,0x53,0x6b,0x06,0x45,0x2a,0x1e,0xf2,0xc0,0x07,0xd1,0x6d,0x45,0xc2,0x6c,0xb3,0xb9,0xd8,0x96,0x98,0xda,0x55,0x3b};
    std::uint8_t power4[32]    = {0x6f,0xdd,0x94,0x3a,0x92,0x73,0x58,0x6f,0xb7,0xf7,0x08,0x05,0xa5,0x47,0xa0,0x3d,0xd4,0xa3,0x71,0x73,0x06,0x30,0x3b,0x81,0xd3,0x88,0xa6,0xf4,0x41,0x9d,0xee,0x28};
    mont256_from_bytes(&ctx, base, base4);
    uint256_from_bytes(exponent, exponent4);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power4, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base5[32]     = {0x4e,0xb9,0x7b,0x28,0xfd,0x51,0x77,0x41,0x76,0xad,0x85,0x35,0x55,0x2e,0xdb,0x41,0x8f,0x72,0xcf,0x96,0x27,0xf0,0xee,0xd1,0x3b,0xfd,0x1f,0x30,0xe8,0x63,0x91,0x0a};
    std::uint8_t exponent5[32] = {0x8b,0x1f,0xb5,0x1d,0xdf,0x25,0x21,0x53,0x46,0x6f,0x23,0x56,0x0c,0x02,0xd6,0x36,0x44,0x64,0xa7,0xcf,0x17,0xa5,0x3d,0x95,0x4b,0xa3,0x05,0xed,0x8f,0x0c,0x47,0x39};
    std::uint8_t power5[32]    = {0x62,0x49,0x10,0x39,0xe6,0xfd,0x66,0x5a,0xdc,0xc9,0x20,0x47,0x75,0xc2,0xac,0x01,0x4d,0x26,0xe6,0xe6,0x3e,0xdb,0xe5,0x73,0x95,0x8e,0x33,0x03,0x03,0xc2,0x66,0x29};
    mont256_from_bytes(&ctx, base, base5);
    uint256_from_bytes(exponent, exponent5);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power5, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base6[32]     = {0xf9,0x45,0x3d,0x7f,0xe4,0xde,0x0a,0x08,0x9b,0xd7,0x00,0xc4,0x1b,0x69,0x71,0x99,0x9c,0xe9,0x06,0xc0,0xe8,0xf6,0x8a,0xb1,0x63,0x1e,0x32,0x0c,0x2d,0x55,0xc3,0x10};
    std::uint8_t exponent6[32] = {0xbf,0x43,0xbb,0xe3,0x96,0x8e,0x75,0x5a,0x81,0xb3,0x4a,0xa1,0x68,0x7a,0xc7,0xeb,0x9c,0x48,0x09,0x5c,0x89,0x95,0x39,0x83,0xec,0x28,0x5f,0x77,0xe6,0x38,0x2b,0x85};
    std::uint8_t power6[32]    = {0x10,0x91,0x66,0x6f,0xdc,0xda,0xc2,0xb1,0x7f,0x4d,0x21,0x07,0xa3,0xbd,0x43,0x22,0x7a,0xe1,0x6b,0x96,0xf1,0x5b,0x39,0x2a,0x47,0x64,0x5a,0xa4,0xcc,0xed,0x70,0xbc};
    mont256_from_bytes(&ctx, base, base6);
    uint256_from_bytes(exponent, exponent6);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power6, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base7[32]     = {0xd0,0x96,0x96,0xf9,0xa9,0x95,0x24,0x44,0xad,0xab,0x12,0x7a,0x30,0x3d,0x1e,0xda,0xf3,0x17,0xae,0xf7,0x65,0x72,0xe1,0x9a,0x2a,0x68,0x88,0xe1,0x20,0xb4,0x0f,0x56};
    std::uint8_t exponent7[32] = {0x7f,0xa1,0xb2,0x78,0x72,0x41,0xfa,0x2d,0x15,0x68,0x95,0xf9,0xaa,0xd6,0x71,0x71,0xc0,0x56,0xda,0x9e,0x16,0x08,0x12,0xf1,0xfe,0x12,0x98,0xef,0xd0,0xdc,0x55,0x98};
    std::uint8_t power7[32]    = {0x4c,0x11,0xe3,0xcf,0xc6,0x94,0x21,0xf3,0x27,0x35,0xa6,0x0f,0xd9,0xd8,0x48,0x89,0x64,0x13,0xff,0x16,0x20,0xe6,0x97,0x4c,0xbf,0xf9,0x79,0x06,0x3a,0x53,0xc1,0xbf};
    mont256_from_bytes(&ctx, base, base7);
    uint256_from_bytes(exponent, exponent7);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power7, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base8[32]     = {0x4c,0xdc,0x73,0x31,0x43,0xe5,0x19,0xed,0xe8,0x47,0xf2,0x66,0x07,0x97,0xb1,0xd9,0x97,0x8f,0xf4,0xe7,0x8b,0xac,0x65,0xfe,0x20,0x2f,0x35,0x0e,0x56,0x25,0x2c,0xf0};
    std::uint8_t exponent8[32] = {0x1a,0xea,0x21,0xf5,0x1b,0x90,0x24,0xfc,0x37,0xc5,0xdd,0x07,0x79,0x10,0xdf,0x22,0x88,0x85,0x33,0x4f,0x7f,0x40,0x9f,0x06,0x15,0x34,0x17,0x72,0x70,0x15,0xf1,0x25};
    std::uint8_t power8[32]    = {0x17,0x25,0x7d,0x33,0x73,0x1d,0x25,0x50,0x4c,0xed,0x25,0xae,0x3b,0x8e,0x9f,0x1d,0x75,0x8a,0xe1,0xbe,0x86,0x8b,0xc3,0x1a,0xcc,0x7e,0x2d,0x0b,0xb5,0xc0,0x5e,0x96};
    mont256_from_bytes(&ctx, base, base8);
    uint256_from_bytes(exponent, exponent8);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power8, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base9[32]     = {0x72,0x0d,0x46,0x03,0x34,0x5a,0x9c,0x9c,0xb2,0x3e,0x8f,0xe1,0xa4,0x75,0x3d,0x7a,0xce,0x97,0x11,0xbc,0xe4,0xb5,0x66,0x8a,0xec,0x9f,0x7f,0x4e,0xbb,0xdb,0x9d,0xac};
    std::uint8_t exponent9[32] = {0x5d,0x70,0x84,0x95,0xf6,0xcc,0x63,0x38,0xe8,0x25,0x1f,0x93,0x15,0x23,0x96,0x60,0x98,0xc9,0x2d,0x6f,0x84,0x11,0x87,0xe4,0x1e,0xfc,0x92,0x9e,0x7e,0xb2,0x27,0x2f};
    std::uint8_t power9[32]    = {0xae,0x49,0x37,0x01,0x72,0x2a,0xe9,0x57,0x90,0x7d,0x04,0x87,0xd0,0xfb,0x16,0x5c,0x05,0xd7,0xf0,0x17,0xa3,0x7b,0xdd,0xe9,0x14,0xff,0x45,0x21,0x35,0xe7,0x37,0xbe};
    mont256_from_bytes(&ctx, base, base9);
    uint256_from_bytes(exponent, exponent9);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power9, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base10[32]     = {0x04,0xaa,0x4a,0x00,0x96,0x65,0xb3,0x4f,0xbb,0x02,0x57,0x00,0x31,0x2f,0x26,0x63,0x57,0x12,0xc4,0xfb,0x1f,0x3d,0xb4,0x84,0x4a,0xf3,0xb6,0xeb,0x82,0xe2,0x9a,0x40};
    std::uint8_t exponent10[32] = {0xca,0xc6,0x5e,0x0a,0xa2,0xbc,0xf6,0x25,0x24,0x3b,0x27,0x7a,0xc4,0x76,0xa8,0x31,0x03,0xcb,0xdb,0xca,0x9c,0x07,0xf0,0x1c,0xe3,0x3e,0xad,0x46,0xfb,0x68,0xbf,0x7b};
    std::uint8_t power10[32]    = {0xb3,0xde,0xee,0x78,0xff,0x30,0xd4,0xb0,0x00,0xd7,0x68,0x70,0x62,0x22,0x12,0x6a,0x86,0xef,0x38,0x8e,0x1f,0x41,0xcd,0x4b,0xc4,0x63,0xfd,0x8a,0x12,0xaf,0x32,0xd7};
    mont256_from_bytes(&ctx, base, base10);
    uint256_from_bytes(exponent, exponent10);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power10, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base11[32]     = {0x3d,0x96,0x9f,0xae,0x1c,0x17,0x80,0x01,0xae,0x19,0x3b,0x8a,0x14,0x9f,0xe5,0x91,0xf1,0x4c,0x5d,0x95,0xdc,0xa7,0x4f,0xe6,0xb0,0x65,0xe1,0xb1,0x47,0x51,0x5c,0x86};
    std::uint8_t exponent11[32] = {0x7e,0xf5,0xe4,0x8a,0xf1,0x87,0x2d,0x81,0x33,0x59,0x61,0xce,0xcc,0xf8,0xc2,0xee,0x90,0xaf,0x3a,0x3e,0xab,0xca,0xec,0x0f,0x10,0xa7,0x9f,0xf8,0x43,0x43,0xcf,0x47};
    std::uint8_t power11[32]    = {0x38,0xd0,0x94,0xd0,0x79,0x00,0xd5,0x71,0x60,0x5f,0xc7,0x40,0xf3,0xe9,0xa1,0x5c,0x0a,0x3a,0x6f,0x76,0x09,0x25,0xf6,0xd8,0x8e,0x05,0x6f,0x04,0x6e,0x5c,0x65,0x25};
    mont256_from_bytes(&ctx, base, base11);
    uint256_from_bytes(exponent, exponent11);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power11, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base12[32]     = {0x0f,0xa4,0xfc,0x6e,0x81,0x0d,0xe0,0xe9,0xf9,0xb9,0xcc,0x6c,0xaa,0xde,0xc1,0xfa,0xc8,0x13,0x77,0x89,0x4a,0x5d,0x73,0xf4,0x28,0xa8,0x0a,0x9c,0xc3,0xae,0x72,0x11};
    std::uint8_t exponent12[32] = {0x1b,0x09,0x82,0x82,0x12,0x94,0x10,0x3d,0x35,0x89,0x30,0x25,0xfd,0x5a,0xbe,0xe8,0x66,0x56,0x42,0xdd,0xbd,0xa9,0xa7,0x0a,0xb3,0x46,0x20,0x17,0x4b,0x63,0xaa,0xea};
    std::uint8_t power12[32]    = {0xbb,0x71,0xd6,0xd3,0xad,0x88,0x8a,0x93,0xbf,0xa4,0xb3,0x6f,0x02,0x0a,0x90,0x9f,0xcd,0x61,0x6a,0xb1,0x05,0xdd,0xa8,0xdc,0xd8,0x69,0x4c,0x06,0xed,0x40,0x32,0xb3};
    mont256_from_bytes(&ctx, base, base12);
    uint256_from_bytes(exponent, exponent12);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power12, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base13[32]     = {0x86,0xdb,0x50,0xd3,0x4a,0xa0,0xc4,0xa3,0xb2,0xfe,0x61,0xa3,0xfe,0x67,0x05,0x95,0xc2,0x0f,0xbf,0xfa,0xb2,0xbf,0x72,0x2a,0xef,0xb9,0xbb,0x62,0x6c,0xfb,0x0f,0xd7};
    std::uint8_t exponent13[32] = {0x76,0x88,0x29,0x97,0x94,0x98,0x8b,0x68,0x29,0xe3,0xb8,0x91,0x43,0xd3,0xa7,0x45,0x63,0x66,0x92,0x49,0x4e,0x1f,0xed,0xf3,0x26,0x28,0x09,0x8d,0x38,0x77,0x3c,0xeb};
    std::uint8_t power13[32]    = {0x97,0x94,0x2f,0x20,0x8e,0xef,0xb6,0x37,0xb9,0x6e,0xb4,0x5e,0x98,0x1d,0x22,0x23,0x31,0x32,0x82,0xb7,0xbc,0x84,0xdb,0xe7,0xe4,0xbf,0xef,0x91,0x53,0xb7,0xeb,0x98};
    mont256_from_bytes(&ctx, base, base13);
    uint256_from_bytes(exponent, exponent13);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power13, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base14[32]     = {0x2f,0x52,0xab,0x52,0x56,0x8d,0x6f,0x9b,0xd0,0xc2,0x5a,0x77,0xed,0x14,0xaf,0x15,0x1a,0xca,0xd8,0x0b,0xe7,0x63,0xbe,0x35,0x62,0x5e,0x87,0xad,0x1b,0x18,0x41,0xc6};
    std::uint8_t exponent14[32] = {0xd6,0xfc,0x6f,0x73,0x66,0x56,0x95,0x5c,0x27,0xf7,0x8b,0xdc,0x5a,0xcb,0x82,0x81,0xc3,0xb4,0x1c,0x59,0xbc,0xcc,0xce,0xbc,0x7b,0x72,0xdf,0x4e,0xe5,0xfd,0x15,0x65};
    std::uint8_t power14[32]    = {0x86,0xe3,0x64,0x1e,0xfc,0xdf,0x0f,0x6b,0xa8,0x30,0x16,0xe6,0xb7,0x4d,0x8a,0x50,0x72,0xd6,0xab,0x4c,0xfe,0xff,0x97,0xcc,0x9b,0xdb,0x09,0xc0,0x63,0x34,0xe2,0x0a};
    mont256_from_bytes(&ctx, base, base14);
    uint256_from_bytes(exponent, exponent14);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power14, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base15[32]     = {0x10,0xd0,0xa9,0xfb,0x60,0xae,0xd5,0x8b,0xd8,0x90,0x83,0x03,0xb1,0xa3,0xf9,0x67,0x06,0xa3,0x79,0x98,0xbc,0xd5,0x16,0xab,0x36,0xaf,0xd3,0x7c,0xb4,0xd0,0x75,0x45};
    std::uint8_t exponent15[32] = {0x52,0x69,0xc4,0x7e,0x58,0x41,0x38,0x5e,0x99,0x43,0xd7,0x11,0x54,0x9d,0xd7,0x7b,0x97,0xf8,0xb7,0x65,0xe8,0x15,0xc2,0x6b,0xaa,0x06,0x7b,0xd1,0xaa,0x1b,0x89,0x87};
    std::uint8_t power15[32]    = {0x0e,0xcd,0xa0,0x69,0x13,0x46,0xfa,0xbe,0xdc,0x02,0x7c,0x2d,0xaf,0x46,0xcf,0x68,0x18,0xc1,0xe4,0xb1,0xe1,0x86,0xaa,0x7d,0xe3,0x9e,0x4b,0x09,0x8b,0x0a,0x9f,0xcc};
    mont256_from_bytes(&ctx, base, base15);
    uint256_from_bytes(exponent, exponent15);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power15, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base16[32]     = {0xc1,0xb7,0xbc,0xf9,0x33,0x26,0xff,0x22,0x13,0x94,0xf8,0x25,0x2d,0xe1,0xec,0xa1,0x6a,0xcf,0x83,0xe1,0xf5,0xb9,0x22,0x68,0x64,0x82,0xc8,0xee,0x73,0x78,0x33,0x62};
    std::uint8_t exponent16[32] = {0x8a,0x1b,0xc1,0x2f,0x13,0x65,0xe1,0x27,0xbd,0x9a,0xaf,0x39,0xc0,0x01,0x3a,0x5b,0x86,0xaa,0xfe,0x2c,0x9b,0x20,0x96,0x38,0xb0,0x4f,0x01,0xf9,0x60,0x77,0x15,0xf5};
    std::uint8_t power16[32]    = {0x1e,0xe8,0x03,0xdb,0x57,0x11,0x59,0xa6,0xb0,0x37,0x19,0xd1,0x64,0x7e,0xb9,0x9b,0x86,0x05,0x41,0x6d,0x0b,0xb7,0x7a,0xa5,0x27,0x94,0x3c,0x06,0x8b,0x26,0xfc,0x4d};
    mont256_from_bytes(&ctx, base, base16);
    uint256_from_bytes(exponent, exponent16);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power16, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base17[32]     = {0xb1,0xea,0x5b,0x50,0xbf,0x82,0xa5,0x8c,0xce,0xdc,0xf3,0xb1,0x27,0xef,0xee,0x2d,0x9b,0x1e,0x1c,0x0b,0x73,0xb6,0x05,0x71,0x19,0x95,0xf7,0x24,0x0d,0xd7,0xba,0xba};
    std::uint8_t exponent17[32] = {0x66,0x60,0xd0,0x26,0xb5,0x8d,0x8c,0x23,0xde,0x84,0x6c,0x1d,0xe7,0x51,0x95,0x9a,0x9f,0xc2,0xc5,0xd4,0x43,0x16,0x6e,0xeb,0x34,0xd1,0x05,0x7c,0x30,0x04,0xed,0xe9};
    std::uint8_t power17[32]    = {0xd6,0x9c,0x13,0xef,0x64,0x93,0xcd,0xb6,0x3d,0x0d,0x35,0x38,0x09,0x42,0xac,0xab,0x80,0x76,0x50,0xd1,0x9d,0x2a,0xa5,0x8e,0xad,0xc5,0xd3,0x17,0xad,0x14,0x87,0xa9};
    mont256_from_bytes(&ctx, base, base17);
    uint256_from_bytes(exponent, exponent17);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power17, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base18[32]     = {0x52,0x08,0x97,0xb0,0x5b,0xb4,0x2a,0xc2,0x6d,0xc5,0xc3,0xe5,0x3b,0x9d,0xbd,0x05,0x9c,0x29,0x6d,0x10,0x40,0x49,0xf5,0x22,0x67,0x28,0xaf,0x8b,0x0d,0xc9,0x67,0x88};
    std::uint8_t exponent18[32] = {0x71,0xff,0x49,0x82,0x6e,0xc6,0x37,0x06,0xeb,0x84,0x1f,0xc2,0x89,0x10,0x7d,0xef,0x96,0xbd,0xbf,0x50,0xdf,0xfe,0x4d,0xd1,0x21,0x60,0x0b,0x3e,0xfa,0xd6,0x97,0xe5};
    std::uint8_t power18[32]    = {0x62,0xdc,0x4a,0x1b,0xa3,0x17,0x78,0x39,0xd6,0x4d,0x74,0x58,0x8d,0x04,0x9a,0x33,0xb7,0xfc,0x71,0xbf,0x99,0x28,0x6a,0x1b,0x1b,0x29,0x17,0x5e,0x94,0xf2,0xd9,0xd9};
    mont256_from_bytes(&ctx, base, base18);
    uint256_from_bytes(exponent, exponent18);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power18, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base19[32]     = {0x49,0x07,0x4d,0x19,0xce,0x1a,0x21,0x49,0x9c,0x27,0x69,0x1f,0x7d,0x95,0x95,0x84,0x33,0x43,0x66,0x9d,0x60,0xc1,0x0b,0x4a,0xfe,0x7d,0x93,0xd9,0x99,0x05,0x38,0x53};
    std::uint8_t exponent19[32] = {0xc5,0x5c,0xef,0xa5,0xfc,0xca,0xf5,0xbf,0x46,0x23,0x81,0x16,0x59,0x84,0x2d,0x0d,0x6f,0x0c,0x7b,0xc0,0x0b,0x82,0x8a,0xd8,0xf4,0x54,0x5d,0xbc,0xa9,0x21,0xc6,0xb1};
    std::uint8_t power19[32]    = {0x28,0x2c,0x82,0x78,0x07,0xf8,0xc0,0x5f,0x23,0x14,0x2d,0xfa,0x88,0x8a,0x90,0xdb,0x2a,0x6e,0x7a,0x74,0x3b,0x7b,0x74,0x79,0x77,0x5c,0xbd,0x8c,0x2b,0x66,0x21,0xe8};
    mont256_from_bytes(&ctx, base, base19);
    uint256_from_bytes(exponent, exponent19);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power19, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base20[32]     = {0xca,0x54,0xb0,0x2b,0x6e,0x96,0xb9,0x72,0x66,0x9a,0x8f,0x5d,0x0f,0xdd,0x81,0xcf,0x8e,0x36,0x23,0xf9,0xa6,0x22,0x4d,0x86,0xb9,0x33,0xe7,0x16,0x60,0xd9,0xca,0xec};
    std::uint8_t exponent20[32] = {0x09,0x38,0xf6,0x43,0xdc,0x0c,0x0e,0xbe,0xff,0x17,0x24,0xd0,0x91,0x8d,0x4d,0xb0,0x79,0x56,0x5e,0x0b,0x1b,0x44,0x76,0x33,0xbb,0xdb,0xbf,0x76,0x68,0x5a,0x08,0xbb};
    std::uint8_t power20[32]    = {0xe3,0xfa,0xe7,0x90,0x7b,0xb2,0x75,0x61,0x69,0x4a,0x1e,0x97,0xed,0xe0,0x33,0x47,0xea,0x0c,0x5a,0x12,0x53,0xf1,0x28,0x86,0x96,0x9a,0x76,0x81,0x08,0x6c,0x1d,0xbd};
    mont256_from_bytes(&ctx, base, base20);
    uint256_from_bytes(exponent, exponent20);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power20, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base21[32]     = {0x4c,0x2d,0x4e,0xf3,0x55,0xd5,0x8e,0x1b,0xf6,0x21,0xae,0xf5,0xf6,0x18,0x9c,0xa0,0x7b,0x9f,0x4b,0x26,0x0d,0x67,0xb2,0xf1,0x00,0x4d,0x20,0x37,0xa8,0xd6,0x5a,0xf5};
    std::uint8_t exponent21[32] = {0x66,0x5a,0xb2,0x76,0x39,0xcc,0x4e,0x8b,0xb7,0xad,0x3d,0x74,0xba,0xcd,0xab,0x8a,0x7f,0xb2,0x36,0x42,0xea,0xb5,0xde,0x95,0x8b,0x2b,0xe4,0x9b,0xb7,0x7f,0x89,0x88};
    std::uint8_t power21[32]    = {0x62,0x2c,0x9e,0xc4,0x1a,0x7f,0x4b,0x9a,0xe3,0x33,0x2e,0xe3,0x76,0xf8,0xfd,0x48,0x49,0x39,0xa7,0x16,0xe6,0x3f,0xac,0x31,0xf4,0x2c,0xb6,0xd8,0x0b,0x48,0xda,0xc9};
    mont256_from_bytes(&ctx, base, base21);
    uint256_from_bytes(exponent, exponent21);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power21, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base22[32]     = {0x38,0xf0,0x43,0xd4,0x20,0xfb,0xcf,0x89,0x62,0x3f,0x38,0xa3,0x8a,0x1f,0x9e,0xca,0xfd,0x1a,0x0e,0xcc,0xec,0x82,0xe7,0x61,0xab,0xe5,0xb1,0x82,0xa0,0x9d,0xf0,0x2f};
    std::uint8_t exponent22[32] = {0xad,0x6b,0x07,0xe6,0x4d,0x07,0xc9,0xe3,0x92,0x53,0x42,0xf3,0x5e,0x75,0x46,0xb1,0x0e,0x28,0x15,0x78,0xda,0x7b,0xb8,0x77,0x05,0x48,0xa1,0xb6,0x6b,0xff,0x7b,0x4f};
    std::uint8_t power22[32]    = {0xfa,0x81,0xbd,0xdc,0x21,0x3c,0x38,0x2f,0xe3,0x09,0x0d,0x7d,0x07,0x7c,0x24,0x81,0xb2,0x9e,0x3d,0x4f,0x83,0x40,0x94,0xf2,0x48,0xf7,0x50,0x5e,0x5e,0xb3,0x67,0xed};
    mont256_from_bytes(&ctx, base, base22);
    uint256_from_bytes(exponent, exponent22);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power22, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base23[32]     = {0x62,0x16,0x44,0xb0,0x8a,0xa9,0x01,0xdf,0xbd,0x68,0x89,0xfc,0x8d,0xd7,0x22,0x2a,0x42,0x7b,0x52,0x66,0x0a,0x6c,0x54,0xc9,0x7e,0xe4,0x1e,0xd2,0xd2,0x08,0xbb,0xee};
    std::uint8_t exponent23[32] = {0x1f,0xe6,0xaa,0xb8,0x9a,0x00,0x71,0x39,0x98,0xe2,0x59,0x2b,0xa1,0x07,0x7a,0xb0,0x0e,0x0b,0x77,0xb5,0x42,0xe4,0x58,0x96,0x98,0x8e,0x05,0xb6,0xe4,0x2c,0x54,0x7b};
    std::uint8_t power23[32]    = {0x99,0x7b,0x8d,0x1b,0xa7,0xb1,0x18,0x8b,0x15,0x6c,0xfa,0x4d,0x82,0xb9,0x1a,0x52,0xce,0x9d,0x36,0xc6,0x15,0xff,0xd4,0x11,0x11,0x0d,0xac,0xce,0xcf,0x4e,0x90,0x96};
    mont256_from_bytes(&ctx, base, base23);
    uint256_from_bytes(exponent, exponent23);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power23, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base24[32]     = {0x29,0xa8,0xfa,0xf7,0x75,0x23,0xa9,0x8e,0x8f,0x1c,0x26,0x2d,0x61,0x43,0x9c,0x2c,0x6e,0x0e,0x19,0xee,0x9c,0xab,0x99,0xa6,0xeb,0x01,0x53,0x89,0x31,0x9d,0x40,0xd6};
    std::uint8_t exponent24[32] = {0xfa,0x6e,0xbb,0x87,0x2f,0xd0,0xc6,0x93,0x16,0xf1,0x46,0x8d,0xa6,0xf0,0x9b,0xad,0x65,0x6c,0xcb,0xb4,0x1a,0x9b,0xca,0x71,0xd8,0x91,0x3d,0xa2,0xb7,0x53,0x14,0x51};
    std::uint8_t power24[32]    = {0x99,0x6d,0x94,0x74,0xe1,0xfa,0x8d,0x1c,0xb3,0x32,0xbe,0x8f,0x00,0x8d,0xdd,0x40,0xd2,0x74,0xe0,0xcd,0xb8,0x02,0x23,0xe8,0xb9,0x09,0xce,0x58,0x89,0x1e,0x3f,0x9a};
    mont256_from_bytes(&ctx, base, base24);
    uint256_from_bytes(exponent, exponent24);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power24, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base25[32]     = {0x8c,0xda,0xbd,0xd9,0xf1,0x8c,0xc4,0x65,0x93,0xab,0x7b,0x2b,0x5c,0xaa,0x19,0xb2,0x23,0x1e,0xcb,0x1b,0x53,0x07,0x2f,0x39,0x22,0xe4,0xf5,0xf5,0x5e,0xcd,0xcb,0x22};
    std::uint8_t exponent25[32] = {0x5d,0x23,0xbe,0x6f,0x57,0x1b,0x44,0xad,0x2d,0xc1,0x0e,0x4e,0x7c,0x7e,0x91,0x26,0x38,0x66,0x2b,0x78,0x96,0xf2,0x54,0xff,0x58,0x1e,0xcf,0x19,0x34,0x69,0xf1,0xfa};
    std::uint8_t power25[32]    = {0x69,0xcf,0xe5,0x5a,0x7f,0x4a,0xec,0xc8,0xe5,0xcc,0x2b,0x74,0x1f,0x2a,0x87,0x79,0xe1,0x6a,0x4c,0x14,0xcf,0xca,0xe3,0x14,0x58,0x41,0xaf,0x08,0x98,0xa9,0x1e,0x4c};
    mont256_from_bytes(&ctx, base, base25);
    uint256_from_bytes(exponent, exponent25);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power25, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base26[32]     = {0x6d,0x82,0xef,0x19,0x99,0x12,0x97,0x6b,0x1e,0xa3,0x8d,0x95,0xa7,0x9d,0xde,0xae,0x89,0xdc,0x47,0x18,0x86,0x24,0x40,0xe3,0x4a,0x65,0xe0,0xb1,0x53,0xc4,0xd7,0x1f};
    std::uint8_t exponent26[32] = {0xe3,0xd0,0x1a,0xd3,0x45,0xb7,0xce,0x28,0x6e,0x79,0x7a,0xc4,0x72,0xd2,0xba,0x2c,0xec,0x9c,0x2f,0xca,0xb0,0xe0,0xea,0x1a,0xa2,0x75,0x7b,0x2c,0x87,0xa3,0xe4,0x39};
    std::uint8_t power26[32]    = {0xe6,0xf2,0xe6,0xb3,0x95,0xee,0xfe,0xd2,0xb6,0x64,0x4a,0xb9,0xe3,0xb4,0x59,0x57,0x8d,0x43,0xf2,0xbc,0x81,0x40,0x04,0xfc,0x5b,0x61,0x68,0x89,0xd4,0x55,0x8b,0xe4};
    mont256_from_bytes(&ctx, base, base26);
    uint256_from_bytes(exponent, exponent26);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power26, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base27[32]     = {0xce,0x51,0x79,0x0a,0x4c,0x26,0xd2,0xe4,0xf9,0x68,0xc6,0x7d,0x29,0x57,0xef,0xb3,0x0e,0xf2,0x63,0xbc,0x80,0x6e,0x2a,0x4f,0x70,0xe5,0xc1,0x70,0x2a,0x91,0xb7,0x1e};
    std::uint8_t exponent27[32] = {0x3e,0xf2,0x71,0xfb,0x98,0x75,0x7e,0x5a,0x02,0xb2,0xd7,0xfe,0xdb,0x01,0xf8,0xfb,0xa5,0xa5,0xfc,0x8a,0x51,0x3d,0x84,0xad,0xb4,0xbc,0xfa,0x10,0xac,0xc5,0x1c,0xce};
    std::uint8_t power27[32]    = {0x8f,0x69,0x88,0x83,0x1e,0x3e,0x2f,0x86,0x8d,0x80,0xe5,0x74,0xd0,0x4d,0xeb,0xed,0x18,0xb0,0x07,0xf1,0x09,0x3d,0x34,0x5b,0x0a,0x98,0xdc,0x1f,0xf4,0x24,0xcc,0x93};
    mont256_from_bytes(&ctx, base, base27);
    uint256_from_bytes(exponent, exponent27);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power27, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base28[32]     = {0x14,0x67,0x57,0x3f,0x36,0xa4,0x46,0xa5,0x7c,0x6b,0x18,0x5a,0x13,0xf1,0x69,0xd6,0x4f,0x80,0x81,0xdd,0x7b,0x82,0x9a,0x46,0xbc,0x0b,0x5f,0x60,0xad,0x20,0x94,0xd2};
    std::uint8_t exponent28[32] = {0x1c,0x72,0x6a,0xa5,0x93,0x10,0xd5,0xc5,0x04,0x09,0x78,0x46,0xc8,0x6b,0xfb,0xd2,0x1a,0x4d,0x96,0x17,0xd5,0x71,0x2b,0xcb,0x82,0xbf,0xbe,0x3e,0x8e,0x5b,0x05,0xe3};
    std::uint8_t power28[32]    = {0xaa,0x09,0x46,0x86,0x8e,0x8b,0x82,0xec,0x34,0x69,0x70,0xdf,0x80,0xe6,0x15,0x61,0xee,0xb0,0x27,0x84,0xc0,0x62,0xc3,0xa8,0xb7,0xf6,0xad,0xba,0xdb,0x8c,0xae,0x3e};
    mont256_from_bytes(&ctx, base, base28);
    uint256_from_bytes(exponent, exponent28);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power28, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base29[32]     = {0xc8,0x87,0x63,0x72,0xb8,0x1b,0x24,0xa5,0x6f,0x4d,0x1c,0x50,0x5c,0x16,0xc5,0xba,0xd7,0x8a,0x4f,0x9a,0xb8,0x6d,0x62,0x68,0x08,0x63,0xee,0xca,0xeb,0xfa,0x2d,0xac};
    std::uint8_t exponent29[32] = {0x2a,0x1b,0xe0,0x8a,0xe8,0x79,0xba,0xf2,0x8d,0x52,0x93,0xcb,0x5d,0xec,0xbb,0xd5,0x9f,0x45,0x7b,0x27,0xc2,0x1c,0xcc,0xc4,0x7e,0xc9,0xfd,0x9b,0x6c,0x67,0x72,0xe1};
    std::uint8_t power29[32]    = {0x8c,0x38,0x6e,0x65,0xcc,0x0c,0x4a,0x34,0x18,0x0f,0xb1,0x13,0x3e,0xd5,0x7f,0xda,0x8b,0x20,0x85,0x67,0x17,0x78,0x54,0x68,0xbe,0xdd,0xb6,0xb4,0xcc,0x80,0x18,0x9b};
    mont256_from_bytes(&ctx, base, base29);
    uint256_from_bytes(exponent, exponent29);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power29, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base30[32]     = {0xec,0x9c,0x8b,0xc3,0x77,0x49,0x65,0xa5,0x1a,0xe9,0x1e,0xa9,0xe8,0x76,0x0a,0xe5,0xe2,0x53,0x0e,0xf6,0xc3,0xcb,0x1e,0xc2,0x5b,0x8e,0xcb,0x15,0xdc,0xc2,0xfb,0x78};
    std::uint8_t exponent30[32] = {0x3c,0xb5,0x1a,0x5d,0xe9,0x2f,0xef,0x6a,0x28,0x88,0x74,0xf9,0x4a,0x74,0xcd,0x47,0x8d,0xea,0xee,0x6f,0xaf,0xc8,0x3a,0x85,0xbf,0xde,0x77,0xa8,0x00,0x40,0x98,0x66};
    std::uint8_t power30[32]    = {0x2b,0x94,0xd2,0xba,0x49,0xca,0xa4,0x8a,0x7d,0x3f,0x77,0xf0,0x1c,0x12,0x83,0x38,0x85,0xfd,0x4c,0x13,0xbe,0x95,0x77,0x2a,0x36,0xb0,0x86,0xd4,0x37,0x48,0x24,0x43};
    mont256_from_bytes(&ctx, base, base30);
    uint256_from_bytes(exponent, exponent30);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power30, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base31[32]     = {0xda,0xb5,0xb5,0x98,0xd0,0xec,0x16,0xb4,0xd3,0x6e,0xc3,0xf5,0xb6,0x45,0xca,0x5d,0xe4,0x30,0xfa,0x3d,0xc6,0xef,0x21,0x31,0x33,0x2c,0xad,0xdc,0xf2,0x21,0xd8,0xfe};
    std::uint8_t exponent31[32] = {0x14,0x8e,0xe1,0x6a,0xe2,0x4b,0x24,0xa4,0xde,0x4a,0x5b,0x1a,0x9a,0xcf,0x86,0x27,0x0b,0xd0,0xc1,0xf9,0x43,0x4d,0x9d,0xda,0x7f,0xc2,0xe8,0x27,0x5d,0xbc,0x13,0x34};
    std::uint8_t power31[32]    = {0x5b,0x93,0x74,0x8e,0xb3,0xb5,0x34,0x97,0xc3,0xbe,0x84,0x53,0xd3,0x36,0x3b,0x0d,0x9d,0x05,0x84,0x21,0xb4,0xe5,0x7d,0xa2,0x59,0x29,0x8e,0xb8,0x99,0x72,0xe6,0x2e};
    mont256_from_bytes(&ctx, base, base31);
    uint256_from_bytes(exponent, exponent31);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power31, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base32[32]     = {0xad,0x53,0x7d,0xe2,0x90,0x7e,0xb7,0x50,0x8f,0x02,0x03,0xed,0x04,0x57,0xfc,0xfb,0xe1,0xa5,0xe9,0x9b,0x61,0x0f,0xb7,0x14,0x1b,0x8f,0x2e,0xbf,0xbe,0x9d,0xf4,0x31};
    std::uint8_t exponent32[32] = {0xb5,0xc7,0x3c,0x27,0x2e,0x32,0xb2,0x94,0xe5,0x47,0x0c,0x93,0x79,0xb6,0x39,0xff,0x18,0x72,0x39,0xad,0x89,0x54,0x4d,0x94,0xc5,0xb5,0x9c,0x3f,0x05,0xd7,0xe0,0xfe};
    std::uint8_t power32[32]    = {0x4b,0x0d,0x2f,0x72,0x23,0xaf,0x83,0x16,0x8e,0x34,0x18,0xf9,0x78,0x12,0xea,0x11,0xc2,0xc0,0xb4,0x75,0x12,0x87,0xc4,0xd9,0x1c,0xb5,0xc6,0x77,0x9d,0x2b,0x4d,0x84};
    mont256_from_bytes(&ctx, base, base32);
    uint256_from_bytes(exponent, exponent32);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power32, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base33[32]     = {0xe7,0x8d,0x76,0xde,0x46,0xb4,0x1e,0xc8,0xcb,0x91,0x52,0x8b,0x71,0xf4,0xbe,0x42,0xd3,0x79,0x3e,0x5d,0x3d,0x0b,0xbb,0x30,0x89,0xc7,0xca,0xc4,0xb8,0xa3,0x1b,0xe7};
    std::uint8_t exponent33[32] = {0x43,0x0a,0x9c,0x2b,0x57,0xec,0x7c,0x35,0x01,0x96,0xc8,0x84,0x63,0xd5,0x56,0x87,0xce,0x45,0x47,0x13,0x66,0xdf,0xb4,0x2e,0x9f,0x20,0xfa,0xad,0xf3,0xda,0x54,0xbc};
    std::uint8_t power33[32]    = {0xe9,0x38,0x1f,0x1b,0x49,0xd6,0xaa,0x91,0x23,0xc0,0xba,0x62,0xb5,0x5f,0x0d,0x6e,0x7b,0x00,0x88,0xc6,0x59,0x1a,0x3c,0x5d,0xd6,0xfb,0x45,0x0a,0xfa,0x31,0x56,0x74};
    mont256_from_bytes(&ctx, base, base33);
    uint256_from_bytes(exponent, exponent33);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power33, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base34[32]     = {0x49,0xd1,0xb8,0xb3,0xf7,0xcc,0x16,0x98,0x58,0x56,0xef,0x8b,0x69,0x3c,0x8c,0x29,0xc0,0x0b,0x58,0x47,0x31,0xc2,0xae,0xdb,0xc9,0x5f,0xcd,0x4f,0xf7,0x30,0x05,0xe3};
    std::uint8_t exponent34[32] = {0x32,0x70,0x39,0x5f,0xad,0x04,0xe9,0x2d,0xbf,0xc8,0xa6,0xec,0xcd,0xd6,0x76,0xe1,0x9d,0xac,0xa5,0x7c,0x6e,0x1d,0x65,0xf1,0x06,0xf0,0x35,0xc9,0xd1,0x8e,0x22,0xa9};
    std::uint8_t power34[32]    = {0x8f,0x92,0x19,0x84,0x47,0xb4,0x4d,0x68,0xa5,0xf5,0xc7,0xdf,0x36,0x2b,0xdb,0x45,0xab,0x42,0xf2,0xa7,0xa2,0xbf,0x41,0x85,0x29,0x8f,0x58,0x2e,0x2d,0x8b,0x68,0x6c};
    mont256_from_bytes(&ctx, base, base34);
    uint256_from_bytes(exponent, exponent34);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power34, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base35[32]     = {0xb9,0xc0,0xdc,0xf0,0x58,0xfa,0xec,0xdf,0x5e,0xfd,0x1e,0xbc,0x32,0xe2,0xd0,0xa3,0xc8,0xc2,0x9b,0x31,0xda,0x9c,0x99,0xbc,0x3e,0x02,0x5f,0x9f,0x98,0xd7,0x2b,0x4e};
    std::uint8_t exponent35[32] = {0x4a,0x2c,0xac,0x83,0x5d,0x74,0x84,0x01,0xf3,0xcd,0xa5,0x5e,0xf0,0xdc,0x51,0x36,0x5e,0x5c,0x01,0xd6,0x1a,0xb9,0x9a,0xdb,0x51,0xdd,0xfe,0x6a,0x5b,0xdf,0xb4,0x74};
    std::uint8_t power35[32]    = {0x08,0xc6,0x89,0x0f,0x44,0xea,0xf6,0x6f,0x44,0x2c,0x6f,0x99,0xa2,0x50,0xa1,0xf7,0x50,0x49,0xc3,0x71,0x39,0x23,0xa5,0x20,0xac,0x23,0xe4,0x9d,0x71,0xc2,0xc1,0xcb};
    mont256_from_bytes(&ctx, base, base35);
    uint256_from_bytes(exponent, exponent35);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power35, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base36[32]     = {0xd8,0x96,0xea,0x24,0xf6,0xcd,0x48,0x48,0x2b,0xa0,0x76,0x09,0x74,0x77,0x29,0x57,0xa8,0xd8,0x6b,0x52,0x7b,0xe2,0xde,0x8e,0xa0,0x04,0x19,0x94,0x42,0x0e,0x94,0xea};
    std::uint8_t exponent36[32] = {0xc7,0x11,0xb4,0xfd,0xe4,0xdc,0x34,0xb7,0xfc,0xec,0x9d,0x22,0xd7,0x76,0x1b,0x70,0x40,0xf1,0x80,0x56,0x3e,0x76,0x79,0x29,0x37,0xbb,0xf7,0x8d,0xa9,0x49,0x9f,0x64};
    std::uint8_t power36[32]    = {0x11,0x35,0x8b,0xc3,0xfe,0x8d,0x61,0x66,0x88,0xb5,0xdd,0xd2,0x02,0x0e,0xa9,0xe3,0x44,0xd9,0x06,0x16,0x28,0xd2,0x35,0x0b,0xd2,0xb1,0x08,0x60,0x3d,0xa8,0xfd,0xc2};
    mont256_from_bytes(&ctx, base, base36);
    uint256_from_bytes(exponent, exponent36);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power36, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base37[32]     = {0x05,0x4e,0xc0,0x37,0xa4,0x2a,0xf8,0xc3,0x47,0xed,0xb7,0x9e,0x5f,0xe0,0x70,0x16,0xfe,0x56,0x3d,0xa2,0x75,0x95,0xc4,0xd6,0x60,0x92,0x02,0x6f,0xc4,0x6d,0x7e,0x5e};
    std::uint8_t exponent37[32] = {0x36,0x26,0x85,0x1c,0xae,0xe7,0xca,0x09,0xa8,0x57,0x86,0xcf,0x76,0x18,0x86,0xd3,0xb4,0x47,0x8f,0x92,0x45,0x91,0xd1,0x18,0x56,0xba,0x5e,0xa1,0xe3,0x8e,0x27,0x1c};
    std::uint8_t power37[32]    = {0xf1,0xda,0x06,0x6f,0xf6,0xfa,0x19,0xdb,0xfb,0xe3,0xac,0x20,0xf6,0x39,0xaa,0x83,0xe4,0xb9,0xb6,0xb4,0x4d,0x68,0x5e,0xb4,0x83,0xc4,0x14,0x08,0x83,0x2b,0x22,0xb9};
    mont256_from_bytes(&ctx, base, base37);
    uint256_from_bytes(exponent, exponent37);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power37, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base38[32]     = {0x30,0xe5,0x77,0xaa,0x73,0xc4,0xcf,0x66,0x03,0x96,0x15,0xaf,0x52,0x51,0xe4,0x6c,0x28,0x44,0x21,0xd9,0xcd,0x1f,0x86,0x74,0x7f,0x40,0xfd,0x7d,0xac,0x55,0xd6,0x44};
    std::uint8_t exponent38[32] = {0x70,0x39,0x28,0x25,0x96,0xcc,0x6f,0x0a,0x11,0x55,0x82,0xc1,0xf1,0x23,0x2a,0x40,0x00,0xf9,0xc1,0x1c,0xaf,0x6e,0xe2,0x03,0x94,0x32,0xa8,0x33,0xb2,0xc5,0xce,0xa0};
    std::uint8_t power38[32]    = {0x25,0xab,0xd3,0xd5,0x9a,0x6a,0x4a,0x81,0x36,0x38,0xd0,0xd7,0xf8,0x10,0xb6,0xa3,0x7a,0x93,0xce,0x81,0x40,0x1e,0xb3,0x3b,0x81,0x12,0x04,0xe1,0xed,0xf4,0x1c,0x0c};
    mont256_from_bytes(&ctx, base, base38);
    uint256_from_bytes(exponent, exponent38);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power38, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base39[32]     = {0xc0,0xb7,0xe5,0x39,0x5c,0x75,0xee,0x6e,0xc2,0x6f,0x4b,0x4f,0xb9,0x81,0x0d,0x9c,0x72,0x58,0xdf,0xf9,0xf2,0xf5,0x35,0xd1,0x50,0xe1,0xc2,0x95,0x1c,0x3a,0x38,0x14};
    std::uint8_t exponent39[32] = {0x33,0x7b,0x85,0x47,0x03,0x99,0x9b,0x72,0x6f,0xd2,0x5f,0xc5,0x8b,0x28,0xaa,0xac,0x75,0x5c,0x6a,0xe3,0xb5,0x9d,0xa1,0xba,0xca,0xde,0x75,0x01,0xd0,0x75,0x4e,0xb5};
    std::uint8_t power39[32]    = {0x8c,0x65,0xd7,0x22,0x99,0xf0,0x75,0xfb,0x94,0x91,0xae,0xb5,0xc3,0xbd,0xc4,0x1b,0x08,0x05,0xb5,0x3f,0xfa,0xf9,0x97,0x6b,0xd8,0xac,0x4c,0xb9,0x94,0x9a,0x14,0x7a};
    mont256_from_bytes(&ctx, base, base39);
    uint256_from_bytes(exponent, exponent39);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power39, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base40[32]     = {0x01,0xca,0xc5,0xcc,0x6a,0x95,0x7e,0x51,0xe6,0x84,0x2d,0xd2,0xfd,0xd2,0x1d,0x5a,0x44,0x24,0xb3,0xe0,0xe9,0xef,0xee,0x30,0x54,0x58,0xc0,0x45,0x39,0xa7,0x5e,0x95};
    std::uint8_t exponent40[32] = {0xd9,0x41,0x81,0x9d,0xe0,0x03,0x3d,0x12,0x26,0x72,0x57,0xdc,0x4c,0x5e,0xb8,0x5e,0x24,0x78,0xed,0x3d,0xa5,0x08,0x63,0x6f,0xb0,0xe9,0xaf,0xef,0x1b,0x12,0x1b,0x75};
    std::uint8_t power40[32]    = {0x53,0xbd,0xff,0x74,0x38,0x1b,0x17,0x24,0xb3,0xe3,0xe0,0xab,0xb6,0xf3,0xe9,0x3f,0xe7,0x7a,0xb3,0x98,0xd5,0x67,0xc7,0xb4,0x7b,0x89,0x71,0x62,0x01,0x1c,0x5e,0x48};
    mont256_from_bytes(&ctx, base, base40);
    uint256_from_bytes(exponent, exponent40);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power40, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base41[32]     = {0x4a,0xf5,0xb4,0xb9,0x8e,0x9d,0x43,0x32,0xc4,0x89,0x88,0xcb,0x2c,0xce,0x52,0xa2,0xcc,0xd9,0x91,0x11,0x96,0x3c,0xee,0x40,0xec,0x19,0x8c,0xb3,0xc4,0x37,0x5b,0x10};
    std::uint8_t exponent41[32] = {0x2f,0xed,0x91,0xfa,0x4a,0x3a,0xd1,0x1d,0x88,0x2d,0x3e,0x3e,0x85,0x16,0x03,0x45,0xa0,0xbc,0xd9,0xbf,0xd4,0x26,0xfb,0xe2,0xd3,0x91,0x51,0xd1,0x30,0x44,0xae,0x41};
    std::uint8_t power41[32]    = {0x7b,0xc6,0xb1,0xbc,0xc4,0xc1,0x67,0xcc,0x9d,0xab,0xbb,0x6d,0x28,0x9a,0x07,0x68,0x44,0x5a,0x4c,0x23,0x9c,0x1a,0x2c,0x08,0x2b,0xac,0xef,0xd2,0x23,0x11,0xaf,0x25};
    mont256_from_bytes(&ctx, base, base41);
    uint256_from_bytes(exponent, exponent41);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power41, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base42[32]     = {0x2c,0x8a,0x83,0xd2,0xfe,0xa3,0xee,0x2b,0x8b,0x5c,0x35,0xf7,0xda,0x28,0xb4,0x4f,0x57,0xaf,0x52,0x8f,0xee,0x26,0xf1,0x16,0xe4,0x0a,0x5d,0xce,0x85,0xf8,0x38,0xb2};
    std::uint8_t exponent42[32] = {0x5c,0x9a,0x4b,0x05,0xb0,0xdf,0x24,0x95,0x73,0x41,0x4f,0x49,0xc4,0xec,0x82,0x9f,0x47,0xa5,0x9d,0xb8,0xf0,0xd9,0x80,0x0a,0x9f,0xd5,0x5e,0x50,0x6a,0x01,0xa3,0xdc};
    std::uint8_t power42[32]    = {0x96,0xc8,0xed,0x98,0x35,0x3f,0x58,0x45,0xbe,0x10,0xc3,0x8b,0x59,0xfc,0x08,0x77,0x4b,0x23,0xfb,0xc4,0xb1,0xf9,0x29,0x49,0xe4,0xc8,0x96,0xec,0xd2,0xfd,0x4e,0x7e};
    mont256_from_bytes(&ctx, base, base42);
    uint256_from_bytes(exponent, exponent42);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power42, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base43[32]     = {0xbc,0x53,0x28,0x9b,0xc4,0xe4,0x27,0x65,0xc5,0x81,0x3d,0x5d,0x59,0x10,0x06,0x96,0x97,0xcf,0x19,0x83,0x14,0x69,0x76,0x7f,0xae,0x3e,0xe9,0x3d,0x69,0xee,0xbb,0xc2};
    std::uint8_t exponent43[32] = {0x71,0x22,0xed,0xa5,0x65,0x1a,0x07,0xf1,0x7a,0xa3,0x21,0xf3,0xbe,0x79,0xbb,0x58,0x6c,0x90,0xa3,0xaf,0xc6,0x03,0xc1,0x62,0xcd,0x69,0x1e,0x65,0x0f,0xa4,0x7f,0xa2};
    std::uint8_t power43[32]    = {0xa2,0x90,0x27,0x95,0x21,0x54,0x2c,0x55,0xe5,0x39,0x51,0x59,0xb0,0x8d,0x86,0xa6,0xf0,0x88,0xb2,0x35,0x06,0x57,0x54,0x83,0x0c,0x6e,0x6f,0xff,0x00,0xe1,0x2c,0xcc};
    mont256_from_bytes(&ctx, base, base43);
    uint256_from_bytes(exponent, exponent43);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power43, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base44[32]     = {0x69,0xe8,0x3b,0xe2,0x6f,0x58,0xde,0x8a,0xa3,0x29,0x51,0xd1,0xac,0xc2,0x41,0xfe,0xc9,0xfe,0xea,0x06,0x3f,0x03,0xc5,0xdc,0x2a,0xf3,0xfc,0x2f,0x18,0x54,0xb3,0xb2};
    std::uint8_t exponent44[32] = {0x08,0xfc,0x3f,0xde,0xa6,0x1c,0x60,0x6f,0xc3,0x56,0xe7,0xdd,0x24,0x65,0x53,0x7b,0x77,0xc7,0xce,0xea,0xce,0x79,0xbd,0x93,0xa2,0xe1,0xaf,0x6f,0x13,0x1e,0x86,0x79};
    std::uint8_t power44[32]    = {0xbf,0xc1,0x34,0x69,0xd7,0x95,0x9e,0xf3,0x33,0x92,0x3b,0xbd,0x07,0x34,0x4d,0x4f,0xdc,0xcf,0xf2,0xe1,0x77,0x5d,0xba,0x3d,0x1b,0x79,0x03,0x56,0x28,0x89,0xc4,0x7e};
    mont256_from_bytes(&ctx, base, base44);
    uint256_from_bytes(exponent, exponent44);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power44, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base45[32]     = {0x6b,0xac,0x3a,0xb1,0x36,0xe3,0x0d,0x83,0x25,0x52,0x64,0x8c,0x19,0x8e,0x55,0x26,0x05,0x09,0x35,0x8a,0x29,0xc6,0x7d,0x83,0x0e,0x4e,0xc3,0x3f,0x93,0x9d,0x7b,0xf7};
    std::uint8_t exponent45[32] = {0x8d,0x36,0x48,0xee,0xc8,0xa1,0xd5,0x31,0x35,0xf9,0xab,0x6a,0x4f,0x70,0x1e,0x2f,0x86,0xf5,0xdb,0xd6,0xef,0x57,0xf9,0xcd,0x3c,0x91,0x2c,0xbe,0xc7,0xb3,0xe8,0x32};
    std::uint8_t power45[32]    = {0x60,0xa4,0x1a,0x1b,0x2f,0x6a,0x82,0x5c,0xdf,0x45,0xe4,0xff,0x95,0xab,0x33,0x4e,0x99,0xce,0xb6,0xfc,0x37,0x40,0x41,0x71,0x7f,0xa0,0xf4,0xad,0xbf,0xec,0x5e,0x36};
    mont256_from_bytes(&ctx, base, base45);
    uint256_from_bytes(exponent, exponent45);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power45, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base46[32]     = {0x45,0x00,0x11,0x85,0x0f,0x46,0xa4,0x82,0x59,0x49,0x22,0x46,0xa1,0x2e,0xab,0x06,0x72,0x6b,0x77,0xea,0x71,0xfb,0x85,0x1d,0xf1,0x6c,0x2c,0xf6,0x65,0x59,0x95,0x31};
    std::uint8_t exponent46[32] = {0x03,0xf1,0xac,0x93,0x49,0xac,0x81,0x75,0x8e,0x04,0xb4,0xcf,0x6f,0x36,0x7c,0xbf,0x0e,0x26,0x02,0xb6,0xf6,0x37,0x93,0x6e,0x47,0xbc,0x09,0x8a,0x32,0xb3,0x88,0xf2};
    std::uint8_t power46[32]    = {0xec,0x34,0xd6,0x03,0x4d,0x8a,0x79,0x16,0x89,0x49,0xbe,0x0d,0xcd,0x60,0x98,0x39,0xf7,0x06,0xed,0x0f,0xe0,0xf3,0x33,0xf3,0x9c,0xe3,0x84,0xee,0xbb,0x43,0x18,0x55};
    mont256_from_bytes(&ctx, base, base46);
    uint256_from_bytes(exponent, exponent46);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power46, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base47[32]     = {0x21,0x77,0xd0,0x42,0xc2,0xda,0xe2,0xdc,0xac,0xe8,0xfc,0x40,0x17,0x4e,0xcd,0xf6,0x7f,0x3b,0x93,0xa8,0x6c,0x38,0xf5,0xc4,0x09,0x43,0xca,0xf4,0xf2,0x93,0x09,0x18};
    std::uint8_t exponent47[32] = {0x36,0x3f,0x15,0xe3,0x72,0x6e,0xa6,0x17,0x4b,0x74,0x36,0x78,0x36,0x25,0x92,0x15,0x11,0xc4,0x97,0x8a,0xe0,0x11,0xbb,0xf2,0x78,0x84,0x17,0x76,0x36,0x0f,0xff,0x6c};
    std::uint8_t power47[32]    = {0xab,0xaf,0xce,0xdc,0x9b,0x17,0xa6,0xec,0xf0,0x1f,0x68,0xd0,0x2b,0x9b,0x0a,0x9d,0xe1,0x26,0x25,0x5e,0xe2,0x5d,0x6d,0x87,0x3f,0x11,0xed,0x51,0x4b,0x05,0xc9,0xf5};
    mont256_from_bytes(&ctx, base, base47);
    uint256_from_bytes(exponent, exponent47);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power47, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base48[32]     = {0xfd,0xe9,0xf3,0x2e,0x2b,0x8e,0xd5,0x6e,0x53,0x4e,0xea,0x05,0x93,0xd3,0xc0,0xc7,0xb4,0x15,0x38,0x8d,0xd2,0x41,0x49,0x38,0x84,0x90,0xc9,0x1c,0xc2,0x59,0x0c,0xae};
    std::uint8_t exponent48[32] = {0xc9,0xb6,0x22,0x38,0xa5,0x8f,0x7d,0x99,0xf7,0xf9,0x18,0x26,0xae,0x18,0xf3,0x68,0x30,0x0a,0xd5,0xfb,0x56,0x7c,0xf8,0x6a,0x5b,0xcf,0x42,0x7c,0xac,0x38,0x00,0x81};
    std::uint8_t power48[32]    = {0x03,0x59,0xe1,0xe8,0xe6,0x9b,0x08,0xcc,0x16,0x17,0x00,0xf3,0xa7,0x19,0x37,0xf1,0xf5,0x0b,0xf8,0x9f,0x43,0x7d,0x56,0x95,0x65,0x69,0xb1,0xa8,0x6d,0x67,0x47,0x21};
    mont256_from_bytes(&ctx, base, base48);
    uint256_from_bytes(exponent, exponent48);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power48, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base49[32]     = {0xd1,0xe4,0xe8,0x02,0x08,0x16,0x0b,0x2e,0xb9,0x89,0x7e,0x12,0x6c,0xed,0x28,0x8e,0x02,0x40,0x44,0x5d,0x77,0xe5,0x69,0xcb,0xfd,0x03,0x36,0x8c,0x5e,0xd7,0x7a,0x9e};
    std::uint8_t exponent49[32] = {0x6f,0xd1,0xcd,0x9d,0xb1,0xb5,0x88,0x66,0x5b,0xfc,0x0a,0xbc,0x81,0x23,0xf0,0x00,0x5d,0x65,0xd5,0xa9,0xaf,0xf7,0x65,0xb1,0x74,0xab,0xe6,0x5b,0x72,0x38,0xae,0xb8};
    std::uint8_t power49[32]    = {0x61,0x60,0xb9,0x33,0x16,0x8d,0xad,0x77,0x95,0x86,0xa7,0xf9,0x19,0xc0,0xa5,0x43,0x58,0x06,0x51,0x02,0x5b,0x2f,0xd6,0x67,0x73,0xb9,0x52,0x7a,0x2a,0x69,0x23,0xfc};
    mont256_from_bytes(&ctx, base, base49);
    uint256_from_bytes(exponent, exponent49);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power49, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base50[32]     = {0xa9,0xeb,0x4b,0x0b,0xd7,0x52,0x9f,0xf6,0x4d,0xd8,0xf2,0x4d,0xcd,0xeb,0x16,0x11,0x60,0x82,0x6c,0xf5,0x47,0x3a,0x19,0x77,0x46,0xb0,0xfc,0x9a,0xd7,0x0c,0xa6,0x17};
    std::uint8_t exponent50[32] = {0x6b,0x76,0xc5,0xa3,0xaf,0x65,0x8d,0xed,0xf4,0x3d,0x59,0xf5,0x97,0xe8,0x9e,0xf5,0xda,0x82,0x02,0x48,0xae,0x3c,0xfd,0x5a,0xbb,0x17,0xbf,0x19,0x3c,0xc7,0xce,0xeb};
    std::uint8_t power50[32]    = {0x4b,0x8e,0x59,0x0f,0x16,0xca,0x9f,0x3b,0x36,0x51,0x3b,0xea,0xbe,0x6a,0x05,0xff,0x3e,0x9d,0xa4,0x90,0x4b,0x13,0xfe,0x77,0xd5,0x68,0xd3,0x4a,0xfd,0x65,0xa6,0x84};
    mont256_from_bytes(&ctx, base, base50);
    uint256_from_bytes(exponent, exponent50);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power50, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base51[32]     = {0x41,0x46,0x0f,0xeb,0x03,0x35,0xd1,0xba,0xcd,0x62,0xfc,0x5d,0xaa,0xb1,0xc4,0x45,0x29,0x1f,0xf7,0x1d,0x1a,0xca,0xc7,0x4a,0xa6,0xfe,0x4e,0x6d,0x58,0x73,0x41,0x14};
    std::uint8_t exponent51[32] = {0xa7,0x60,0xb3,0x2c,0x0e,0x44,0x56,0xbc,0xc0,0xe6,0xb6,0xe8,0x76,0xc2,0x00,0xe1,0x62,0xbf,0xfa,0x36,0xfd,0xde,0x36,0x62,0xfc,0x92,0x0a,0xe7,0xcf,0x37,0xdb,0x25};
    std::uint8_t power51[32]    = {0x72,0x04,0xc1,0xaf,0xad,0x32,0xaf,0xc9,0x33,0x5b,0x86,0xf3,0x47,0xc2,0x6d,0x68,0xbd,0xc3,0x84,0x63,0xf2,0x7c,0x1b,0x17,0xa5,0xc2,0xb2,0xda,0x71,0xf1,0x02,0x11};
    mont256_from_bytes(&ctx, base, base51);
    uint256_from_bytes(exponent, exponent51);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power51, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base52[32]     = {0x0e,0xce,0x74,0x35,0xec,0x36,0xf3,0x2b,0x9d,0x66,0x69,0x28,0x74,0xfb,0xf3,0x78,0xc5,0x3a,0x76,0x57,0x16,0x4d,0xb3,0xbd,0xe3,0x5a,0x13,0xee,0xef,0x9f,0x30,0x53};
    std::uint8_t exponent52[32] = {0xce,0xbd,0xc6,0x00,0x67,0x1e,0x01,0x46,0xae,0xaf,0x4b,0xd3,0xb9,0x15,0xf9,0x4f,0xb4,0x9d,0xe9,0x83,0x0d,0x62,0x0a,0x53,0xbd,0x7e,0xed,0x0b,0x43,0xd8,0xa4,0x99};
    std::uint8_t power52[32]    = {0x42,0x75,0x32,0x20,0x06,0x3f,0x8e,0x3e,0x86,0x01,0x90,0x18,0x9c,0x93,0xeb,0xf3,0xbc,0x45,0x9a,0x2f,0x76,0x4a,0x3d,0x4f,0x8f,0xaa,0x27,0xb9,0xb9,0xb9,0xde,0x1a};
    mont256_from_bytes(&ctx, base, base52);
    uint256_from_bytes(exponent, exponent52);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power52, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base53[32]     = {0x44,0x6e,0x99,0x92,0x23,0x57,0x85,0xa2,0x87,0xc3,0x7e,0xc6,0xfa,0x4d,0xb1,0x29,0x36,0x48,0x5b,0x37,0xbd,0xd1,0x01,0x98,0x0c,0x06,0xda,0xab,0xec,0xb7,0x36,0xd5};
    std::uint8_t exponent53[32] = {0x14,0xd0,0x32,0xde,0x6c,0xa7,0x69,0x23,0xf8,0x2c,0xf3,0xb5,0xd8,0x35,0xc9,0x39,0xd3,0x74,0x5e,0xef,0xf8,0xc7,0x27,0x93,0x7e,0x59,0x32,0x89,0xfa,0xb0,0xda,0x19};
    std::uint8_t power53[32]    = {0x2e,0x6d,0x25,0x8d,0x3a,0x8f,0xf3,0x14,0x2d,0x17,0xb9,0x42,0x58,0xd0,0x96,0x62,0x88,0xd9,0x0b,0x89,0xa6,0x9f,0x6e,0x22,0x71,0xc2,0x77,0x85,0xbb,0x7a,0x8e,0x29};
    mont256_from_bytes(&ctx, base, base53);
    uint256_from_bytes(exponent, exponent53);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power53, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base54[32]     = {0xa1,0x4e,0x4e,0x91,0x2e,0x31,0x19,0xa3,0x8f,0x0c,0x7a,0x82,0xa2,0x48,0xaf,0x79,0x5d,0xd0,0xf1,0x10,0x63,0xef,0x6d,0x99,0x79,0xd8,0x5c,0xb0,0x6e,0xa4,0x28,0x88};
    std::uint8_t exponent54[32] = {0x16,0xfd,0xfd,0x0b,0xc0,0xaf,0xb6,0xa8,0x3b,0x9c,0xa1,0xbb,0x16,0xf2,0xf5,0x57,0x58,0xcb,0x10,0x0b,0xd7,0xef,0x8c,0xd8,0xe4,0x73,0x23,0x7a,0xe8,0x36,0x52,0xc7};
    std::uint8_t power54[32]    = {0x37,0x6d,0xb2,0xa5,0xdd,0xb5,0x45,0x3e,0x3f,0x6b,0x24,0x12,0x53,0x94,0x09,0x55,0x15,0x8a,0x16,0x09,0x8e,0xd5,0xcd,0x39,0x1a,0x7e,0x6d,0xcb,0xa5,0xec,0x9b,0xf0};
    mont256_from_bytes(&ctx, base, base54);
    uint256_from_bytes(exponent, exponent54);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power54, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base55[32]     = {0x05,0xdb,0x23,0x1e,0x03,0x4e,0xc3,0xa9,0x0e,0x4f,0xc0,0xba,0xbf,0x79,0x3e,0xaa,0xbd,0x06,0x9c,0xa5,0xa8,0x75,0xc3,0x81,0xff,0x4d,0xa4,0x87,0xe2,0xcc,0x92,0x89};
    std::uint8_t exponent55[32] = {0x59,0xbe,0x17,0xad,0xee,0xe6,0xa4,0x05,0x57,0x96,0x67,0x67,0x8a,0xdb,0x02,0x58,0x14,0x8e,0x1b,0x04,0xdd,0x2a,0x77,0x8d,0x64,0x4e,0x18,0xe1,0x98,0xbe,0xdb,0xfb};
    std::uint8_t power55[32]    = {0xe9,0xa4,0xdb,0xdb,0xa8,0xb6,0x41,0x3a,0xbd,0x53,0x04,0xf9,0x63,0xd0,0xbc,0x7e,0x45,0x36,0xd1,0xe1,0xc0,0x29,0x60,0xce,0x7d,0x47,0x71,0xf3,0x55,0x36,0x8e,0xdf};
    mont256_from_bytes(&ctx, base, base55);
    uint256_from_bytes(exponent, exponent55);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power55, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base56[32]     = {0x80,0x9e,0xe3,0x38,0x57,0xfc,0xf4,0x94,0xcb,0xf4,0x4a,0x3f,0xfa,0xef,0x2f,0xa6,0x5c,0xb2,0x4c,0x4b,0x1f,0x0b,0xa6,0x50,0xbc,0x7b,0x3d,0xf3,0x8c,0x1a,0x14,0xa2};
    std::uint8_t exponent56[32] = {0x0e,0x60,0x16,0x21,0xe9,0x8f,0x49,0xd0,0x0d,0x2f,0xc2,0x93,0xbd,0x71,0xa2,0x32,0x32,0xea,0xcd,0xdc,0xe3,0xd3,0x93,0x5c,0xea,0xf9,0xcf,0x9b,0x57,0xa5,0x8b,0xfa};
    std::uint8_t power56[32]    = {0x9a,0x8d,0x27,0xa5,0x01,0x9d,0x8e,0x95,0xab,0xd3,0xc2,0xe6,0xdc,0x35,0x22,0x0d,0x9d,0xa4,0xc2,0xf9,0x6b,0xf3,0x90,0x23,0x86,0xed,0xd8,0xf4,0xa3,0xf2,0x5f,0x74};
    mont256_from_bytes(&ctx, base, base56);
    uint256_from_bytes(exponent, exponent56);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power56, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base57[32]     = {0x1c,0x1d,0xf7,0x91,0xaf,0x5b,0xb4,0x49,0x10,0xce,0xc7,0x52,0x27,0x1e,0x34,0x85,0x59,0xc6,0xce,0x8a,0xed,0x69,0xb9,0x60,0x6d,0xc5,0xcb,0x92,0xda,0x09,0xd2,0x4a};
    std::uint8_t exponent57[32] = {0x32,0x2e,0xdc,0x99,0x88,0xcb,0x15,0xe5,0x35,0x7b,0x33,0xcd,0x97,0xaf,0xf3,0x9c,0x96,0xd5,0x90,0x2b,0xc8,0xd7,0xac,0xaa,0xbf,0x92,0x52,0x13,0x72,0xd9,0xdc,0x43};
    std::uint8_t power57[32]    = {0xd5,0x23,0xe7,0xaa,0x1c,0x5a,0x51,0x56,0x8b,0x0b,0x98,0xd5,0x9c,0xb3,0x84,0xfe,0x43,0x0e,0x38,0x56,0x92,0x84,0xc5,0x83,0xe9,0x00,0x22,0xda,0x27,0x13,0xf1,0xaf};
    mont256_from_bytes(&ctx, base, base57);
    uint256_from_bytes(exponent, exponent57);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power57, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base58[32]     = {0x25,0x49,0xf3,0x91,0x5f,0xac,0xe8,0x4f,0xd0,0x13,0xd3,0x84,0x3a,0x98,0xad,0x6b,0x2d,0x1b,0xca,0x8d,0xf2,0xbb,0x9c,0x30,0x1f,0x65,0xce,0xec,0xea,0x4d,0xea,0x0b};
    std::uint8_t exponent58[32] = {0xac,0xdb,0xc7,0xb3,0x5a,0x00,0x1a,0x92,0xe0,0x79,0xa9,0x35,0xa8,0x7a,0x0b,0x36,0x0c,0x54,0x94,0xa9,0xcc,0xd7,0x93,0xa5,0x35,0x41,0x1e,0xa4,0xcd,0xe2,0x6c,0x26};
    std::uint8_t power58[32]    = {0xb6,0x39,0x8e,0x5c,0xe2,0xb6,0x0b,0x18,0x6a,0xd2,0x90,0xba,0x56,0xa0,0x1c,0xd6,0x18,0xba,0x26,0xce,0xc0,0x8a,0xf9,0xa5,0xd1,0xf9,0x46,0xb2,0x5a,0x93,0x7f,0x9b};
    mont256_from_bytes(&ctx, base, base58);
    uint256_from_bytes(exponent, exponent58);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power58, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base59[32]     = {0x06,0xc0,0x23,0x86,0x4d,0x19,0xc3,0x67,0x40,0x43,0x64,0x03,0xeb,0x39,0x41,0xfa,0xf3,0x13,0x2a,0x90,0x8b,0x19,0x52,0xb6,0xc4,0x9b,0x06,0x80,0x3f,0x62,0xd5,0x8e};
    std::uint8_t exponent59[32] = {0xe1,0x6e,0xb6,0xc0,0x6a,0x50,0x03,0x9b,0xbd,0x1d,0x48,0x37,0x5a,0xac,0xa7,0xde,0xc5,0x34,0xf7,0xf1,0x3c,0x6b,0xab,0x8c,0x45,0x19,0x86,0x35,0x84,0x27,0xda,0x38};
    std::uint8_t power59[32]    = {0x04,0xfd,0x33,0x89,0x37,0x8f,0xaf,0x27,0x62,0xf0,0xf7,0x62,0xb1,0xf1,0x87,0xb7,0x05,0xce,0x55,0xf4,0xd6,0x50,0x0c,0xb7,0x51,0x03,0x74,0xfb,0xe0,0x9c,0x60,0x49};
    mont256_from_bytes(&ctx, base, base59);
    uint256_from_bytes(exponent, exponent59);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power59, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base60[32]     = {0x05,0x7c,0x92,0xe4,0x0a,0x3e,0x90,0xb9,0x87,0xc9,0x59,0x29,0x00,0xa3,0x07,0x69,0xfa,0x8a,0xa0,0x6a,0xb7,0xcb,0xb1,0xdd,0x40,0x69,0x3a,0x6e,0xb6,0xc7,0xfa,0xad};
    std::uint8_t exponent60[32] = {0x4e,0x61,0x7b,0x6c,0xad,0x5b,0x57,0x24,0x03,0x3a,0x23,0xe1,0xfb,0x6e,0xd5,0x9a,0x31,0x77,0x9f,0x40,0xdc,0xc9,0xa8,0x32,0xfb,0xa1,0x15,0x7c,0x16,0x08,0x44,0xb7};
    std::uint8_t power60[32]    = {0x28,0x0f,0x79,0xda,0x88,0x9f,0x03,0xea,0x3f,0x36,0x60,0x6d,0xc3,0x63,0x22,0x37,0x08,0xbd,0xb4,0xde,0x59,0xee,0x11,0x00,0x88,0x66,0xac,0x8f,0xa1,0x5d,0xba,0x84};
    mont256_from_bytes(&ctx, base, base60);
    uint256_from_bytes(exponent, exponent60);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power60, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base61[32]     = {0x6f,0x9d,0x51,0x30,0x49,0x35,0x5d,0xaf,0x55,0x39,0x72,0xb5,0xd4,0x60,0xb0,0xd1,0xf3,0x83,0xb2,0xaf,0xb8,0xf4,0xf3,0x02,0x8a,0x8a,0x28,0xd9,0x44,0x81,0x7e,0x2f};
    std::uint8_t exponent61[32] = {0x57,0xc4,0xf8,0xa8,0xca,0xaf,0xaa,0x25,0xbe,0xab,0x4e,0xec,0x25,0x8a,0x06,0x3e,0x20,0x63,0x05,0xc8,0x28,0xa9,0x4c,0x61,0x06,0xcb,0x5f,0xe5,0x7a,0x67,0xf3,0x88};
    std::uint8_t power61[32]    = {0x4e,0x86,0xa6,0x50,0xbd,0xd7,0xaf,0x8e,0x1d,0x59,0xb0,0xe5,0xa3,0x61,0xcd,0x89,0x95,0x75,0xf9,0x1e,0x34,0x84,0xb3,0xfd,0xa4,0xde,0xd9,0x6a,0x3a,0x5e,0xc5,0x4b};
    mont256_from_bytes(&ctx, base, base61);
    uint256_from_bytes(exponent, exponent61);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power61, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base62[32]     = {0x76,0x2c,0x47,0x61,0x2d,0x58,0x9e,0x8d,0xb2,0x1f,0x8f,0x4d,0xbf,0x7a,0xe7,0x95,0x0f,0xf3,0x34,0x03,0xc8,0x15,0xd3,0xea,0xeb,0xec,0x27,0xcb,0x81,0x23,0xa4,0xa3};
    std::uint8_t exponent62[32] = {0xdf,0x77,0x2f,0xe9,0x97,0x2f,0xcc,0x09,0xbd,0x3d,0x2a,0x68,0x42,0x25,0xb9,0x3d,0xee,0xb0,0x38,0xf5,0x00,0x63,0xf2,0xcc,0x30,0x4d,0x0f,0xb5,0x1e,0x7b,0xfd,0x9d};
    std::uint8_t power62[32]    = {0x04,0x18,0xbb,0x1d,0x47,0x9e,0x8e,0xfc,0x02,0xcd,0x20,0x83,0xd6,0x99,0x1a,0x12,0x95,0xb0,0x6d,0x89,0x25,0xec,0xed,0x25,0xe9,0x78,0x27,0x4e,0xe2,0xa2,0xfb,0x6b};
    mont256_from_bytes(&ctx, base, base62);
    uint256_from_bytes(exponent, exponent62);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power62, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base63[32]     = {0xa3,0xf8,0x7a,0x62,0x98,0x6e,0x61,0x36,0x3f,0x54,0x3d,0xbe,0x7d,0x15,0x2e,0x6b,0x5c,0x8e,0xa6,0x4b,0x08,0xd2,0x3e,0x9b,0x77,0x79,0x82,0xe0,0x28,0x94,0x52,0x8b};
    std::uint8_t exponent63[32] = {0xa0,0x2c,0x21,0x42,0xbf,0x33,0xad,0xdb,0x47,0x9d,0x60,0xbf,0x01,0x90,0x50,0x16,0x31,0x9f,0x6c,0x6c,0xbf,0x97,0x80,0x9b,0xf5,0xb5,0xaf,0xa1,0xc2,0xaf,0x99,0x34};
    std::uint8_t power63[32]    = {0x3e,0x91,0xfa,0x5e,0xce,0x00,0xa8,0xd9,0x0d,0x39,0x44,0x3a,0x6d,0x93,0x92,0xac,0x7b,0xa2,0xaa,0xfc,0xcb,0x9c,0xe4,0x02,0x84,0x9e,0xc9,0xdb,0x73,0x99,0x2c,0xc7};
    mont256_from_bytes(&ctx, base, base63);
    uint256_from_bytes(exponent, exponent63);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power63, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base64[32]     = {0x8b,0x03,0x3b,0x1e,0x63,0x8b,0x93,0xfd,0x36,0x95,0x1d,0x02,0x08,0xbb,0xc4,0xc9,0xce,0xf1,0x34,0xf2,0xd2,0x30,0xfe,0x57,0x1d,0xbe,0xc4,0x58,0x72,0x46,0x70,0xd3};
    std::uint8_t exponent64[32] = {0xb2,0xd3,0x90,0xf5,0xdd,0xcb,0x86,0x6c,0xb6,0x5f,0xdf,0xfc,0x9f,0x48,0x77,0xe3,0xca,0x16,0xe9,0xc5,0x58,0x4b,0x7e,0x59,0x9a,0x4f,0xbe,0xb7,0xcb,0x27,0x6b,0x34};
    std::uint8_t power64[32]    = {0xde,0x03,0x4b,0x1c,0x39,0xd9,0x68,0x1b,0x91,0x0a,0x5d,0xd2,0xff,0xa8,0xac,0x3f,0x90,0x30,0x2c,0xe1,0x2a,0xdf,0x45,0x4f,0x10,0xcd,0x4e,0x3f,0x52,0xc1,0xef,0x57};
    mont256_from_bytes(&ctx, base, base64);
    uint256_from_bytes(exponent, exponent64);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power64, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base65[32]     = {0x6b,0xd3,0x01,0x53,0xe9,0x30,0xc4,0x42,0xdb,0x34,0x39,0x44,0xb1,0xfb,0xa2,0x22,0x1a,0x6e,0x28,0x00,0xb2,0xb4,0x38,0x60,0x22,0x5e,0x71,0x1c,0xab,0x08,0x8a,0x8a};
    std::uint8_t exponent65[32] = {0x61,0xa1,0x3b,0xc1,0x95,0x46,0x83,0xcf,0x77,0xa7,0x7b,0x48,0x5c,0x43,0xcf,0xe2,0x6c,0xe1,0x53,0x33,0x5c,0x70,0xc5,0xc2,0x72,0x6b,0xf7,0x5d,0x7b,0x96,0xb5,0xe3};
    std::uint8_t power65[32]    = {0x28,0xb7,0x0b,0xdb,0x85,0xe2,0x8e,0x8b,0xcd,0x00,0x40,0x46,0x7d,0xad,0x54,0x68,0x2d,0x2d,0x79,0xb2,0x05,0xf6,0x84,0xb9,0x37,0x98,0xe4,0x60,0x1e,0x89,0xb4,0x4c};
    mont256_from_bytes(&ctx, base, base65);
    uint256_from_bytes(exponent, exponent65);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power65, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base66[32]     = {0xb1,0xd4,0xce,0x00,0xd2,0xf5,0x41,0x2a,0x34,0xe8,0x48,0xb3,0x0c,0x40,0x3e,0x13,0xe2,0xb1,0x37,0x6c,0x5d,0x1b,0xae,0xcd,0x18,0x79,0x77,0xce,0xf8,0x10,0x35,0x55};
    std::uint8_t exponent66[32] = {0xae,0x13,0x9f,0x5d,0x62,0xaf,0xc1,0xba,0xe5,0xaa,0x4f,0x74,0x6d,0x07,0xd9,0x3b,0xc9,0xe9,0x22,0x2d,0x34,0x30,0x18,0x40,0x5a,0x27,0x90,0x7e,0x57,0xa4,0x44,0x37};
    std::uint8_t power66[32]    = {0x19,0x59,0xa0,0x69,0x98,0x09,0x87,0xe9,0x27,0x48,0xbf,0x3c,0x5a,0xca,0x79,0x0f,0xa8,0x11,0x20,0xb4,0x9e,0xc5,0x18,0x12,0xa0,0x12,0x45,0x51,0x3d,0x49,0x5f,0x89};
    mont256_from_bytes(&ctx, base, base66);
    uint256_from_bytes(exponent, exponent66);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power66, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base67[32]     = {0xd0,0x7b,0x07,0x04,0xef,0xa6,0x6b,0xe8,0xee,0xe2,0xef,0x58,0xd0,0x9b,0xe2,0xa2,0x8c,0x8b,0x89,0xb1,0x80,0x9c,0xa8,0x01,0x9b,0x86,0x9c,0xd2,0x1f,0x4c,0x21,0x50};
    std::uint8_t exponent67[32] = {0x04,0x59,0xae,0xa1,0xef,0xe1,0x48,0xbf,0x1d,0x30,0xc5,0x17,0xff,0x2a,0xdf,0xa1,0x53,0x41,0xf4,0x0d,0xbe,0x8d,0xa3,0x45,0x81,0x06,0xff,0x0c,0xc2,0x33,0x5d,0x68};
    std::uint8_t power67[32]    = {0x9d,0x37,0xe4,0xbd,0xf6,0x17,0xb4,0x7f,0xb6,0xea,0x86,0x7d,0xc4,0x50,0xc1,0x31,0x6c,0x9b,0xf5,0x77,0x99,0xa4,0xec,0xb2,0xf0,0xe9,0x5d,0x8c,0x98,0x87,0x83,0x9c};
    mont256_from_bytes(&ctx, base, base67);
    uint256_from_bytes(exponent, exponent67);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power67, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base68[32]     = {0x78,0xd2,0xb0,0x3f,0xc3,0x78,0xe1,0x5b,0x92,0x00,0xe9,0xed,0x4a,0x50,0xbe,0x52,0x3b,0xa7,0x5c,0xfe,0xcd,0x52,0xfb,0xdb,0x9e,0x91,0x5f,0x51,0xa8,0xf5,0x3a,0x9a};
    std::uint8_t exponent68[32] = {0x31,0x24,0xfd,0xe0,0x2d,0xb9,0xea,0x39,0x97,0x7a,0x19,0xd0,0x32,0x30,0x1d,0xdc,0x4a,0x22,0x53,0xd4,0x90,0x7f,0x77,0x81,0x4a,0xe5,0xdc,0xe6,0xa7,0x5a,0x01,0xb3};
    std::uint8_t power68[32]    = {0x42,0x09,0x14,0xce,0xba,0x02,0x5f,0x1d,0x9f,0x9b,0x11,0x75,0xbd,0x03,0x33,0x37,0x70,0xe2,0xe9,0x4c,0x27,0x64,0x50,0x79,0x50,0xb9,0x3d,0x07,0xb9,0xcb,0x3c,0x57};
    mont256_from_bytes(&ctx, base, base68);
    uint256_from_bytes(exponent, exponent68);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power68, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base69[32]     = {0xe5,0xc3,0x38,0x33,0x76,0xa0,0x22,0x2c,0x73,0xed,0xb2,0xe1,0x9a,0x27,0x48,0xce,0x20,0x22,0xf1,0x62,0xc5,0x16,0x13,0xcb,0x85,0xfd,0x16,0x69,0x28,0xbd,0xfc,0xcc};
    std::uint8_t exponent69[32] = {0xe1,0x71,0xad,0x78,0xb8,0xfe,0xd1,0xec,0x51,0xb2,0xbd,0x3d,0x2b,0x28,0x8e,0x37,0x6b,0xcb,0x57,0x06,0xea,0x90,0x5c,0xf4,0x7c,0x38,0x9b,0x60,0x73,0xb1,0x88,0x0b};
    std::uint8_t power69[32]    = {0x3b,0xe9,0x6b,0x6c,0x96,0xba,0xe3,0xce,0xc8,0x2f,0x47,0x23,0xd2,0xbd,0x1c,0x6c,0x84,0xb4,0x4f,0xe3,0xa4,0xab,0x29,0x8e,0xb7,0x46,0xb0,0x46,0xb6,0xb3,0xce,0x08};
    mont256_from_bytes(&ctx, base, base69);
    uint256_from_bytes(exponent, exponent69);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power69, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base70[32]     = {0x3a,0x3e,0x0a,0x82,0x68,0x9a,0xf5,0xab,0x4a,0xa5,0x1e,0xd8,0x83,0xa4,0xa7,0x2c,0x4a,0x8c,0xb0,0x4d,0xa7,0xbb,0xb2,0x81,0x03,0x00,0xf7,0x25,0xc0,0x5d,0x1b,0x92};
    std::uint8_t exponent70[32] = {0x49,0xef,0x7c,0xdf,0x20,0xe6,0x7d,0x95,0x2e,0x69,0x5f,0x69,0x17,0xdc,0x1a,0x34,0xa6,0xf5,0x68,0xa4,0x2e,0xac,0xae,0x3a,0x97,0x86,0x23,0xb4,0xb9,0xf2,0x5d,0x39};
    std::uint8_t power70[32]    = {0x34,0x15,0x8f,0xe7,0x39,0x59,0x9f,0xec,0xc3,0x71,0x2e,0xd4,0x39,0xe0,0xc7,0x03,0x83,0x07,0x88,0x45,0x11,0x59,0xc2,0xb6,0xb2,0x2c,0x6b,0x1d,0xe5,0x56,0x79,0xde};
    mont256_from_bytes(&ctx, base, base70);
    uint256_from_bytes(exponent, exponent70);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power70, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base71[32]     = {0x51,0x79,0xad,0x55,0x99,0x9f,0xf8,0x95,0x37,0xad,0x85,0x0e,0x5b,0x08,0x65,0xce,0x75,0xf9,0x69,0xe9,0xa1,0x9b,0x03,0x2d,0x16,0x25,0x24,0x7d,0x50,0x35,0x7a,0x59};
    std::uint8_t exponent71[32] = {0xc2,0xf6,0x06,0x3b,0x51,0x93,0x96,0x2a,0x93,0x12,0x48,0x66,0xe0,0x74,0x16,0x22,0x84,0x81,0xe6,0xa9,0x76,0x1d,0x8e,0xae,0x4e,0x04,0x8a,0x14,0xee,0xa9,0x41,0xc3};
    std::uint8_t power71[32]    = {0x38,0x59,0x01,0x37,0x7d,0xd7,0x3f,0xf5,0x53,0xc2,0x56,0x3e,0xdb,0x8c,0xff,0x88,0x68,0xfe,0x92,0x6b,0x2b,0xe1,0x63,0xcf,0xf0,0xf3,0x21,0x50,0x98,0xbb,0xcb,0xfb};
    mont256_from_bytes(&ctx, base, base71);
    uint256_from_bytes(exponent, exponent71);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power71, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base72[32]     = {0x63,0xad,0x8a,0x69,0x89,0xf4,0x06,0x62,0x87,0x93,0x5d,0x90,0x27,0x64,0xbc,0x74,0xa3,0xeb,0x62,0x0a,0x9b,0x34,0xe2,0x0f,0xc9,0x4c,0x71,0x8f,0xcb,0x04,0xe1,0xaa};
    std::uint8_t exponent72[32] = {0x85,0x5b,0x13,0x3b,0x16,0x50,0xee,0xc5,0x70,0x55,0x30,0x06,0xf8,0xf9,0x91,0x45,0xf7,0x3f,0x45,0x65,0xa6,0x56,0x3b,0x27,0x6e,0xe5,0x07,0x20,0xd9,0x8a,0x73,0x7d};
    std::uint8_t power72[32]    = {0xba,0x10,0x51,0x15,0x42,0xd7,0x14,0xd3,0xf8,0xcb,0xcb,0x3a,0xc7,0x06,0x49,0xbc,0x38,0x79,0x2c,0x0d,0x97,0x61,0xb0,0xb6,0x7f,0x6f,0xd6,0x8d,0x47,0xf6,0x9b,0x6f};
    mont256_from_bytes(&ctx, base, base72);
    uint256_from_bytes(exponent, exponent72);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power72, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base73[32]     = {0x8f,0xa3,0x18,0xf3,0x85,0x21,0x94,0x95,0x2f,0x34,0x82,0x7e,0xc6,0x0f,0xff,0xc5,0xf5,0xb5,0x7b,0xfe,0x57,0xef,0x96,0xde,0xc0,0xf2,0xa8,0x3a,0x8a,0x90,0xcd,0xd1};
    std::uint8_t exponent73[32] = {0x7b,0xde,0x6f,0x9e,0xdb,0xb4,0x07,0xc4,0xb6,0x63,0xd6,0x12,0x8f,0x5b,0x0b,0x7d,0x74,0x39,0x0b,0x82,0x5d,0x23,0x4e,0x5f,0x03,0x40,0xaa,0xa4,0x0a,0x9f,0xb3,0x06};
    std::uint8_t power73[32]    = {0x66,0x25,0xc7,0x9a,0x25,0x56,0x23,0xb9,0xbd,0x93,0xe5,0x6f,0xa6,0x0c,0x53,0x53,0x5d,0xef,0xb0,0x25,0x0f,0x55,0x02,0x8c,0xea,0xd1,0xc5,0xab,0xbd,0x08,0x41,0xc1};
    mont256_from_bytes(&ctx, base, base73);
    uint256_from_bytes(exponent, exponent73);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power73, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base74[32]     = {0xc2,0x0d,0x10,0x40,0x3e,0x44,0xe2,0x25,0x4c,0xab,0x03,0x1c,0x2e,0xe5,0xfe,0xcb,0x19,0xc5,0x03,0x19,0xfc,0xca,0xaa,0xa9,0x69,0x3c,0x82,0x86,0xae,0xca,0x3c,0x91};
    std::uint8_t exponent74[32] = {0x55,0x47,0xd8,0xb9,0x44,0xa6,0xd9,0x5e,0xef,0xf3,0x7a,0xc6,0x28,0x5a,0x96,0x68,0x32,0x21,0x87,0x7a,0x97,0xe9,0x25,0x9d,0xa0,0x33,0x15,0x03,0x8c,0xa6,0x3e,0x6a};
    std::uint8_t power74[32]    = {0x23,0x15,0xbc,0x61,0x94,0x73,0x69,0xc4,0x6d,0x56,0x14,0xd6,0x68,0x80,0x23,0x8f,0x91,0x01,0x62,0xe9,0x13,0xaa,0x22,0x07,0x25,0x33,0x98,0x24,0xf0,0xec,0x32,0x4e};
    mont256_from_bytes(&ctx, base, base74);
    uint256_from_bytes(exponent, exponent74);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power74, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base75[32]     = {0x94,0x7e,0x2f,0xeb,0x5c,0x93,0x7b,0xee,0x09,0x2d,0x4b,0x93,0x3e,0xfe,0x3b,0x0e,0xbc,0x5a,0xa7,0x01,0x39,0xac,0x50,0x8b,0x55,0xe5,0x05,0xc2,0x32,0x3a,0x73,0xb7};
    std::uint8_t exponent75[32] = {0x62,0x75,0x02,0x12,0x2d,0x82,0xef,0x08,0xc2,0x32,0x71,0x23,0x6f,0xc7,0xb7,0x59,0xe2,0x70,0x85,0xeb,0xbb,0xcb,0x39,0x61,0x54,0xd0,0x62,0x06,0x88,0x4d,0x03,0x39};
    std::uint8_t power75[32]    = {0x11,0x4d,0x54,0xf7,0xb9,0x02,0x9f,0xd8,0x46,0x24,0xe4,0xb3,0xc1,0xe4,0x29,0x31,0x30,0x33,0x9a,0xda,0xe9,0xdb,0x46,0x8d,0xbe,0x61,0xa9,0xff,0xc9,0x8f,0x58,0xc4};
    mont256_from_bytes(&ctx, base, base75);
    uint256_from_bytes(exponent, exponent75);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power75, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base76[32]     = {0x5c,0x96,0x9d,0xfc,0x6f,0x7c,0x1b,0x79,0x90,0xc9,0xb9,0xf1,0xa3,0x1d,0xf1,0x8d,0xc1,0x9d,0x67,0xa7,0xbf,0x61,0x1f,0x5e,0x1b,0xd8,0x0d,0x20,0xc1,0x4f,0xa8,0x64};
    std::uint8_t exponent76[32] = {0x74,0xa8,0x19,0x62,0x06,0x5f,0xb1,0x82,0x77,0xe5,0xa7,0x46,0x4e,0x62,0x6a,0x76,0xa0,0x89,0x2b,0xcd,0x80,0x86,0x0c,0xe3,0x21,0x45,0x05,0x86,0xbc,0x68,0xd1,0x7a};
    std::uint8_t power76[32]    = {0x06,0xb7,0xf6,0x8d,0x66,0x7a,0x76,0xcb,0x02,0xad,0x8e,0xe8,0xa1,0xe7,0xce,0x56,0x90,0x7e,0x24,0x47,0x50,0xd1,0xc7,0x5d,0x08,0x48,0xf0,0x04,0x06,0xda,0x4a,0xba};
    mont256_from_bytes(&ctx, base, base76);
    uint256_from_bytes(exponent, exponent76);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power76, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base77[32]     = {0x6d,0x2a,0x99,0x12,0xfd,0x61,0x97,0xc2,0x94,0xca,0x53,0xbc,0x2a,0x2e,0x66,0x9d,0x9d,0x9f,0x3b,0x66,0x99,0x83,0x63,0x90,0x95,0x75,0xaa,0x35,0x80,0x22,0xf5,0xc9};
    std::uint8_t exponent77[32] = {0x71,0x64,0x5f,0xb0,0x4f,0x65,0x6e,0xd3,0xb6,0xd5,0x4d,0x12,0xa3,0x47,0xe3,0x4e,0x06,0xfc,0x56,0xc4,0x11,0x95,0xea,0xd5,0x14,0x6a,0xd1,0x6a,0x71,0x45,0xf8,0xc8};
    std::uint8_t power77[32]    = {0x3c,0x1b,0x83,0x1a,0x90,0x3c,0x0c,0x55,0x3d,0xbd,0xad,0x23,0x82,0xb5,0x92,0x25,0x36,0xf2,0x08,0x53,0x33,0x41,0xf0,0x22,0x78,0xd2,0x6c,0xa1,0x54,0x93,0x0c,0xb7};
    mont256_from_bytes(&ctx, base, base77);
    uint256_from_bytes(exponent, exponent77);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power77, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base78[32]     = {0x52,0x5c,0x44,0x32,0x21,0xfa,0x48,0x3f,0xc6,0xd4,0x00,0xf5,0xf8,0xb5,0xb3,0x7b,0x9d,0x81,0x71,0xda,0xb6,0x7b,0x58,0xc8,0xdf,0xa5,0x27,0xb7,0xa1,0x7a,0xf6,0x81};
    std::uint8_t exponent78[32] = {0xc8,0x00,0x42,0x18,0x6e,0xeb,0x33,0x7b,0xc1,0x39,0xd6,0xbf,0x4f,0x40,0x6b,0x9b,0x70,0xc4,0x29,0x53,0x9e,0x24,0x12,0x0d,0x17,0x5e,0x67,0x63,0xb1,0xd1,0xe3,0x4a};
    std::uint8_t power78[32]    = {0x50,0x02,0x2d,0xba,0xf1,0x45,0xfd,0xc2,0xf3,0x28,0x88,0x5b,0xc9,0xd2,0xaf,0x53,0xd8,0x5a,0xb0,0x7e,0x23,0xf7,0xd7,0x75,0x27,0xb5,0xb3,0x4a,0x74,0x63,0x7a,0x8b};
    mont256_from_bytes(&ctx, base, base78);
    uint256_from_bytes(exponent, exponent78);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power78, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base79[32]     = {0xd9,0x6e,0x54,0x18,0xa3,0x9a,0x4d,0x38,0xea,0x63,0xe6,0x62,0x90,0x31,0x48,0x38,0xe5,0x44,0xb5,0x8b,0x23,0x9c,0x27,0x37,0x19,0xa1,0x11,0xfc,0x3c,0x46,0xe5,0x67};
    std::uint8_t exponent79[32] = {0x41,0x6a,0xbe,0xa8,0x04,0xb7,0xda,0xaa,0xf7,0xac,0x3b,0x72,0x72,0x46,0xc6,0x8d,0x7c,0x40,0xb2,0x61,0x79,0xf5,0x88,0x26,0x15,0x17,0xb8,0x9e,0xcd,0x27,0x98,0xc0};
    std::uint8_t power79[32]    = {0x63,0x78,0x3f,0x1e,0xf4,0xfd,0xd9,0x75,0x3a,0x34,0xfb,0x04,0x5a,0x77,0xeb,0xae,0x13,0x6d,0x66,0x4c,0x65,0xf8,0x9e,0xdf,0x86,0x90,0x39,0x84,0xfc,0x75,0x8b,0x0f};
    mont256_from_bytes(&ctx, base, base79);
    uint256_from_bytes(exponent, exponent79);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power79, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base80[32]     = {0x3f,0x6a,0xcf,0x2f,0xbc,0x1e,0x27,0x21,0x30,0xc2,0xb0,0xa1,0x1f,0xac,0xad,0x80,0xb3,0xdf,0x78,0xb1,0xbb,0xb1,0x02,0xde,0x5f,0xdb,0xf8,0x74,0x28,0xab,0x09,0x23};
    std::uint8_t exponent80[32] = {0x9c,0xc2,0x50,0x1b,0xcf,0xde,0xe1,0x89,0x46,0x0f,0x62,0xea,0xb9,0x3a,0xdb,0x94,0xf0,0xa8,0x59,0xf0,0x7a,0x41,0xb2,0xe1,0xc3,0xa6,0x05,0xf0,0xf7,0xef,0x61,0xe0};
    std::uint8_t power80[32]    = {0x7f,0xf4,0x83,0x8e,0xe0,0xd3,0xa3,0x47,0x18,0xdc,0x96,0x0f,0xb2,0xfb,0x4a,0xb3,0xf1,0x4b,0xce,0x65,0x3c,0x49,0x55,0x43,0x5b,0x67,0x2b,0x56,0x34,0x6a,0x3a,0x3f};
    mont256_from_bytes(&ctx, base, base80);
    uint256_from_bytes(exponent, exponent80);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power80, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base81[32]     = {0xa9,0xd4,0x9d,0xc4,0xf6,0xae,0xdf,0xc4,0x6e,0xbf,0x0b,0xaf,0x9f,0x87,0x68,0x33,0x40,0xdb,0x12,0x67,0x0e,0x30,0xbb,0x8c,0x72,0x40,0x92,0x09,0x8c,0xbd,0xd2,0xd8};
    std::uint8_t exponent81[32] = {0x2f,0x31,0xea,0x6f,0x56,0x47,0x67,0xaf,0x9b,0x75,0x0a,0xa9,0x4a,0x21,0x0f,0x3f,0x07,0x05,0x32,0x07,0xf0,0x8d,0x7d,0xd5,0xf9,0x73,0xb3,0xa7,0x26,0x45,0x36,0x99};
    std::uint8_t power81[32]    = {0x10,0xe8,0xbf,0x18,0x65,0x38,0xfe,0xa2,0x23,0xa3,0x45,0xe8,0xe4,0xc5,0x50,0xee,0xc3,0x94,0x68,0x83,0xce,0xb5,0x00,0x46,0x9b,0x13,0x4d,0x81,0xe3,0x40,0x6f,0x8d};
    mont256_from_bytes(&ctx, base, base81);
    uint256_from_bytes(exponent, exponent81);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power81, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base82[32]     = {0x71,0xcf,0xda,0xcd,0x6c,0xdf,0x2c,0x35,0x0b,0xc7,0x83,0xad,0xfc,0xa5,0x0f,0x76,0x3d,0x4f,0x67,0xe7,0xde,0x93,0xe1,0xa9,0xa0,0x47,0x92,0x5a,0x9d,0xdc,0x67,0xa2};
    std::uint8_t exponent82[32] = {0x5a,0xbe,0x2d,0x75,0xd5,0x48,0x00,0x36,0xee,0x90,0xbb,0xa9,0x5f,0xbd,0x9c,0xbc,0x67,0x9e,0xc7,0x59,0x65,0x8a,0xd9,0x8d,0x07,0x60,0x32,0xed,0x48,0x38,0xe3,0xcb};
    std::uint8_t power82[32]    = {0xf5,0x06,0x07,0x80,0xb2,0x89,0x51,0x39,0x9f,0x67,0x48,0x73,0x7b,0x81,0x5d,0x50,0xcd,0x0c,0x90,0x41,0x74,0x43,0x11,0xdc,0xce,0x14,0xca,0x50,0xcd,0x57,0x0e,0xe0};
    mont256_from_bytes(&ctx, base, base82);
    uint256_from_bytes(exponent, exponent82);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power82, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base83[32]     = {0x73,0xb8,0x2d,0x21,0x75,0x79,0xb5,0xbc,0x59,0xa8,0xa9,0xb3,0xbd,0xb6,0xcb,0x12,0xea,0xe1,0xd1,0xe8,0x2b,0xe3,0xa3,0x6e,0x4b,0xac,0xd7,0xa4,0x8a,0x89,0x38,0x67};
    std::uint8_t exponent83[32] = {0xf3,0xe4,0x66,0xa1,0x79,0x09,0x19,0xb5,0xde,0x8c,0xbf,0xe3,0x34,0xde,0xb2,0x1f,0x41,0x97,0xe7,0xe5,0x4a,0x07,0xb9,0xb0,0x4f,0x9a,0x84,0xd6,0xa4,0x21,0xdd,0x7a};
    std::uint8_t power83[32]    = {0xbc,0x8f,0x91,0x6c,0xa8,0x19,0x7a,0x53,0xca,0x91,0xbe,0x4b,0xf7,0x82,0xd4,0x68,0x6d,0xf3,0x97,0xff,0x48,0x4b,0x3d,0xd8,0x24,0xa3,0x81,0xe2,0xf8,0xc3,0x9b,0xf7};
    mont256_from_bytes(&ctx, base, base83);
    uint256_from_bytes(exponent, exponent83);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power83, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base84[32]     = {0x8c,0xf8,0x7c,0x34,0x80,0xe8,0x52,0x02,0xd6,0x17,0xbd,0x34,0xc0,0xf9,0xde,0xfb,0x0f,0xfa,0x33,0xc3,0xa3,0x30,0x0b,0x66,0xef,0xcf,0x10,0x15,0xdb,0x3c,0x4d,0x18};
    std::uint8_t exponent84[32] = {0x15,0x10,0x64,0xc5,0x74,0xac,0xe4,0xff,0x23,0x6f,0xe7,0xd9,0x05,0x02,0xc3,0x6d,0xc5,0xa6,0x32,0xdb,0x45,0x9c,0x4c,0x03,0x45,0x91,0xef,0x78,0x07,0xf7,0x06,0xf1};
    std::uint8_t power84[32]    = {0x7c,0x5f,0x3c,0x10,0x64,0x18,0x3f,0xc6,0xc6,0x4b,0x05,0x24,0xa9,0x29,0x61,0x90,0x2f,0xc1,0x82,0x69,0xbe,0xc8,0x50,0x3d,0xfc,0xab,0xc7,0x9d,0x0a,0x66,0x88,0xd0};
    mont256_from_bytes(&ctx, base, base84);
    uint256_from_bytes(exponent, exponent84);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power84, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base85[32]     = {0xfb,0x17,0x8c,0x6f,0xb0,0x60,0xf5,0x3e,0x34,0x7a,0xaf,0xa8,0x31,0xb3,0xa4,0x76,0xe3,0xa1,0x17,0x23,0x98,0x54,0xf1,0x6a,0x34,0x5a,0x56,0xe3,0x51,0x89,0x92,0xc6};
    std::uint8_t exponent85[32] = {0x77,0x2d,0x38,0xa4,0xc7,0x54,0x48,0xe5,0xb3,0xaa,0x7f,0xe4,0x4a,0xda,0xed,0x40,0xa7,0x7c,0x53,0x8c,0x32,0x6b,0x20,0x78,0xb1,0x79,0x40,0xb6,0x35,0xb9,0xb7,0xdb};
    std::uint8_t power85[32]    = {0x15,0xf0,0x1b,0x78,0x9a,0x61,0x8e,0x27,0x09,0xc4,0x15,0x3d,0xe0,0x6f,0x8a,0x59,0x83,0xcc,0x88,0x9e,0x61,0x76,0xce,0x82,0xb3,0xe5,0x56,0xb7,0xab,0x49,0xe6,0xc2};
    mont256_from_bytes(&ctx, base, base85);
    uint256_from_bytes(exponent, exponent85);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power85, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base86[32]     = {0x17,0x2f,0x1d,0x04,0x21,0xa8,0xbf,0x7b,0x1a,0xf1,0xc0,0xe2,0x28,0x64,0x97,0x37,0x72,0x94,0xaf,0x15,0xc6,0xbc,0x12,0xf6,0xb7,0xa4,0xad,0x15,0x98,0xb5,0x84,0xff};
    std::uint8_t exponent86[32] = {0x91,0x38,0x47,0xa9,0x78,0x50,0xcc,0x6b,0x02,0xfd,0x9f,0xa1,0xb2,0x3b,0x93,0x27,0x1e,0x30,0x45,0x8d,0x5e,0x5a,0x67,0x66,0x6b,0x5a,0xc4,0x4d,0xbb,0xb8,0xd6,0xf3};
    std::uint8_t power86[32]    = {0x87,0x1b,0xbb,0x6d,0x3f,0x04,0xdb,0x89,0x8f,0x43,0x83,0xea,0x36,0xbe,0xdb,0xf0,0x3c,0x24,0x9e,0x1c,0x6a,0x38,0x08,0xf0,0xa4,0xca,0x7d,0x87,0xcc,0x87,0x84,0x3f};
    mont256_from_bytes(&ctx, base, base86);
    uint256_from_bytes(exponent, exponent86);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power86, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base87[32]     = {0xf5,0x0c,0x34,0xda,0x0e,0x04,0xfb,0xdd,0x7c,0x27,0x8f,0x42,0x5f,0xbc,0xc3,0x6d,0x94,0x8d,0xd0,0xc3,0xce,0x57,0x58,0xed,0xf3,0x6e,0xb4,0x0d,0xbb,0xf5,0x6a,0xbb};
    std::uint8_t exponent87[32] = {0xe1,0x39,0xda,0x76,0xb9,0x43,0xfd,0xad,0x60,0xab,0x20,0x0b,0xd2,0x08,0xf9,0xa4,0xd6,0x3d,0x2f,0x92,0x6a,0x9c,0xc5,0xde,0xd9,0x76,0x4b,0x58,0xa8,0x2d,0x67,0xa0};
    std::uint8_t power87[32]    = {0xb5,0xef,0xcf,0x6e,0x11,0xe7,0x4d,0xab,0xbc,0x00,0xfd,0xed,0x40,0xaa,0x2b,0xe2,0xd0,0x86,0x76,0xbc,0xf1,0x2c,0xf4,0x80,0xee,0xb2,0x15,0xa0,0x4b,0x20,0x6d,0x56};
    mont256_from_bytes(&ctx, base, base87);
    uint256_from_bytes(exponent, exponent87);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power87, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base88[32]     = {0x7d,0x29,0xb5,0x29,0xc5,0x0c,0x0a,0x39,0xf8,0x8c,0x7f,0x9b,0xf9,0xc6,0x28,0xa6,0xdf,0xf1,0x63,0x5f,0x9d,0x8e,0x8d,0x1d,0xc2,0xf6,0x83,0xe6,0xd6,0xf5,0x97,0xb8};
    std::uint8_t exponent88[32] = {0x45,0x0c,0x13,0xbd,0x97,0x4d,0xaa,0x1c,0x55,0x9e,0x95,0xd9,0x30,0xc6,0xbb,0xac,0x63,0x7a,0x21,0xa8,0x05,0x18,0xb8,0x66,0x39,0xb0,0xb8,0xf1,0x6a,0xb0,0xdb,0x23};
    std::uint8_t power88[32]    = {0x8b,0xa9,0x9a,0x0f,0x66,0xea,0x91,0xcc,0xd1,0x2f,0xe4,0x93,0x04,0x6b,0x26,0x82,0x0c,0x3a,0x06,0xe4,0x17,0xb9,0xe7,0x40,0x20,0xaf,0x4b,0xb7,0x9a,0x4a,0x99,0x6e};
    mont256_from_bytes(&ctx, base, base88);
    uint256_from_bytes(exponent, exponent88);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power88, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base89[32]     = {0x58,0x29,0x92,0x2e,0xb1,0x6d,0x96,0x43,0xf1,0x5e,0xa9,0xfd,0x7b,0x81,0xca,0x0f,0x52,0x35,0x0c,0x10,0x44,0xe0,0xad,0x8c,0x2c,0x3c,0x17,0x7b,0xa8,0x0f,0xd5,0x7d};
    std::uint8_t exponent89[32] = {0xa9,0x8d,0xdf,0x7b,0xe3,0x74,0x33,0x0d,0xd2,0x84,0x46,0x76,0xfb,0x74,0x2c,0x77,0x91,0x48,0x02,0xf4,0xa0,0x99,0x98,0xbf,0x37,0xda,0xb3,0xe0,0x2b,0xe5,0x11,0x78};
    std::uint8_t power89[32]    = {0xbe,0xc8,0x04,0xad,0x94,0xa0,0xed,0x67,0x33,0x6b,0x4e,0x4c,0xb3,0xdd,0x40,0xb9,0x50,0x99,0x2a,0xc6,0x71,0xb5,0x31,0xdd,0xa4,0xfc,0x84,0x81,0xff,0x92,0x80,0xdc};
    mont256_from_bytes(&ctx, base, base89);
    uint256_from_bytes(exponent, exponent89);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power89, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base90[32]     = {0x23,0xdb,0x75,0xd6,0x40,0x71,0x57,0x0a,0xab,0x74,0xa8,0x36,0xb6,0x87,0x83,0xd0,0x5e,0x60,0xdb,0xf9,0x2c,0xd7,0x25,0x8e,0xa7,0xcb,0x18,0x22,0x0e,0x59,0x8f,0xc4};
    std::uint8_t exponent90[32] = {0x7b,0x21,0x08,0xdb,0x29,0xb9,0x93,0xd4,0xb5,0x03,0x33,0xe4,0xa6,0x71,0x33,0x62,0x6a,0x1f,0xbd,0x6d,0xf3,0xdc,0x87,0x2b,0xcf,0x92,0x67,0xac,0x41,0xa2,0x01,0xd3};
    std::uint8_t power90[32]    = {0x35,0x55,0xcf,0xfd,0xc0,0xea,0xc6,0xf9,0x90,0xbc,0x6c,0x18,0x42,0xf2,0xdc,0xb4,0x62,0x78,0x3f,0xf7,0x60,0xec,0xde,0x4a,0x35,0x13,0xf5,0xbe,0x69,0x79,0xbd,0x2e};
    mont256_from_bytes(&ctx, base, base90);
    uint256_from_bytes(exponent, exponent90);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power90, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base91[32]     = {0xa0,0xaf,0x17,0x06,0x6c,0x19,0x4a,0x1d,0x4e,0x76,0x86,0xf5,0x40,0xf0,0x82,0x1e,0x2d,0x9d,0xf3,0x5f,0xf0,0xd7,0x0c,0x79,0x29,0x48,0x81,0x85,0xee,0xd6,0x15,0xee};
    std::uint8_t exponent91[32] = {0x09,0xb2,0xbb,0xac,0xf2,0x33,0x45,0x6c,0x5d,0xa6,0xb2,0x45,0x39,0x17,0x92,0x6b,0x3b,0xa7,0x02,0x80,0xb3,0x76,0xbb,0xe0,0x63,0xe7,0xc4,0x88,0x14,0xa6,0xf2,0x96};
    std::uint8_t power91[32]    = {0x58,0x3b,0x6e,0xd4,0x1b,0xe5,0x66,0xe8,0x54,0x2b,0xac,0x4d,0x96,0xeb,0xc2,0x8e,0x60,0xa8,0xe0,0x91,0xee,0x09,0xd0,0x54,0x95,0xa8,0xe2,0x14,0x7c,0x63,0x7c,0xaf};
    mont256_from_bytes(&ctx, base, base91);
    uint256_from_bytes(exponent, exponent91);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power91, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base92[32]     = {0xd4,0xe6,0xce,0xe0,0xd0,0x24,0x78,0x88,0x0a,0x69,0x46,0x22,0x8c,0x27,0xf0,0xd3,0xc6,0xd1,0x2a,0x9a,0x7d,0xc7,0x8e,0xf4,0xde,0xb8,0x11,0xa9,0x3f,0x34,0xa7,0xa8};
    std::uint8_t exponent92[32] = {0x5e,0x64,0x69,0x95,0x30,0xf4,0x41,0x96,0x5d,0x9f,0x52,0xd2,0xd6,0x66,0xbe,0x86,0x99,0x8c,0x03,0x68,0x28,0x9e,0xdd,0xbe,0xd1,0xc5,0x76,0xd6,0x2e,0x81,0x3a,0xff};
    std::uint8_t power92[32]    = {0x12,0x13,0xcf,0x1b,0x52,0x40,0xdd,0x13,0xf1,0x4c,0xbc,0x61,0x67,0x4a,0x27,0xa9,0xfd,0x2d,0x4f,0x71,0x1b,0x1c,0x94,0xa6,0x73,0x35,0x68,0xff,0x60,0x77,0x42,0x05};
    mont256_from_bytes(&ctx, base, base92);
    uint256_from_bytes(exponent, exponent92);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power92, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base93[32]     = {0x6a,0x67,0xe1,0x60,0x86,0x86,0x30,0xab,0xbe,0x7d,0x6c,0x71,0x6c,0x01,0xb1,0x8c,0x4c,0x9d,0x7b,0x8e,0x13,0xb8,0xe6,0x00,0x82,0xea,0x53,0xd7,0x83,0x15,0x4e,0x11};
    std::uint8_t exponent93[32] = {0x9a,0x2a,0x07,0x36,0x87,0x4d,0xe5,0x14,0xd1,0xc1,0x70,0x71,0xd4,0xd7,0x60,0xea,0xeb,0xc1,0x2d,0x51,0x71,0x7d,0x4f,0x20,0x1e,0xa7,0x1b,0x79,0x7f,0xed,0xc4,0xcc};
    std::uint8_t power93[32]    = {0x26,0xe8,0xc7,0xfa,0xa3,0x76,0x4a,0x4c,0xd0,0x99,0x24,0x2a,0x6e,0xae,0x79,0x67,0x1d,0x18,0x79,0x31,0x44,0x4d,0x04,0x2d,0x20,0x53,0xc9,0x67,0x06,0x40,0x94,0x28};
    mont256_from_bytes(&ctx, base, base93);
    uint256_from_bytes(exponent, exponent93);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power93, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base94[32]     = {0x6c,0xa8,0x1f,0x1d,0x77,0xdd,0x9b,0xb7,0xd3,0x43,0x74,0x0d,0x6d,0x32,0x6c,0x88,0xdc,0x0f,0xa9,0x48,0x6d,0x68,0x13,0x53,0x03,0x1e,0xe4,0x27,0x78,0xff,0xf9,0xb4};
    std::uint8_t exponent94[32] = {0xa8,0xf4,0xb0,0x78,0x5a,0x5d,0xa1,0x5b,0xdd,0xbb,0xdd,0xad,0x1f,0xca,0x0d,0x44,0xe4,0x00,0xde,0xc1,0x43,0x21,0xa3,0x86,0x7a,0xe0,0x6c,0xba,0x25,0xe4,0x8f,0x0f};
    std::uint8_t power94[32]    = {0x99,0x6a,0x4c,0xf0,0x87,0xa0,0xec,0x76,0xb1,0x00,0x4d,0x22,0x26,0x67,0x2b,0xad,0xa1,0x5c,0x1b,0x89,0xfb,0xd4,0x04,0x10,0xad,0xea,0x29,0xc7,0xd0,0xb3,0xfe,0xe0};
    mont256_from_bytes(&ctx, base, base94);
    uint256_from_bytes(exponent, exponent94);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power94, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base95[32]     = {0xbd,0xcf,0x32,0x69,0xbb,0x6f,0x3a,0x98,0xd7,0x29,0xe5,0x2b,0xb2,0xd4,0xc2,0xc4,0xac,0xc3,0xeb,0x38,0xe7,0xe0,0x3e,0xb7,0xba,0x32,0x41,0x31,0x78,0x62,0xa7,0xe2};
    std::uint8_t exponent95[32] = {0x85,0x87,0x0e,0x15,0x7a,0x5c,0x87,0x20,0xd5,0xc4,0xeb,0x7f,0xe8,0x7e,0x24,0x0b,0x87,0xec,0xc6,0xef,0xda,0x07,0xc2,0xdb,0x9d,0xbe,0x4c,0xd0,0x2d,0xdd,0xb3,0x9b};
    std::uint8_t power95[32]    = {0x02,0x73,0xfb,0x50,0x40,0x73,0xe4,0x6a,0x29,0xd1,0xfb,0x81,0x7b,0xed,0x8b,0x6e,0xf0,0xee,0xd8,0x03,0x7e,0x77,0xf2,0x33,0xd9,0x97,0x80,0x21,0x6e,0x59,0x3a,0x44};
    mont256_from_bytes(&ctx, base, base95);
    uint256_from_bytes(exponent, exponent95);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power95, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base96[32]     = {0xe8,0xd7,0x6d,0x36,0x5f,0x6f,0x70,0x4e,0x55,0xbc,0x84,0xe9,0x67,0x12,0xd0,0x39,0xc4,0xf3,0xef,0x55,0x92,0xad,0x3f,0xd7,0xbb,0x05,0x79,0x15,0x9d,0x8c,0xcf,0x98};
    std::uint8_t exponent96[32] = {0xe0,0x39,0xec,0x60,0x1c,0x91,0x7e,0xd1,0xbe,0xc3,0x16,0x3c,0x62,0xf3,0xb3,0xd5,0x49,0x02,0x8c,0x99,0x5b,0x7e,0xaa,0x8d,0x00,0xf5,0x93,0xe4,0x8f,0x7f,0x5f,0xab};
    std::uint8_t power96[32]    = {0x6c,0xe6,0xd0,0xe2,0x7e,0x4c,0x3b,0x68,0x7a,0x8e,0x83,0xe5,0xc9,0x02,0x81,0xa5,0x06,0xb3,0x54,0xc8,0x59,0xfe,0x20,0xba,0xb7,0xc9,0x9a,0x70,0xa0,0xdc,0x50,0x19};
    mont256_from_bytes(&ctx, base, base96);
    uint256_from_bytes(exponent, exponent96);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power96, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base97[32]     = {0x20,0x3a,0xe6,0x73,0xbb,0xa3,0x3f,0x35,0xe2,0x6c,0xd3,0x3e,0xc4,0xe4,0xa4,0x1f,0x85,0x0c,0x80,0xa5,0x36,0x39,0x5c,0xf3,0x89,0x9a,0x4a,0x2f,0x9f,0x36,0x69,0x21};
    std::uint8_t exponent97[32] = {0xea,0x26,0x6d,0x39,0x48,0xae,0x74,0x0f,0x09,0x71,0x67,0xb9,0xd5,0x56,0xf7,0xf6,0x5c,0x66,0x1b,0x82,0xbd,0x7c,0x8f,0xe9,0x8d,0x15,0x45,0xb8,0x90,0x09,0xac,0x6c};
    std::uint8_t power97[32]    = {0xc9,0x00,0x43,0x2d,0x50,0x68,0x56,0x97,0x07,0x9f,0xaf,0x5c,0xb1,0x06,0x66,0x73,0xa7,0x00,0xc8,0x30,0x1f,0x36,0x08,0xe9,0xec,0xe8,0x20,0xc6,0xcf,0x99,0x10,0x31};
    mont256_from_bytes(&ctx, base, base97);
    uint256_from_bytes(exponent, exponent97);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power97, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base98[32]     = {0x48,0x04,0x7a,0x05,0x58,0xf2,0x38,0xb3,0xb6,0x81,0xa4,0xe7,0xaf,0x27,0xda,0x4b,0xed,0x5c,0x1c,0xc8,0x33,0xe4,0x6c,0x77,0x0c,0xe2,0xd0,0x79,0x40,0xff,0x76,0x46};
    std::uint8_t exponent98[32] = {0x06,0x04,0xdc,0x5d,0xac,0xa9,0xd0,0x84,0x89,0xac,0x15,0x55,0xe4,0x3a,0xb2,0xd8,0xf2,0xab,0xff,0x36,0xf3,0x5a,0xb7,0x82,0x8e,0x3a,0xfe,0xda,0x71,0x6a,0x9d,0xb8};
    std::uint8_t power98[32]    = {0x94,0x50,0xe8,0x69,0x1a,0xe0,0x1a,0x1a,0xc8,0xa2,0xbc,0x40,0x7a,0x1a,0xac,0xc2,0x0a,0x41,0xdb,0x2b,0x0b,0xd1,0x7b,0x4c,0x42,0x53,0x52,0x17,0xf4,0x0f,0xef,0xbc};
    mont256_from_bytes(&ctx, base, base98);
    uint256_from_bytes(exponent, exponent98);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power98, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }

    std::uint8_t base99[32]     = {0xce,0xe1,0x95,0x8a,0x56,0xe6,0x0e,0xc9,0xf2,0x01,0x8a,0x0f,0xcd,0x26,0x37,0x5b,0x7d,0x14,0x64,0x00,0x0e,0xee,0x47,0xe8,0xb6,0x59,0x58,0x8c,0x00,0x40,0xfb,0xd4};
    std::uint8_t exponent99[32] = {0xfa,0x74,0x60,0xdb,0x9f,0x96,0xf8,0x6a,0x58,0xb5,0xce,0xd2,0x82,0x6e,0xf0,0x47,0xa8,0xe9,0xd0,0xb1,0x31,0xaf,0x0f,0x49,0x90,0xfe,0x7d,0x39,0x6f,0x6c,0x46,0x65};
    std::uint8_t power99[32]    = {0xd9,0xae,0x83,0x72,0x0c,0x83,0x95,0x67,0x7f,0x99,0x4c,0x07,0xbc,0x6b,0xbe,0x8a,0x25,0xc1,0x92,0x9f,0x29,0x10,0x4f,0xa0,0x69,0x98,0x8c,0x0e,0x9d,0x4f,0xc9,0x94};
    mont256_from_bytes(&ctx, base, base99);
    uint256_from_bytes(exponent, exponent99);
    mont256_pow(&ctx, power, base, exponent);
    mont256_to_bytes(&ctx, power_data, power);
    if (std::memcmp(power99, power_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_pow");
    }
}