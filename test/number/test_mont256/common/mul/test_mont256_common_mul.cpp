#include <gmlib/number/internal/mont256_common.h>
#include <gmlib/number/internal/uint256_common.h>
#include <stdexcept>
#include <cstring>

using namespace number::internal::common;

static std::uint8_t  P_data[32]      = {0xff,0xff,0xff,0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
static std::uint8_t  P_SUB2_data[32] = {0xff,0xff,0xff,0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfd};
static std::uint8_t  R_data[32]      = {0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01};
static std::uint8_t  R_POW2_data[32] = {0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x03};
static std::uint32_t N_              = 1;

void test_mont256_common_mul()
{
    uint256_t P, P_SUB2, R, R_POW2;
    uint256_from_bytes(P, P_data);
    uint256_from_bytes(P_SUB2, P_SUB2_data);
    uint256_from_bytes(R, R_data);
    uint256_from_bytes(R_POW2, R_POW2_data);

    Mont256CTX ctx;
    ctx.P = P, ctx.P_SUB2 = P_SUB2;
    ctx.R = R, ctx.R_POW2 = R_POW2;
    ctx.N_ = N_;

    mont256_t    multiplier, multiplicand, product;
    std::uint8_t product_data[32];

    std::uint8_t multiplier0[32]   = {0x61,0x6f,0xc7,0xba,0x90,0xc9,0x85,0x54,0x6c,0x6e,0x86,0x76,0x90,0x96,0xfb,0xcc,0xc7,0x62,0x47,0x92,0x68,0x6e,0x18,0xfb,0xc7,0xe4,0x2e,0xa2,0x79,0x45,0xac,0x8d};
    std::uint8_t multiplicand0[32] = {0xc3,0x98,0x2f,0x2d,0x98,0x78,0xb1,0x6b,0xd8,0x23,0xd3,0xac,0x42,0x67,0x57,0x18,0xfc,0xfd,0x3e,0x73,0x65,0xd5,0xfc,0xe9,0xef,0x8f,0xd1,0x66,0xd3,0xdf,0x55,0x58};
    std::uint8_t product0[32]      = {0x20,0xff,0x65,0xe3,0x50,0x47,0x6c,0xfc,0xcf,0x21,0x38,0x75,0xf6,0xf9,0x3b,0x2c,0x49,0xec,0x97,0x3f,0x4c,0x02,0xaa,0x86,0xc0,0xa6,0x2f,0x32,0xd3,0x42,0x52,0x96};
    mont256_from_bytes(&ctx, multiplier, multiplier0);
    mont256_from_bytes(&ctx, multiplicand, multiplicand0);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product0, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier1[32]   = {0x86,0x0f,0x65,0xdb,0x6b,0x8d,0xbd,0x38,0xce,0xb2,0x00,0x31,0xfc,0xc5,0xff,0xee,0x72,0x92,0x98,0x0c,0xf5,0x79,0x1c,0x80,0xe4,0xeb,0xef,0xcd,0x97,0x9f,0xcb,0xa6};
    std::uint8_t multiplicand1[32] = {0x0f,0xaf,0x78,0x47,0xad,0x9d,0x51,0x38,0x14,0x25,0xf0,0xa0,0x0a,0x5c,0x9b,0x24,0x2e,0xde,0xb1,0x0b,0x98,0x00,0xcb,0xe1,0xb5,0x6b,0x09,0x9b,0xb3,0xa2,0xc8,0x3c};
    std::uint8_t product1[32]      = {0xed,0x1b,0xa2,0x94,0x3f,0x90,0x3a,0xe8,0x48,0x90,0x78,0x66,0x00,0xe2,0x27,0xc1,0xd5,0x0d,0x5a,0xca,0x2c,0xa5,0x6e,0x0f,0x20,0x82,0x55,0xd5,0xf1,0xbf,0x8d,0x97};
    mont256_from_bytes(&ctx, multiplier, multiplier1);
    mont256_from_bytes(&ctx, multiplicand, multiplicand1);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product1, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier2[32]   = {0xf6,0xc1,0xf5,0xcf,0xd6,0xd9,0x21,0x73,0x56,0x2b,0xd8,0x5a,0xe3,0x70,0x41,0x83,0xc0,0x1d,0x16,0x60,0xc4,0x2b,0x24,0xf2,0x5f,0x75,0x40,0x90,0x27,0x43,0xcc,0xd7};
    std::uint8_t multiplicand2[32] = {0x32,0x5c,0x3b,0x05,0x29,0xe0,0x69,0xe9,0x82,0xd5,0xdd,0x1b,0xf7,0x79,0xed,0x22,0xf3,0x12,0x61,0x1b,0xec,0xd1,0x20,0xcb,0x49,0x04,0x91,0x4f,0x96,0x18,0xf2,0xa5};
    std::uint8_t product2[32]      = {0x57,0x60,0x84,0xb3,0x17,0x7f,0x8d,0x2d,0x89,0x1c,0xde,0xb7,0x83,0x1e,0x21,0x52,0xdf,0xb0,0x2f,0x36,0x8b,0xb9,0x51,0x6d,0x25,0x4c,0x8b,0xda,0x98,0x95,0x7c,0xc7};
    mont256_from_bytes(&ctx, multiplier, multiplier2);
    mont256_from_bytes(&ctx, multiplicand, multiplicand2);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product2, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier3[32]   = {0xe9,0x3d,0x82,0x6e,0x81,0x9a,0x0d,0x4d,0x48,0x28,0x14,0x03,0xeb,0x9c,0xc3,0x07,0x4a,0xd7,0x75,0x60,0xac,0x87,0xf0,0xfa,0x9f,0x36,0x64,0x8c,0x0b,0xf4,0xc2,0xc1};
    std::uint8_t multiplicand3[32] = {0x9a,0x26,0xd4,0x6c,0x5b,0x2e,0xd1,0xaa,0x06,0x7c,0x11,0x67,0x4e,0xfa,0x98,0x0a,0x08,0xa0,0x2d,0x9a,0xc5,0xef,0x7c,0x5b,0x07,0x81,0xd1,0x7a,0xff,0x14,0xae,0x24};
    std::uint8_t product3[32]      = {0x9f,0xce,0xb9,0xe2,0xa1,0xc6,0xc2,0x6b,0x1f,0xaf,0xea,0x91,0x19,0x22,0x1f,0xbf,0x4d,0x28,0x1a,0xdc,0x04,0x0c,0x22,0x68,0xeb,0x80,0x87,0x94,0xd8,0x77,0xc6,0x8a};
    mont256_from_bytes(&ctx, multiplier, multiplier3);
    mont256_from_bytes(&ctx, multiplicand, multiplicand3);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product3, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier4[32]   = {0xdd,0xad,0x77,0x91,0x71,0xf7,0xf7,0x65,0x64,0xeb,0x55,0x66,0x32,0x58,0x6e,0x96,0x12,0x16,0xce,0x57,0x96,0x1f,0xe3,0x04,0x49,0x1c,0x87,0x50,0x67,0xab,0x9f,0xad};
    std::uint8_t multiplicand4[32] = {0x93,0x8d,0xb7,0xce,0x5c,0xfa,0x51,0xa7,0x18,0xa0,0xe3,0x5b,0xe9,0x04,0x31,0xe1,0xac,0xf0,0x58,0x9b,0xf5,0x15,0xee,0x8f,0x3c,0x4e,0x08,0x21,0x1c,0x0a,0xb2,0xc7};
    std::uint8_t product4[32]      = {0x9f,0x9e,0xf7,0xca,0x52,0xe7,0x58,0x29,0xdc,0x07,0x0b,0x34,0xa8,0x2f,0x45,0xfe,0xa0,0xb4,0xa5,0x06,0xf1,0x13,0x63,0xd6,0xdf,0xd3,0x83,0xdd,0xb4,0x6c,0xa8,0x01};
    mont256_from_bytes(&ctx, multiplier, multiplier4);
    mont256_from_bytes(&ctx, multiplicand, multiplicand4);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product4, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier5[32]   = {0x34,0xb7,0x0c,0xa7,0x50,0xe4,0x4b,0xec,0x11,0xe5,0x37,0xf6,0xdd,0x1c,0x4f,0xbf,0x46,0xf7,0xb4,0x85,0x78,0xe4,0x22,0xfa,0x34,0x8a,0x1e,0x79,0xda,0xf3,0x59,0x37};
    std::uint8_t multiplicand5[32] = {0x75,0x32,0x3b,0x08,0x29,0x17,0xeb,0x8b,0xb5,0x59,0xcd,0xbc,0xd8,0x62,0x57,0xf7,0x78,0xd4,0x3d,0xdd,0xd9,0xfd,0x30,0xc2,0xb7,0xad,0xee,0x02,0x17,0x8b,0x63,0x06};
    std::uint8_t product5[32]      = {0xb5,0xf8,0x8e,0x12,0xc0,0x94,0x37,0x2d,0x81,0xea,0x6b,0xeb,0x3d,0x18,0x77,0x6a,0x29,0xbf,0xdc,0xbe,0x83,0x3a,0xb8,0x7b,0x02,0x51,0x10,0xb3,0x8c,0xa8,0xa2,0xe9};
    mont256_from_bytes(&ctx, multiplier, multiplier5);
    mont256_from_bytes(&ctx, multiplicand, multiplicand5);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product5, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier6[32]   = {0x58,0xde,0xca,0x6a,0x0c,0xca,0x73,0x18,0x28,0xd2,0x5b,0x93,0xca,0x2a,0xea,0xff,0x1b,0x81,0x3d,0xc0,0x46,0xb1,0x8d,0xde,0xbb,0x42,0x29,0xe3,0x49,0xc9,0xc2,0xcf};
    std::uint8_t multiplicand6[32] = {0x92,0xc5,0x57,0xcf,0x61,0x37,0xd9,0x3a,0xc0,0xa3,0x1f,0x7c,0x90,0x6b,0x40,0x60,0x61,0x85,0x35,0x66,0x9d,0xd5,0x75,0xcb,0xe7,0xcb,0x65,0x91,0xcb,0xee,0xea,0xaa};
    std::uint8_t product6[32]      = {0xc1,0x72,0xaf,0xc0,0x02,0x20,0x80,0x83,0x81,0x80,0x33,0xee,0x17,0xbf,0xf2,0x96,0x4a,0x9b,0x08,0x49,0x59,0x7b,0xc8,0x3b,0x12,0xae,0x13,0x0d,0xc3,0x7c,0x51,0x8c};
    mont256_from_bytes(&ctx, multiplier, multiplier6);
    mont256_from_bytes(&ctx, multiplicand, multiplicand6);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product6, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier7[32]   = {0x84,0x23,0x6d,0xc8,0x2b,0x41,0xea,0xaa,0xf6,0xdf,0x1b,0xbf,0x99,0x70,0xd0,0x49,0x66,0x54,0x9c,0xee,0x63,0x9f,0xea,0xd7,0x3c,0x6b,0x89,0xa6,0x5d,0x2e,0xa3,0x35};
    std::uint8_t multiplicand7[32] = {0xae,0x41,0x37,0xc4,0x7c,0xb6,0x46,0x21,0x08,0xdd,0xee,0xdc,0x2e,0xf4,0xd4,0x0b,0x51,0x8a,0xc1,0x82,0x32,0x2b,0xb5,0x3f,0xa3,0x2e,0x42,0xad,0xb3,0x2d,0x36,0xc1};
    std::uint8_t product7[32]      = {0x43,0x26,0xb1,0x24,0x35,0xcf,0x7f,0xa4,0x61,0x9c,0xa8,0xaa,0x97,0xc4,0xee,0xc5,0x71,0xb0,0xe3,0x65,0x6d,0xfb,0xb2,0x7e,0x7e,0x41,0x1c,0xe0,0xec,0x35,0x5c,0xdb};
    mont256_from_bytes(&ctx, multiplier, multiplier7);
    mont256_from_bytes(&ctx, multiplicand, multiplicand7);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product7, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier8[32]   = {0xa2,0x86,0xcd,0xbb,0x8f,0xb3,0x78,0x34,0x8c,0x88,0x5c,0x3c,0xe7,0x66,0xc7,0x71,0x02,0xba,0x54,0x89,0x40,0x6e,0x68,0xb4,0x2f,0xbd,0x8e,0xe4,0x2b,0x82,0xbe,0x2a};
    std::uint8_t multiplicand8[32] = {0x3a,0xea,0x38,0x77,0xb6,0x95,0x65,0x9d,0x1d,0xb9,0x8e,0xdf,0xb6,0xae,0x04,0x14,0xe8,0xc8,0x65,0x10,0x1b,0x4b,0xdd,0x9d,0xce,0xf7,0x6d,0xbb,0x5a,0xb4,0x81,0xa7};
    std::uint8_t product8[32]      = {0x77,0x27,0x2b,0xcb,0xe0,0xf7,0x60,0xf5,0x30,0x1e,0xe3,0x48,0xc3,0x22,0x68,0xe9,0xdf,0x34,0x68,0x5e,0xe0,0x69,0xbf,0xa7,0xd3,0x5e,0xd7,0x9b,0xcf,0xfc,0x5c,0x69};
    mont256_from_bytes(&ctx, multiplier, multiplier8);
    mont256_from_bytes(&ctx, multiplicand, multiplicand8);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product8, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier9[32]   = {0xc7,0x2e,0x45,0x65,0x0d,0xcf,0x56,0x19,0xf3,0xe1,0xa3,0x39,0x2a,0xde,0xf4,0xf8,0x46,0xeb,0xa8,0x57,0x85,0x92,0x1b,0x08,0x47,0xa1,0xb3,0x35,0x98,0x72,0xf7,0x9c};
    std::uint8_t multiplicand9[32] = {0x12,0x07,0xfc,0x2a,0x0d,0x9b,0x90,0x39,0x05,0x79,0xbe,0xd3,0xc7,0xae,0x3e,0x7c,0xad,0x70,0x09,0x2e,0xad,0x06,0xff,0x53,0xdc,0x06,0xb8,0xcb,0x62,0x42,0x44,0xb9};
    std::uint8_t product9[32]      = {0xcc,0xa9,0xbe,0x42,0x87,0x97,0x53,0xad,0xea,0x14,0x07,0x89,0x9d,0x9e,0x71,0xc6,0x03,0x98,0x69,0xe4,0x6e,0x7f,0x1c,0xba,0x05,0x46,0x03,0xe9,0x12,0xd3,0x96,0xb2};
    mont256_from_bytes(&ctx, multiplier, multiplier9);
    mont256_from_bytes(&ctx, multiplicand, multiplicand9);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product9, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier10[32]   = {0x2d,0x24,0x99,0xee,0x65,0x75,0x6c,0x23,0x67,0x98,0x95,0x78,0xf7,0x4d,0x6e,0x7c,0x84,0xa6,0x4b,0xfd,0x76,0x2f,0x93,0x57,0xde,0xa3,0xa1,0xbf,0xaa,0x38,0x6d,0xc4};
    std::uint8_t multiplicand10[32] = {0xc9,0x06,0xde,0x3d,0xdc,0x1d,0x55,0xf0,0x32,0x0f,0xf4,0x65,0x36,0x33,0x00,0x70,0x13,0x48,0x6c,0xd9,0xcd,0x8a,0x4c,0xb4,0x08,0xce,0x5e,0xae,0xa1,0x30,0x13,0x32};
    std::uint8_t product10[32]      = {0x28,0x86,0x83,0x5a,0x95,0x16,0x4e,0xab,0xf2,0x7a,0xdb,0x46,0xff,0xa1,0x3f,0xdb,0xaf,0x6c,0x54,0x48,0x6b,0xfd,0x4f,0x97,0x97,0xad,0x77,0x1a,0x8c,0xca,0x95,0x8c};
    mont256_from_bytes(&ctx, multiplier, multiplier10);
    mont256_from_bytes(&ctx, multiplicand, multiplicand10);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product10, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier11[32]   = {0x63,0x71,0xe1,0xcc,0xd1,0xf2,0xec,0x8a,0x66,0x0c,0x57,0x57,0xeb,0xa4,0x5d,0x09,0xe1,0xb6,0x9f,0xd9,0x93,0x65,0x60,0xf7,0xbc,0x32,0x70,0xeb,0x37,0xbb,0x1a,0xe0};
    std::uint8_t multiplicand11[32] = {0xf9,0x4f,0xcb,0x6f,0x76,0x79,0x35,0x8c,0x65,0x3c,0x12,0x93,0x41,0x30,0xcd,0x39,0x9b,0xc2,0xf9,0xc4,0x83,0x71,0xdb,0xdd,0x43,0x07,0x8a,0x43,0xd2,0x44,0x5f,0x2f};
    std::uint8_t product11[32]      = {0xb8,0xe1,0x50,0xf8,0xe4,0xd1,0xc0,0x49,0x73,0x1e,0x23,0x40,0xe0,0x3b,0x82,0x49,0x04,0xbd,0xa4,0x6a,0x4e,0x33,0x8c,0x7a,0xd0,0xd5,0x26,0x25,0xe0,0x6d,0xa8,0xa3};
    mont256_from_bytes(&ctx, multiplier, multiplier11);
    mont256_from_bytes(&ctx, multiplicand, multiplicand11);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product11, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier12[32]   = {0x4f,0x60,0x5e,0xce,0x06,0x15,0x01,0x26,0x9a,0xcb,0x9e,0xaa,0x26,0x87,0x9c,0x50,0x65,0xf3,0xa8,0xac,0x12,0xa1,0x5e,0x75,0xa0,0x1d,0x2c,0xae,0x11,0x91,0x8c,0xb8};
    std::uint8_t multiplicand12[32] = {0xbf,0x37,0xd0,0xdb,0x55,0x01,0xf1,0x20,0x2e,0x6b,0xfa,0x7d,0x15,0xf8,0xf2,0x52,0x21,0xb8,0x72,0xd0,0xe7,0x0e,0xc7,0xbc,0x9c,0x96,0x44,0xee,0xa5,0x2d,0x06,0xea};
    std::uint8_t product12[32]      = {0x27,0xc9,0x86,0x20,0x32,0x37,0x19,0x7d,0x22,0x7c,0x35,0x16,0x8c,0x6f,0xc1,0x63,0xcd,0xa7,0x56,0x22,0xfc,0x53,0x40,0x9c,0x52,0x26,0xc3,0xfc,0x95,0xad,0x67,0xfd};
    mont256_from_bytes(&ctx, multiplier, multiplier12);
    mont256_from_bytes(&ctx, multiplicand, multiplicand12);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product12, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier13[32]   = {0x36,0x44,0xdf,0x99,0x93,0xaa,0xbf,0x0c,0xec,0x16,0x0e,0xc9,0x38,0xc4,0x44,0xa8,0x1f,0xa4,0x52,0xb9,0x5f,0x0c,0xc7,0xe6,0x04,0x9a,0x7a,0x18,0x0c,0x60,0x47,0x65};
    std::uint8_t multiplicand13[32] = {0x6e,0x89,0xab,0x7a,0xa0,0x9f,0xd8,0x67,0xd9,0xf3,0x47,0xd5,0xcf,0x4e,0xc5,0x5b,0xf9,0x11,0x5e,0x55,0xbc,0xfe,0x08,0xb5,0xcf,0x9c,0x99,0xe8,0x16,0x5f,0x61,0x81};
    std::uint8_t product13[32]      = {0x8e,0x62,0x81,0x95,0x5f,0x2a,0xe6,0x2b,0x7f,0x19,0x9d,0x03,0xeb,0xe0,0xb6,0xa4,0x01,0xd9,0x93,0x38,0x80,0xec,0xa2,0xe2,0xe4,0x89,0xbb,0x15,0x3d,0x23,0x95,0xc2};
    mont256_from_bytes(&ctx, multiplier, multiplier13);
    mont256_from_bytes(&ctx, multiplicand, multiplicand13);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product13, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier14[32]   = {0x70,0xe8,0x2f,0x3b,0x45,0xaa,0x0a,0x43,0x9a,0xb5,0x2d,0xf1,0x67,0xe3,0xba,0x00,0x59,0xd3,0xa0,0x29,0x6e,0x62,0xfd,0x6f,0xe4,0x9d,0x8d,0x85,0x9c,0x77,0x41,0x36};
    std::uint8_t multiplicand14[32] = {0xf8,0x92,0x46,0x25,0xec,0x89,0x79,0x12,0x14,0xdd,0xe4,0x10,0x12,0xc8,0x05,0x3a,0x8f,0x6e,0xfc,0x18,0xbe,0x35,0x6c,0x6c,0x64,0x05,0xcc,0xc1,0x17,0xa5,0xe1,0x9e};
    std::uint8_t product14[32]      = {0x04,0xfc,0x03,0x8c,0x81,0xf4,0x50,0xb0,0x9b,0x8c,0xeb,0x19,0xd3,0xd3,0xc4,0x70,0x8f,0x5a,0xcd,0xd5,0x58,0x19,0x66,0xdd,0x5e,0x0f,0xbb,0xf5,0xab,0xb5,0xf9,0x9a};
    mont256_from_bytes(&ctx, multiplier, multiplier14);
    mont256_from_bytes(&ctx, multiplicand, multiplicand14);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product14, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier15[32]   = {0xf2,0x2e,0x12,0x35,0xc1,0xf7,0xce,0x61,0xd7,0x5c,0x3b,0x3c,0xe9,0x31,0xc1,0x86,0xc7,0x75,0x29,0xab,0x6e,0xf4,0x9f,0xa2,0x60,0x1f,0x5b,0xc3,0xf2,0x5e,0x82,0x20};
    std::uint8_t multiplicand15[32] = {0x48,0x01,0x7d,0xfd,0x7f,0x08,0x6b,0xaf,0x27,0xac,0xb7,0x1c,0xe1,0xcb,0x56,0x81,0xc8,0x64,0x55,0x87,0x1f,0x29,0x9e,0x7d,0xcc,0x38,0x14,0x20,0x7e,0x76,0xb1,0x67};
    std::uint8_t product15[32]      = {0xaa,0xeb,0x1b,0x05,0x4d,0xa5,0x68,0xab,0x64,0x11,0xb8,0x03,0xed,0x4d,0x4c,0x79,0x20,0x67,0xf2,0x5a,0x92,0xcf,0x6f,0x40,0x23,0x2e,0x90,0x58,0x11,0x62,0x60,0x30};
    mont256_from_bytes(&ctx, multiplier, multiplier15);
    mont256_from_bytes(&ctx, multiplicand, multiplicand15);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product15, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier16[32]   = {0x66,0x7a,0x22,0xa3,0x64,0xb7,0x7d,0x86,0xe5,0xbf,0xcf,0x8d,0x5c,0x76,0x3b,0x79,0x45,0xa9,0x72,0x5a,0xc9,0xca,0x90,0x4a,0x72,0xc0,0xf6,0x36,0x27,0x4a,0xfc,0x3a};
    std::uint8_t multiplicand16[32] = {0x28,0x99,0x91,0x44,0xd4,0x66,0xfd,0xd0,0x8e,0xa6,0x95,0x46,0x6a,0x36,0x1e,0xf5,0x85,0xe0,0xbe,0x03,0xd0,0x63,0x5b,0xf4,0x74,0x76,0x02,0xfd,0xa1,0x89,0x50,0x62};
    std::uint8_t product16[32]      = {0x89,0x07,0x20,0x12,0xe7,0x05,0x9c,0x88,0x08,0x3b,0xb6,0x4e,0x48,0x47,0xaa,0x06,0x9b,0x67,0x0c,0x45,0x05,0x2b,0x93,0xda,0xd3,0x74,0x31,0x87,0xc0,0x6e,0xaf,0x73};
    mont256_from_bytes(&ctx, multiplier, multiplier16);
    mont256_from_bytes(&ctx, multiplicand, multiplicand16);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product16, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier17[32]   = {0xfc,0xfc,0xda,0x3d,0xe9,0xee,0x58,0xea,0x6e,0xd3,0x1b,0xa9,0x23,0x2f,0xfa,0xd7,0xe0,0xb5,0x8e,0x64,0x52,0x85,0xe6,0xa6,0x94,0x81,0x2d,0xf4,0xae,0x53,0x55,0x1f};
    std::uint8_t multiplicand17[32] = {0xa1,0xfd,0xb6,0x60,0xac,0xa7,0x3c,0x23,0x73,0x30,0x6c,0xc9,0x16,0x4f,0xd0,0xd6,0x79,0xeb,0x39,0x29,0xc5,0xd2,0x71,0x27,0xa7,0x8e,0x34,0x35,0x8d,0xe0,0x17,0x2d};
    std::uint8_t product17[32]      = {0xea,0xd8,0x62,0xb4,0xab,0x3a,0xf4,0xdc,0xef,0x57,0xc6,0x69,0x8d,0x85,0x72,0xcf,0xeb,0x7d,0x72,0x59,0x8c,0x48,0x3b,0x4b,0x77,0x1d,0x26,0xd0,0xc9,0x82,0x69,0x02};
    mont256_from_bytes(&ctx, multiplier, multiplier17);
    mont256_from_bytes(&ctx, multiplicand, multiplicand17);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product17, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier18[32]   = {0xea,0x50,0x46,0x12,0xb5,0x23,0x6f,0xcf,0x8d,0xc2,0x89,0x30,0xcf,0x53,0x67,0xe2,0xc9,0x44,0xc4,0x2f,0xd0,0xb5,0x7a,0x30,0x94,0x44,0x12,0x41,0x83,0xdd,0x59,0x13};
    std::uint8_t multiplicand18[32] = {0xd0,0x5f,0xa3,0xd1,0x57,0x1d,0x6e,0xdb,0xe3,0x5c,0x54,0x9a,0xbc,0x72,0xd3,0xd6,0x5f,0xba,0xc5,0x30,0x16,0x87,0x21,0x07,0x66,0x82,0x55,0x1f,0x8e,0x26,0x75,0x29};
    std::uint8_t product18[32]      = {0x9d,0x95,0xf6,0xed,0x31,0x9a,0xb8,0x92,0x99,0xd9,0x3e,0x0c,0x1d,0x4e,0xb1,0x10,0x50,0x3e,0xa2,0x09,0x83,0x0f,0x74,0xec,0x21,0xcd,0x91,0x2e,0x44,0x2f,0x7a,0xce};
    mont256_from_bytes(&ctx, multiplier, multiplier18);
    mont256_from_bytes(&ctx, multiplicand, multiplicand18);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product18, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier19[32]   = {0xe1,0xaf,0xb7,0x30,0xbf,0x9b,0x3a,0x90,0x81,0x4f,0xa6,0x2b,0xba,0x7d,0xc0,0x3d,0xa0,0xf2,0x02,0x86,0xda,0x6c,0x5e,0x7b,0x01,0xfa,0x15,0x1a,0xac,0x19,0xfb,0x77};
    std::uint8_t multiplicand19[32] = {0x81,0xdc,0xed,0x6d,0x17,0xce,0xf3,0xa2,0x27,0xe4,0x01,0xd9,0x38,0x1f,0xe7,0xac,0xc0,0x85,0x31,0x62,0xb7,0xee,0x98,0xbc,0x1a,0x85,0x96,0x7c,0xc7,0x13,0xa7,0x57};
    std::uint8_t product19[32]      = {0xde,0x22,0x70,0x21,0x47,0x12,0xd1,0x20,0xab,0xcb,0x3c,0x08,0x41,0x7a,0x02,0x35,0x9e,0x89,0xdd,0xc8,0x28,0xe8,0x38,0xb2,0xf5,0xb0,0xe2,0x0e,0x7e,0xe2,0xd8,0xbf};
    mont256_from_bytes(&ctx, multiplier, multiplier19);
    mont256_from_bytes(&ctx, multiplicand, multiplicand19);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product19, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier20[32]   = {0xed,0x5f,0xcc,0xfa,0x6a,0xb4,0xce,0x6c,0xba,0xf6,0x9e,0x00,0x65,0x91,0x81,0xfc,0xff,0x28,0xf4,0xf0,0x65,0x0a,0x1d,0xe5,0xf6,0x38,0xbe,0x46,0x64,0x90,0xfd,0x93};
    std::uint8_t multiplicand20[32] = {0xc6,0xc2,0x9a,0x02,0x8e,0xa3,0x3c,0xf5,0x66,0xbf,0x34,0x80,0x31,0xa2,0xaa,0x0c,0x4d,0x9e,0x6c,0xad,0x44,0xb6,0xf5,0x57,0x12,0x54,0x1b,0x23,0xc2,0x3f,0x72,0x21};
    std::uint8_t product20[32]      = {0x2c,0xd7,0x60,0xbb,0xa2,0x5a,0xef,0x67,0x13,0x70,0xb7,0x2d,0xc8,0xf2,0xbf,0x3a,0x4c,0x5d,0x27,0xde,0x91,0x3e,0xb6,0xf3,0x0e,0x2d,0x72,0x10,0x1e,0x06,0x9d,0xcf};
    mont256_from_bytes(&ctx, multiplier, multiplier20);
    mont256_from_bytes(&ctx, multiplicand, multiplicand20);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product20, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier21[32]   = {0x0b,0x1f,0xf9,0x0b,0x23,0x86,0x36,0x75,0x7a,0x48,0x99,0xaf,0x80,0x03,0x81,0x9a,0x8b,0x32,0x37,0xef,0x71,0x8b,0xec,0x28,0x73,0x81,0x1c,0x7c,0x88,0x8c,0xeb,0xca};
    std::uint8_t multiplicand21[32] = {0xfa,0x4a,0x3e,0xc5,0xad,0xd4,0xd5,0x80,0x70,0x55,0xb5,0x59,0xf3,0x39,0xb6,0x17,0x86,0xe8,0xaf,0x83,0xb3,0xc6,0xb7,0xd6,0xf4,0x3c,0x27,0x91,0x21,0xce,0x50,0xf9};
    std::uint8_t product21[32]      = {0xd4,0x63,0x6e,0x0b,0xb8,0x1f,0x3d,0xda,0x89,0x2d,0xfa,0x5f,0xbd,0x27,0x41,0xc1,0x46,0x8a,0xb7,0x94,0xab,0xfd,0xcd,0x70,0x1b,0x7e,0xf5,0x5b,0x01,0x19,0xb2,0x42};
    mont256_from_bytes(&ctx, multiplier, multiplier21);
    mont256_from_bytes(&ctx, multiplicand, multiplicand21);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product21, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier22[32]   = {0xb4,0xb3,0x72,0x99,0x13,0x9c,0x41,0x09,0xe3,0x61,0x22,0xa5,0x5d,0xc3,0x36,0xf5,0xee,0x90,0xf1,0xf8,0xa6,0xa7,0x57,0x22,0x6a,0xad,0xe9,0x6e,0x8c,0x65,0x3c,0xe5};
    std::uint8_t multiplicand22[32] = {0xb3,0xe8,0x1d,0xa8,0x92,0xa0,0x18,0x95,0x6f,0x68,0x52,0x5d,0x83,0x16,0x1a,0x27,0x09,0x20,0xdf,0x4a,0xde,0x74,0x42,0x35,0x72,0xe9,0x65,0xbb,0x26,0xad,0x76,0xdb};
    std::uint8_t product22[32]      = {0xfe,0x47,0x72,0x5d,0xe0,0xfd,0xad,0x0c,0xb5,0x5f,0x30,0x27,0xb2,0x41,0x9c,0x2e,0xdd,0x7c,0x2a,0x1f,0x86,0xd6,0x5a,0xd6,0x1c,0xa6,0x89,0xf7,0xa9,0xc4,0x5c,0x4b};
    mont256_from_bytes(&ctx, multiplier, multiplier22);
    mont256_from_bytes(&ctx, multiplicand, multiplicand22);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product22, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier23[32]   = {0x9a,0xa1,0x90,0x8b,0x29,0x97,0x37,0x8f,0x1e,0x76,0x08,0x14,0xaa,0x3a,0x56,0x12,0xd2,0xea,0xe1,0x92,0x8b,0x5a,0x57,0xac,0xf5,0x0f,0x06,0x97,0xc1,0x1e,0xf8,0xca};
    std::uint8_t multiplicand23[32] = {0x39,0xed,0xef,0xb3,0x8a,0xbd,0x0f,0x03,0x73,0xeb,0x1c,0xd7,0xb6,0x5a,0x65,0xbb,0x6b,0xba,0x36,0x30,0xfa,0xf5,0x73,0xf0,0x31,0xe5,0x12,0x8f,0xe5,0x0e,0xf8,0x9b};
    std::uint8_t product23[32]      = {0x88,0x29,0xcd,0xb8,0xfe,0xc0,0x8c,0x46,0xa7,0x89,0xe1,0x5f,0x9a,0xb3,0xdd,0x37,0xc7,0xae,0x50,0xeb,0x72,0x86,0x5f,0xd0,0xec,0x40,0x9b,0x2f,0xc4,0x75,0xa2,0x1b};
    mont256_from_bytes(&ctx, multiplier, multiplier23);
    mont256_from_bytes(&ctx, multiplicand, multiplicand23);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product23, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier24[32]   = {0x98,0x1e,0x41,0x0a,0x76,0x92,0xa7,0xe2,0xa3,0xff,0x04,0xb2,0x70,0x7c,0x52,0x66,0x74,0xd3,0x37,0x8c,0xdd,0x72,0x63,0xdf,0xf2,0xfa,0xbf,0x99,0xa2,0x20,0x1b,0xc0};
    std::uint8_t multiplicand24[32] = {0xa1,0xd0,0x89,0x7c,0x1a,0x0b,0x1b,0x98,0x83,0xe1,0x64,0x87,0x48,0xfb,0x8e,0x7e,0x97,0x18,0x4b,0x25,0xeb,0x9d,0x0a,0xd3,0x46,0xb8,0x12,0xd1,0x98,0xde,0x75,0x9f};
    std::uint8_t product24[32]      = {0x45,0x3e,0xaf,0x2c,0x9e,0x2b,0xb1,0xec,0xa9,0xd2,0xa9,0x52,0x17,0x11,0xc4,0xa3,0x42,0x1c,0x73,0x0e,0x8f,0x68,0xf6,0x0b,0x7d,0x30,0xfc,0x5e,0x14,0x7c,0xf1,0x32};
    mont256_from_bytes(&ctx, multiplier, multiplier24);
    mont256_from_bytes(&ctx, multiplicand, multiplicand24);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product24, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier25[32]   = {0x58,0x9e,0x2d,0x34,0x04,0xa4,0x39,0x46,0x2d,0xf5,0xad,0x16,0xbc,0x83,0x5d,0x4e,0xf7,0x70,0x9e,0xd0,0x2f,0xd2,0x12,0xc6,0xaf,0x6f,0xf3,0x80,0x61,0x80,0x1e,0x6b};
    std::uint8_t multiplicand25[32] = {0xb2,0x12,0xc5,0xb5,0xc6,0x71,0x97,0x70,0x70,0x8b,0x0e,0xd2,0x74,0xc1,0x1c,0x9d,0xab,0xae,0x61,0x73,0xc2,0xac,0x6f,0x34,0x8e,0xd2,0x0e,0xf5,0x70,0xf3,0x26,0x19};
    std::uint8_t product25[32]      = {0x06,0xe2,0xa9,0x82,0x0d,0x33,0x6b,0x38,0x9d,0x3d,0x89,0x05,0xa9,0xfb,0xae,0xd1,0xc1,0x78,0x0c,0xda,0x69,0xa9,0x7c,0x33,0x30,0x57,0x73,0x54,0x7a,0x9c,0x5d,0x94};
    mont256_from_bytes(&ctx, multiplier, multiplier25);
    mont256_from_bytes(&ctx, multiplicand, multiplicand25);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product25, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier26[32]   = {0x29,0x19,0xdf,0xcd,0x2e,0x94,0xa5,0x7d,0x51,0x61,0xf7,0x07,0x13,0x35,0xe9,0x28,0xdc,0x49,0x30,0x1c,0xbf,0xeb,0xab,0xce,0xbb,0x10,0x11,0xd7,0x38,0x3c,0x2d,0x78};
    std::uint8_t multiplicand26[32] = {0x54,0x0a,0x45,0x09,0xeb,0x88,0xca,0x8a,0xf4,0x1d,0xce,0xd6,0xb1,0xb4,0x25,0xd1,0x50,0x75,0x9e,0xdc,0xe5,0x35,0xe3,0x85,0xdf,0x52,0x38,0x9e,0xd4,0x76,0xfe,0x5b};
    std::uint8_t product26[32]      = {0x70,0x23,0xa3,0x0c,0xc7,0x10,0x27,0x2c,0xa7,0x5a,0x5e,0xd6,0x5c,0xcd,0xbf,0x70,0x0e,0xe9,0xdd,0x9e,0x37,0x94,0xca,0x7d,0x57,0xbd,0x74,0x1a,0x79,0xeb,0x90,0x60};
    mont256_from_bytes(&ctx, multiplier, multiplier26);
    mont256_from_bytes(&ctx, multiplicand, multiplicand26);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product26, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier27[32]   = {0x48,0xa0,0x0b,0xc6,0xda,0xed,0x7e,0x14,0xcd,0xe0,0xaf,0xe0,0xf1,0xf3,0xba,0xe3,0xb6,0x59,0x7c,0xfb,0x8b,0x01,0xea,0x36,0xed,0x4a,0x70,0x05,0x44,0xd8,0xa5,0x4e};
    std::uint8_t multiplicand27[32] = {0x94,0x02,0x64,0xc1,0x1d,0xfa,0x85,0x3d,0x02,0x9b,0x7c,0x03,0x48,0x44,0xdf,0x62,0x24,0x1f,0x5e,0x11,0xd3,0xd1,0xce,0x5b,0x8a,0x85,0x9b,0x2e,0xf1,0x64,0x93,0x5e};
    std::uint8_t product27[32]      = {0xdd,0xb9,0x85,0xea,0x4b,0x70,0x74,0xb2,0xb2,0xfa,0xf9,0x63,0x5a,0x30,0xe2,0x1a,0xcb,0x6b,0x0b,0x98,0xef,0x4f,0xad,0xb8,0x7c,0xd2,0x7d,0x6c,0xc6,0x67,0xdd,0x8c};
    mont256_from_bytes(&ctx, multiplier, multiplier27);
    mont256_from_bytes(&ctx, multiplicand, multiplicand27);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product27, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier28[32]   = {0x1d,0xb7,0x65,0x82,0x5e,0x19,0x9d,0x97,0xcb,0xd4,0x5e,0xea,0x1e,0x66,0xd6,0x6e,0x35,0xd1,0x2e,0xcf,0xb3,0x1f,0xf7,0xf6,0x53,0x26,0xaf,0x33,0xd3,0x69,0x85,0xe0};
    std::uint8_t multiplicand28[32] = {0xff,0x0c,0xda,0x7e,0x23,0x47,0xe7,0xdd,0xac,0x77,0xf8,0x5c,0xc6,0x2a,0x54,0x10,0xee,0x73,0x2a,0x5f,0x14,0x2e,0x96,0x59,0xe1,0x4a,0x2d,0x57,0x69,0xc6,0x09,0x04};
    std::uint8_t product28[32]      = {0x5e,0x19,0x4e,0xc4,0x08,0xec,0xa7,0xfd,0xc2,0x12,0x0c,0x60,0xa2,0x34,0x3a,0xcb,0x82,0xda,0x27,0x8c,0xe2,0x48,0xfc,0x8f,0xde,0x9f,0xa9,0xf0,0xcc,0xbc,0x8d,0x1a};
    mont256_from_bytes(&ctx, multiplier, multiplier28);
    mont256_from_bytes(&ctx, multiplicand, multiplicand28);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product28, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier29[32]   = {0x86,0x15,0x2d,0x49,0xb8,0x68,0xaa,0x24,0xfa,0xc5,0x2d,0xe5,0xde,0xdc,0x50,0x3d,0x00,0xd1,0x18,0xf1,0xfd,0x55,0x84,0x9e,0x20,0x6e,0x5e,0x0b,0x12,0x27,0x76,0xb7};
    std::uint8_t multiplicand29[32] = {0x36,0x9d,0xcd,0xb9,0x6e,0xbd,0xa3,0x1c,0x9a,0xca,0xb2,0x44,0xe1,0xe6,0xf3,0x2f,0x1a,0x54,0x69,0xd8,0x09,0x82,0x93,0xb1,0x0a,0x51,0xff,0xd6,0x5c,0xf2,0xa4,0xa2};
    std::uint8_t product29[32]      = {0x08,0xd6,0x62,0x02,0xc0,0xbb,0x2c,0xc9,0x92,0x71,0x3c,0xd1,0x51,0xe5,0x75,0x1f,0x11,0x12,0x2d,0x7a,0xbb,0x64,0x77,0xcd,0x8d,0xf4,0xc7,0xa8,0x02,0x90,0xd4,0xfa};
    mont256_from_bytes(&ctx, multiplier, multiplier29);
    mont256_from_bytes(&ctx, multiplicand, multiplicand29);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product29, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier30[32]   = {0xe2,0xd9,0x3b,0x8a,0xf6,0x74,0xb7,0x82,0xb6,0xf8,0xbc,0x70,0x14,0x31,0x29,0xe7,0xc6,0xef,0x3f,0x0e,0x1c,0x01,0x4d,0x31,0xc1,0x45,0xae,0xf2,0x0f,0x5a,0x6f,0x3e};
    std::uint8_t multiplicand30[32] = {0xc6,0x52,0xa8,0xa2,0xc3,0x73,0x56,0x90,0x4b,0x1a,0xa2,0x4c,0xa6,0xcb,0x7a,0x01,0x27,0xdb,0x57,0x2c,0x2e,0xb9,0x17,0x33,0xe0,0x46,0x40,0x52,0x85,0xce,0x62,0x47};
    std::uint8_t product30[32]      = {0x9c,0xbf,0x2a,0x94,0xa1,0x43,0x50,0xa6,0x54,0xd5,0xd8,0xa3,0x91,0x12,0x00,0x35,0xaa,0xf8,0xd3,0x57,0x34,0xa2,0x0d,0x3b,0x1d,0x3f,0xa7,0xa2,0xeb,0x2b,0xe5,0xe9};
    mont256_from_bytes(&ctx, multiplier, multiplier30);
    mont256_from_bytes(&ctx, multiplicand, multiplicand30);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product30, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier31[32]   = {0xa1,0xa5,0x7a,0xc4,0x0c,0xbe,0xd7,0xeb,0x92,0x66,0xff,0x9c,0x48,0xec,0xc4,0x91,0xaf,0xb0,0xb2,0xbf,0x27,0x05,0xc9,0xaa,0xa7,0x9c,0xd5,0xc8,0x50,0x8c,0x4f,0xf5};
    std::uint8_t multiplicand31[32] = {0x87,0x08,0x19,0x05,0x52,0xc7,0x76,0x5a,0xb8,0x13,0xc0,0xf0,0xbf,0xf6,0xea,0x05,0x0e,0x71,0x66,0x34,0x22,0x07,0x8b,0x69,0x50,0x91,0x61,0xde,0x85,0x5a,0xb7,0xae};
    std::uint8_t product31[32]      = {0x23,0x99,0x5d,0xac,0x6d,0xfe,0xd1,0x0f,0x09,0x44,0xa1,0xa0,0x47,0x43,0x16,0x3a,0xf1,0xf6,0x46,0x3a,0xf1,0x72,0x43,0x20,0x5b,0xaa,0x34,0x7c,0x8f,0x79,0x3a,0x3b};
    mont256_from_bytes(&ctx, multiplier, multiplier31);
    mont256_from_bytes(&ctx, multiplicand, multiplicand31);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product31, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier32[32]   = {0x75,0x87,0xb7,0x83,0xeb,0x82,0x12,0x33,0x67,0x6f,0x91,0xba,0xca,0x58,0xde,0x64,0xcd,0x61,0x58,0x8e,0x45,0xa2,0x79,0x19,0x63,0x36,0xc8,0x9d,0x11,0xa8,0x68,0xbd};
    std::uint8_t multiplicand32[32] = {0x40,0xa7,0xf9,0xf0,0x65,0x76,0x0f,0x07,0xb2,0xb4,0x8b,0xcb,0xbd,0xc0,0xa2,0xdb,0xd1,0x71,0xda,0x41,0x8d,0x51,0xa1,0x45,0x86,0xec,0xf8,0x67,0xcc,0xbb,0x76,0x3c};
    std::uint8_t product32[32]      = {0xde,0x13,0x99,0x8b,0x3d,0xf6,0x9f,0x45,0xa0,0x61,0xe0,0x3a,0x2b,0x20,0x34,0x35,0xd3,0x24,0xa1,0x84,0xd6,0x76,0x22,0x5c,0x0e,0x86,0xa5,0xbb,0x19,0x92,0x36,0xab};
    mont256_from_bytes(&ctx, multiplier, multiplier32);
    mont256_from_bytes(&ctx, multiplicand, multiplicand32);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product32, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier33[32]   = {0x9e,0xd2,0xce,0xbc,0x39,0x95,0x1f,0xef,0xdf,0xd0,0x7f,0x97,0xf4,0x91,0x49,0xc3,0x32,0x5d,0xcb,0x83,0x94,0xe1,0x90,0x9c,0x03,0xbf,0x21,0xdc,0x7f,0x70,0x62,0x67};
    std::uint8_t multiplicand33[32] = {0x9b,0xad,0x5b,0xa2,0xff,0x3c,0x85,0xff,0x0a,0x21,0x85,0x44,0xfa,0xa9,0xc8,0x90,0x89,0x9e,0x7a,0xe7,0x3c,0xfc,0x8a,0x32,0x7a,0xa1,0xfa,0x3a,0x4d,0x90,0xd9,0x80};
    std::uint8_t product33[32]      = {0x60,0xf8,0x62,0x60,0xf4,0x66,0x80,0x4d,0x58,0x63,0xdd,0xc2,0x9a,0x19,0x73,0xf9,0x7d,0x41,0x72,0x66,0xdc,0x06,0x74,0xff,0x3e,0xd6,0xa5,0x66,0x77,0x1c,0x7a,0x33};
    mont256_from_bytes(&ctx, multiplier, multiplier33);
    mont256_from_bytes(&ctx, multiplicand, multiplicand33);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product33, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier34[32]   = {0x50,0xd3,0x48,0x53,0xc1,0xd0,0xfa,0xbe,0xc2,0xef,0x45,0x80,0x7b,0xb5,0xe3,0xf9,0xfd,0x4b,0x3b,0x35,0x9d,0xd4,0xea,0x4d,0xf9,0x47,0xc6,0x21,0x8b,0x36,0xf2,0x63};
    std::uint8_t multiplicand34[32] = {0x8e,0xbb,0x77,0x3b,0x84,0xb7,0xa8,0xee,0x08,0xc2,0x97,0x3d,0x4b,0x32,0x99,0xcf,0xca,0x48,0x61,0x99,0x0e,0x0d,0xfd,0x0b,0xb8,0xbc,0x19,0x7a,0x9e,0x87,0xed,0x00};
    std::uint8_t product34[32]      = {0xd9,0xb4,0x36,0xac,0x59,0x04,0x46,0xd1,0x80,0x03,0x98,0x01,0xd4,0xa8,0x86,0x02,0x2d,0x4e,0x73,0x71,0xfe,0x2f,0x95,0xe0,0x97,0x3c,0x50,0x40,0x3a,0xdd,0xbd,0xff};
    mont256_from_bytes(&ctx, multiplier, multiplier34);
    mont256_from_bytes(&ctx, multiplicand, multiplicand34);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product34, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier35[32]   = {0x71,0x5e,0x56,0x41,0x27,0xd3,0x9b,0xb3,0x4d,0x1e,0x51,0x22,0x96,0x0a,0xfb,0x94,0x7e,0x82,0xd3,0x73,0xf9,0x09,0x68,0xb0,0x29,0x08,0x5f,0x9f,0xbf,0x3c,0x35,0x28};
    std::uint8_t multiplicand35[32] = {0xe0,0x07,0xab,0x65,0xe0,0xd0,0x22,0x0f,0x2b,0xfc,0x57,0x52,0x84,0xb6,0xf8,0x7f,0xcb,0xdc,0x8f,0xd7,0xf1,0xc3,0x72,0x8d,0xb4,0x69,0x9e,0x22,0xe7,0xbc,0xda,0x12};
    std::uint8_t product35[32]      = {0x43,0x97,0x15,0xc6,0xd4,0x03,0x30,0x00,0xd5,0x22,0x82,0x33,0xf6,0x49,0x1c,0x35,0x2f,0x5c,0x44,0x37,0x91,0x20,0x31,0xf4,0x17,0xbc,0x40,0x58,0x3b,0x61,0x71,0x91};
    mont256_from_bytes(&ctx, multiplier, multiplier35);
    mont256_from_bytes(&ctx, multiplicand, multiplicand35);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product35, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier36[32]   = {0x6a,0xa2,0x59,0xc0,0x96,0x46,0xb5,0x36,0x63,0x9c,0x1b,0xe9,0xd4,0x52,0x89,0x33,0x44,0x51,0x20,0x79,0x7f,0xe3,0x20,0x78,0x39,0x75,0xac,0x99,0x40,0x6c,0x94,0x77};
    std::uint8_t multiplicand36[32] = {0xc7,0x83,0x3d,0x1e,0xe6,0x6d,0x0d,0xfa,0xcb,0x79,0x35,0x28,0x46,0x31,0x91,0x5a,0x73,0xb5,0x2e,0xfd,0xee,0xc3,0x37,0x4a,0xed,0x0d,0xdc,0x62,0x8b,0xad,0x18,0x83};
    std::uint8_t product36[32]      = {0x09,0x23,0x80,0x22,0xf8,0x63,0x37,0x52,0x82,0x3f,0xf1,0xfc,0xd3,0x0e,0x07,0x99,0x94,0x39,0x6a,0xd0,0xc6,0xe8,0x08,0x67,0x68,0x62,0x3c,0x25,0x31,0xa8,0x45,0xf4};
    mont256_from_bytes(&ctx, multiplier, multiplier36);
    mont256_from_bytes(&ctx, multiplicand, multiplicand36);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product36, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier37[32]   = {0xc2,0x41,0x23,0x1b,0x09,0xc7,0x1d,0xe7,0x66,0xc2,0xfd,0x3d,0x01,0xb2,0x26,0x4b,0xaf,0x35,0x24,0x4a,0x1b,0x6b,0xca,0xb8,0x0e,0x22,0x17,0xe4,0x1f,0x0c,0xba,0xd4};
    std::uint8_t multiplicand37[32] = {0x3b,0x04,0x25,0xd4,0xc3,0x85,0xff,0x74,0x61,0x94,0xea,0xd1,0xcf,0xf1,0x5f,0x6f,0x6b,0xc1,0x81,0xf7,0xd6,0x16,0x3d,0xe1,0x74,0x7e,0xde,0x9f,0xdf,0xa8,0xe5,0xca};
    std::uint8_t product37[32]      = {0xb4,0xb6,0xa3,0xc4,0x1d,0x5b,0x8a,0x75,0x67,0x0c,0x20,0xec,0x95,0x92,0x1d,0xea,0xce,0x07,0xfa,0x1b,0xd9,0x49,0x21,0xa6,0xcb,0x29,0x77,0x65,0x23,0x26,0xe4,0x30};
    mont256_from_bytes(&ctx, multiplier, multiplier37);
    mont256_from_bytes(&ctx, multiplicand, multiplicand37);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product37, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier38[32]   = {0x31,0x70,0xcb,0xd8,0x8b,0x3a,0xac,0x83,0x52,0x30,0x1f,0xf9,0xc0,0x65,0xd2,0x7a,0xd7,0xa6,0x58,0x64,0xde,0x30,0xe3,0xcd,0x9a,0x13,0xf0,0xae,0x9a,0x50,0x7b,0x1a};
    std::uint8_t multiplicand38[32] = {0xb4,0x44,0x5d,0x3f,0xee,0x93,0x45,0x30,0x82,0x35,0x4f,0xf5,0xaf,0xea,0x1f,0xcf,0x60,0x03,0x2b,0x7b,0xc8,0xd3,0x3f,0x9d,0xbd,0x7c,0x26,0x73,0x10,0x35,0xab,0xcb};
    std::uint8_t product38[32]      = {0x77,0xdf,0x64,0x14,0x8f,0xd4,0xd2,0x9b,0xcb,0xa2,0xf5,0x6c,0x20,0x69,0x23,0xbd,0x33,0x75,0x08,0xaa,0xb1,0x65,0xcb,0x67,0x22,0x69,0x3a,0x7d,0xdd,0x40,0x00,0x69};
    mont256_from_bytes(&ctx, multiplier, multiplier38);
    mont256_from_bytes(&ctx, multiplicand, multiplicand38);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product38, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier39[32]   = {0x93,0x0a,0x7a,0xf2,0xfd,0x5d,0x2b,0xeb,0x29,0x40,0x4f,0x18,0x9c,0x74,0x1d,0xf9,0xbe,0xc6,0xcb,0x47,0xff,0x2e,0x60,0x2f,0xe7,0x84,0x1d,0x8b,0x63,0xda,0xf2,0xad};
    std::uint8_t multiplicand39[32] = {0xed,0xa4,0xfd,0xa4,0x0c,0x97,0xc2,0xd1,0xf6,0xad,0x54,0xce,0xf6,0xd5,0x5e,0x6f,0x1e,0xe7,0x0b,0x55,0x22,0x76,0x37,0x61,0x48,0x4b,0xbd,0xb3,0x6a,0x36,0x9d,0xad};
    std::uint8_t product39[32]      = {0xf8,0x2e,0xbe,0x08,0x65,0x63,0x24,0x30,0x0e,0x74,0x7c,0xd7,0x78,0xd5,0x81,0x25,0x65,0xe8,0x44,0x7c,0x16,0x03,0x27,0xf2,0xe2,0x9e,0x65,0x5b,0xe2,0x44,0x4e,0x43};
    mont256_from_bytes(&ctx, multiplier, multiplier39);
    mont256_from_bytes(&ctx, multiplicand, multiplicand39);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product39, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier40[32]   = {0xb2,0xf6,0x53,0x7b,0x47,0xda,0xa0,0xd4,0xfe,0x69,0x3c,0x83,0x61,0xec,0x7b,0xe6,0x62,0x9c,0x1b,0x36,0xe6,0x54,0x6f,0xb9,0x59,0xb8,0x55,0xed,0x20,0xbc,0x39,0x2d};
    std::uint8_t multiplicand40[32] = {0x86,0xfc,0xab,0x40,0xf8,0x09,0x60,0x15,0x60,0xb4,0x4a,0x0a,0x3d,0x50,0xb2,0x8a,0x31,0x16,0xc7,0x1a,0x0d,0x7e,0x73,0xc3,0x7f,0x11,0x4a,0xe5,0xf7,0xeb,0x89,0xcc};
    std::uint8_t product40[32]      = {0xdb,0x54,0x1b,0x2b,0x57,0x61,0x1b,0xb0,0x04,0xcb,0xa9,0xc7,0x1e,0x00,0xa4,0x37,0x68,0x30,0xb6,0x76,0xdd,0xcb,0x83,0x7c,0x35,0x80,0x0a,0x48,0x36,0xa0,0x72,0xeb};
    mont256_from_bytes(&ctx, multiplier, multiplier40);
    mont256_from_bytes(&ctx, multiplicand, multiplicand40);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product40, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier41[32]   = {0x76,0x00,0x4d,0x07,0x7f,0xc9,0x42,0x29,0x92,0xd3,0xa2,0x29,0x6b,0xd1,0xc3,0x4b,0xaf,0xb0,0x03,0xb2,0x8b,0xc2,0x0d,0x41,0x4e,0xb6,0xc0,0x70,0x31,0xa6,0x25,0x5e};
    std::uint8_t multiplicand41[32] = {0xf3,0x14,0x49,0xe1,0x12,0x45,0x2c,0xce,0x47,0x82,0x4b,0x8e,0x8c,0x3b,0xd8,0x9f,0x97,0xdd,0x5f,0x8e,0xa7,0x49,0x9e,0x5a,0x46,0xea,0x89,0x2a,0x4d,0x0b,0x8f,0xdd};
    std::uint8_t product41[32]      = {0xdf,0xc1,0x42,0x97,0x18,0x2a,0x23,0x01,0x01,0x26,0x27,0xd9,0xda,0xdc,0x54,0xd6,0x2e,0xad,0xba,0x9c,0x23,0x9c,0x22,0x86,0x5e,0xe3,0xac,0x35,0xed,0x47,0x12,0xfe};
    mont256_from_bytes(&ctx, multiplier, multiplier41);
    mont256_from_bytes(&ctx, multiplicand, multiplicand41);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product41, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier42[32]   = {0xd8,0xe4,0xf7,0x7e,0x0f,0x75,0xd4,0x36,0xdf,0x08,0x92,0xa6,0x0e,0xbd,0x4e,0x58,0x40,0xad,0xa5,0xe1,0x3c,0x43,0x7d,0x32,0x1c,0xf8,0xe9,0x19,0xca,0x17,0xca,0x89};
    std::uint8_t multiplicand42[32] = {0x45,0x91,0x53,0x54,0x22,0xf1,0x79,0x4d,0x7e,0x86,0x42,0x4a,0x2a,0x48,0x2b,0xeb,0x57,0xbb,0xfb,0x08,0xa0,0x91,0x31,0x92,0x18,0x7c,0x62,0x9e,0xf7,0xc7,0x48,0x6a};
    std::uint8_t product42[32]      = {0x25,0x34,0x3c,0x66,0xfd,0xa8,0x87,0xe3,0x34,0x7f,0x13,0xf4,0xee,0xe2,0x47,0xdb,0x45,0xbd,0x30,0x0e,0x0a,0xe1,0x28,0x36,0xdc,0x32,0x00,0x28,0x69,0x91,0x7a,0x3f};
    mont256_from_bytes(&ctx, multiplier, multiplier42);
    mont256_from_bytes(&ctx, multiplicand, multiplicand42);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product42, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier43[32]   = {0x24,0x58,0x65,0x3e,0x9a,0xfc,0x77,0xce,0x6a,0x18,0x10,0xc1,0x9a,0x8c,0xc3,0x9d,0x7b,0x8c,0x88,0x94,0xfc,0xc1,0x8b,0x64,0xeb,0x98,0x36,0x6b,0x11,0x13,0x2d,0x07};
    std::uint8_t multiplicand43[32] = {0x70,0x6d,0x20,0x48,0x8f,0x3c,0x39,0x1d,0xc8,0xdc,0x51,0xa3,0x08,0xf2,0x24,0x4e,0x1e,0x42,0xd9,0xde,0xd6,0x8b,0x9c,0x34,0x16,0x35,0xcd,0x9f,0x2d,0xb1,0x82,0x68};
    std::uint8_t product43[32]      = {0x65,0xde,0x31,0x66,0x82,0x6d,0x60,0x8e,0xd4,0x84,0x89,0xd8,0x38,0x1c,0xd0,0xf4,0x32,0x95,0xf5,0xd5,0x7d,0xb4,0xee,0xbd,0x63,0x18,0xd1,0x15,0xed,0x64,0x67,0xd8};
    mont256_from_bytes(&ctx, multiplier, multiplier43);
    mont256_from_bytes(&ctx, multiplicand, multiplicand43);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product43, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier44[32]   = {0xa1,0xc2,0x5b,0xa0,0xd2,0xd3,0x0f,0x0d,0x0c,0x44,0x33,0x8a,0xdd,0x49,0xa4,0xbf,0x24,0xfa,0x65,0xaa,0x17,0xdd,0x8e,0x3c,0xd0,0xa5,0x82,0x3b,0xd5,0xcc,0x09,0xa1};
    std::uint8_t multiplicand44[32] = {0xad,0xa5,0x48,0x8d,0x9d,0xcb,0x7b,0x8a,0xe0,0x64,0x70,0xaa,0xef,0xa2,0x8b,0x5e,0x20,0x91,0xf7,0x6e,0xb8,0x8b,0x44,0xea,0x66,0x30,0xc8,0xc4,0x05,0x36,0x29,0x37};
    std::uint8_t product44[32]      = {0x67,0x9e,0x43,0x04,0x56,0x09,0x13,0x8e,0x86,0x33,0x35,0x03,0x13,0x90,0xba,0xf9,0x5d,0x72,0x01,0xa2,0x30,0xea,0x51,0xeb,0xcf,0xac,0xb2,0x1d,0xbe,0x50,0x2d,0xab};
    mont256_from_bytes(&ctx, multiplier, multiplier44);
    mont256_from_bytes(&ctx, multiplicand, multiplicand44);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product44, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier45[32]   = {0x9d,0x22,0x7c,0xc3,0xb2,0xe7,0x3b,0xcd,0x54,0x27,0x30,0xbe,0x3d,0x9b,0x47,0x13,0xa8,0x3e,0x20,0xa3,0x98,0x0f,0xbf,0xec,0x55,0xd2,0x74,0xc8,0xa6,0x67,0xf6,0x4a};
    std::uint8_t multiplicand45[32] = {0x11,0x84,0x86,0x26,0x9f,0xd9,0x73,0x28,0xd5,0xe6,0xfe,0xa3,0x2d,0xd8,0x69,0x6f,0x74,0x24,0xf0,0x05,0xb9,0x3c,0x8b,0xa1,0xd0,0x39,0x64,0x15,0xd4,0xde,0xad,0x8a};
    std::uint8_t product45[32]      = {0x1d,0x0d,0x67,0x4a,0xe7,0x1d,0x63,0xd7,0x60,0xc4,0xda,0xfd,0x79,0x02,0x42,0xd3,0x83,0xfb,0xe3,0xcf,0xfa,0xb2,0x1f,0x17,0xcc,0x72,0x99,0xd2,0xbc,0xec,0x2d,0x65};
    mont256_from_bytes(&ctx, multiplier, multiplier45);
    mont256_from_bytes(&ctx, multiplicand, multiplicand45);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product45, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier46[32]   = {0xa8,0x13,0x9e,0x3a,0x82,0xda,0xdd,0x00,0x6b,0xe9,0x4b,0x7f,0x7c,0x46,0x89,0x0c,0x15,0x3d,0x37,0xd2,0x88,0x56,0x24,0xaf,0x3e,0xb4,0x98,0x5e,0x25,0xbb,0x09,0xc4};
    std::uint8_t multiplicand46[32] = {0x81,0x46,0x12,0x56,0x1b,0x5e,0x73,0xe0,0x3a,0x06,0x34,0x5f,0x53,0xd0,0x23,0x9d,0x93,0x11,0xb6,0xc4,0xc9,0x5d,0x5f,0x0c,0xb1,0x8f,0x40,0x63,0x18,0xbc,0x77,0xb4};
    std::uint8_t product46[32]      = {0xa7,0x57,0x94,0xd3,0xe3,0x30,0x03,0x12,0x0b,0x4e,0x39,0xc5,0x28,0xe4,0x99,0x12,0x57,0x53,0x22,0xc6,0xf0,0x9e,0x9c,0x56,0xf5,0xd7,0x8e,0xfa,0xec,0x9d,0x80,0x19};
    mont256_from_bytes(&ctx, multiplier, multiplier46);
    mont256_from_bytes(&ctx, multiplicand, multiplicand46);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product46, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier47[32]   = {0xff,0xa3,0x40,0x0a,0xdd,0xea,0xc6,0x63,0xbb,0x9e,0x42,0xaf,0xc5,0x3b,0xbf,0x3b,0x2f,0xde,0xf4,0x51,0xa9,0xac,0x15,0x28,0x5a,0xba,0x35,0x63,0x39,0x8d,0xde,0x09};
    std::uint8_t multiplicand47[32] = {0x00,0x18,0xfe,0xfc,0x6f,0xdd,0x9c,0x18,0x0c,0x37,0xfb,0x55,0xb9,0xe4,0x97,0x3a,0x13,0xb7,0x42,0x5f,0x49,0xec,0x9c,0x62,0x62,0x44,0x40,0x35,0xfa,0x78,0xd8,0x7e};
    std::uint8_t product47[32]      = {0xd9,0x0a,0x91,0x3e,0xec,0x78,0xbe,0x49,0xf3,0x61,0xd5,0xca,0x31,0xca,0xe7,0x7c,0xd4,0x02,0x25,0x80,0x59,0x2c,0x38,0xfa,0xbe,0xa7,0xd1,0x45,0x6d,0x76,0x46,0x37};
    mont256_from_bytes(&ctx, multiplier, multiplier47);
    mont256_from_bytes(&ctx, multiplicand, multiplicand47);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product47, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier48[32]   = {0x34,0x89,0x23,0x2b,0x6a,0xaa,0xd8,0x53,0x0f,0x7c,0xe9,0x9b,0xef,0xbd,0x5c,0x3f,0x21,0x25,0x43,0x49,0x1e,0x53,0xff,0x6b,0x03,0xe1,0x6b,0xb7,0x7a,0xfc,0x5d,0x5d};
    std::uint8_t multiplicand48[32] = {0x65,0x7e,0xe1,0x79,0x34,0x0e,0x7f,0xd4,0x99,0xaa,0xb1,0xc4,0x96,0x03,0x8c,0x53,0x33,0x20,0x51,0x2b,0xec,0xb0,0xbf,0xbb,0x86,0xa7,0x85,0xea,0x95,0x3e,0x67,0x11};
    std::uint8_t product48[32]      = {0x1c,0x3b,0x21,0x9c,0xbc,0x50,0x39,0x31,0xa9,0x2e,0x56,0xb3,0x70,0xd8,0xbb,0xea,0x5c,0xe8,0xf2,0x03,0x04,0xb4,0x74,0x59,0x28,0x71,0xb9,0x73,0xbc,0x67,0xbb,0x5e};
    mont256_from_bytes(&ctx, multiplier, multiplier48);
    mont256_from_bytes(&ctx, multiplicand, multiplicand48);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product48, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier49[32]   = {0x9a,0x42,0x6d,0xf0,0xbd,0x51,0xa3,0x14,0x57,0x71,0x71,0x58,0xce,0x9b,0x05,0xb4,0x08,0x74,0x2d,0xa4,0x8e,0x47,0x77,0x6e,0xa2,0x3f,0x53,0x22,0x9d,0xf9,0x89,0xf1};
    std::uint8_t multiplicand49[32] = {0xfa,0xa2,0x2d,0xfd,0x84,0x77,0x22,0x4a,0x5c,0xb8,0xf5,0x68,0x2b,0xa5,0x7c,0x22,0xc0,0x12,0x28,0x07,0x4c,0x27,0x98,0x93,0xa6,0xf1,0xf1,0x90,0xda,0xce,0x5f,0xd8};
    std::uint8_t product49[32]      = {0xdc,0x95,0x70,0x35,0x32,0xba,0x79,0x9e,0xfc,0x8a,0x44,0xf2,0x7e,0x9d,0x6f,0x3d,0xfe,0xdc,0x09,0x12,0x81,0xd9,0x26,0xeb,0x39,0xbe,0xee,0xee,0x4f,0x6a,0xdb,0x3f};
    mont256_from_bytes(&ctx, multiplier, multiplier49);
    mont256_from_bytes(&ctx, multiplicand, multiplicand49);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product49, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier50[32]   = {0x3a,0x80,0x3f,0x91,0x9c,0xd7,0xae,0xd0,0xb6,0x4a,0x96,0xa0,0xc6,0x5c,0x81,0x39,0xec,0x01,0x21,0xd5,0x97,0xde,0x5d,0x00,0xd1,0xa4,0x50,0x8c,0x22,0x89,0xf6,0x75};
    std::uint8_t multiplicand50[32] = {0xd4,0xee,0x44,0x83,0x1d,0x38,0x57,0x89,0x4c,0xb1,0x8f,0x5f,0x62,0xac,0x8f,0x64,0xd0,0x1a,0x1d,0x94,0x44,0xfc,0x70,0xcd,0x82,0x43,0xf8,0xbe,0x54,0xc5,0xfb,0xfe};
    std::uint8_t product50[32]      = {0xd3,0xe4,0xe6,0xd4,0xb5,0xab,0x5c,0xf4,0x79,0x46,0x88,0x9b,0x4d,0x7c,0x55,0x07,0x76,0x47,0xb0,0x4e,0xfc,0x3b,0x45,0x05,0xf5,0xd2,0x7a,0x75,0x68,0xd4,0xac,0xb4};
    mont256_from_bytes(&ctx, multiplier, multiplier50);
    mont256_from_bytes(&ctx, multiplicand, multiplicand50);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product50, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier51[32]   = {0x11,0x99,0x28,0x98,0x6f,0xda,0x77,0x7a,0x8f,0x01,0x67,0x33,0x5d,0xe1,0xdb,0x18,0xb7,0xc3,0x06,0x5f,0x55,0xe6,0xb5,0x6f,0x5d,0x95,0x4e,0x63,0x4b,0x5f,0x9f,0x35};
    std::uint8_t multiplicand51[32] = {0xc0,0xcc,0x43,0xde,0xf2,0x32,0xc8,0xc9,0x6e,0xa6,0xf9,0xfd,0x2b,0x05,0xbd,0x3b,0x44,0xfa,0x24,0xc1,0x1e,0xf2,0x04,0xe8,0x6f,0xaf,0x46,0x82,0xcc,0x79,0xb6,0xb6};
    std::uint8_t product51[32]      = {0x63,0xa7,0x29,0x18,0x31,0xe5,0x4e,0x6c,0x81,0x82,0x17,0xec,0x24,0xa8,0x30,0xc2,0x53,0x76,0x83,0x21,0x7a,0x40,0x55,0x75,0x4b,0xa5,0xb6,0xec,0x1b,0xbf,0x20,0xfb};
    mont256_from_bytes(&ctx, multiplier, multiplier51);
    mont256_from_bytes(&ctx, multiplicand, multiplicand51);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product51, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier52[32]   = {0x3c,0x00,0x8f,0xa1,0xf0,0x23,0xed,0xc8,0x28,0x36,0xea,0x3f,0xa0,0x36,0x40,0x88,0xd5,0x04,0x49,0xc3,0x09,0xca,0x57,0xcf,0x41,0xbd,0x4b,0xe1,0xe1,0x91,0x6f,0x86};
    std::uint8_t multiplicand52[32] = {0xab,0x11,0x85,0x24,0x3a,0xcc,0x04,0xed,0x0d,0x2c,0xe6,0xc2,0x92,0xaa,0x08,0x5b,0xeb,0x12,0xce,0x46,0xe9,0x63,0xbc,0xdd,0xbb,0xb5,0xd3,0xe5,0x3a,0x8d,0x71,0x11};
    std::uint8_t product52[32]      = {0x58,0x4d,0xa8,0x96,0xe0,0x5f,0x4e,0x34,0x1c,0x99,0xe0,0x3e,0xd4,0xbc,0x46,0x29,0x2a,0x96,0x85,0xed,0xdc,0x98,0xde,0x2a,0x60,0xb6,0xf5,0x63,0xaf,0xfc,0x3e,0xc1};
    mont256_from_bytes(&ctx, multiplier, multiplier52);
    mont256_from_bytes(&ctx, multiplicand, multiplicand52);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product52, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier53[32]   = {0xfc,0x5c,0x1f,0x41,0xfe,0xaa,0xa2,0x9c,0x7f,0x61,0x25,0xe8,0x7f,0x4e,0x3e,0x5e,0x71,0xbf,0x5b,0xc8,0x09,0x10,0x9c,0x04,0x37,0xe0,0xc8,0x9e,0x91,0xb4,0x6c,0x8d};
    std::uint8_t multiplicand53[32] = {0xc3,0x35,0x01,0x8c,0xfd,0x2c,0x2f,0xe7,0x46,0x2e,0x83,0x6f,0xaf,0x4c,0x1d,0x21,0xc0,0x62,0xd7,0xfc,0x68,0x67,0x7b,0x08,0x4d,0x77,0xfe,0x51,0x4e,0xd5,0x19,0x54};
    std::uint8_t product53[32]      = {0x3b,0x03,0xac,0xdd,0x60,0x6b,0x53,0x84,0x83,0x72,0x8b,0x5e,0xd0,0xf0,0xc6,0x7c,0xdc,0x6b,0x7a,0xce,0x8f,0x91,0x3c,0xb8,0xea,0xbf,0xdf,0x3f,0xe9,0xff,0x42,0x78};
    mont256_from_bytes(&ctx, multiplier, multiplier53);
    mont256_from_bytes(&ctx, multiplicand, multiplicand53);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product53, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier54[32]   = {0x25,0x9e,0xd4,0x4e,0x44,0x74,0x28,0x53,0x4b,0x18,0xbe,0xe4,0x7b,0x7c,0x42,0xe9,0x76,0x6e,0xa1,0xfc,0xd4,0x51,0x62,0x62,0xad,0x90,0x8d,0x5f,0x53,0x94,0x78,0x2b};
    std::uint8_t multiplicand54[32] = {0xdd,0x75,0x88,0x77,0x8b,0xb6,0xd6,0x45,0x1f,0x6c,0xa1,0x78,0x46,0x1f,0xd3,0x54,0xd0,0xf0,0x2b,0xb3,0xec,0xa9,0x12,0xa3,0x83,0x9e,0xc5,0x97,0xf1,0x34,0x65,0x43};
    std::uint8_t product54[32]      = {0xe6,0x08,0x5c,0x7f,0x00,0xaf,0x90,0xf6,0x31,0xa5,0x81,0xd1,0x1c,0x23,0x57,0x66,0x55,0x01,0x92,0xdf,0x75,0xe4,0xb8,0xdf,0x64,0x0d,0x24,0xa7,0x79,0xdf,0x51,0x2e};
    mont256_from_bytes(&ctx, multiplier, multiplier54);
    mont256_from_bytes(&ctx, multiplicand, multiplicand54);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product54, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier55[32]   = {0x9c,0x98,0x97,0xd0,0xda,0x8d,0xbb,0x6a,0xb3,0x69,0xb9,0xfe,0xc1,0x3e,0xf5,0x2a,0xcd,0x1e,0x15,0x42,0xde,0x3c,0x40,0xe8,0xbd,0xd7,0xf9,0x37,0xbe,0x08,0xfc,0x2f};
    std::uint8_t multiplicand55[32] = {0x41,0xe8,0x54,0x6e,0x12,0x64,0x3e,0x98,0x14,0xe8,0xc6,0x96,0x11,0x78,0xde,0x79,0xb4,0x94,0xaf,0x86,0x74,0x11,0xab,0xb7,0x5b,0xcc,0x50,0x97,0x3e,0xc5,0x2b,0x95};
    std::uint8_t product55[32]      = {0x22,0x34,0xbc,0x22,0x96,0xc0,0x05,0xf1,0xc7,0xf2,0x0d,0xa8,0x1d,0xce,0x94,0x28,0x65,0xbc,0x0c,0x7f,0x21,0xdd,0x09,0xf7,0x69,0xb2,0x4b,0x7f,0xff,0xd8,0x17,0x17};
    mont256_from_bytes(&ctx, multiplier, multiplier55);
    mont256_from_bytes(&ctx, multiplicand, multiplicand55);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product55, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier56[32]   = {0x58,0x50,0x74,0x89,0x2f,0x34,0x59,0x4f,0x2b,0x97,0x98,0x86,0xb8,0x04,0x65,0x68,0x41,0x3d,0x14,0x4d,0xbf,0xe1,0x64,0xf1,0xde,0xf9,0x12,0x6b,0x92,0xfd,0xcf,0xbb};
    std::uint8_t multiplicand56[32] = {0xe7,0x12,0x08,0x06,0xee,0xad,0xea,0xcb,0xd4,0x02,0xe7,0xb3,0x81,0x72,0x88,0xd6,0x91,0x49,0xca,0x2b,0xd0,0xc5,0x12,0x1f,0xa3,0x50,0xeb,0xd6,0xb2,0x30,0xf2,0x83};
    std::uint8_t product56[32]      = {0xb7,0x59,0x10,0xdc,0x0a,0x7b,0x56,0xe0,0x1a,0xd5,0xab,0xb7,0x75,0x4d,0xa9,0xc7,0xd5,0xb5,0xd0,0xe3,0xaf,0xa8,0xa9,0xf9,0x8c,0xac,0xf6,0x6b,0x45,0x37,0x40,0xff};
    mont256_from_bytes(&ctx, multiplier, multiplier56);
    mont256_from_bytes(&ctx, multiplicand, multiplicand56);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product56, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier57[32]   = {0xe2,0xa0,0x0b,0x8f,0x2b,0x58,0x56,0x2b,0xa6,0xa1,0x3d,0x7f,0x38,0xdb,0x47,0x9b,0x8a,0xf0,0x79,0x2d,0x99,0xd9,0xd7,0xb0,0x59,0xac,0xe5,0xd4,0x3b,0x3f,0xc9,0xc5};
    std::uint8_t multiplicand57[32] = {0xf8,0x45,0x19,0x52,0xdb,0xb4,0x52,0xc0,0x3c,0x85,0x8b,0x70,0x5e,0x0f,0x0d,0xbe,0xdf,0xd5,0x25,0x5d,0x3a,0xdf,0xeb,0x39,0x34,0xd9,0x32,0xdd,0xe7,0x31,0xcd,0x5d};
    std::uint8_t product57[32]      = {0x8f,0xe7,0x90,0xf0,0x68,0xf0,0x07,0x05,0x5f,0xfd,0xe7,0x80,0x77,0xfb,0x05,0x3d,0x26,0x36,0x78,0x2f,0x83,0xb6,0x8e,0x05,0xd7,0x2f,0xbd,0x52,0x4b,0xb5,0xc2,0x33};
    mont256_from_bytes(&ctx, multiplier, multiplier57);
    mont256_from_bytes(&ctx, multiplicand, multiplicand57);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product57, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier58[32]   = {0x6e,0x04,0x47,0xe5,0x3d,0xdb,0xd0,0x8f,0x24,0xd5,0x55,0xc5,0x30,0x31,0xb0,0x6b,0x2a,0x2f,0x3c,0xc1,0x52,0x7d,0xc4,0x58,0x88,0xb7,0xe1,0xc6,0x8c,0x3f,0xc6,0x60};
    std::uint8_t multiplicand58[32] = {0xd5,0xbf,0xfa,0x42,0xc5,0x01,0xec,0x07,0x70,0xc0,0x39,0x90,0xe7,0xc8,0xe4,0xaa,0x0a,0x74,0x43,0xbb,0x16,0x47,0x53,0x69,0xf8,0xdd,0x2e,0xed,0x1d,0x0b,0xea,0xf7};
    std::uint8_t product58[32]      = {0xf0,0x91,0x2f,0x9b,0xc1,0x01,0xaf,0x50,0x49,0xe7,0xf2,0x35,0xec,0x24,0x07,0x9f,0x25,0xc9,0x4e,0x5a,0x34,0xfa,0x0b,0x73,0x50,0xf9,0xa3,0x23,0x61,0x7a,0x63,0x92};
    mont256_from_bytes(&ctx, multiplier, multiplier58);
    mont256_from_bytes(&ctx, multiplicand, multiplicand58);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product58, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier59[32]   = {0x22,0xfa,0x1d,0x55,0x9e,0x9f,0x4a,0xd4,0xe2,0x4d,0xdb,0x5c,0x3c,0xbb,0xee,0xc5,0x80,0xb1,0x17,0xb3,0x9a,0xd0,0xb9,0x04,0x3f,0xa7,0x58,0x82,0xda,0xf7,0x9a,0xa3};
    std::uint8_t multiplicand59[32] = {0xba,0x1b,0xa5,0x62,0xc4,0x0c,0x30,0x1f,0x96,0xfa,0x7a,0xbe,0x8a,0xb5,0x8d,0xe1,0x0e,0xae,0xd1,0x24,0xda,0x07,0x22,0x6f,0x80,0x48,0x59,0xdb,0x41,0xe5,0x82,0xdc};
    std::uint8_t product59[32]      = {0x86,0xfe,0x7b,0xe0,0x6f,0xd0,0xb5,0x54,0xe4,0x38,0xdc,0x61,0xad,0xbf,0xbb,0xce,0x7f,0xa9,0x57,0xfd,0xb2,0x4c,0x14,0x34,0x88,0x5f,0xa0,0xe5,0x74,0x36,0x55,0xfd};
    mont256_from_bytes(&ctx, multiplier, multiplier59);
    mont256_from_bytes(&ctx, multiplicand, multiplicand59);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product59, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier60[32]   = {0x47,0xdc,0x5e,0x66,0xf5,0x31,0x83,0x37,0x81,0x2a,0x1c,0xba,0xf0,0xad,0x85,0x06,0x60,0xf1,0x79,0x92,0x0e,0x5a,0x36,0xc9,0x36,0xe4,0xb1,0xc2,0x01,0x84,0xbb,0xbc};
    std::uint8_t multiplicand60[32] = {0x80,0x4a,0x30,0xcc,0x32,0xe9,0xab,0x51,0xc9,0xa8,0x3d,0x0b,0x78,0x8e,0xf7,0x85,0x07,0xb1,0x74,0x12,0x07,0xce,0x0b,0xd8,0x91,0x5d,0x28,0xfb,0xc6,0x88,0x48,0xe8};
    std::uint8_t product60[32]      = {0xc1,0x14,0xae,0xab,0xe4,0xf8,0x2a,0xec,0xbc,0x11,0xf0,0x71,0x4d,0xc9,0xd4,0xaa,0x4b,0x71,0x83,0x29,0xd5,0x18,0x8b,0xcb,0xd3,0xa7,0x86,0xd7,0x18,0xa0,0x4a,0xd4};
    mont256_from_bytes(&ctx, multiplier, multiplier60);
    mont256_from_bytes(&ctx, multiplicand, multiplicand60);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product60, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier61[32]   = {0x18,0xec,0xbe,0xbf,0x28,0xaf,0xc2,0x5e,0xb6,0x9c,0x9c,0xda,0xcf,0x82,0x75,0x1a,0xc5,0x5a,0xe5,0xf7,0x56,0xa6,0x82,0xc9,0x79,0x68,0x01,0xa1,0x6a,0x41,0x88,0xec};
    std::uint8_t multiplicand61[32] = {0x64,0x6f,0x10,0x17,0x46,0x98,0xce,0x74,0xce,0xa3,0x8e,0xef,0x66,0x83,0x24,0x07,0xab,0x01,0xe9,0xd1,0xf6,0xd6,0xb9,0x1f,0x8e,0xf8,0x80,0x73,0x91,0x7f,0x41,0x9e};
    std::uint8_t product61[32]      = {0xc4,0xcf,0x13,0x48,0x9f,0xf2,0xde,0x66,0xb1,0x6f,0x8d,0x2f,0xa1,0x5b,0x97,0x18,0xae,0xc1,0x44,0x26,0x6b,0x0c,0x56,0x52,0x7b,0x6e,0x8c,0xc3,0x2c,0xc4,0x47,0x6f};
    mont256_from_bytes(&ctx, multiplier, multiplier61);
    mont256_from_bytes(&ctx, multiplicand, multiplicand61);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product61, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier62[32]   = {0xcb,0x29,0x94,0xbf,0xde,0x9a,0x5a,0x3e,0x7b,0x6a,0x00,0x50,0xe9,0x70,0x16,0x97,0x61,0x46,0x40,0xfd,0x34,0x42,0x04,0x37,0x35,0x33,0x39,0xd7,0x44,0x0f,0x01,0xb1};
    std::uint8_t multiplicand62[32] = {0x24,0x1b,0xe9,0x71,0x19,0xd6,0xdb,0x72,0x10,0xdd,0x7f,0x76,0x2e,0xcb,0x06,0xa7,0xb4,0x07,0xb7,0x40,0x51,0xab,0x19,0x8c,0x44,0x4c,0xd1,0x45,0xe3,0x66,0xb5,0x2f};
    std::uint8_t product62[32]      = {0xe7,0x9c,0xc2,0x7e,0x2a,0xa2,0x99,0xc4,0x1e,0xdb,0x2f,0x2e,0xed,0xf7,0xa8,0xed,0x62,0xf3,0x80,0xba,0x69,0x52,0x10,0xf6,0x92,0x1f,0xc5,0xd1,0x34,0x83,0x7d,0x02};
    mont256_from_bytes(&ctx, multiplier, multiplier62);
    mont256_from_bytes(&ctx, multiplicand, multiplicand62);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product62, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier63[32]   = {0x70,0x5c,0x6b,0xd1,0x04,0x6d,0xa9,0x2d,0x88,0x72,0xef,0x09,0x5e,0xcc,0x1e,0x31,0x94,0x56,0x45,0xaf,0x2d,0x3e,0x9f,0x7c,0xf2,0xd8,0xb1,0xa9,0x14,0x26,0xba,0xf4};
    std::uint8_t multiplicand63[32] = {0x64,0xa2,0x99,0x6f,0x17,0x45,0xd8,0x1f,0x5d,0x73,0x83,0x82,0x6a,0x44,0x5d,0x42,0xe3,0x19,0x8f,0x8d,0x6e,0x2b,0xaa,0x12,0xc5,0x92,0x28,0x3e,0xe1,0xe7,0xf5,0xcb};
    std::uint8_t product63[32]      = {0xb7,0xe7,0xa3,0xb8,0x14,0x76,0x34,0x39,0x8d,0xe1,0xb8,0xda,0x73,0x08,0x2c,0xb0,0x2d,0x22,0x93,0x79,0xc1,0xf9,0xcb,0x2f,0x88,0x25,0xb6,0x1b,0x4a,0x50,0xa7,0x1f};
    mont256_from_bytes(&ctx, multiplier, multiplier63);
    mont256_from_bytes(&ctx, multiplicand, multiplicand63);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product63, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier64[32]   = {0x5d,0x29,0xc6,0xff,0x2e,0x98,0x68,0x3a,0x50,0xd7,0x49,0x35,0x51,0x26,0x9b,0x59,0x6d,0x19,0x45,0x26,0x06,0xa4,0xd7,0x33,0xa4,0x58,0x6a,0x58,0xfe,0x7e,0xd0,0x7d};
    std::uint8_t multiplicand64[32] = {0x27,0x78,0x27,0x23,0xf4,0xbd,0x0c,0x65,0xe4,0xd5,0xb2,0xb1,0x9c,0x2d,0x9f,0x14,0x77,0x13,0xef,0xd4,0x4a,0xf9,0x62,0x43,0xe4,0x69,0x0f,0xb9,0xfe,0x2e,0x37,0x10};
    std::uint8_t product64[32]      = {0xc0,0xdb,0x38,0x06,0xa0,0x48,0x1d,0xfd,0xd3,0x0c,0xcf,0x40,0xec,0x16,0x74,0xb8,0xae,0x46,0x01,0xfb,0xfe,0x96,0xed,0xf6,0x54,0x01,0x8c,0x79,0xe1,0xa0,0x42,0x50};
    mont256_from_bytes(&ctx, multiplier, multiplier64);
    mont256_from_bytes(&ctx, multiplicand, multiplicand64);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product64, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier65[32]   = {0x5f,0x29,0xef,0x89,0x06,0x17,0x80,0x2f,0x55,0xba,0xd6,0x14,0xd2,0x40,0xe9,0xf9,0x5e,0x41,0xe0,0x89,0x33,0x14,0x6a,0x33,0xea,0xff,0x70,0x2b,0x7c,0x6f,0xf8,0x21};
    std::uint8_t multiplicand65[32] = {0x26,0xda,0x2d,0x39,0x05,0xa0,0xe9,0x1b,0xf8,0x06,0x5d,0x61,0x76,0xbd,0xed,0x6e,0x65,0x9c,0xf5,0x11,0x71,0xa1,0xe5,0xb6,0x16,0x42,0xb4,0x78,0x18,0x6a,0x15,0xcc};
    std::uint8_t product65[32]      = {0x1c,0xbb,0x01,0xfe,0xb2,0xc1,0xd1,0xd7,0x18,0xc6,0xce,0xe6,0x2b,0x26,0xee,0x10,0x65,0x28,0x72,0x67,0x60,0xdc,0xa9,0xf7,0x00,0xe5,0x39,0xbd,0x65,0x99,0x18,0x36};
    mont256_from_bytes(&ctx, multiplier, multiplier65);
    mont256_from_bytes(&ctx, multiplicand, multiplicand65);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product65, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier66[32]   = {0x1a,0x60,0x8d,0x17,0x0d,0x27,0x0a,0xbc,0x75,0xc7,0xe5,0x5b,0x19,0xcc,0xe2,0xf8,0xa0,0x32,0x6c,0x28,0xb0,0xe9,0x8e,0x21,0xfe,0xfd,0x12,0x01,0x8b,0x5b,0x45,0xa0};
    std::uint8_t multiplicand66[32] = {0xbc,0xed,0x42,0x9e,0x0d,0xab,0x87,0x48,0x3d,0x6e,0xf8,0x3f,0x0f,0xdc,0x9c,0xa4,0x4c,0x5e,0xa3,0x95,0x99,0xd2,0x48,0xde,0xc5,0x90,0x14,0x33,0xac,0xa0,0x83,0x54};
    std::uint8_t product66[32]      = {0xb7,0xa6,0x25,0x5d,0x14,0x7a,0xf5,0xcf,0x24,0x94,0x27,0x75,0xa9,0x50,0x86,0xed,0x55,0x8d,0xb1,0x78,0xc5,0xc4,0x57,0x05,0x89,0x59,0x20,0x2e,0xfb,0x12,0x47,0xef};
    mont256_from_bytes(&ctx, multiplier, multiplier66);
    mont256_from_bytes(&ctx, multiplicand, multiplicand66);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product66, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier67[32]   = {0x30,0x30,0x59,0x7b,0x3d,0x95,0xe0,0x75,0xa3,0x22,0x57,0xc0,0x63,0xda,0x1b,0x16,0x9b,0xcd,0x8e,0x61,0x62,0x02,0xbf,0x34,0x17,0xe5,0x8e,0x7f,0x53,0x61,0xd0,0x2c};
    std::uint8_t multiplicand67[32] = {0x3c,0x8a,0x8d,0x4f,0x11,0xf9,0xdc,0x04,0x14,0x77,0xd2,0x8a,0xb0,0xec,0x58,0xd7,0x7e,0xb3,0x96,0x49,0x5b,0x1a,0x3b,0xf8,0x5f,0x59,0x97,0xc9,0xff,0x55,0x6e,0x27};
    std::uint8_t product67[32]      = {0xca,0x7f,0x6a,0x3f,0x24,0x23,0xce,0xa4,0x39,0x16,0x25,0x2d,0x4b,0x6f,0x2c,0x54,0xe4,0x88,0x3c,0x76,0xa4,0xd6,0x68,0xce,0x2c,0xfb,0x81,0x8c,0xaa,0xda,0x4e,0x3a};
    mont256_from_bytes(&ctx, multiplier, multiplier67);
    mont256_from_bytes(&ctx, multiplicand, multiplicand67);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product67, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier68[32]   = {0x3c,0xd8,0x6f,0x4f,0xa8,0x5f,0x21,0x16,0x21,0x97,0xc5,0xc5,0x17,0x60,0xaa,0x00,0x46,0x92,0x2e,0x2f,0x08,0x7e,0xae,0x7c,0xa0,0xcc,0xb5,0xba,0xab,0x1a,0x42,0x63};
    std::uint8_t multiplicand68[32] = {0x2b,0x8f,0x13,0x0d,0xdf,0xc3,0xcd,0xf0,0xb9,0x2e,0x02,0x12,0xc2,0x2e,0xa2,0x00,0xef,0x38,0x52,0xeb,0x77,0x28,0x53,0x4c,0xbc,0x39,0x0a,0xe8,0x6d,0x4a,0x19,0x51};
    std::uint8_t product68[32]      = {0x4c,0x35,0xa4,0x0b,0xb5,0xba,0xe3,0xf7,0x61,0xc0,0xdb,0x61,0xc3,0xbf,0xa8,0x32,0xad,0x8e,0x0d,0xde,0x3d,0x76,0xdf,0x0d,0x88,0xe7,0x93,0xc8,0x0d,0x78,0x8c,0x93};
    mont256_from_bytes(&ctx, multiplier, multiplier68);
    mont256_from_bytes(&ctx, multiplicand, multiplicand68);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product68, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier69[32]   = {0x1e,0xd3,0x7b,0x02,0x31,0xe8,0x33,0xa8,0x0c,0xee,0xc1,0xda,0xcb,0xf2,0xdd,0xd9,0xdc,0xed,0xbf,0x6a,0xbc,0xad,0x1a,0x1b,0xd0,0xb0,0x49,0xdc,0xfb,0x8c,0x5f,0xd1};
    std::uint8_t multiplicand69[32] = {0xd7,0x51,0xb7,0x98,0x24,0x52,0x8a,0xac,0xea,0xa6,0xfb,0x75,0x99,0x0e,0xcd,0xab,0xa7,0xc3,0x3d,0x84,0xab,0x04,0xd4,0x93,0xe1,0x61,0xeb,0xd6,0xbb,0x1f,0x62,0x4b};
    std::uint8_t product69[32]      = {0xb1,0x36,0x23,0x3f,0x2f,0xc5,0x6e,0xd4,0x52,0xf4,0x7f,0xfd,0x5b,0x33,0x1e,0xac,0x76,0x5d,0x53,0xb1,0xa8,0xd7,0x99,0xe2,0xc7,0x1a,0x72,0x50,0x89,0xf2,0x20,0x9f};
    mont256_from_bytes(&ctx, multiplier, multiplier69);
    mont256_from_bytes(&ctx, multiplicand, multiplicand69);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product69, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier70[32]   = {0xf3,0x35,0x00,0xd8,0x91,0xd6,0x80,0x61,0xce,0xa8,0xf6,0x88,0xcf,0xf6,0xcf,0xa3,0x24,0xc3,0xa1,0xe1,0xff,0x46,0x43,0xac,0x65,0x19,0x2e,0xfb,0x9c,0x45,0xb3,0x6a};
    std::uint8_t multiplicand70[32] = {0x32,0x46,0x52,0xf9,0x3d,0x31,0x39,0xdf,0x11,0xc9,0x5e,0xa0,0x3a,0xd6,0x07,0xcd,0x51,0x4f,0xd4,0xa0,0x60,0x40,0xa0,0x59,0xfe,0x30,0x01,0xb3,0x1e,0x2c,0x86,0xdc};
    std::uint8_t product70[32]      = {0x17,0x48,0xbe,0x0f,0xf8,0xc7,0xf5,0x40,0xa7,0xfb,0xd3,0xe4,0x56,0x75,0x2e,0x35,0x36,0xa0,0x94,0xa9,0x28,0x02,0x9c,0xa2,0xc7,0x78,0x6d,0x8b,0xab,0xa9,0x92,0xfa};
    mont256_from_bytes(&ctx, multiplier, multiplier70);
    mont256_from_bytes(&ctx, multiplicand, multiplicand70);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product70, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier71[32]   = {0x6a,0x5a,0xb5,0x32,0x22,0xe1,0xbe,0xd8,0x01,0x61,0x24,0x7e,0x88,0x3e,0xf8,0x89,0xb7,0xca,0x75,0x48,0xc8,0x52,0x16,0xf4,0x59,0xf2,0xcf,0x64,0xfc,0x2d,0x91,0x90};
    std::uint8_t multiplicand71[32] = {0x5b,0xc1,0x7e,0xd0,0xa6,0x87,0x4e,0xec,0xae,0x37,0x04,0xe7,0x8e,0xe2,0x16,0x60,0x1b,0x9b,0xfc,0x62,0x7a,0xa8,0x2a,0x8a,0x7f,0xc4,0xa6,0x44,0x24,0x4f,0xd1,0x63};
    std::uint8_t product71[32]      = {0xc9,0x73,0x18,0x44,0x03,0x4d,0x19,0x09,0xf2,0x51,0xb5,0xe1,0xf8,0x93,0x0b,0x60,0x12,0xb1,0xb8,0x72,0x9c,0xaa,0x6c,0x28,0x98,0x84,0x2d,0x4e,0x65,0x72,0x81,0x57};
    mont256_from_bytes(&ctx, multiplier, multiplier71);
    mont256_from_bytes(&ctx, multiplicand, multiplicand71);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product71, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier72[32]   = {0x9d,0xf2,0xc7,0x69,0x0d,0xfc,0x01,0xb1,0xc2,0x50,0xdd,0x5f,0x92,0x82,0x2e,0xf3,0xb2,0x0e,0x6a,0x5f,0xbe,0xc9,0x7b,0x32,0xfd,0xdd,0xe8,0x88,0xec,0x11,0x96,0x45};
    std::uint8_t multiplicand72[32] = {0xdc,0x0d,0x7e,0xc5,0x36,0xa8,0x82,0x68,0x1b,0x60,0xd4,0x71,0xba,0x4b,0x59,0xe7,0x3d,0x23,0x15,0x60,0xaa,0x69,0x7a,0xbe,0x51,0x94,0xe8,0x5a,0xed,0x5e,0x64,0x27};
    std::uint8_t product72[32]      = {0x4d,0x61,0xb5,0x53,0xd1,0x83,0x52,0xc6,0x3f,0xa8,0x23,0xa1,0xf2,0xbb,0x9a,0x02,0x40,0x23,0x07,0x85,0x7d,0xbd,0x9c,0xc7,0x5f,0xe6,0x9f,0x5c,0xfc,0xc9,0x64,0x5d};
    mont256_from_bytes(&ctx, multiplier, multiplier72);
    mont256_from_bytes(&ctx, multiplicand, multiplicand72);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product72, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier73[32]   = {0xcf,0xf5,0xea,0x4f,0xdb,0x8c,0x43,0xc6,0x1c,0xed,0x18,0x27,0xb2,0x1c,0xad,0xb1,0xa1,0x85,0xea,0xbc,0x33,0xc3,0x78,0x2e,0x6e,0xdd,0xec,0x6c,0x8a,0xdd,0xe7,0x2f};
    std::uint8_t multiplicand73[32] = {0x75,0xdf,0x73,0xc1,0x0f,0x4e,0x7e,0x56,0xda,0x01,0x63,0x06,0x73,0x90,0x4e,0xeb,0x41,0x86,0xa7,0x85,0xa6,0x9e,0x75,0x09,0x94,0x9b,0x97,0x11,0x27,0x91,0x51,0x88};
    std::uint8_t product73[32]      = {0xb7,0x90,0xe2,0x89,0x14,0x75,0x6c,0x79,0x73,0x1c,0xa2,0x88,0xb4,0xc8,0xc5,0x7a,0xe2,0xbf,0x7d,0x97,0xd2,0x33,0x64,0xbb,0xd9,0x25,0xcc,0x5c,0xb4,0x67,0xe9,0xc6};
    mont256_from_bytes(&ctx, multiplier, multiplier73);
    mont256_from_bytes(&ctx, multiplicand, multiplicand73);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product73, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier74[32]   = {0xe5,0x6e,0xac,0xc8,0x1c,0x81,0x46,0x05,0xc3,0x4a,0xfd,0x6e,0xf3,0x7d,0x4d,0x9f,0xa3,0xe9,0x2c,0xe5,0xf4,0x13,0x11,0x00,0xca,0x7b,0x71,0x32,0xa9,0x4b,0x0a,0xfc};
    std::uint8_t multiplicand74[32] = {0xfa,0x0e,0x59,0x5a,0x5e,0x1b,0xf2,0xca,0xdf,0x67,0xc9,0x66,0x33,0x90,0x67,0xde,0x82,0xb2,0xb4,0x86,0x5c,0x18,0x4e,0x07,0x55,0x6f,0x11,0x1e,0x1c,0xad,0x7b,0x0e};
    std::uint8_t product74[32]      = {0xf1,0x3d,0x7e,0x21,0x00,0xe1,0xe7,0x02,0x08,0x4e,0x1d,0x5c,0x44,0xc2,0x88,0x32,0xd4,0xab,0x69,0xa1,0x0c,0xa1,0xfa,0x18,0x63,0x37,0xdf,0x44,0xd6,0xbc,0x7e,0x4c};
    mont256_from_bytes(&ctx, multiplier, multiplier74);
    mont256_from_bytes(&ctx, multiplicand, multiplicand74);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product74, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier75[32]   = {0xf3,0xc9,0x2a,0x75,0x8b,0x93,0x8f,0xf1,0x66,0xd3,0x1a,0x0e,0x2a,0xe7,0x55,0x45,0x27,0x0c,0x39,0x25,0x57,0x7b,0xe4,0xf6,0x18,0x35,0x8b,0x6f,0x50,0x03,0xfb,0x03};
    std::uint8_t multiplicand75[32] = {0x87,0x72,0x27,0x30,0xd0,0x3f,0x4c,0xe1,0xd6,0xf0,0x13,0x66,0x41,0x39,0x4d,0xf8,0x52,0xad,0x51,0xc8,0xa8,0x3a,0x0f,0x82,0x29,0xa7,0xad,0xa8,0x83,0xa5,0xdf,0x0d};
    std::uint8_t product75[32]      = {0x4a,0x7f,0xd7,0x4f,0xbb,0x0d,0x8e,0xb0,0xf2,0x80,0xd7,0x12,0x54,0x69,0x9e,0xd9,0x69,0x1c,0xef,0x8d,0xbb,0xeb,0x4d,0xc7,0xb5,0x8f,0x7a,0xf7,0x64,0x9e,0x5a,0x78};
    mont256_from_bytes(&ctx, multiplier, multiplier75);
    mont256_from_bytes(&ctx, multiplicand, multiplicand75);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product75, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier76[32]   = {0x10,0x94,0x49,0xfe,0x1d,0x91,0x43,0x84,0x2a,0xc9,0x3c,0x97,0xe1,0x5c,0xaa,0x83,0x70,0x90,0xe3,0x0c,0x3d,0x01,0x15,0x06,0x82,0xd7,0x01,0xd6,0xc4,0x33,0x9f,0x7d};
    std::uint8_t multiplicand76[32] = {0x2b,0x1f,0x9d,0xdc,0xc3,0x9a,0xda,0x6d,0x2c,0xe9,0x71,0x1f,0x45,0x1c,0x50,0x02,0x9b,0xe8,0x19,0x85,0x37,0x25,0xd2,0xb6,0x81,0x8d,0x85,0x80,0xb6,0xdd,0x32,0xfd};
    std::uint8_t product76[32]      = {0x69,0x28,0x13,0xc6,0x47,0x1b,0x5f,0xbb,0x47,0xf9,0xef,0x2e,0xd1,0x08,0x4a,0x00,0x2f,0xf2,0x86,0x72,0x7b,0x16,0xe4,0x3f,0x46,0x57,0x9b,0x6f,0x48,0xc3,0xef,0x4d};
    mont256_from_bytes(&ctx, multiplier, multiplier76);
    mont256_from_bytes(&ctx, multiplicand, multiplicand76);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product76, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier77[32]   = {0x66,0x8d,0xb6,0x42,0xfc,0xef,0x5d,0x43,0x26,0x18,0xeb,0xd3,0xb2,0xdf,0xd9,0x52,0x77,0x74,0x6b,0xd1,0x9c,0xec,0x65,0x83,0xd6,0x71,0x67,0xb2,0xc8,0x24,0xaa,0xdd};
    std::uint8_t multiplicand77[32] = {0xa1,0xd8,0xfb,0x01,0xcf,0xfd,0x60,0x6a,0x50,0xcd,0x3f,0xe1,0x4b,0x09,0x35,0x6d,0xae,0x87,0xd1,0x49,0x19,0x16,0x41,0xb7,0x06,0xa6,0x67,0x0b,0x63,0xcf,0x98,0x70};
    std::uint8_t product77[32]      = {0x44,0xb7,0x68,0xd3,0xcb,0x56,0xac,0x88,0xda,0x97,0x7a,0xd7,0x61,0x91,0x36,0xa1,0x24,0x8e,0xae,0x73,0xc0,0xe8,0x9a,0x07,0x80,0x92,0x0c,0x27,0xde,0x6d,0xbb,0xf4};
    mont256_from_bytes(&ctx, multiplier, multiplier77);
    mont256_from_bytes(&ctx, multiplicand, multiplicand77);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product77, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier78[32]   = {0xc3,0x9d,0xb4,0x67,0x0f,0x9d,0xab,0xd6,0x38,0x37,0x7f,0xc9,0xa7,0x7f,0xcd,0x7c,0xca,0xe8,0x2c,0x63,0x2e,0x0c,0xc4,0x3f,0x02,0x79,0x8b,0xa2,0x2c,0xf1,0x95,0x57};
    std::uint8_t multiplicand78[32] = {0xa5,0x3b,0xc9,0x50,0x0d,0xd8,0x83,0x40,0x9f,0xa0,0x1f,0xa6,0xeb,0x34,0xc1,0x9c,0x77,0x28,0xd0,0x3c,0xa3,0x7e,0x93,0x55,0xa6,0x8b,0xfd,0x89,0x1d,0x70,0xc5,0xcc};
    std::uint8_t product78[32]      = {0x09,0xc6,0xf7,0xca,0xfc,0x1d,0x10,0x7e,0x25,0x38,0x2a,0x45,0xc7,0x67,0xc1,0xb4,0x7e,0x8c,0x42,0x3b,0xf3,0x49,0x15,0x0b,0xa5,0x5b,0x01,0x2f,0xbc,0x29,0x40,0x74};
    mont256_from_bytes(&ctx, multiplier, multiplier78);
    mont256_from_bytes(&ctx, multiplicand, multiplicand78);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product78, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier79[32]   = {0x4f,0xc7,0xcc,0x4a,0x8b,0x46,0x4e,0xe2,0x94,0x8e,0x86,0x8d,0x64,0xdf,0xb6,0x6f,0x4a,0x33,0x54,0x71,0xe7,0x12,0x52,0xb1,0xb9,0x19,0xe8,0x53,0xea,0x79,0xd0,0x1b};
    std::uint8_t multiplicand79[32] = {0x02,0xb1,0x89,0x36,0x6d,0xad,0xaf,0xa2,0x1e,0xe2,0x74,0xad,0x4d,0xce,0x77,0x01,0xd8,0x0a,0xdb,0xf2,0x38,0x4d,0xe6,0x3f,0x1e,0x0d,0x9b,0x67,0xa4,0xad,0xfd,0xc8};
    std::uint8_t product79[32]      = {0xdd,0x0e,0x14,0x77,0x66,0xbe,0xfd,0xb5,0x7a,0xc4,0xe1,0xfc,0x40,0xaa,0xda,0x0a,0xa9,0xe1,0x6e,0xd3,0x66,0x54,0x60,0xd8,0x17,0xf5,0xe1,0x14,0x80,0xc5,0x06,0x58};
    mont256_from_bytes(&ctx, multiplier, multiplier79);
    mont256_from_bytes(&ctx, multiplicand, multiplicand79);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product79, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier80[32]   = {0x57,0x11,0xef,0x89,0x9d,0x4b,0x4a,0xf5,0xb1,0x73,0x74,0x6a,0x0a,0x86,0x3c,0x58,0x88,0xe4,0xe4,0x50,0xc9,0xd2,0xc2,0x1d,0xe9,0xe7,0x89,0x92,0x37,0xc8,0x52,0x3c};
    std::uint8_t multiplicand80[32] = {0x4b,0xf3,0xa5,0xe0,0xcc,0xc5,0xf0,0x21,0x3d,0x38,0x15,0x42,0x84,0x15,0xe5,0xac,0xbf,0xb4,0xeb,0x50,0x2a,0x17,0xd5,0x3f,0x33,0x93,0xbe,0xd5,0xaf,0xbb,0x6e,0xc5};
    std::uint8_t product80[32]      = {0x8c,0xcd,0x2d,0xf9,0x2b,0x78,0x6b,0x88,0x85,0x4e,0x53,0x9c,0xaa,0xef,0x12,0x06,0x91,0x32,0x19,0xad,0xfb,0x71,0xb3,0xf3,0x2d,0x32,0x10,0x6a,0x64,0x39,0xc3,0xc6};
    mont256_from_bytes(&ctx, multiplier, multiplier80);
    mont256_from_bytes(&ctx, multiplicand, multiplicand80);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product80, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier81[32]   = {0x5e,0x52,0x3f,0x30,0x5a,0xd6,0xaf,0x44,0xa7,0x7f,0xe8,0x17,0x98,0x40,0xa6,0x24,0x00,0xd7,0xea,0xb3,0xd2,0x74,0x26,0x14,0x25,0xcd,0xe9,0x89,0xc0,0xee,0x4c,0xc5};
    std::uint8_t multiplicand81[32] = {0x19,0xbf,0x96,0xe2,0x48,0x6f,0x36,0xe6,0x02,0xc9,0x1c,0x7d,0x37,0x77,0x2e,0xbe,0x19,0x65,0x3b,0x57,0x1e,0x26,0x9c,0x0d,0xde,0xa2,0x39,0xe3,0xca,0xb3,0xaa,0xed};
    std::uint8_t product81[32]      = {0x6a,0x3b,0x29,0x82,0x48,0x4d,0x09,0x80,0x74,0x6e,0x0b,0x95,0xef,0x8b,0x4e,0x66,0x5d,0x98,0x17,0x75,0x2b,0xcf,0x0e,0xe3,0xcf,0x83,0xd6,0x40,0xc3,0x7b,0xbe,0x57};
    mont256_from_bytes(&ctx, multiplier, multiplier81);
    mont256_from_bytes(&ctx, multiplicand, multiplicand81);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product81, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier82[32]   = {0x1a,0x04,0xf9,0x92,0x9c,0xac,0x26,0xb4,0xac,0x0c,0xd3,0x98,0x9e,0x93,0x8e,0xce,0x5c,0x29,0x40,0xb0,0x32,0xae,0x2d,0x74,0xc1,0x23,0xf2,0x51,0x0d,0x0f,0x06,0x9b};
    std::uint8_t multiplicand82[32] = {0xd0,0x29,0x59,0x21,0xbb,0xc7,0x38,0x74,0xaa,0xc0,0x5d,0xdf,0x25,0x72,0x78,0x70,0xc7,0x60,0xe9,0x2b,0x3d,0x02,0x11,0x9e,0x3e,0xcd,0xb5,0xf9,0x46,0x6c,0xe9,0xfb};
    std::uint8_t product82[32]      = {0x6a,0xba,0x66,0xf0,0xe8,0x15,0x20,0xd1,0xae,0xea,0xd6,0x71,0x8a,0xec,0x7e,0x24,0xd0,0x08,0x96,0x8a,0x81,0xeb,0x55,0x08,0xcb,0x84,0xe1,0x7f,0xa7,0x14,0x2a,0x5d};
    mont256_from_bytes(&ctx, multiplier, multiplier82);
    mont256_from_bytes(&ctx, multiplicand, multiplicand82);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product82, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier83[32]   = {0xb2,0x30,0x1e,0x5d,0x7c,0xa0,0xda,0x91,0xfb,0x6a,0xda,0x76,0x64,0x61,0xad,0x2c,0xc0,0xb6,0x14,0xe0,0x1a,0xc2,0xd9,0x5d,0x7f,0x6f,0x70,0xfe,0x5c,0x18,0xe4,0xd6};
    std::uint8_t multiplicand83[32] = {0x36,0xe3,0x5d,0x79,0xac,0xa7,0x22,0xe6,0x43,0xd8,0xa9,0x91,0xc1,0x2d,0xcb,0x5c,0xec,0x84,0xd7,0x3f,0x02,0x76,0x06,0x47,0xef,0x07,0x81,0x77,0x84,0xc6,0xdb,0x74};
    std::uint8_t product83[32]      = {0xac,0x85,0x16,0xfb,0x4c,0xdd,0x32,0xbe,0x8e,0x24,0x96,0x05,0x23,0xe6,0xce,0xa6,0x4e,0xe2,0x70,0x63,0x70,0x64,0xa1,0xce,0xa1,0xa1,0x3a,0x22,0xcc,0x59,0xa5,0xa2};
    mont256_from_bytes(&ctx, multiplier, multiplier83);
    mont256_from_bytes(&ctx, multiplicand, multiplicand83);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product83, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier84[32]   = {0xe4,0x16,0x84,0x45,0x32,0x3f,0x1c,0x12,0x27,0x27,0x76,0x47,0xb6,0xef,0xc5,0x1d,0xdd,0x0f,0x3a,0x42,0xd6,0xfd,0x9b,0xa5,0xed,0x09,0xf8,0x84,0xf9,0xea,0xa2,0x78};
    std::uint8_t multiplicand84[32] = {0x43,0x6c,0x64,0x3f,0x2a,0x63,0x6f,0xc1,0xb4,0xc9,0x0a,0x94,0x91,0x92,0xde,0x7f,0x45,0xc4,0x85,0x6a,0x4e,0x8b,0xcd,0x78,0x43,0x8e,0x4a,0xc9,0x0f,0x6f,0x9f,0x7d};
    std::uint8_t product84[32]      = {0x4a,0x53,0xc2,0x37,0x5e,0xba,0xd8,0x01,0xac,0x0a,0x3c,0x39,0x69,0x81,0x55,0x8d,0x8b,0xe3,0xaf,0x50,0x25,0xed,0x15,0x65,0xd9,0x02,0xe1,0xc2,0x90,0xba,0xfe,0xe9};
    mont256_from_bytes(&ctx, multiplier, multiplier84);
    mont256_from_bytes(&ctx, multiplicand, multiplicand84);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product84, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier85[32]   = {0xae,0x1c,0x8d,0x0c,0x28,0x26,0x85,0x2c,0x4a,0x67,0xf0,0x6b,0xa2,0xa0,0xcd,0x7b,0x56,0xb3,0xd5,0x79,0xa6,0xfd,0xeb,0xd9,0x7d,0xee,0x06,0x35,0x71,0xd7,0x51,0x9e};
    std::uint8_t multiplicand85[32] = {0x88,0x5c,0xe7,0x7a,0x40,0xe1,0xd2,0x7f,0x1a,0xca,0x65,0xc9,0xf7,0x30,0xac,0x96,0x38,0xbf,0xb5,0xab,0xe5,0xfa,0x5f,0xda,0x1d,0x9e,0xa6,0x23,0xbd,0xab,0x68,0x05};
    std::uint8_t product85[32]      = {0x3d,0xc9,0x3f,0x61,0xea,0x6e,0xe0,0x62,0xcc,0x3f,0x36,0x96,0x9f,0x7e,0xc2,0xcd,0xfb,0x83,0x98,0x94,0xd5,0x4b,0xcc,0x3d,0x8b,0x97,0x25,0x86,0xc4,0x72,0x38,0x2c};
    mont256_from_bytes(&ctx, multiplier, multiplier85);
    mont256_from_bytes(&ctx, multiplicand, multiplicand85);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product85, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier86[32]   = {0xff,0xbe,0x7e,0xcc,0x28,0x35,0x8b,0xa0,0x7b,0x90,0x56,0xa8,0x89,0x17,0x06,0xd7,0x01,0x3b,0x57,0x75,0xc8,0x7a,0x99,0x24,0x52,0x0b,0x1c,0xae,0x34,0xcb,0x62,0xfe};
    std::uint8_t multiplicand86[32] = {0x7a,0x55,0x30,0x91,0xbd,0x69,0x76,0x8f,0x8f,0x51,0x3c,0x8e,0x78,0xa6,0xdf,0x73,0x3d,0x41,0xa9,0x08,0xaf,0x5a,0x91,0x53,0x02,0xa3,0xb4,0x63,0x1d,0xce,0x3a,0xa3};
    std::uint8_t product86[32]      = {0x21,0xfb,0x3d,0x3c,0x80,0x5f,0x2f,0x9c,0x13,0xab,0x36,0x7e,0xbe,0x4a,0x6b,0x9e,0x75,0xb3,0x47,0xe7,0x83,0x3d,0x51,0x1f,0x66,0xf8,0x8f,0x4c,0x06,0x4a,0xc7,0x56};
    mont256_from_bytes(&ctx, multiplier, multiplier86);
    mont256_from_bytes(&ctx, multiplicand, multiplicand86);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product86, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier87[32]   = {0xa4,0x5e,0x9c,0x8e,0x71,0xdb,0x69,0xef,0x4d,0x0a,0x1a,0xa0,0x6f,0x50,0x88,0x2d,0x66,0xb0,0xce,0x95,0x02,0x1a,0x79,0x89,0xeb,0x56,0x54,0xa8,0xc0,0x44,0xf3,0x96};
    std::uint8_t multiplicand87[32] = {0x77,0x27,0x99,0x41,0x3d,0xc2,0xcd,0x07,0xff,0x64,0x4f,0xdc,0x91,0x08,0x61,0x6b,0xe1,0xc9,0x35,0x7e,0x01,0x88,0x7a,0xa8,0xbb,0x99,0x1c,0x48,0x60,0xd1,0x30,0x80};
    std::uint8_t product87[32]      = {0xbe,0x60,0xf3,0xdc,0xc0,0x93,0x7a,0x38,0x3e,0x68,0xc9,0x23,0xc2,0x7c,0x1c,0x8d,0x7a,0x0f,0x57,0x9a,0x28,0x3a,0x18,0x04,0x86,0x61,0xde,0xb3,0x4c,0x2b,0x4c,0x0d};
    mont256_from_bytes(&ctx, multiplier, multiplier87);
    mont256_from_bytes(&ctx, multiplicand, multiplicand87);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product87, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier88[32]   = {0x41,0x4f,0xf8,0x2f,0xc1,0x5a,0x49,0xf9,0x73,0x99,0xe6,0xc2,0x3d,0xe2,0xdf,0x96,0x00,0xc2,0xbf,0x17,0xd8,0xc3,0x03,0x1a,0xec,0x07,0x24,0x72,0x9a,0x32,0x52,0xd5};
    std::uint8_t multiplicand88[32] = {0x1b,0x14,0x52,0x1d,0xad,0xe9,0x16,0xf3,0x21,0xfe,0xa5,0x15,0xad,0x42,0x4f,0xb6,0x4f,0x0f,0xc4,0x43,0x02,0xbd,0xb9,0xfd,0x89,0x44,0xc2,0x39,0x90,0x09,0x0c,0xa8};
    std::uint8_t product88[32]      = {0xde,0x0f,0xe0,0x0a,0xf9,0x9c,0x02,0x8a,0x95,0x00,0xd1,0xb8,0x0c,0x01,0x02,0x9c,0x29,0x9a,0x01,0x2c,0xfb,0x6c,0xae,0xfb,0x70,0xfa,0xe5,0x2c,0x3e,0x96,0x5c,0x1c};
    mont256_from_bytes(&ctx, multiplier, multiplier88);
    mont256_from_bytes(&ctx, multiplicand, multiplicand88);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product88, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier89[32]   = {0x55,0xd6,0xac,0x2e,0x6a,0xc7,0x8b,0xc6,0x73,0x9b,0x70,0x7c,0x3a,0xf6,0x92,0xc6,0x7d,0x74,0x81,0x89,0xeb,0xbe,0x10,0x55,0x85,0x03,0xe5,0xb7,0xb0,0x8c,0xf9,0xae};
    std::uint8_t multiplicand89[32] = {0x72,0xdb,0x2a,0x38,0xc4,0x76,0x20,0xa2,0x6a,0xdf,0x06,0x98,0xc4,0x81,0x64,0x18,0x0a,0xb2,0xe7,0x6f,0x62,0x3a,0x7e,0x40,0x9e,0x81,0xc6,0xcc,0xe7,0x09,0xdf,0xef};
    std::uint8_t product89[32]      = {0xaf,0xa8,0xb0,0x09,0xe8,0x25,0x43,0x4b,0xd0,0xaa,0xf4,0xf4,0x69,0xf4,0x74,0x89,0xe3,0x0f,0xbf,0xa6,0x08,0x81,0x99,0x9a,0xe7,0xf0,0x9a,0x4e,0x50,0x8d,0xdc,0x40};
    mont256_from_bytes(&ctx, multiplier, multiplier89);
    mont256_from_bytes(&ctx, multiplicand, multiplicand89);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product89, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier90[32]   = {0x66,0x78,0x21,0x9e,0x6e,0x23,0x4f,0x5f,0xae,0xd0,0xf3,0xfd,0xcd,0x2b,0xac,0x90,0x25,0xf1,0x59,0x3d,0x36,0x70,0xd7,0x67,0x5f,0xb6,0xef,0xc1,0xb4,0xfe,0x33,0xaf};
    std::uint8_t multiplicand90[32] = {0x23,0x2b,0x4f,0xb7,0xb3,0x20,0xa6,0x48,0xa2,0x02,0x69,0xd4,0x65,0x63,0xd8,0x91,0x2f,0x9c,0x66,0x99,0x2d,0x9b,0xd4,0xcb,0x16,0xfa,0xc0,0xbd,0xe6,0x94,0xd9,0x74};
    std::uint8_t product90[32]      = {0x23,0xb4,0x41,0x42,0x65,0x3c,0x88,0x7e,0xc0,0xa5,0xe7,0x3d,0x5e,0xe4,0x22,0x5b,0xd7,0xe5,0x6c,0xec,0x86,0xb7,0xd5,0xb0,0x9c,0x4b,0xb6,0x3f,0x2e,0x50,0x6f,0x84};
    mont256_from_bytes(&ctx, multiplier, multiplier90);
    mont256_from_bytes(&ctx, multiplicand, multiplicand90);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product90, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier91[32]   = {0xc3,0xf7,0x16,0x41,0x3b,0x7c,0x30,0xc3,0xf0,0xea,0x33,0x2b,0x1f,0x96,0x29,0x52,0x2a,0x1b,0x72,0x19,0xcf,0xff,0xba,0x25,0x88,0x55,0x7a,0x49,0xed,0x54,0x8d,0x37};
    std::uint8_t multiplicand91[32] = {0x4d,0xf1,0x28,0xa3,0xcc,0x15,0x66,0x1d,0x59,0x3f,0x41,0x12,0xae,0x20,0x7f,0xae,0x47,0xab,0x4e,0x18,0x23,0x53,0x28,0xbd,0xb2,0x40,0x59,0xa3,0xba,0x67,0xa7,0x01};
    std::uint8_t product91[32]      = {0x1e,0xef,0x7c,0xef,0x1a,0xa8,0x96,0x34,0x8f,0x99,0x1d,0x08,0xfc,0x83,0x69,0x26,0xcc,0xe7,0xd2,0x27,0xc9,0xed,0x43,0x0a,0xd1,0x46,0x8f,0x85,0x88,0x20,0x54,0x42};
    mont256_from_bytes(&ctx, multiplier, multiplier91);
    mont256_from_bytes(&ctx, multiplicand, multiplicand91);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product91, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier92[32]   = {0x4e,0x37,0x6a,0x1e,0xdf,0x14,0xf9,0xfe,0x8a,0x29,0x3b,0x64,0xa2,0xc7,0x32,0x95,0x07,0x68,0x1b,0x7e,0x78,0xfe,0x27,0x5b,0xbe,0xc0,0xf6,0x4c,0x1b,0xdb,0xc3,0x5e};
    std::uint8_t multiplicand92[32] = {0x07,0x9d,0xfd,0x51,0x0b,0x3d,0xf2,0x90,0xb5,0x4e,0x62,0xc6,0xa4,0x9a,0x58,0x36,0x0b,0xa2,0xe7,0x81,0x55,0x25,0x9b,0x3b,0xd0,0x22,0x48,0xf1,0xf7,0x37,0xfb,0x8f};
    std::uint8_t product92[32]      = {0xea,0xc3,0xdc,0x7c,0xcd,0x25,0xc5,0x89,0x4b,0xa4,0x8f,0xe5,0x42,0xcb,0x60,0x24,0x2d,0x9a,0x3e,0xbc,0xb6,0x5b,0xfc,0x4c,0xb7,0x55,0x6b,0x84,0xdd,0x4a,0x5f,0x97};
    mont256_from_bytes(&ctx, multiplier, multiplier92);
    mont256_from_bytes(&ctx, multiplicand, multiplicand92);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product92, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier93[32]   = {0x15,0x89,0x12,0x74,0x2b,0x56,0x4a,0xfc,0x36,0x63,0x2b,0xca,0x6b,0x60,0x57,0x15,0x53,0x90,0xdd,0xfa,0x76,0x60,0x4f,0x3c,0xf3,0x3a,0x9f,0x8a,0xfe,0x8b,0xad,0x78};
    std::uint8_t multiplicand93[32] = {0x71,0xd3,0x58,0x90,0x4f,0xd2,0x69,0x11,0x4b,0x81,0x7d,0xd1,0xa6,0x6c,0x3b,0xa7,0x8e,0x76,0x02,0xd7,0x41,0xd4,0x81,0xc9,0x7d,0xa7,0x72,0x97,0x62,0xfd,0x95,0xa9};
    std::uint8_t product93[32]      = {0xa9,0x45,0x8d,0x41,0x71,0x9f,0x14,0x7a,0xdf,0x51,0xfd,0xf2,0xc2,0x11,0x92,0x92,0xc8,0xc6,0x12,0x26,0x8e,0xb7,0x47,0x82,0x34,0x55,0xf4,0xfb,0x2e,0x18,0x59,0x02};
    mont256_from_bytes(&ctx, multiplier, multiplier93);
    mont256_from_bytes(&ctx, multiplicand, multiplicand93);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product93, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier94[32]   = {0x34,0x7a,0x7d,0xbc,0xec,0x62,0x4d,0xc3,0x61,0x01,0xab,0xc4,0xf8,0xe5,0xdb,0x09,0x10,0x69,0x95,0x6f,0x11,0x30,0x6a,0xdd,0x4b,0x6d,0x31,0x28,0xf5,0x6e,0x60,0xa6};
    std::uint8_t multiplicand94[32] = {0xe7,0x50,0x49,0xff,0x25,0xca,0x3f,0x8c,0x43,0xa0,0x27,0x5b,0xc8,0xee,0x88,0xdc,0xda,0xfb,0xe2,0x0f,0x5a,0x1b,0xa5,0x5a,0x3d,0x07,0xb5,0x7f,0xeb,0x1b,0x8d,0x8b};
    std::uint8_t product94[32]      = {0x24,0x93,0xc3,0xae,0xc8,0x11,0x36,0xeb,0x2d,0xed,0x07,0x31,0x82,0xb2,0x17,0xcb,0x51,0xea,0x69,0xab,0x6f,0xdb,0x23,0x05,0x7c,0x98,0xd0,0xe8,0x04,0xa0,0xf3,0xfa};
    mont256_from_bytes(&ctx, multiplier, multiplier94);
    mont256_from_bytes(&ctx, multiplicand, multiplicand94);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product94, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier95[32]   = {0x17,0x33,0xcb,0x3f,0x49,0x55,0x19,0x94,0xb8,0x19,0xe0,0x07,0x83,0x61,0xe4,0x9a,0xe3,0xee,0x19,0xf1,0xa8,0x2d,0x1f,0x96,0x89,0xa8,0xf1,0xf7,0x08,0xf6,0x0a,0xd2};
    std::uint8_t multiplicand95[32] = {0x9c,0x10,0xa7,0x62,0xe2,0x8b,0xb8,0x84,0x92,0x48,0x0f,0xa6,0x32,0x77,0x67,0x4f,0xb8,0x4f,0x17,0xde,0x6e,0x4f,0x2d,0x02,0x96,0x62,0xd3,0xb7,0xa8,0x30,0x1f,0x8c};
    std::uint8_t product95[32]      = {0xee,0x5c,0x4a,0x39,0x19,0xd1,0x68,0x51,0x02,0xa0,0xc1,0x9a,0x48,0xed,0xa7,0x5e,0xaf,0xf4,0x4e,0xcb,0x5a,0x87,0x68,0x1c,0x4a,0x6d,0xd3,0xf6,0xa2,0x18,0x35,0x13};
    mont256_from_bytes(&ctx, multiplier, multiplier95);
    mont256_from_bytes(&ctx, multiplicand, multiplicand95);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product95, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier96[32]   = {0xa5,0x17,0x7e,0x27,0xbb,0xbf,0xdc,0x4f,0xff,0x3d,0x2d,0x2e,0x4a,0x16,0x4f,0x37,0x61,0xd9,0xf0,0x38,0xad,0xf1,0xd2,0x79,0xf0,0xc2,0x91,0xae,0x86,0x4a,0x09,0x42};
    std::uint8_t multiplicand96[32] = {0x6d,0x1b,0x34,0x54,0x4a,0x1a,0x29,0x14,0x30,0x46,0xdc,0xd0,0x11,0x24,0x9d,0x22,0xac,0xfc,0x73,0x01,0xb5,0xd6,0x73,0x32,0xff,0x02,0xad,0x18,0x14,0x02,0x3a,0xae};
    std::uint8_t product96[32]      = {0x89,0x73,0x37,0x89,0x44,0x5c,0x5c,0xa0,0xff,0x8c,0x9e,0x7a,0x11,0xdc,0xb8,0x1b,0xc2,0x27,0xc7,0x5c,0x2e,0xe0,0xcf,0x0d,0x6a,0x5d,0x85,0x1d,0xe8,0x2d,0x61,0xd5};
    mont256_from_bytes(&ctx, multiplier, multiplier96);
    mont256_from_bytes(&ctx, multiplicand, multiplicand96);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product96, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier97[32]   = {0x3f,0xe4,0xd5,0x1e,0x91,0x38,0xe2,0xf8,0x3c,0xb1,0x63,0x7d,0x49,0xbc,0x3a,0x7b,0x45,0x73,0x05,0x7f,0x01,0xfe,0xe6,0xf1,0x35,0x3f,0x37,0x20,0x40,0x4b,0xde,0x48};
    std::uint8_t multiplicand97[32] = {0xb7,0xb9,0x05,0x76,0x33,0xf8,0x6e,0x36,0x5b,0x95,0x8f,0x5c,0x79,0x5f,0xde,0x31,0xd9,0x1c,0xf6,0xae,0x2e,0xcc,0x85,0x38,0xad,0x2f,0x79,0x8e,0x8d,0x70,0x7b,0x1d};
    std::uint8_t product97[32]      = {0x2c,0x0b,0x59,0x24,0x0a,0x87,0x8f,0xe6,0x52,0x8e,0x6e,0xf8,0x0e,0x56,0xfc,0x73,0x35,0xe4,0x60,0xf5,0x54,0x94,0x5b,0x9c,0xc4,0x59,0xbf,0xe5,0x77,0xac,0x02,0xca};
    mont256_from_bytes(&ctx, multiplier, multiplier97);
    mont256_from_bytes(&ctx, multiplicand, multiplicand97);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product97, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier98[32]   = {0xe9,0x83,0xc7,0x9d,0xdd,0x05,0xbd,0x3c,0x2b,0x74,0x6e,0xbe,0x50,0xe1,0xa2,0x90,0x02,0x6f,0x34,0xac,0x4f,0xd6,0x9d,0x3b,0x78,0x4e,0xe1,0x4d,0x5e,0x5c,0xa8,0xcc};
    std::uint8_t multiplicand98[32] = {0x9e,0xc8,0x00,0x4e,0xa1,0x52,0x00,0xbd,0x88,0x80,0xb9,0x74,0xed,0x69,0x0e,0xf0,0x51,0x81,0xdb,0x29,0x67,0x98,0xcc,0x21,0xf9,0x52,0x48,0x77,0x13,0x31,0x17,0xe6};
    std::uint8_t product98[32]      = {0xb6,0x2d,0xac,0xe8,0xc7,0xb1,0x83,0x10,0x10,0x28,0xa6,0x4f,0x13,0x8a,0x54,0xef,0x07,0xc6,0xea,0x6b,0xf0,0xef,0xf7,0x55,0x5e,0xc3,0xcb,0x23,0xea,0x13,0x71,0xc9};
    mont256_from_bytes(&ctx, multiplier, multiplier98);
    mont256_from_bytes(&ctx, multiplicand, multiplicand98);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product98, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }

    std::uint8_t multiplier99[32]   = {0xcb,0x21,0x6e,0x77,0x45,0x6b,0xb2,0x07,0x1e,0x13,0x26,0x1f,0x28,0xc5,0x31,0x07,0xa2,0xb2,0xd0,0x91,0x8c,0x7d,0x8e,0xac,0x1e,0x93,0x0d,0x92,0x02,0x5a,0x90,0x84};
    std::uint8_t multiplicand99[32] = {0x23,0xa2,0x98,0xc5,0x37,0x67,0x8b,0xb2,0x23,0x59,0x30,0x0e,0x90,0x50,0xfa,0xa0,0xe9,0x2f,0x60,0x77,0xf4,0x3e,0x89,0xb2,0xc4,0x8c,0x46,0x9a,0xbd,0x65,0xb7,0xb4};
    std::uint8_t product99[32]      = {0xb2,0x17,0xba,0x92,0x2e,0x21,0xd5,0xbf,0xa4,0xc4,0x44,0x56,0xa1,0x7d,0xa8,0xbb,0xa5,0x81,0x07,0xdd,0x4c,0x12,0x95,0xc0,0x90,0x6f,0x49,0xf5,0x10,0x09,0x89,0xdf};
    mont256_from_bytes(&ctx, multiplier, multiplier99);
    mont256_from_bytes(&ctx, multiplicand, multiplicand99);
    mont256_mul(&ctx, product, multiplier, multiplicand);
    mont256_to_bytes(&ctx, product_data, product);
    if (std::memcmp(product99, product_data, 32) != 0)
    {
        throw std::runtime_error("err in common::mont256_mul");
    }
}