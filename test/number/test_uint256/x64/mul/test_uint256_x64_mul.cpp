#if defined(CPU_FLAG_MOVBE) && defined(CPU_FLAG_BMI2)
#include <gmlib/number/internal/uint256_x64.h>
#include <stdexcept>
#include <cstring>

using namespace number::internal::x64;

void test_uint256_x64_mul()
{
    uint256_t    multiplier, multiplicand, product[2];
    std::uint8_t product_data[64];

    static std::uint8_t multiplier0[32]   = {0x02,0x1d,0x68,0x4a,0xfb,0x24,0xfa,0xc7,0x36,0x17,0x54,0xd4,0x55,0x82,0x56,0xb9,0xb9,0x55,0x5c,0x56,0x9d,0xa8,0x61,0x47,0x24,0x3c,0x82,0x8b,0x74,0x35,0x49,0xa2};
    static std::uint8_t multiplicand0[32] = {0xd2,0x08,0x31,0xd0,0x9e,0xb5,0x7b,0x94,0x0a,0xfb,0x33,0xb5,0xb8,0x17,0x03,0x5d,0x40,0xe2,0x7b,0x4d,0xa5,0xde,0x22,0x3d,0xb2,0x05,0x49,0x8d,0x2e,0x17,0x3d,0x70};
    static std::uint8_t product0[64]      = {0x01,0xbc,0x30,0xe2,0x1e,0x86,0xec,0x0b,0xc0,0xdc,0xa6,0xcd,0x02,0x7e,0x2e,0xd7,0xf7,0xb5,0xdc,0xed,0x31,0x29,0x2a,0x5a,0x2e,0xa2,0x80,0xae,0xdd,0x6b,0x8e,0xe1,0x0d,0x76,0xb6,0x5a,0x59,0xba,0xf6,0xcd,0x9d,0x32,0xf4,0x02,0x32,0x49,0xc7,0xba,0x51,0x88,0xd5,0x98,0x61,0xc9,0xb0,0x70,0x56,0x80,0x1b,0xf2,0x43,0x69,0xd0,0xe0};
    uint256_from_bytes(multiplier, multiplier0);
    uint256_from_bytes(multiplicand, multiplicand0);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product0, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier1[32]   = {0x30,0xad,0xbd,0x2e,0xc2,0xa9,0x05,0xa2,0xc0,0xab,0x8f,0xe2,0xd1,0x51,0xac,0xb1,0xf6,0x67,0x66,0xec,0xf5,0x9a,0x00,0x22,0x53,0x70,0xfd,0xe1,0x44,0xe3,0xc6,0x47};
    static std::uint8_t multiplicand1[32] = {0x05,0x05,0xf2,0xff,0xbc,0xb6,0x96,0xb3,0x05,0x6b,0x84,0xb6,0x3f,0xa0,0xab,0x7e,0x09,0xd0,0xde,0x1f,0x5a,0x67,0xf7,0x4a,0xdf,0x0b,0x2b,0x88,0x4d,0xfc,0xb4,0x3f};
    static std::uint8_t product1[64]      = {0x00,0xf4,0x86,0x4b,0x79,0x7f,0x0f,0x1b,0xa5,0x30,0x9d,0x04,0x3c,0x9f,0x45,0x39,0x81,0xde,0x9f,0x0b,0xc8,0xc1,0x56,0xb0,0x97,0x2c,0x22,0x50,0xca,0xc4,0x4b,0xfd,0x41,0x05,0xfd,0xac,0x1e,0x0b,0xe1,0x2e,0xeb,0x90,0xcd,0x9c,0x02,0x2e,0x02,0xd0,0x20,0x9f,0xfc,0x6e,0x0a,0xf4,0x31,0xfa,0xe0,0x25,0x74,0x72,0xa4,0x5b,0xb7,0x79};
    uint256_from_bytes(multiplier, multiplier1);
    uint256_from_bytes(multiplicand, multiplicand1);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product1, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier2[32]   = {0x5d,0x32,0x4b,0x91,0xad,0x00,0x2b,0xfd,0xc3,0x9f,0xf7,0x9f,0x2a,0x5c,0x55,0x07,0xca,0x42,0x91,0x12,0x98,0x0f,0xc6,0xba,0xa5,0x64,0x2f,0x1e,0x12,0x64,0x17,0xa8};
    static std::uint8_t multiplicand2[32] = {0xcf,0x49,0x24,0xb5,0x65,0xa8,0xc1,0xf4,0x09,0x84,0x4d,0xf5,0x16,0x63,0x35,0x6c,0x60,0x05,0xa0,0x60,0x18,0x2d,0xe3,0x1e,0xea,0x7b,0xb3,0xd1,0xa8,0x96,0xa8,0xab};
    static std::uint8_t product2[64]      = {0x4b,0x76,0x4b,0xcf,0x73,0x9f,0xaa,0x5f,0xe7,0x14,0x4e,0x7b,0x90,0xd0,0xb8,0x14,0xaa,0x77,0xbd,0xbb,0x99,0x9d,0xe7,0xc7,0x23,0x0c,0xaf,0x66,0x03,0xd9,0xc2,0x81,0xb8,0x0d,0xe0,0xf0,0xa6,0x6f,0xb0,0xd3,0x2c,0x62,0xd2,0xd0,0x55,0x75,0x66,0xe8,0x7e,0x2d,0x05,0xbd,0xe0,0x16,0x72,0xa5,0x7e,0x81,0x73,0x7c,0x14,0xd2,0x0d,0x38};
    uint256_from_bytes(multiplier, multiplier2);
    uint256_from_bytes(multiplicand, multiplicand2);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product2, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier3[32]   = {0xa6,0xfb,0xc9,0x2d,0x1f,0xa5,0x9b,0x85,0x36,0x89,0x7d,0x74,0x9b,0xc0,0xfe,0xac,0x31,0x52,0x8c,0xb1,0xd1,0x41,0xfc,0xf2,0xdf,0x30,0x67,0xf2,0x2d,0xa5,0x8b,0xaf};
    static std::uint8_t multiplicand3[32] = {0x8b,0x44,0xed,0x2e,0xbf,0xad,0xfb,0x50,0x6f,0xfd,0x5f,0x96,0x01,0xb1,0xba,0x89,0xcd,0x4a,0xda,0x03,0xc0,0x4d,0x42,0x47,0x4c,0xa1,0xdc,0x06,0x14,0xe8,0xff,0x03};
    static std::uint8_t product3[64]      = {0x5a,0xd7,0xab,0xd2,0x87,0xaf,0x97,0x03,0x98,0xd0,0xe8,0x8e,0x23,0xf2,0xec,0x22,0xfb,0x23,0x60,0x69,0xa8,0x07,0x14,0xf5,0x28,0x6c,0x64,0x54,0x0e,0x01,0x38,0xeb,0xea,0xc6,0x53,0xe8,0x0c,0x13,0x7d,0x4b,0x9c,0x46,0x43,0xb0,0xc1,0x51,0x45,0x08,0x4c,0x4f,0xc3,0x6d,0x18,0x28,0x34,0x2c,0x17,0x20,0x6a,0x58,0xb1,0xab,0xf4,0x0d};
    uint256_from_bytes(multiplier, multiplier3);
    uint256_from_bytes(multiplicand, multiplicand3);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product3, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier4[32]   = {0x4d,0x1e,0x4a,0xc8,0xf4,0xca,0xa0,0x6f,0x34,0x20,0x81,0x60,0x46,0x4f,0x75,0xc7,0x57,0xc5,0x6d,0x5b,0x9d,0x16,0x6a,0x74,0xf9,0x22,0x19,0x0b,0x24,0xfe,0x02,0x62};
    static std::uint8_t multiplicand4[32] = {0x6b,0x3e,0xba,0xce,0x85,0x22,0xc8,0xa6,0x95,0x9d,0xc8,0x9c,0x83,0xef,0x7b,0xed,0x17,0x7a,0x4f,0xb4,0xc7,0xbd,0x1e,0x1b,0x56,0xd6,0x9b,0x9d,0x86,0xe4,0x2a,0x2b};
    static std::uint8_t product4[64]      = {0x20,0x4e,0x8e,0xde,0x53,0xcd,0x61,0x03,0xb8,0x57,0x8a,0xa7,0xe4,0xca,0x4a,0x9e,0xc4,0x39,0x38,0x9e,0x6e,0x1a,0xf7,0x75,0x0d,0x65,0x32,0x51,0xdd,0x7a,0xd5,0x72,0x83,0xce,0x8c,0x94,0xa0,0xdb,0x39,0xc3,0xea,0x35,0xd7,0x77,0xa7,0xca,0x8b,0x2c,0x71,0x27,0x7e,0x24,0xd3,0x0d,0xe6,0xb3,0xf9,0x44,0xbc,0x84,0x4e,0x56,0x7a,0x76};
    uint256_from_bytes(multiplier, multiplier4);
    uint256_from_bytes(multiplicand, multiplicand4);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product4, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier5[32]   = {0x58,0x20,0x5b,0x4f,0xbc,0x74,0x70,0x75,0x92,0x9d,0x13,0x67,0x2f,0xd5,0xab,0x9f,0x66,0xd9,0x66,0xbe,0x08,0xac,0xba,0x26,0x0c,0xcd,0xd2,0xa6,0xad,0x78,0x11,0x36};
    static std::uint8_t multiplicand5[32] = {0xf1,0x66,0xf5,0x77,0xa3,0xdd,0x63,0xcc,0x12,0xad,0x56,0xea,0x6f,0x6e,0xab,0x33,0xe7,0xc1,0xd4,0x9a,0x28,0x38,0x48,0xe8,0xb7,0x8b,0x81,0x15,0x0f,0x8a,0x74,0x25};
    static std::uint8_t product5[64]      = {0x53,0x19,0xe7,0x5a,0x99,0x05,0x46,0x1c,0xe3,0xf9,0x75,0x91,0x62,0x9a,0x91,0x02,0x20,0x48,0xef,0x19,0x87,0xb0,0xa3,0x71,0x43,0xa3,0xe0,0x77,0x03,0x80,0x00,0x2c,0x95,0x70,0xcc,0x56,0x22,0xc9,0x88,0x1c,0x30,0xb6,0x99,0xfa,0x3d,0xdf,0x50,0x6b,0x04,0x3c,0xd7,0x9a,0x90,0x93,0x2e,0x1d,0x1d,0x0e,0x23,0xda,0xeb,0x42,0xf4,0xce};
    uint256_from_bytes(multiplier, multiplier5);
    uint256_from_bytes(multiplicand, multiplicand5);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product5, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier6[32]   = {0x49,0x39,0x3d,0x2f,0xb6,0x1e,0x0a,0xcc,0xa0,0x22,0x18,0xe8,0xbd,0xbc,0xd6,0x99,0xb3,0x1e,0x0d,0x94,0xea,0x96,0xea,0x80,0x93,0x1b,0x2f,0x8d,0xbc,0xa0,0xd9,0x71};
    static std::uint8_t multiplicand6[32] = {0xd8,0x80,0x7a,0xc5,0x5e,0xcb,0xeb,0x67,0x43,0xde,0x92,0x39,0x9c,0x87,0x9d,0x1c,0x0a,0xd8,0x8c,0x16,0xc6,0x7c,0xb5,0xf1,0xb5,0x9d,0x23,0x3c,0x60,0x4b,0x8b,0x55};
    static std::uint8_t product6[64]      = {0x3d,0xed,0x0b,0x5c,0x94,0xd6,0x92,0xd3,0xa2,0x01,0x2a,0x7b,0x87,0x15,0x44,0x4b,0xfe,0x9c,0x23,0x8a,0x8b,0xd2,0xd2,0x0d,0x45,0x7f,0x85,0xe4,0xd4,0x93,0x1a,0x71,0xe4,0xc8,0x33,0x6c,0x0c,0x94,0x04,0xd2,0x1c,0x3d,0x01,0x22,0x4c,0x46,0xa3,0x6b,0x5f,0x15,0xe7,0x1c,0x58,0x54,0x7e,0x22,0x22,0xd5,0xbd,0xa1,0x0b,0x93,0x8d,0x85};
    uint256_from_bytes(multiplier, multiplier6);
    uint256_from_bytes(multiplicand, multiplicand6);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product6, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier7[32]   = {0x2c,0x0e,0xaf,0xdd,0x97,0x1a,0xeb,0xbe,0xc7,0x5a,0x2e,0xac,0x50,0x1b,0x48,0x54,0x50,0x9a,0x15,0xa5,0x32,0xf5,0xe4,0x19,0x03,0xe9,0xc1,0xa3,0x4e,0xc9,0x9e,0x74};
    static std::uint8_t multiplicand7[32] = {0xae,0x48,0x50,0xe5,0x39,0xb1,0x8e,0x5f,0xfb,0xd2,0x12,0x86,0xe9,0xd9,0xc9,0xfd,0xcd,0xdf,0x15,0x01,0x48,0x9f,0x57,0xa1,0x4f,0xd6,0xfa,0xf9,0x2a,0x90,0x40,0xc7};
    static std::uint8_t product7[64]      = {0x1d,0xfe,0x6d,0x96,0x1d,0x0d,0x30,0x0f,0x27,0x19,0x0f,0xdc,0x03,0x70,0xb9,0x3d,0xdc,0xd9,0x19,0xe1,0x32,0x6e,0x8a,0x84,0x02,0x1f,0xed,0x66,0xac,0x87,0x56,0x09,0x25,0x47,0x30,0x4c,0x16,0xc5,0xd7,0x5c,0x71,0x2e,0x97,0xad,0x92,0xb5,0xd2,0x44,0x68,0xbf,0xe1,0xed,0xf3,0xde,0x17,0xda,0xf9,0xb8,0x25,0xe0,0xcf,0x97,0x2c,0x2c};
    uint256_from_bytes(multiplier, multiplier7);
    uint256_from_bytes(multiplicand, multiplicand7);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product7, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier8[32]   = {0x9c,0x08,0x68,0x32,0xa5,0x2b,0x18,0xfb,0x8b,0xae,0xc0,0xe4,0x9e,0x4d,0x61,0x9d,0x25,0x08,0xdb,0xe0,0x4f,0xd9,0x5c,0xe7,0x2e,0xe0,0x8f,0xb4,0x02,0xa4,0x2c,0x36};
    static std::uint8_t multiplicand8[32] = {0xf4,0xdb,0xa4,0x43,0xfb,0x69,0x0d,0xf8,0x20,0x98,0x09,0x7b,0x03,0x2b,0xee,0x8e,0x6a,0x3e,0x5a,0xce,0x7d,0x7a,0x1e,0x81,0x4a,0xc8,0xe9,0x02,0xbc,0xe1,0x68,0x59};
    static std::uint8_t product8[64]      = {0x95,0x3d,0xe2,0xa0,0x3a,0xf0,0x5c,0xdf,0x04,0x9f,0xf9,0x14,0xf8,0x43,0xe6,0xf2,0x9c,0xb7,0xdc,0x4e,0xde,0xaf,0xca,0x53,0x41,0xfe,0x2e,0xeb,0x12,0x7b,0x62,0x23,0xb5,0x70,0xbe,0xe1,0x94,0x3a,0x50,0xe4,0x4d,0x3d,0x63,0xfb,0xaa,0x04,0x15,0x01,0x8b,0x69,0x89,0x6f,0x8d,0x82,0x6a,0x60,0x9d,0x4f,0x77,0xd6,0x20,0x7f,0x4e,0xc6};
    uint256_from_bytes(multiplier, multiplier8);
    uint256_from_bytes(multiplicand, multiplicand8);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product8, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier9[32]   = {0x09,0xf0,0xf8,0xcf,0x1c,0x48,0x91,0xb5,0xf1,0xff,0xb1,0x32,0x6f,0x56,0x56,0x22,0xbe,0x87,0x09,0xd6,0xe9,0x6e,0x87,0xe5,0x4c,0xea,0xcf,0xfe,0x24,0xdd,0x44,0xef};
    static std::uint8_t multiplicand9[32] = {0xd1,0x85,0xf7,0x59,0xae,0x9d,0x5e,0xe9,0xfd,0x08,0x2d,0xdb,0x6b,0xbd,0x50,0x94,0xaa,0x39,0xfd,0xc3,0x4d,0xd8,0xf7,0x41,0xff,0x23,0x78,0x43,0x92,0x3e,0x94,0x1b};
    static std::uint8_t product9[64]      = {0x08,0x22,0xee,0xed,0x55,0x4f,0x2a,0x89,0x05,0xa9,0x51,0xe2,0xd3,0x11,0x27,0x49,0xdf,0x0e,0x66,0x76,0x3d,0x81,0x8f,0xf9,0xaf,0xb3,0x93,0xca,0xb6,0xdd,0x3f,0xaf,0xb5,0x76,0x9f,0x64,0xc2,0xbe,0x57,0x39,0x9d,0x3e,0x07,0x78,0x6f,0x05,0x35,0x9f,0xd7,0x69,0xb3,0xd1,0xe4,0x63,0x8d,0x89,0x09,0x7c,0x0e,0x91,0xcf,0x12,0x71,0x35};
    uint256_from_bytes(multiplier, multiplier9);
    uint256_from_bytes(multiplicand, multiplicand9);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product9, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier10[32]   = {0xb6,0xc9,0x24,0xd1,0x50,0xc7,0x71,0xe4,0xbd,0xa0,0xb0,0xc4,0xc9,0x19,0x40,0xbb,0x1e,0x5c,0xab,0xc0,0xdb,0x43,0xbe,0xfb,0x93,0x5b,0x9c,0xf1,0x25,0xef,0xce,0x10};
    static std::uint8_t multiplicand10[32] = {0xaf,0x06,0xb1,0x1b,0x1a,0xda,0x11,0x34,0xc1,0x49,0xb1,0x26,0x65,0x45,0x3e,0x82,0x43,0xa6,0x24,0x4f,0x2f,0x5f,0x50,0x39,0x81,0x20,0x80,0xd6,0xf5,0x22,0xb0,0x44};
    static std::uint8_t product10[64]      = {0x7c,0xf8,0x47,0x56,0x5f,0xf7,0xf7,0xc5,0x16,0x88,0x23,0xba,0x6d,0x94,0x2f,0x83,0xd9,0x20,0x72,0x67,0x8c,0xdb,0x87,0xa0,0x9e,0x9a,0xa6,0x81,0x08,0xf3,0x01,0xb7,0xff,0x43,0x5e,0x6d,0x01,0xef,0x08,0xdd,0x37,0xb0,0x07,0x04,0x4d,0xde,0xf8,0xfe,0x27,0x3a,0x6f,0x91,0xdc,0xc6,0x2a,0x6d,0x31,0x0f,0x45,0x91,0x9f,0x7d,0xbc,0x40};
    uint256_from_bytes(multiplier, multiplier10);
    uint256_from_bytes(multiplicand, multiplicand10);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product10, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier11[32]   = {0x05,0xc8,0x97,0x90,0xdd,0xdc,0x4f,0xb7,0xb8,0xde,0x1b,0xf8,0x2e,0x57,0x5d,0x87,0xb9,0xb5,0xa1,0x07,0xaf,0xe6,0xcf,0xce,0x45,0x18,0x83,0x4f,0x48,0xfd,0x63,0xa0};
    static std::uint8_t multiplicand11[32] = {0x6a,0x70,0xbb,0x0e,0x42,0xfb,0x1b,0x9a,0xce,0x5e,0xfe,0x92,0x61,0x6b,0x8a,0x24,0xa2,0xcb,0x01,0x07,0xb3,0x67,0x6f,0x9e,0xb0,0x74,0x23,0xf2,0xce,0xd1,0x16,0x4b};
    static std::uint8_t product11[64]      = {0x02,0x67,0x9a,0xbe,0x24,0x70,0xc8,0xc0,0x9e,0xc1,0xc0,0x51,0x22,0xc8,0x79,0x8d,0xf1,0x62,0x2b,0xb1,0xbf,0x2a,0x45,0xbb,0xa5,0xd5,0xdb,0x23,0xf1,0xba,0xd9,0x12,0x7d,0x9c,0xb3,0xc3,0x1b,0xfc,0x25,0x1f,0x04,0x7c,0x9c,0x02,0x2e,0x52,0x84,0x39,0x41,0xa2,0x4a,0x68,0x8e,0xab,0xda,0x08,0x22,0x94,0xd2,0xc9,0x3e,0x6b,0xef,0xe0};
    uint256_from_bytes(multiplier, multiplier11);
    uint256_from_bytes(multiplicand, multiplicand11);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product11, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier12[32]   = {0xf2,0x83,0x86,0x56,0xac,0xe1,0xb2,0x5d,0xe1,0xb2,0x4f,0x82,0xfd,0x43,0x72,0x47,0x0c,0x3e,0x4c,0x80,0x94,0x40,0x9f,0xff,0xb9,0xa1,0x7a,0xfa,0x1c,0x21,0x45,0x23};
    static std::uint8_t multiplicand12[32] = {0x3c,0x09,0x8f,0x62,0x81,0xfa,0x49,0x72,0x33,0x1b,0xf9,0x92,0x9d,0xc1,0x4a,0x72,0xaf,0x81,0xda,0xfa,0xd6,0xaa,0x34,0x76,0x31,0x2f,0x0a,0x3a,0xc7,0x6e,0xa4,0x35};
    static std::uint8_t product12[64]      = {0x38,0xdf,0xe1,0xf0,0xd3,0x16,0x32,0x34,0x15,0x49,0x40,0x28,0x98,0x1e,0xaa,0x21,0x09,0xbe,0x75,0x8a,0x34,0xa2,0x87,0x59,0x21,0xec,0x96,0xbf,0x6b,0xf9,0x6a,0xbe,0xc6,0xfb,0x18,0x04,0xfd,0xb5,0x84,0x26,0x7b,0x02,0x68,0x13,0xc8,0x73,0xa8,0xa1,0x5f,0xc9,0xad,0x2d,0x56,0x5f,0x61,0x15,0x35,0x36,0xaa,0xc5,0x0d,0x37,0xbc,0x3f};
    uint256_from_bytes(multiplier, multiplier12);
    uint256_from_bytes(multiplicand, multiplicand12);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product12, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier13[32]   = {0xea,0x50,0xdc,0xa2,0xab,0x3a,0xc5,0xb7,0xdd,0x8e,0xe2,0xce,0x3e,0x2c,0x3d,0xdf,0xab,0xb6,0x04,0xfb,0xcf,0x41,0x3a,0x7c,0x41,0x6f,0x04,0x65,0xdb,0x21,0x52,0xc6};
    static std::uint8_t multiplicand13[32] = {0xb2,0x0b,0xb0,0x60,0x21,0x42,0xa0,0x7f,0x2c,0x26,0xf4,0x94,0x8c,0xc5,0x5c,0x7f,0x0d,0xf4,0x85,0x2a,0x56,0xd9,0xe7,0x7f,0xc2,0xd2,0x4c,0x6a,0x06,0x8d,0xf0,0xcd};
    static std::uint8_t product13[64]      = {0xa2,0xf6,0xec,0x52,0x2a,0x80,0x33,0xe9,0xbf,0x5b,0xd2,0x41,0x91,0xc2,0xcd,0x45,0x3e,0xc1,0xcd,0x2e,0x96,0x1a,0x4f,0x03,0x7a,0xb7,0xbd,0x81,0xe5,0x01,0xdd,0x1e,0x25,0x1e,0xc1,0x27,0xf8,0xf8,0xe4,0x21,0xa9,0x86,0xb7,0xe4,0x10,0xea,0xa6,0x18,0xe8,0x0d,0x22,0x51,0x8b,0xfa,0xc2,0x9c,0xdc,0x0d,0x8a,0x46,0xf2,0x56,0xe8,0x8e};
    uint256_from_bytes(multiplier, multiplier13);
    uint256_from_bytes(multiplicand, multiplicand13);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product13, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier14[32]   = {0xe2,0x43,0x1d,0xaa,0xe0,0xb5,0x7f,0x89,0x77,0x25,0x65,0xb6,0x80,0x48,0xf7,0x7f,0x9e,0xa6,0x22,0xea,0x38,0x7e,0x5e,0xa1,0x6e,0xdb,0x84,0xfc,0x0c,0x0b,0x26,0x0f};
    static std::uint8_t multiplicand14[32] = {0x15,0xed,0x32,0x2e,0x9b,0x76,0xa3,0x13,0xc2,0x7b,0x40,0x36,0xe8,0x5c,0x27,0xbc,0x2d,0x41,0x96,0x16,0xce,0xb0,0xec,0xa3,0xd1,0x57,0xf9,0x01,0xbc,0xe7,0x5b,0x91};
    static std::uint8_t product14[64]      = {0x13,0x61,0x25,0xeb,0xc8,0xe3,0x1e,0x1d,0x82,0x23,0x67,0x0f,0x29,0x92,0xfb,0xca,0x39,0x4f,0xa3,0x91,0x9d,0x0f,0x5d,0xff,0xfa,0xa8,0x3f,0x1d,0xf3,0xc8,0x41,0xab,0x14,0xb7,0xc8,0x5b,0xde,0x1e,0x7c,0x1d,0x5a,0x68,0xe1,0x1e,0x69,0x77,0x54,0x77,0x95,0xa8,0x6f,0x0f,0xf5,0x7c,0x27,0xb1,0xfd,0x0b,0xb6,0x1c,0x24,0x60,0xe3,0x7f};
    uint256_from_bytes(multiplier, multiplier14);
    uint256_from_bytes(multiplicand, multiplicand14);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product14, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier15[32]   = {0x03,0x68,0x49,0xc7,0xe2,0x1c,0x2f,0xe2,0x9a,0xc8,0x26,0x84,0x53,0xe3,0xdf,0xa2,0x5e,0x12,0x5d,0x20,0xb7,0x16,0x57,0xe6,0x5f,0xe2,0x35,0x9f,0xc6,0x2a,0xac,0xdd};
    static std::uint8_t multiplicand15[32] = {0x17,0x86,0x87,0x62,0x99,0x2e,0xe8,0x8c,0x26,0xfb,0xef,0x53,0x7f,0xb9,0xae,0xd6,0xde,0x3b,0xf4,0xfb,0x88,0x16,0x08,0x5d,0x8c,0xc6,0xd4,0xea,0xf2,0x97,0x62,0xa0};
    static std::uint8_t product15[64]      = {0x00,0x50,0x29,0x04,0xe2,0xcf,0x7d,0xbd,0xf1,0x07,0xa1,0xe4,0x91,0xb4,0x82,0x62,0x66,0xc9,0x13,0xd8,0xb9,0xa1,0x79,0xac,0x4e,0x80,0xa5,0x82,0xcc,0x13,0x62,0x39,0xe6,0xfb,0xdc,0x89,0x66,0x6d,0x42,0x3f,0x98,0x83,0xf3,0xb5,0x13,0x1c,0x9d,0xdc,0x5b,0xba,0x23,0x7e,0x04,0x29,0x29,0xc9,0x39,0x91,0xee,0x4f,0x11,0x33,0xa4,0x20};
    uint256_from_bytes(multiplier, multiplier15);
    uint256_from_bytes(multiplicand, multiplicand15);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product15, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier16[32]   = {0x49,0xc9,0x69,0xca,0x2d,0x0d,0xd4,0xb7,0xa9,0xb8,0x2d,0x67,0x07,0x76,0x7f,0x06,0xd9,0xde,0xe1,0x55,0x27,0x2b,0x26,0x99,0xf9,0x8b,0x3c,0x27,0xa9,0x6d,0x57,0x33};
    static std::uint8_t multiplicand16[32] = {0x5b,0xce,0xae,0xaa,0xce,0x93,0xc3,0xfe,0x37,0xe4,0xc2,0x1d,0xb3,0x8d,0x61,0x87,0xd0,0x9a,0x93,0x53,0x0e,0x96,0xd7,0xeb,0x51,0x94,0x19,0xf0,0xa1,0x20,0x6b,0xe3};
    static std::uint8_t product16[64]      = {0x1a,0x76,0x2b,0x06,0x1f,0xe6,0x80,0xe5,0xe7,0xc4,0x4d,0xc1,0x11,0xfd,0xcb,0xe0,0x66,0x8f,0xce,0x14,0x55,0x06,0xa6,0xc8,0x54,0xc5,0x56,0xbb,0x6c,0xb9,0xb3,0xfb,0xa5,0x9a,0x85,0x22,0x9c,0xee,0xc5,0x18,0xae,0x15,0xe8,0x6a,0x88,0x82,0xb1,0xfd,0x12,0x54,0x51,0xde,0x8a,0x04,0x09,0x6a,0xff,0x9f,0x97,0x4d,0xe8,0xc6,0xa3,0x39};
    uint256_from_bytes(multiplier, multiplier16);
    uint256_from_bytes(multiplicand, multiplicand16);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product16, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier17[32]   = {0x85,0xfb,0x1a,0x42,0x21,0x9e,0x9b,0xed,0xad,0xaa,0xde,0x0a,0xa7,0xeb,0xa7,0xda,0x66,0xa4,0x76,0x9d,0xe5,0xc5,0xe5,0xcd,0x84,0x66,0x36,0x7b,0xb1,0x77,0x2d,0xf4};
    static std::uint8_t multiplicand17[32] = {0x56,0x1d,0x26,0x59,0x04,0x55,0x99,0xf0,0xe9,0x33,0xe5,0x47,0xda,0x5b,0x50,0x78,0x53,0x1c,0xcd,0xd2,0xbf,0x0f,0xbb,0x97,0xb2,0x33,0x2a,0x37,0xf7,0x2f,0x4b,0xe6};
    static std::uint8_t product17[64]      = {0x2d,0x11,0x9c,0x56,0x0d,0x3f,0xc2,0xae,0xa6,0x30,0x0c,0x77,0xea,0xae,0xa5,0x33,0x40,0x8d,0x11,0xa0,0xc5,0xc8,0x8f,0x1e,0x7f,0x41,0xa1,0x37,0xf1,0x66,0xf7,0xbd,0x7c,0x63,0xb9,0xfc,0x26,0xe4,0x11,0xf1,0x18,0x7c,0x68,0x13,0xda,0xf6,0x5b,0x39,0x6c,0x68,0x62,0x5f,0x71,0xb2,0x29,0x12,0xbc,0x7b,0xa9,0xc3,0x37,0x55,0xc5,0x38};
    uint256_from_bytes(multiplier, multiplier17);
    uint256_from_bytes(multiplicand, multiplicand17);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product17, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier18[32]   = {0x9d,0xe7,0xb1,0x88,0x7b,0xe7,0xbc,0x88,0x27,0xb9,0xf3,0x81,0xea,0xd7,0x98,0x88,0xe0,0x05,0x61,0xe6,0x78,0x14,0x2d,0xb2,0xed,0x20,0x0b,0xd2,0xa4,0x0c,0x7a,0xa3};
    static std::uint8_t multiplicand18[32] = {0x1b,0x12,0x7b,0x24,0xfa,0x98,0x5b,0xba,0xde,0x40,0x15,0x2b,0xeb,0x6a,0xc8,0xb9,0xcc,0x09,0x8d,0xe7,0x4e,0x0d,0xee,0x6b,0xeb,0xef,0x93,0x07,0xf2,0xf6,0xd6,0x74};
    static std::uint8_t product18[64]      = {0x10,0xb2,0xd5,0xf9,0x02,0x1d,0xef,0x6c,0xb3,0x82,0x29,0xd7,0xe5,0x55,0xfa,0xd6,0xa1,0x1e,0x1e,0xcf,0x2b,0x0a,0x64,0x25,0xb5,0xe5,0xc9,0x56,0x0d,0x0e,0xa6,0x9b,0xb6,0x6c,0x3f,0x09,0xdc,0x3b,0xc6,0xb5,0x40,0xdd,0xd0,0xd9,0x2a,0x64,0x27,0xe6,0x85,0x5e,0x9c,0xdc,0xad,0xdb,0x1e,0x95,0x7d,0xd4,0xd3,0xf5,0xb2,0xcd,0xd3,0xdc};
    uint256_from_bytes(multiplier, multiplier18);
    uint256_from_bytes(multiplicand, multiplicand18);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product18, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier19[32]   = {0x9e,0x91,0x45,0x45,0xc0,0xc8,0x77,0x7e,0x8d,0xe0,0x0f,0x7e,0xd6,0xb6,0xec,0x01,0x4b,0x74,0xd1,0xa5,0x03,0x45,0xb3,0x51,0xe6,0x4b,0x1e,0x77,0x00,0x80,0xc0,0xeb};
    static std::uint8_t multiplicand19[32] = {0xac,0x60,0x61,0xf0,0x04,0x5e,0xf2,0x94,0xe2,0x78,0xf8,0xc5,0x10,0x39,0xf9,0xce,0x7e,0xc4,0x2b,0x23,0x39,0x48,0xfe,0x64,0x6c,0xe7,0x05,0x89,0xa4,0xd3,0xd2,0xd4};
    static std::uint8_t product19[64]      = {0x6a,0xc5,0x4d,0xae,0x8d,0xd4,0x6f,0x94,0x9a,0x5d,0xce,0x37,0x97,0x21,0x87,0x86,0xc1,0x2d,0xff,0xf0,0xe8,0xd5,0x1b,0x44,0x33,0x68,0xe7,0x70,0x7f,0xed,0xcd,0xd1,0xb8,0xb6,0xba,0xc0,0x75,0x29,0x10,0x3c,0xc0,0x11,0xe2,0x96,0x0b,0x26,0xd4,0xda,0xe8,0xc2,0x02,0xe7,0x15,0x0a,0x8a,0x39,0xae,0x53,0x93,0x6e,0x96,0x91,0x88,0x9c};
    uint256_from_bytes(multiplier, multiplier19);
    uint256_from_bytes(multiplicand, multiplicand19);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product19, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier20[32]   = {0x57,0xd8,0x70,0x1f,0xe3,0x89,0x56,0xd7,0x70,0x60,0x4f,0xee,0x0f,0x7d,0x88,0x75,0x2c,0x66,0x0c,0x99,0xbe,0x40,0x5a,0xeb,0xa7,0x60,0x0e,0xac,0x1f,0x66,0xc0,0x2f};
    static std::uint8_t multiplicand20[32] = {0x77,0x10,0x48,0x7b,0xb1,0x46,0x63,0x73,0xc0,0x02,0x7c,0xbb,0xb9,0x44,0x0e,0x6d,0xbd,0x79,0x33,0x08,0x5a,0xdb,0x99,0xff,0xa5,0x44,0x5d,0x25,0xc5,0xc0,0xb7,0x8b};
    static std::uint8_t product20[64]      = {0x28,0xdb,0x32,0x85,0x26,0x1e,0xb4,0x19,0xa6,0xa1,0x2a,0xca,0xcf,0x9b,0x38,0x08,0x3c,0x31,0x2e,0xfa,0xb3,0x10,0xd4,0xcd,0x1e,0x1c,0x66,0xe1,0x13,0xec,0x6e,0x23,0x8c,0xa8,0x09,0x4d,0xf5,0x93,0x44,0x36,0xa4,0xa5,0xb0,0x1a,0x90,0xa0,0x93,0xd1,0xe9,0x61,0xea,0xb2,0x61,0x11,0x03,0x32,0x36,0x0d,0x7a,0xa6,0xce,0x6b,0xf2,0x85};
    uint256_from_bytes(multiplier, multiplier20);
    uint256_from_bytes(multiplicand, multiplicand20);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product20, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier21[32]   = {0x4a,0x5b,0x18,0x3e,0x2c,0x53,0x57,0xc2,0x8a,0x28,0xf6,0x1b,0xbb,0x05,0x8d,0x46,0x5b,0x52,0x42,0x2e,0x16,0xcf,0x5d,0x77,0x1a,0x59,0x3f,0xf3,0xe6,0x5a,0x47,0xe0};
    static std::uint8_t multiplicand21[32] = {0xb1,0xb0,0x18,0xf6,0x99,0xae,0xd4,0x54,0x36,0x5b,0x93,0x4b,0xe7,0x56,0x9b,0x27,0xf7,0xe8,0x1b,0xb2,0xd4,0xb6,0x18,0x57,0xd9,0x6c,0x7c,0x24,0x8d,0x85,0xfc,0x49};
    static std::uint8_t product21[64]      = {0x33,0x9c,0x21,0xa3,0xd1,0xd6,0x71,0xf3,0xc8,0x17,0x11,0xb2,0x8a,0xe1,0x4a,0x33,0x32,0x83,0x12,0xf3,0xf1,0x31,0x5b,0x37,0xc9,0x54,0x70,0x08,0x75,0x50,0x71,0xf7,0x0b,0x5a,0x7c,0x73,0x8b,0xc4,0x52,0x79,0x23,0x55,0x22,0xdf,0xee,0x3e,0x85,0xe9,0x89,0xf6,0xa3,0x1e,0xca,0xe1,0x01,0x81,0x40,0x00,0x55,0x4b,0x45,0xde,0xfe,0xe0};
    uint256_from_bytes(multiplier, multiplier21);
    uint256_from_bytes(multiplicand, multiplicand21);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product21, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier22[32]   = {0x18,0x21,0x38,0x97,0x6c,0xf6,0xcd,0x9b,0x41,0x6c,0xa5,0x7b,0x3e,0x73,0x08,0xf9,0x10,0x0e,0x5e,0xa7,0xc2,0x94,0xa8,0xc6,0x25,0x9e,0x8e,0xcf,0xd5,0x5d,0xa7,0x0b};
    static std::uint8_t multiplicand22[32] = {0x43,0x8e,0x48,0xba,0xd2,0xcc,0x66,0x96,0x55,0xb5,0x23,0x1c,0xb2,0xef,0x27,0x50,0x69,0x1c,0x7f,0x25,0xef,0xa9,0x18,0xba,0x8c,0xca,0x4d,0x72,0x12,0x33,0x1a,0xf2};
    static std::uint8_t product22[64]      = {0x06,0x5e,0x1b,0x17,0xf9,0x6f,0x41,0xf0,0xfb,0x87,0xa8,0xd7,0x0e,0x95,0xc0,0xeb,0xd2,0x21,0xe0,0x27,0xd7,0xa6,0x18,0x58,0x66,0x70,0x4f,0x86,0xf3,0xff,0x65,0x9c,0x9d,0x5a,0xe6,0xef,0xfc,0x76,0x56,0x9e,0x94,0x46,0xe0,0x87,0x24,0xcf,0xdd,0xff,0xc6,0xc9,0x04,0xf7,0xba,0xff,0x64,0xba,0xbc,0x6c,0xe5,0x70,0x42,0xb0,0x06,0x66};
    uint256_from_bytes(multiplier, multiplier22);
    uint256_from_bytes(multiplicand, multiplicand22);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product22, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier23[32]   = {0xff,0x22,0x7f,0x03,0xca,0xfb,0x80,0xe7,0xd1,0x6e,0xe8,0x7a,0x6e,0xfc,0x8c,0x58,0x88,0x09,0xf7,0x26,0x9f,0x39,0x05,0x68,0x67,0xaa,0x45,0x6b,0x4a,0x82,0x77,0x8e};
    static std::uint8_t multiplicand23[32] = {0x87,0x79,0x6a,0xfe,0x72,0x51,0x02,0x3b,0x88,0x4c,0x5b,0x04,0x05,0xc9,0xe3,0x9b,0x4f,0x1e,0x0f,0x70,0xca,0x59,0x25,0xdd,0x2a,0x45,0xdf,0x9f,0xaa,0xb3,0x50,0x8b};
    static std::uint8_t product23[64]      = {0x87,0x04,0x32,0xea,0xe7,0x95,0x42,0x5d,0x30,0x4c,0x4f,0x9b,0xec,0xb3,0x41,0x41,0x17,0xf3,0x3f,0x19,0x8f,0xfb,0xcb,0x13,0x0c,0x4b,0x6b,0xf7,0x36,0x83,0x5b,0xc6,0x18,0x3d,0xf7,0xe4,0x85,0x90,0x8f,0x87,0x76,0x62,0x6b,0x43,0x34,0xf7,0x21,0x2a,0x8e,0x80,0x8d,0xd4,0x32,0x22,0xea,0x25,0xbb,0x17,0xe8,0x5a,0x1e,0x7d,0x4a,0x1a};
    uint256_from_bytes(multiplier, multiplier23);
    uint256_from_bytes(multiplicand, multiplicand23);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product23, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier24[32]   = {0x5f,0x2c,0x8c,0x9c,0x88,0xf3,0xf8,0xac,0xfd,0xbf,0x4c,0xaa,0x12,0x45,0x04,0x0c,0x58,0x4d,0x88,0x85,0xd0,0x40,0xcb,0x2a,0xd9,0x18,0x70,0x06,0xda,0x48,0x61,0x3b};
    static std::uint8_t multiplicand24[32] = {0xa5,0x41,0xac,0x03,0xca,0x6b,0x80,0x80,0x73,0xd4,0xfd,0xfd,0xbd,0x94,0x98,0xfa,0xaa,0xdf,0x2f,0x24,0x14,0xfc,0x57,0x7e,0xc0,0x8b,0xa2,0xab,0x51,0xc2,0xbf,0x01};
    static std::uint8_t product24[64]      = {0x3d,0x70,0x20,0xe3,0xef,0x43,0xf5,0x6b,0x7a,0x8b,0x63,0xeb,0x9c,0x2e,0xef,0x74,0xf0,0x4e,0x1a,0x7c,0xf1,0x83,0x03,0x6c,0x9f,0xd6,0x4d,0xc9,0x31,0x05,0xcf,0xab,0x2e,0xb4,0xc3,0xa4,0x52,0x73,0x05,0x91,0xd9,0xa1,0x7d,0x93,0xff,0x23,0x97,0x8e,0x60,0xb7,0x37,0x45,0x79,0x63,0xe4,0x13,0xcb,0xd9,0x26,0xe9,0x34,0x89,0x66,0x3b};
    uint256_from_bytes(multiplier, multiplier24);
    uint256_from_bytes(multiplicand, multiplicand24);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product24, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier25[32]   = {0x76,0x58,0x91,0xa0,0x13,0x1f,0x0d,0xc9,0xcd,0xb9,0xaa,0x7a,0x06,0xe9,0x9d,0xf5,0x5a,0xe3,0x84,0xef,0x81,0x87,0x34,0x66,0xdf,0xb2,0xe4,0xac,0x15,0xb1,0xee,0xe6};
    static std::uint8_t multiplicand25[32] = {0xfd,0xfc,0xc9,0xb0,0x10,0xa2,0xd8,0xba,0xf6,0x1c,0x35,0x23,0x6e,0x57,0x08,0x4d,0x7f,0x95,0x62,0xf1,0x99,0xf3,0x93,0x78,0x24,0xca,0xe0,0x08,0x2e,0x50,0x8a,0xec};
    static std::uint8_t product25[64]      = {0x75,0x6a,0x64,0x57,0x7b,0x64,0x21,0x99,0xdb,0xa0,0xfc,0xa6,0x85,0x5b,0x0c,0xbf,0x1f,0x04,0x94,0xa6,0x77,0xe5,0x7e,0x9e,0x4a,0x8b,0xe1,0xcd,0x99,0xe9,0xbf,0x51,0x62,0xa6,0x8b,0x8b,0xf3,0xbb,0xc8,0x81,0xff,0xf6,0xef,0x60,0x77,0xfb,0x16,0xc2,0x5b,0x89,0xa3,0xdf,0xe1,0xa7,0xba,0x96,0x41,0xf1,0x0a,0x0d,0xe6,0xb0,0x38,0x08};
    uint256_from_bytes(multiplier, multiplier25);
    uint256_from_bytes(multiplicand, multiplicand25);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product25, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier26[32]   = {0xec,0x85,0xf2,0x32,0x5d,0xc7,0x64,0xbf,0x5f,0x78,0xe3,0x7b,0x25,0x08,0xa1,0x04,0xac,0x44,0x40,0x8b,0x7f,0xf7,0xe4,0x37,0x9e,0xa5,0xd8,0x10,0x35,0xc8,0xae,0x1d};
    static std::uint8_t multiplicand26[32] = {0x3f,0x29,0x76,0x15,0x8a,0xf2,0xa3,0xbd,0xf9,0xd6,0x1e,0xc6,0x43,0xa7,0x7f,0xf7,0x50,0x1b,0xd3,0xb4,0x05,0x0f,0x66,0x09,0xee,0x04,0xe1,0x55,0x62,0xae,0x27,0x0c};
    static std::uint8_t product26[64]      = {0x3a,0x5b,0x45,0x27,0xd4,0x25,0x8e,0x8c,0xbe,0x08,0xa4,0xb8,0x36,0x24,0x7f,0xc6,0x37,0x33,0x19,0x8a,0xfc,0xc4,0x39,0xa2,0xcb,0x7f,0x8c,0x2b,0x15,0xff,0x3d,0x4c,0x59,0x13,0xe6,0x04,0xa7,0xd1,0x8a,0x94,0x4c,0x27,0xd9,0xef,0x9b,0xba,0xbc,0xc8,0xa9,0xac,0xec,0xcd,0xac,0x45,0x8f,0xe3,0xae,0x69,0x46,0xa2,0x89,0xa4,0x94,0x5c};
    uint256_from_bytes(multiplier, multiplier26);
    uint256_from_bytes(multiplicand, multiplicand26);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product26, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier27[32]   = {0x21,0xcf,0x2e,0xcc,0x65,0x95,0xac,0x85,0x00,0xc9,0x98,0xb8,0x7a,0x7c,0xbb,0x15,0x28,0x1b,0x18,0x65,0x8e,0x82,0xfe,0x9a,0x6d,0xc3,0x63,0x47,0x22,0xbd,0x45,0x17};
    static std::uint8_t multiplicand27[32] = {0x1b,0x8a,0x4f,0x5f,0x07,0xd8,0xbd,0xb7,0x0e,0x2a,0x88,0x6c,0x8f,0x1d,0xa1,0x84,0x29,0xaa,0xd8,0x45,0xd4,0x94,0x78,0xbd,0x60,0x7a,0x59,0xb8,0xa9,0x3c,0xd4,0x7e};
    static std::uint8_t product27[64]      = {0x03,0xa3,0x1e,0x1a,0x45,0x42,0x47,0x39,0x1f,0x52,0xdc,0x0f,0xdd,0x2a,0x4e,0x49,0x80,0xd6,0xb0,0x43,0xf3,0x52,0x4d,0x83,0x30,0x3d,0x1e,0xf8,0xd5,0xf2,0xfa,0x71,0xd0,0x8f,0x53,0x9e,0x41,0x5e,0xfc,0x9c,0xec,0x01,0xa0,0xaf,0x6d,0xa9,0xa3,0x41,0xb5,0x1b,0xbd,0xeb,0x68,0x44,0x51,0x88,0x61,0x01,0x84,0x48,0x36,0xc3,0x0d,0x52};
    uint256_from_bytes(multiplier, multiplier27);
    uint256_from_bytes(multiplicand, multiplicand27);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product27, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier28[32]   = {0xf8,0x14,0xa3,0x2c,0x55,0xa7,0x47,0x52,0x1f,0xd4,0x88,0x7c,0x85,0x61,0xf9,0x0d,0x4d,0xfa,0x25,0x4a,0xfa,0x9b,0xd8,0xc6,0x92,0xf9,0x36,0x62,0x56,0xc6,0xcf,0xa1};
    static std::uint8_t multiplicand28[32] = {0xf9,0x73,0xd4,0xab,0x27,0xf6,0xe3,0xbe,0x11,0xa6,0xc2,0x99,0x2d,0x7a,0xd9,0xe1,0xe7,0x4a,0xb8,0x89,0xf4,0xc9,0x57,0x74,0xbd,0xd3,0xa9,0x99,0xfd,0x5c,0x9b,0x25};
    static std::uint8_t product28[64]      = {0xf1,0xbc,0x52,0x12,0x5f,0xde,0x49,0x72,0xb3,0x69,0xd9,0xb4,0x78,0x52,0xaa,0x5b,0xe0,0x6a,0x62,0xd3,0x30,0x89,0x47,0x08,0xa2,0x8d,0x02,0x51,0xa0,0xdd,0xdd,0x27,0x12,0x00,0x30,0x34,0xf0,0x18,0x8c,0x0d,0x6c,0x39,0xcb,0xd3,0x57,0xaa,0x8d,0x63,0x83,0x45,0x2a,0x47,0xe0,0x69,0x31,0x28,0xf7,0xa2,0x71,0x9e,0xa5,0x4e,0x7d,0x45};
    uint256_from_bytes(multiplier, multiplier28);
    uint256_from_bytes(multiplicand, multiplicand28);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product28, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier29[32]   = {0xda,0x57,0x59,0x6b,0x63,0xe9,0xc2,0x8b,0xb4,0xbc,0xa7,0xc2,0x67,0xfe,0xa9,0x1e,0x56,0x0e,0x10,0xa7,0xae,0x35,0x60,0x6e,0x27,0x76,0x5c,0xc5,0x85,0xb2,0x0c,0x52};
    static std::uint8_t multiplicand29[32] = {0x4b,0x80,0xee,0x92,0xac,0x0a,0xf2,0xcb,0x57,0xe9,0x48,0x00,0xb3,0x49,0xe7,0xbe,0xdc,0x05,0xf7,0x55,0x9c,0x52,0xff,0x99,0x15,0x6d,0x52,0x53,0x35,0x75,0x7a,0x81};
    static std::uint8_t product29[64]      = {0x40,0x65,0x8e,0x59,0x79,0xa6,0x4d,0x94,0x28,0x15,0x81,0xee,0x04,0x25,0xdb,0x35,0xd1,0x71,0x08,0xdb,0x2f,0x7a,0xa9,0x53,0x8a,0x64,0xcb,0x8b,0xe7,0x71,0x29,0xf7,0x4f,0x8f,0x53,0xde,0xc4,0x7e,0x21,0x26,0x58,0x42,0xa3,0x97,0x7c,0xac,0xd8,0x11,0x85,0x8d,0xc2,0x39,0xae,0x79,0x8c,0x4e,0xef,0x65,0x1a,0xc1,0xd4,0x11,0x49,0x52};
    uint256_from_bytes(multiplier, multiplier29);
    uint256_from_bytes(multiplicand, multiplicand29);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product29, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier30[32]   = {0x2f,0xa7,0x98,0x1f,0x9f,0xc2,0x84,0xab,0x75,0xc0,0xf1,0x76,0x03,0x58,0xa1,0x29,0x09,0x57,0xa5,0x67,0xab,0x4a,0x23,0xfb,0xa7,0xd9,0x50,0x76,0xcd,0x8a,0x91,0x22};
    static std::uint8_t multiplicand30[32] = {0x31,0xab,0x72,0xe8,0xdd,0xb6,0x2e,0xe6,0xeb,0xa1,0xb9,0x10,0xb9,0x72,0x0c,0x32,0xed,0x98,0xf5,0xa0,0x76,0x96,0xd1,0x14,0xb1,0x7f,0x41,0x9f,0x44,0x88,0x06,0x85};
    static std::uint8_t product30[64]      = {0x09,0x3e,0xfe,0x74,0xa5,0x99,0x7c,0x55,0x64,0x99,0xfb,0x5b,0x43,0x79,0x99,0xb2,0x54,0x65,0x48,0x5a,0xe8,0x89,0x67,0x66,0xb8,0xb2,0xc7,0xfe,0x38,0x69,0x54,0x70,0x8c,0xb6,0x03,0xe0,0x10,0xfd,0xfd,0x53,0xb1,0x04,0x25,0xf2,0x99,0x0d,0x41,0xed,0x89,0xc6,0xa6,0x9b,0x12,0x53,0x7f,0x37,0xf3,0x47,0x5c,0xd2,0x2a,0x74,0x32,0xaa};
    uint256_from_bytes(multiplier, multiplier30);
    uint256_from_bytes(multiplicand, multiplicand30);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product30, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier31[32]   = {0x58,0x32,0x0b,0x2e,0x6c,0xdd,0x87,0x20,0x77,0xb8,0xd7,0xe3,0x83,0x41,0x9a,0x19,0xb6,0xf2,0x44,0xce,0xe4,0x16,0x7a,0x06,0xfb,0x54,0x1b,0x32,0x02,0xdd,0xa7,0x7d};
    static std::uint8_t multiplicand31[32] = {0x54,0x98,0x6b,0xcc,0x5d,0x68,0xaa,0x7b,0x57,0x43,0x80,0x87,0x45,0x68,0xf8,0xac,0x5c,0xe2,0xdb,0xec,0xeb,0xf2,0x52,0xac,0x1b,0x11,0x83,0x7e,0x66,0xa4,0xd5,0x87};
    static std::uint8_t product31[64]      = {0x1d,0x24,0xee,0x85,0x32,0x04,0xe1,0x7e,0x5c,0x83,0x27,0x5c,0xee,0x94,0x66,0x21,0x10,0x7e,0xd6,0x41,0x1f,0x20,0xac,0x2d,0xc0,0x13,0x7a,0x44,0x1a,0x0a,0xc9,0xe1,0x81,0x2d,0x35,0x51,0xc2,0x11,0x53,0xfc,0xbc,0xf3,0xd7,0x82,0x64,0xdd,0x52,0x61,0xa1,0x00,0x80,0x6e,0xc1,0xaa,0xca,0xf6,0x01,0x43,0x81,0x03,0x09,0x52,0x53,0xeb};
    uint256_from_bytes(multiplier, multiplier31);
    uint256_from_bytes(multiplicand, multiplicand31);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product31, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier32[32]   = {0x8b,0x5c,0xc3,0x96,0xea,0x83,0x9e,0x65,0x40,0xed,0x5a,0xd9,0x8b,0xc4,0x43,0x3c,0x2f,0x61,0x29,0x4b,0xb7,0x23,0xbd,0xd7,0x00,0xa1,0xb9,0x03,0x98,0xb7,0xd4,0x7b};
    static std::uint8_t multiplicand32[32] = {0x71,0xc5,0x63,0x17,0x91,0xf4,0xe9,0x22,0xa7,0xf0,0x66,0x13,0x0e,0xe2,0x0e,0x22,0x1d,0xa0,0x29,0xec,0x71,0x56,0x9f,0x62,0x3f,0x8b,0x26,0xbd,0xce,0xac,0x3b,0xc4};
    static std::uint8_t product32[64]      = {0x3d,0xef,0x66,0xa9,0xd5,0x14,0x5d,0x90,0xc0,0x16,0xe8,0xbc,0xf8,0xdf,0x7e,0x2d,0x2f,0xf2,0x12,0xd3,0x7f,0xb7,0x04,0x63,0xf7,0xc1,0xe5,0x64,0x91,0xef,0x9a,0x52,0x01,0x04,0xa5,0xe4,0xb0,0xca,0x35,0xb8,0xf6,0x2b,0x73,0xdd,0x74,0x59,0x7d,0x7c,0x3b,0x6c,0x2c,0x49,0x23,0x23,0x7a,0xce,0xa1,0xcf,0x24,0x40,0x07,0x5b,0x07,0x2c};
    uint256_from_bytes(multiplier, multiplier32);
    uint256_from_bytes(multiplicand, multiplicand32);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product32, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier33[32]   = {0xdd,0xbb,0xa8,0xf4,0x0d,0xa6,0x06,0xb3,0x64,0xee,0xd7,0x61,0x57,0x98,0xe4,0x55,0x02,0xe1,0xb2,0x02,0xcd,0x9f,0xee,0x83,0xaa,0x56,0xe7,0x7f,0x70,0xc8,0xfe,0xbe};
    static std::uint8_t multiplicand33[32] = {0x70,0x40,0x47,0x1f,0x82,0xb2,0x7e,0xeb,0x02,0xf8,0xd7,0x29,0x17,0x88,0x5e,0x8f,0x37,0x31,0x98,0x44,0x38,0xae,0x9e,0x33,0x9f,0x76,0x19,0x8a,0x53,0x62,0x02,0xec};
    static std::uint8_t product33[64]      = {0x61,0x39,0xc6,0x6f,0x59,0xc5,0x17,0xfc,0x2f,0x97,0x4d,0xb9,0xac,0xe0,0x4d,0x36,0xd5,0x1e,0xab,0xed,0xfb,0x44,0x1f,0xb9,0xbd,0x93,0x7b,0x1f,0x5d,0xac,0x4a,0xe0,0xa6,0xe9,0xa8,0x87,0xd9,0x8f,0xba,0xcd,0xbe,0x69,0x82,0x34,0xa2,0xfe,0x57,0x2d,0x53,0xad,0x7f,0x00,0x33,0x95,0x5e,0x76,0x81,0x14,0xa0,0x52,0xaa,0x04,0x53,0x28};
    uint256_from_bytes(multiplier, multiplier33);
    uint256_from_bytes(multiplicand, multiplicand33);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product33, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier34[32]   = {0x00,0x54,0xb3,0x9b,0x1b,0x7a,0xc9,0x6e,0xc0,0x92,0x82,0xf0,0x60,0x74,0xbd,0x90,0xb4,0x35,0xc7,0xd2,0xc2,0xe2,0xd0,0x4a,0xb7,0xba,0xd8,0x87,0xba,0xa9,0x3f,0x89};
    static std::uint8_t multiplicand34[32] = {0x64,0x70,0x67,0xe5,0x2a,0x18,0xe6,0x78,0xae,0x4b,0x0a,0x0c,0x76,0x93,0x54,0xc6,0x90,0xa9,0xf7,0x82,0x96,0x5c,0x1d,0x38,0x37,0x31,0x98,0xc0,0x56,0x38,0x5a,0x81};
    static std::uint8_t product34[64]      = {0x00,0x21,0x3b,0x59,0x8a,0xad,0xfb,0xe9,0xe9,0xe7,0x29,0xa8,0x03,0x59,0xe0,0xdd,0x60,0x66,0xff,0x26,0xa9,0xbf,0x30,0xdf,0xc7,0x15,0x1f,0x65,0x3f,0x35,0x56,0xb8,0xa6,0x08,0xd5,0xb1,0x4e,0xeb,0xbc,0x6c,0x87,0x9e,0x42,0x39,0xb5,0x63,0xe4,0xbe,0xc7,0xb8,0xf2,0x2d,0x0f,0xd2,0xae,0x7f,0x50,0x8e,0x83,0x22,0x7b,0x97,0x2e,0x09};
    uint256_from_bytes(multiplier, multiplier34);
    uint256_from_bytes(multiplicand, multiplicand34);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product34, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier35[32]   = {0x21,0x41,0x17,0x8d,0x56,0x2d,0x8b,0xcb,0x60,0x39,0xb1,0x19,0x2f,0xa0,0xe3,0xcf,0x10,0xe5,0xa5,0x4f,0x10,0x15,0x4c,0x41,0xd9,0xf5,0x8e,0x79,0xe4,0xed,0xb4,0x36};
    static std::uint8_t multiplicand35[32] = {0xa9,0xd5,0xd3,0xfa,0xbb,0x82,0x68,0xc3,0x88,0x65,0xea,0xf1,0xcd,0xdb,0x8d,0x55,0x35,0xfb,0x71,0xf7,0xd6,0x94,0x1f,0x95,0xe4,0xb0,0x77,0x5a,0x6b,0x6f,0x18,0x8b};
    static std::uint8_t product35[64]      = {0x16,0x0f,0xbf,0x3e,0x1e,0xd2,0xc0,0x1a,0x51,0x07,0x80,0x75,0x7a,0xd8,0xdc,0xbd,0xa1,0x53,0xc1,0x0c,0x18,0x95,0xa9,0x5b,0xc3,0x3a,0x2c,0x1a,0xe3,0xc7,0xc2,0x5b,0x88,0x10,0x3b,0x3e,0x2f,0xc7,0xd4,0x47,0xda,0xc2,0x9f,0xf6,0x0d,0xd1,0x77,0x41,0x97,0x5f,0x76,0x8f,0xf5,0x01,0xfd,0xd5,0x0e,0xaf,0xdc,0x05,0x4b,0x5f,0xe9,0x52};
    uint256_from_bytes(multiplier, multiplier35);
    uint256_from_bytes(multiplicand, multiplicand35);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product35, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier36[32]   = {0xcf,0xb0,0x4a,0x0a,0x10,0xa3,0x3b,0x7f,0x6d,0x26,0x00,0x5d,0xbb,0x8e,0x7a,0xe3,0x11,0xe4,0x45,0xb6,0xdf,0xae,0xc1,0x96,0x62,0xe1,0xc7,0x8a,0xa3,0x70,0x83,0xaa};
    static std::uint8_t multiplicand36[32] = {0xbd,0xe7,0x13,0x19,0xf1,0xb3,0xa7,0x20,0xa3,0x86,0xdb,0x9d,0x5c,0x7e,0xbf,0x95,0xeb,0xbd,0x0a,0xdc,0x36,0x1e,0xc6,0x0d,0x0c,0x22,0x6f,0x03,0xb7,0xd5,0x45,0x28};
    static std::uint8_t product36[64]      = {0x9a,0x10,0x9e,0x3b,0x5f,0x2a,0x35,0xfd,0x3a,0x9f,0x96,0xf3,0xc6,0x35,0xeb,0xf2,0xaf,0x77,0x77,0xe5,0xff,0xa7,0xd0,0xf1,0x71,0xe6,0x99,0xac,0xc2,0x4f,0x67,0x63,0x1b,0xab,0xae,0x39,0x62,0xa9,0xca,0xb8,0x77,0x98,0x62,0xbf,0x92,0x77,0x26,0x8c,0x97,0xf8,0x72,0x21,0x4b,0x01,0x0d,0xe2,0x97,0x3b,0x37,0x70,0xef,0x83,0x64,0x90};
    uint256_from_bytes(multiplier, multiplier36);
    uint256_from_bytes(multiplicand, multiplicand36);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product36, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier37[32]   = {0xc1,0xa0,0x74,0x03,0x4a,0xb5,0x72,0xae,0x6d,0xb0,0x28,0xf7,0x02,0x7f,0x21,0xd6,0x31,0x1a,0x4d,0x1a,0x37,0x4f,0x0f,0x20,0x41,0xc2,0x57,0xc6,0xab,0xa8,0xd8,0xb9};
    static std::uint8_t multiplicand37[32] = {0x56,0xfc,0x44,0x1f,0xec,0xbe,0x2e,0x87,0x7a,0x0c,0xf2,0x2d,0x68,0x95,0x26,0x6e,0xca,0x6a,0x5e,0xa4,0xe9,0x1d,0x62,0xf0,0x2b,0x28,0x5f,0x2a,0x3b,0x61,0x32,0x6c};
    static std::uint8_t product37[64]      = {0x41,0xca,0xb4,0x72,0x12,0xa5,0x2e,0x9c,0x2b,0x13,0x1e,0xf5,0x53,0xcd,0xd6,0x3c,0x94,0xe4,0xf0,0x6c,0xbc,0xf6,0x35,0x2d,0x01,0xe8,0x67,0x48,0x8e,0x82,0x47,0x37,0xa9,0xce,0xf6,0x1f,0x1e,0x70,0x0d,0x12,0xde,0xac,0x3d,0xc9,0x3d,0x49,0x02,0x71,0xcb,0x64,0x6d,0xf8,0x6e,0x3b,0xb1,0xd6,0x81,0x00,0xff,0x9e,0x26,0xa8,0x90,0x0c};
    uint256_from_bytes(multiplier, multiplier37);
    uint256_from_bytes(multiplicand, multiplicand37);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product37, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier38[32]   = {0x1c,0x36,0x85,0x3b,0xb8,0x99,0x0e,0x1a,0xe4,0xf1,0x08,0xd4,0xb7,0x2f,0x3b,0x20,0x6c,0x5e,0xde,0x8b,0xb4,0x5e,0xba,0x65,0x24,0x1c,0xc6,0xee,0xef,0x70,0x47,0x47};
    static std::uint8_t multiplicand38[32] = {0xf6,0x21,0xba,0x02,0xa9,0xf8,0x6e,0xa4,0x66,0x5c,0xc6,0x14,0x11,0x79,0xe0,0xb2,0xa7,0x10,0x73,0x2e,0x8e,0x2f,0x6c,0x62,0x18,0x68,0xf9,0xc0,0x23,0x7f,0xaf,0x6e};
    static std::uint8_t product38[64]      = {0x1b,0x20,0x1b,0x8e,0x78,0x0b,0xac,0xd6,0x59,0x15,0x9c,0xc6,0xf5,0x4c,0x18,0x0a,0xa8,0xfc,0xc1,0x7f,0xea,0x9f,0xfb,0x45,0x9b,0xfe,0x5f,0x9a,0xb6,0x74,0x87,0x89,0x6c,0xf7,0xcd,0xfb,0xc5,0x63,0x5e,0xbf,0x14,0x4d,0x96,0x96,0x02,0x0c,0xd7,0xa2,0xcb,0xee,0xfe,0x84,0x57,0xe9,0xb8,0x2f,0xf2,0x01,0x77,0x0a,0xb4,0x31,0x29,0x82};
    uint256_from_bytes(multiplier, multiplier38);
    uint256_from_bytes(multiplicand, multiplicand38);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product38, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier39[32]   = {0x93,0xc5,0x45,0x94,0x2b,0x10,0x27,0x46,0x29,0xd2,0x79,0x7d,0x3c,0x5d,0xef,0x27,0x52,0x4b,0xf7,0xa9,0x54,0xbb,0xa9,0x08,0x24,0xdb,0xa8,0x59,0x12,0xc4,0xb5,0xe7};
    static std::uint8_t multiplicand39[32] = {0x91,0xe5,0xc6,0x5e,0x48,0xc1,0xee,0x8c,0xd7,0x1f,0x29,0xbf,0x04,0x10,0xa3,0xbb,0xc3,0xc2,0x98,0xeb,0x3c,0x79,0x4c,0x37,0x43,0xcd,0xd3,0x1d,0xe5,0x99,0xf1,0xd6};
    static std::uint8_t product39[64]      = {0x54,0x37,0x5e,0x61,0x2a,0x2e,0x3e,0x66,0x01,0x51,0xc9,0xe8,0x62,0x41,0x38,0x92,0x6e,0xfd,0xbe,0x9d,0xba,0x00,0xf2,0xcf,0xa1,0xb2,0xbc,0xc2,0x75,0x91,0xe8,0x0d,0x1c,0xe4,0xc0,0xd1,0x56,0x9c,0xd6,0xf3,0x84,0xef,0x40,0xed,0xe9,0x9d,0xbe,0x11,0xf7,0xb3,0x89,0x4e,0xb2,0x2a,0x24,0xb2,0x45,0x51,0xc3,0x94,0x39,0xbd,0x86,0x1a};
    uint256_from_bytes(multiplier, multiplier39);
    uint256_from_bytes(multiplicand, multiplicand39);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product39, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier40[32]   = {0x72,0xc4,0xe8,0xf5,0xf0,0xa3,0xfc,0x2d,0x21,0xbe,0xf0,0x70,0x98,0xeb,0x1b,0x7e,0x55,0x59,0xc6,0xd5,0x41,0x01,0x39,0x40,0xee,0xa6,0xe6,0x3d,0x38,0x13,0x1e,0x44};
    static std::uint8_t multiplicand40[32] = {0x02,0xe2,0xe5,0x16,0x7a,0xb6,0xe4,0x79,0xa9,0x82,0xda,0x36,0x97,0xab,0x25,0xfa,0x1d,0x2a,0x8f,0xda,0xe2,0x63,0x5a,0x37,0xa6,0xaa,0x03,0x4c,0x5f,0x4b,0x82,0xaf};
    static std::uint8_t product40[64]      = {0x01,0x4b,0x42,0x5b,0xcd,0x53,0x93,0x93,0x16,0xda,0x5c,0x72,0x3d,0x05,0x7f,0x77,0xd6,0x19,0xd2,0x0c,0x61,0x28,0xd4,0xb7,0xce,0xf3,0xf4,0x2c,0x71,0x1c,0xdb,0x7f,0x48,0x79,0xd4,0xbf,0x11,0xe7,0x64,0x01,0xe1,0x0a,0xd5,0x5e,0x71,0xe5,0x86,0xe0,0xe4,0x2a,0x7b,0x7a,0xd3,0xcd,0x13,0xad,0x20,0xf0,0xc8,0x58,0x24,0x5c,0x38,0x7c};
    uint256_from_bytes(multiplier, multiplier40);
    uint256_from_bytes(multiplicand, multiplicand40);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product40, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier41[32]   = {0xb9,0xac,0xa6,0x66,0x99,0x2e,0xb5,0x31,0x23,0xd1,0xea,0xa9,0x76,0xd4,0x86,0x52,0x2e,0x11,0x2f,0xff,0xb9,0xe8,0xfe,0x1b,0x40,0xa6,0x36,0x29,0xd7,0x9c,0xd4,0x04};
    static std::uint8_t multiplicand41[32] = {0xb7,0x70,0x52,0xa2,0xb5,0x15,0xb9,0xb2,0x66,0x42,0xff,0x71,0x6e,0x6a,0x2b,0x75,0x41,0xee,0x02,0x3e,0x7b,0x4f,0xe2,0xdd,0x55,0x4c,0x8d,0xee,0xfd,0xd9,0x76,0x35};
    static std::uint8_t product41[64]      = {0x85,0x0b,0xe2,0x6b,0x74,0x48,0x65,0x72,0xa4,0xe2,0xf2,0x36,0x9b,0x63,0x7b,0x19,0xea,0xdf,0x71,0xe4,0x20,0xf7,0xf2,0xaf,0x3e,0x57,0x8d,0xce,0x91,0x1a,0x7e,0x44,0x91,0xd0,0x07,0xbb,0x77,0x45,0xcb,0x0e,0x66,0x0e,0x90,0xf8,0x1b,0x5e,0x45,0x21,0x75,0x79,0x41,0x3b,0xc4,0x84,0x46,0xec,0x5c,0xb1,0x91,0x3b,0x98,0x95,0xbc,0xd4};
    uint256_from_bytes(multiplier, multiplier41);
    uint256_from_bytes(multiplicand, multiplicand41);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product41, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier42[32]   = {0x6c,0x43,0x4e,0xcd,0x6c,0x9c,0x88,0xb1,0x5e,0xcd,0xf9,0x1d,0x68,0xcc,0x71,0xf0,0x57,0x5a,0xc7,0x20,0x2b,0xc5,0xfd,0x7b,0xac,0x10,0x75,0x92,0x0c,0xc1,0x9d,0x5f};
    static std::uint8_t multiplicand42[32] = {0x6f,0xa2,0xc1,0x71,0x82,0x41,0xaf,0xe6,0x7e,0xa7,0xb9,0xc6,0x3a,0x68,0x3d,0xf9,0x99,0x02,0x90,0xfd,0x25,0x54,0xc0,0x32,0x11,0x5a,0xa4,0x86,0x9b,0x42,0x98,0x80};
    static std::uint8_t product42[64]      = {0x2f,0x36,0x03,0x91,0xaf,0x4b,0x37,0x61,0x2c,0xb6,0xb6,0x58,0xe0,0x34,0x73,0xe7,0x9c,0x60,0x18,0x6b,0xf7,0x17,0x5b,0x27,0x4b,0x66,0x9a,0x7f,0xc6,0x38,0x74,0x49,0x05,0xc2,0x96,0x41,0x69,0x5d,0x65,0x44,0x90,0xf1,0x00,0x87,0x4d,0xd5,0x7f,0x67,0xa1,0x1c,0xf4,0x68,0x62,0xb4,0xee,0x1e,0xe3,0xf9,0x40,0x86,0x6d,0xbd,0x17,0x80};
    uint256_from_bytes(multiplier, multiplier42);
    uint256_from_bytes(multiplicand, multiplicand42);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product42, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier43[32]   = {0x60,0xea,0xac,0xa9,0xf6,0x27,0x86,0x18,0xcb,0x65,0x92,0x4b,0x6f,0xc5,0x6a,0xa2,0x43,0x46,0x67,0x3e,0xcd,0xd9,0xd5,0xc0,0x86,0xb0,0xac,0x59,0xad,0x37,0xed,0x4f};
    static std::uint8_t multiplicand43[32] = {0x8b,0xbd,0xbf,0x38,0x39,0x6d,0xae,0xea,0x69,0xf2,0xc9,0x20,0x35,0x94,0x83,0x07,0x0c,0xf7,0xa4,0x66,0x92,0x9a,0xbc,0x5f,0x1c,0xe4,0x30,0x9b,0xb7,0x69,0xb9,0xd3};
    static std::uint8_t product43[64]      = {0x34,0xe7,0x41,0x66,0x22,0x08,0x8b,0x68,0x68,0x96,0x44,0xc0,0x1a,0xae,0x61,0x2c,0x1c,0x57,0xed,0x3e,0x33,0x91,0x57,0x51,0x56,0xd7,0x28,0x2e,0xf9,0xb1,0x12,0x54,0x95,0x30,0xe6,0x38,0x4a,0x2d,0xf1,0x5c,0x66,0x53,0xeb,0x64,0x44,0x61,0xcb,0xec,0x8b,0x1e,0x81,0xa3,0x87,0xe9,0x7b,0x8a,0xd7,0x7d,0x61,0x7f,0xfd,0xfd,0xaf,0x1d};
    uint256_from_bytes(multiplier, multiplier43);
    uint256_from_bytes(multiplicand, multiplicand43);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product43, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier44[32]   = {0x4f,0x0d,0x06,0x7c,0x00,0x31,0x60,0x61,0x6d,0xe0,0x70,0x9b,0x38,0xc5,0x88,0xa6,0x64,0x02,0x6d,0xbe,0x54,0xe8,0x94,0xc1,0xe3,0x25,0x26,0x16,0x99,0xf8,0x9e,0x2a};
    static std::uint8_t multiplicand44[32] = {0x07,0x3a,0x75,0x43,0x09,0x5d,0xee,0x44,0x16,0xac,0x25,0xc3,0xbd,0x4e,0x78,0x45,0x66,0x92,0x04,0xa5,0x7d,0x19,0xc7,0x18,0xc2,0xd8,0xbc,0x63,0xf0,0x2b,0x02,0x04};
    static std::uint8_t product44[64]      = {0x02,0x3b,0x68,0x56,0x83,0x5d,0x39,0xe5,0xf7,0x97,0xdf,0x0e,0xd2,0x8b,0xbe,0x6b,0x53,0xdd,0x98,0x1b,0x9a,0x54,0x15,0xe3,0x2c,0x31,0x96,0x20,0xf3,0xaf,0x9f,0x66,0xfd,0x40,0xcf,0xd6,0x86,0x9c,0xf1,0x19,0xb3,0x61,0x2e,0x03,0x91,0x56,0xb1,0xad,0x85,0x86,0x65,0x8b,0xef,0xc1,0xf1,0x21,0xd3,0xc1,0xb8,0xd6,0x4a,0x2c,0xcc,0xa8};
    uint256_from_bytes(multiplier, multiplier44);
    uint256_from_bytes(multiplicand, multiplicand44);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product44, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier45[32]   = {0xaf,0xc7,0x29,0x00,0x52,0xc9,0x0f,0xdf,0xdf,0x60,0x9a,0x48,0x43,0xed,0x40,0x2f,0x31,0x55,0xff,0x64,0x5a,0x8a,0xc5,0x41,0xa8,0xdb,0x9e,0x2a,0xa6,0x7f,0x99,0xc3};
    static std::uint8_t multiplicand45[32] = {0x74,0x02,0x42,0x23,0x33,0xf4,0x95,0xb4,0x29,0xbf,0xa8,0x8e,0x14,0x4b,0xc6,0x2b,0x72,0x9f,0xe9,0x27,0x7a,0x36,0xe7,0xd7,0xbb,0x4d,0x2c,0xc0,0x88,0x7d,0x19,0xc7};
    static std::uint8_t product45[64]      = {0x4f,0xa7,0xcb,0x8b,0xfb,0xfd,0x0e,0xef,0x7c,0xe9,0xe0,0xf7,0x41,0xa1,0xe2,0x3e,0x8c,0x05,0x48,0xa9,0x54,0xc0,0xb9,0x09,0x4f,0x81,0x77,0x2e,0x8e,0xde,0xfd,0xac,0x9d,0x9b,0x1c,0x07,0x14,0x76,0x27,0x01,0xd1,0x46,0x6c,0x55,0x3a,0x0e,0xa8,0x8e,0x53,0xf9,0xdb,0x38,0x96,0x4b,0x34,0xdd,0x17,0x39,0x09,0xa7,0x8f,0x6b,0x91,0x95};
    uint256_from_bytes(multiplier, multiplier45);
    uint256_from_bytes(multiplicand, multiplicand45);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product45, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier46[32]   = {0x4c,0x91,0x68,0x8a,0xa7,0x7b,0x85,0x3a,0x79,0xff,0x43,0x02,0xae,0x99,0x22,0x17,0x71,0x71,0x08,0x10,0xdb,0xc4,0x2a,0xc8,0x9b,0x4e,0xa5,0x10,0x8a,0x0b,0x07,0x9a};
    static std::uint8_t multiplicand46[32] = {0x4b,0xb5,0xb0,0x4a,0xad,0xc0,0xd6,0xbb,0x3b,0x41,0x74,0xac,0x46,0x13,0x79,0x82,0x35,0x10,0x0b,0x83,0xda,0xe7,0xdc,0x9f,0x19,0xf3,0x35,0x23,0xa9,0x61,0x14,0x75};
    static std::uint8_t product46[64]      = {0x16,0xa4,0xf1,0x29,0xd6,0xf9,0x16,0x84,0x51,0xe3,0x32,0xc1,0xde,0xa2,0x5e,0x55,0x6f,0x86,0x77,0x04,0x9a,0x05,0x6a,0x52,0xab,0x15,0x84,0x26,0xe7,0xd0,0xd2,0x7a,0xf6,0x83,0x29,0x17,0x39,0x94,0x96,0x78,0x62,0xca,0x75,0x5e,0x75,0x75,0x30,0x5e,0x44,0xca,0x73,0xee,0x6f,0xfc,0x28,0x48,0xff,0x7f,0x3d,0x98,0x7e,0xfc,0x81,0x62};
    uint256_from_bytes(multiplier, multiplier46);
    uint256_from_bytes(multiplicand, multiplicand46);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product46, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier47[32]   = {0x98,0x46,0x80,0x07,0xe3,0x80,0xe7,0xcc,0x34,0x11,0x9f,0x32,0x4f,0x36,0xdc,0xc1,0x80,0x3a,0xca,0xcd,0x55,0x6f,0x67,0x9f,0xd4,0xaf,0x61,0xe3,0x30,0xfe,0x0e,0x47};
    static std::uint8_t multiplicand47[32] = {0xb6,0xd2,0xf4,0xe4,0x3f,0x2e,0x88,0xf3,0x13,0x47,0x66,0xc4,0x13,0x62,0xa9,0x53,0x10,0x03,0x4f,0xf5,0x70,0xbd,0xf6,0xec,0x69,0xfb,0xa6,0xcc,0xca,0xc5,0x67,0x8c};
    static std::uint8_t product47[64]      = {0x6c,0xbf,0x9a,0x85,0x98,0x9c,0xd8,0x09,0xcb,0x13,0x57,0xde,0xad,0x9d,0xab,0xf1,0xcd,0x5a,0xef,0x76,0x78,0x79,0x2a,0x25,0x72,0xd3,0x89,0xe7,0x23,0x48,0x6a,0xcc,0x61,0x3e,0xc2,0x1f,0xe4,0x41,0x88,0xfd,0xec,0xe2,0x5c,0x61,0xea,0xb5,0x78,0xe6,0x7f,0x5f,0x4d,0xd3,0xab,0xdb,0xfb,0x65,0x5f,0x1b,0x86,0x4e,0x05,0x51,0x5f,0xd4};
    uint256_from_bytes(multiplier, multiplier47);
    uint256_from_bytes(multiplicand, multiplicand47);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product47, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier48[32]   = {0x10,0x07,0x17,0x79,0x2e,0x7c,0x5f,0xf2,0x27,0xe4,0x45,0x41,0x0a,0x0f,0x5a,0x4c,0xc4,0x25,0x64,0x68,0x63,0x8c,0xbd,0x1e,0x41,0x4e,0x3a,0x02,0x17,0xb0,0xff,0x95};
    static std::uint8_t multiplicand48[32] = {0x52,0x43,0x32,0x3f,0x62,0xa5,0xaa,0x31,0x7c,0xcb,0xbd,0x57,0x6b,0xe6,0xa9,0xc1,0xa2,0x9c,0x2b,0xb3,0x17,0x4b,0xe1,0x23,0xc2,0x64,0x7e,0x72,0x51,0xca,0xc7,0x89};
    static std::uint8_t product48[64]      = {0x05,0x26,0x7a,0x85,0x50,0x1c,0x89,0x65,0xbc,0x29,0x32,0x1d,0x68,0xeb,0x84,0xcd,0xfe,0x8f,0xa1,0xd9,0x76,0x9a,0xd4,0xbb,0x47,0x30,0x7d,0xc0,0x5a,0x36,0x9a,0xcc,0xb3,0xf9,0x22,0x26,0x8e,0x6a,0x5f,0x50,0x0c,0x47,0x81,0xed,0x74,0x43,0x3e,0xa2,0xe3,0xe6,0x35,0x61,0x5f,0x81,0x27,0xd2,0x9b,0xeb,0x84,0x6b,0x14,0xf7,0x99,0xbd};
    uint256_from_bytes(multiplier, multiplier48);
    uint256_from_bytes(multiplicand, multiplicand48);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product48, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier49[32]   = {0x09,0x0a,0xcf,0x89,0xfa,0xb0,0x33,0x03,0xdd,0x53,0x5c,0xf2,0xdf,0x97,0xba,0xb3,0x60,0x2b,0x2c,0x15,0xfd,0x94,0xd2,0xcb,0x4b,0x5a,0x21,0xaf,0xe3,0x8e,0xc6,0x96};
    static std::uint8_t multiplicand49[32] = {0x2e,0xac,0xdd,0x6e,0x86,0xd7,0x01,0x73,0x6a,0x29,0xd4,0x01,0x0f,0x77,0xe1,0x87,0xe4,0xdf,0x38,0x4e,0xc1,0x5a,0xe3,0x63,0x07,0xcc,0xee,0x93,0x1c,0x13,0x48,0x51};
    static std::uint8_t product49[64]      = {0x01,0xa6,0x0c,0x60,0x78,0x52,0xa3,0x04,0x70,0xa2,0x6e,0x3c,0xb0,0x38,0x97,0xc6,0x32,0x35,0xcc,0x87,0x10,0x1b,0x40,0x17,0x7e,0x8b,0x0e,0x8b,0x9b,0x07,0xd6,0x31,0x7f,0x49,0xc2,0x69,0xa8,0x50,0xda,0xb1,0x13,0xe2,0xb1,0x50,0xa5,0x9a,0x30,0xca,0x68,0xa4,0xbc,0x53,0x31,0x33,0x3b,0xa8,0xaf,0x13,0x1e,0x1a,0x4d,0x29,0x05,0x76};
    uint256_from_bytes(multiplier, multiplier49);
    uint256_from_bytes(multiplicand, multiplicand49);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product49, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier50[32]   = {0xcb,0x0d,0x7e,0x35,0xd0,0xc7,0x81,0xe8,0x86,0xfb,0x4f,0x7d,0x07,0xb7,0xa5,0xb5,0xa9,0xd3,0x49,0x31,0x05,0x6d,0x7a,0x82,0x2f,0x78,0x46,0x2f,0x7f,0xbd,0xb1,0xcc};
    static std::uint8_t multiplicand50[32] = {0x1d,0xd7,0x4a,0x75,0x59,0x98,0xe6,0x6f,0x70,0x28,0x40,0x91,0xb6,0x85,0x7e,0x04,0x72,0xcc,0xd1,0x61,0x98,0x5c,0x24,0xb0,0xd3,0x74,0x61,0x14,0xc7,0x66,0x1a,0x97};
    static std::uint8_t product50[64]      = {0x17,0xab,0x4a,0xb0,0x12,0x90,0x25,0xe1,0xb1,0x0c,0xa5,0x6d,0x36,0xa3,0xd4,0xb3,0x7f,0x95,0x03,0xc8,0x3a,0xba,0x1a,0xae,0xe1,0x40,0x90,0x8f,0xf6,0x55,0x2f,0x94,0xf7,0x4e,0x52,0x8d,0x7b,0xab,0xb8,0xbc,0xe6,0x00,0xf4,0xf7,0xd0,0x00,0xe9,0xd5,0x62,0xf7,0x57,0x7a,0x15,0x51,0x86,0xf3,0xa9,0xeb,0xc3,0xb8,0x08,0x3a,0x97,0x54};
    uint256_from_bytes(multiplier, multiplier50);
    uint256_from_bytes(multiplicand, multiplicand50);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product50, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier51[32]   = {0x9e,0x2f,0x51,0x93,0x2b,0xbc,0x14,0x9a,0x16,0x7f,0x88,0xc2,0x1a,0xb5,0x0d,0x2f,0x13,0xfe,0x2c,0x18,0xfa,0xc4,0x90,0xbb,0x38,0xc3,0x45,0x75,0x8a,0xec,0x20,0x1a};
    static std::uint8_t multiplicand51[32] = {0xa8,0xb2,0xc3,0x8f,0x84,0xee,0xbd,0xb3,0xc1,0x0a,0x73,0x56,0xfe,0x71,0xa6,0x12,0x69,0x74,0x64,0x9a,0x68,0xbc,0xe7,0x06,0x93,0x67,0x0b,0x85,0x00,0x27,0xa4,0x9a};
    static std::uint8_t product51[64]      = {0x68,0x3d,0x83,0x46,0x06,0xbd,0x6d,0x16,0xde,0x9f,0xad,0xec,0x5f,0xf5,0xaa,0x26,0x3f,0x8e,0x9d,0xf0,0x76,0x7f,0x9d,0xe5,0x1f,0xa3,0xe3,0xd9,0xa3,0x7b,0x5b,0x7c,0x22,0xa7,0xf0,0xe2,0x80,0x3f,0x7f,0xa6,0xea,0x11,0x51,0x4e,0x01,0x03,0xd7,0xfd,0x59,0x98,0x0a,0xf9,0x9b,0x94,0x7b,0xd1,0xfd,0x63,0x0b,0x2f,0xba,0x91,0xf7,0xa4};
    uint256_from_bytes(multiplier, multiplier51);
    uint256_from_bytes(multiplicand, multiplicand51);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product51, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier52[32]   = {0x44,0x09,0x9a,0xbb,0x9f,0x0b,0x6b,0xa6,0xa4,0xaf,0x89,0xb8,0x9e,0xb5,0x3c,0x37,0xdb,0x9b,0xe0,0x1e,0xbb,0xa6,0x37,0xc2,0x6a,0x32,0x14,0x48,0x1a,0xab,0x2a,0x72};
    static std::uint8_t multiplicand52[32] = {0x07,0x46,0x89,0x57,0x44,0xd9,0xc1,0x20,0x78,0xc1,0x89,0x29,0x7c,0x3f,0x2c,0x04,0x36,0xcf,0x01,0xf8,0x92,0x19,0xf9,0x98,0xea,0x4a,0x0f,0xf1,0xa5,0xc8,0xa8,0x84};
    static std::uint8_t product52[64]      = {0x01,0xef,0x02,0x5b,0xc6,0x05,0x37,0x83,0x05,0xcb,0x2c,0x63,0x63,0x22,0x28,0x7d,0x35,0x4e,0xfb,0x79,0xaa,0x09,0x07,0x11,0xdb,0x3b,0xb1,0x44,0x2e,0x49,0x9d,0x78,0x6c,0x66,0x48,0xfe,0x22,0x0c,0x3c,0x5d,0xa2,0xdb,0x2d,0x18,0x29,0x74,0xb3,0x5e,0x63,0x4b,0xc8,0x28,0xdd,0x3b,0x25,0x89,0x8c,0x3a,0x92,0x14,0xb7,0x2c,0xb2,0xc8};
    uint256_from_bytes(multiplier, multiplier52);
    uint256_from_bytes(multiplicand, multiplicand52);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product52, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier53[32]   = {0x8c,0x93,0x40,0x07,0x51,0x48,0x53,0x63,0xf6,0x47,0xf9,0x28,0x4f,0x91,0x0c,0x18,0x1e,0x66,0x23,0x9e,0x28,0x2c,0x80,0x3e,0xd8,0x4d,0xb9,0x98,0xd6,0x9b,0xf6,0xe8};
    static std::uint8_t multiplicand53[32] = {0x27,0x59,0x7b,0x14,0x8e,0x49,0x7f,0x2b,0x42,0x98,0xfd,0xab,0xcc,0x33,0x83,0xb8,0x91,0x2c,0x9a,0x7e,0x5b,0x30,0x2e,0x39,0x96,0x89,0xb9,0x5e,0xc8,0x6d,0x19,0x5a};
    static std::uint8_t product53[64]      = {0x15,0x9b,0x91,0x88,0x69,0x53,0xd4,0xcf,0x71,0x3a,0xc8,0xc9,0x1c,0x2b,0xe0,0xb1,0x9c,0x9a,0x6b,0xff,0xdc,0x3f,0xe7,0x27,0xfe,0x6c,0xfb,0x0d,0xf5,0xda,0x59,0x02,0xf1,0xdb,0x9b,0x08,0x0f,0x67,0xc2,0x18,0xf1,0x5e,0x64,0xdd,0xf8,0xa2,0x05,0xf7,0x4d,0x45,0x32,0x30,0x36,0xb5,0x8a,0x4f,0xa5,0x0a,0xb7,0x2e,0x0e,0xb9,0x75,0x90};
    uint256_from_bytes(multiplier, multiplier53);
    uint256_from_bytes(multiplicand, multiplicand53);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product53, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier54[32]   = {0xa4,0xf7,0x4f,0x1f,0x45,0x99,0x42,0x64,0x04,0xb6,0x0c,0xf0,0x80,0x2d,0x63,0x47,0x73,0x8b,0x9f,0x6f,0x28,0xc0,0xe0,0x1c,0x93,0xb0,0xa3,0x19,0x06,0x0d,0xae,0xdf};
    static std::uint8_t multiplicand54[32] = {0xc8,0x77,0x39,0x41,0x67,0xd9,0xb4,0x2c,0x8a,0x51,0xef,0xfe,0x95,0x0f,0xb7,0x6e,0x64,0xe3,0x38,0x75,0xcb,0xdf,0xc8,0xac,0xe5,0x1d,0x85,0x3e,0x70,0x87,0xba,0x56};
    static std::uint8_t product54[64]      = {0x81,0x2e,0x09,0xab,0x6c,0x3d,0xee,0x1e,0x09,0xa6,0xe7,0xaa,0xb5,0x73,0x42,0x51,0xfd,0x57,0xad,0xd0,0x8c,0x90,0xd4,0x9b,0xb1,0x2f,0x93,0xcd,0x42,0xb4,0x21,0x88,0x1c,0x62,0xa1,0xa0,0xfe,0x18,0x60,0xa0,0x4c,0x13,0xb6,0xef,0x92,0xe5,0xb1,0x8f,0x11,0xa1,0x04,0x50,0xd4,0x23,0x59,0x6b,0xc6,0x1c,0x5b,0x88,0xc1,0x3f,0xc4,0xea};
    uint256_from_bytes(multiplier, multiplier54);
    uint256_from_bytes(multiplicand, multiplicand54);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product54, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier55[32]   = {0xad,0xa6,0xda,0x90,0x4e,0x42,0x8a,0xb2,0x8f,0xfe,0x49,0xe8,0xd6,0x13,0xbc,0xd5,0x79,0xe9,0x3f,0x9f,0x8d,0xaa,0xc4,0xcf,0xca,0x05,0x5b,0x63,0xbb,0x74,0x6a,0x78};
    static std::uint8_t multiplicand55[32] = {0xc5,0xc9,0xd8,0x2a,0x82,0x03,0x50,0xaa,0xee,0x7f,0x8e,0x14,0x26,0x32,0x8e,0x77,0x20,0xd4,0xa7,0xde,0x4e,0x33,0x68,0x5a,0xa7,0xd9,0xfb,0xa5,0x10,0xbf,0x41,0x6f};
    static std::uint8_t product55[64]      = {0x86,0x2a,0x50,0xd4,0x45,0x81,0x3f,0x59,0x39,0x43,0xbf,0x2a,0x41,0xe7,0x72,0x08,0xcf,0xd8,0x52,0xbf,0x7a,0xe2,0x10,0x31,0x6a,0x35,0x69,0xa0,0xe0,0x9f,0x3b,0x2a,0xe3,0xdf,0x8c,0x00,0x4f,0x94,0x56,0xe3,0x9a,0x3e,0xd6,0xe8,0x32,0x9c,0x2e,0xb3,0x1b,0xea,0xdb,0xee,0x91,0xa3,0xdd,0x7e,0xdd,0xcb,0x5c,0xb1,0xc6,0x0a,0xa2,0x08};
    uint256_from_bytes(multiplier, multiplier55);
    uint256_from_bytes(multiplicand, multiplicand55);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product55, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier56[32]   = {0x9a,0x07,0x0a,0x28,0x78,0x78,0x18,0xfb,0x6f,0x79,0xd1,0xd7,0xcd,0xb1,0x79,0x24,0x4e,0xa6,0x8f,0x86,0x1b,0x5b,0x85,0x7d,0x81,0x6b,0xea,0xdf,0xc4,0x3b,0x3f,0x4b};
    static std::uint8_t multiplicand56[32] = {0xbf,0x16,0x15,0x30,0xe0,0x40,0xfb,0xba,0x8e,0xd4,0x14,0xa4,0xbc,0xa1,0xd8,0x8e,0x05,0x89,0x61,0x43,0x83,0x82,0x38,0xfd,0x61,0x49,0xfa,0x76,0xb3,0x8a,0xbe,0x08};
    static std::uint8_t product56[64]      = {0x72,0xf8,0x89,0xef,0x0d,0x70,0x70,0x89,0x47,0xe2,0x8c,0x9b,0xff,0x5a,0xde,0xda,0x8f,0xdf,0x8f,0x03,0xc0,0x50,0xf9,0x5a,0xc4,0x75,0x56,0x65,0x6f,0xb1,0x13,0x9a,0x99,0xbe,0x71,0xfa,0x0d,0x0d,0x19,0x84,0xfa,0x2d,0xb5,0x36,0x1a,0x6e,0x55,0xa8,0x41,0x39,0xab,0x59,0xb6,0xd7,0xb1,0x26,0xfd,0x08,0x0a,0x65,0xaa,0x41,0xa4,0x58};
    uint256_from_bytes(multiplier, multiplier56);
    uint256_from_bytes(multiplicand, multiplicand56);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product56, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier57[32]   = {0xe6,0xbc,0x5a,0xe9,0x9b,0xe6,0xde,0x31,0xed,0x7c,0x72,0xda,0xf5,0x49,0x1d,0xe4,0xb9,0x7c,0x72,0x6b,0x82,0xc8,0x18,0x48,0x13,0x73,0x1a,0x74,0x6b,0x61,0xcf,0xe8};
    static std::uint8_t multiplicand57[32] = {0xc5,0xcd,0x1d,0xa0,0x04,0xda,0xd0,0xff,0xa1,0xab,0xb9,0xf1,0x86,0xa8,0x05,0xd0,0x52,0xf5,0xbf,0xb3,0x92,0x4c,0x12,0xbe,0x9b,0xa0,0x44,0xd4,0xe2,0x07,0x0e,0xee};
    static std::uint8_t product57[64]      = {0xb2,0x47,0xd1,0x7e,0x22,0x6f,0xf3,0xb7,0x73,0xc4,0x70,0x2b,0x50,0x16,0x1d,0x9f,0x3e,0xaa,0xca,0x9c,0x6b,0xd5,0x98,0xb0,0x67,0x1a,0xd9,0x13,0xc8,0xeb,0x43,0x5c,0x33,0x75,0x98,0x9f,0x1b,0x2e,0x50,0x35,0x6a,0x58,0x45,0xfe,0x9c,0xf6,0xdb,0x13,0xae,0xf5,0x86,0x9b,0x22,0xb5,0x72,0xb5,0x31,0xaa,0x0b,0x72,0xad,0xa5,0xf9,0xb0};
    uint256_from_bytes(multiplier, multiplier57);
    uint256_from_bytes(multiplicand, multiplicand57);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product57, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier58[32]   = {0x65,0x11,0x8e,0x00,0xb6,0x81,0x00,0x58,0x44,0xbc,0x6c,0x1e,0x32,0x4f,0xde,0x6f,0x14,0x10,0xe1,0xae,0xca,0x9a,0xe5,0xd3,0x1a,0x0e,0x58,0xa3,0xca,0x99,0x27,0xbe};
    static std::uint8_t multiplicand58[32] = {0x61,0x26,0x30,0x91,0x18,0xc6,0x3a,0x0c,0xab,0x0a,0x1b,0x5d,0x1b,0xae,0x27,0xb4,0x4d,0x39,0xa8,0x8c,0x01,0x90,0xa1,0xe4,0x89,0xeb,0xbe,0x70,0xcf,0xfe,0x44,0x09};
    static std::uint8_t product58[64]      = {0x26,0x5a,0xba,0x95,0xec,0x9b,0x70,0xb5,0xee,0x76,0x20,0x59,0xb5,0x99,0x0a,0x9d,0x45,0xe5,0x21,0x37,0x8c,0x9f,0xda,0x58,0x22,0xc0,0xed,0x42,0xcd,0x04,0xda,0x90,0x86,0xf3,0x4f,0xfd,0x50,0x77,0x61,0x89,0x8f,0xb5,0xfa,0x27,0xfa,0xbc,0x6b,0x7d,0x05,0x73,0x64,0x49,0xeb,0x20,0xc7,0x5a,0x95,0x4b,0xe1,0xca,0xde,0x74,0xdd,0xae};
    uint256_from_bytes(multiplier, multiplier58);
    uint256_from_bytes(multiplicand, multiplicand58);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product58, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier59[32]   = {0x4d,0x51,0x20,0x70,0x54,0xfe,0xca,0x43,0x2a,0x98,0x1a,0x23,0x8e,0x98,0x72,0x2b,0xd3,0x6a,0x3e,0x81,0x25,0xdd,0x0a,0xfe,0x64,0x63,0xc5,0x91,0x86,0x3a,0x09,0xc8};
    static std::uint8_t multiplicand59[32] = {0x5c,0x7d,0x82,0xf6,0xa5,0x56,0x82,0x78,0x7a,0xff,0x7d,0x9a,0x2f,0x20,0x6f,0x1f,0xf5,0xe7,0x89,0xf5,0xf1,0x83,0x0c,0x0b,0xf9,0x50,0xa4,0x82,0x23,0xc8,0x1c,0xd5};
    static std::uint8_t product59[64]      = {0x1b,0xef,0x0f,0xd2,0xe5,0xc2,0xb2,0xc4,0xd7,0xd1,0xc6,0xd0,0x33,0x79,0xfd,0x06,0x5e,0x4e,0xd6,0x36,0x9f,0xfa,0x21,0xf1,0xb3,0x1c,0x2f,0x26,0xe1,0xcc,0xc7,0x1f,0xbb,0x68,0x2b,0xf3,0x18,0xff,0x52,0x44,0x3f,0x57,0x46,0xd7,0x8d,0x9b,0x01,0x7b,0x8e,0x5d,0xed,0x7d,0x01,0x25,0xc9,0xbb,0x9d,0xe7,0x31,0x01,0x03,0x9c,0x03,0x68};
    uint256_from_bytes(multiplier, multiplier59);
    uint256_from_bytes(multiplicand, multiplicand59);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product59, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier60[32]   = {0xfa,0x99,0x92,0x86,0x45,0x0f,0xbc,0xa9,0x07,0x90,0xa6,0x75,0x80,0x8f,0x69,0xe3,0xf8,0x84,0x9f,0x77,0x2b,0xed,0x61,0x6f,0xcc,0x89,0xae,0x0b,0x71,0x02,0xbd,0x1e};
    static std::uint8_t multiplicand60[32] = {0x54,0x72,0xb2,0xac,0x0a,0x60,0x81,0x64,0x20,0x53,0xaa,0x4e,0x0b,0x6c,0xc9,0x68,0xfe,0xfa,0x67,0x2f,0x3a,0x68,0x5e,0xce,0x89,0x9c,0xed,0x84,0xa2,0x93,0x7e,0xf4};
    static std::uint8_t product60[64]      = {0x52,0xaa,0xab,0x5e,0x7f,0xac,0x31,0x1e,0x69,0x05,0x9f,0x33,0x44,0xc6,0x76,0x3b,0xa3,0xfc,0x67,0x0e,0x04,0xf2,0x21,0x9c,0xa1,0xe7,0xd0,0xf3,0xf5,0x0a,0x1d,0x75,0x72,0x9d,0x17,0xdf,0x17,0x57,0x55,0xff,0x78,0x7a,0x14,0xb3,0xe1,0x88,0xe1,0x15,0x7c,0x26,0xb9,0x63,0x14,0x3e,0x54,0xf6,0xff,0xbf,0x6e,0x3e,0xa3,0xeb,0x04,0x98};
    uint256_from_bytes(multiplier, multiplier60);
    uint256_from_bytes(multiplicand, multiplicand60);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product60, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier61[32]   = {0x48,0x5b,0x13,0x70,0xa3,0x7e,0x75,0x5c,0x09,0x2d,0x88,0x5a,0x36,0x20,0x5f,0x56,0xa7,0xab,0xe1,0xf5,0xee,0x4e,0xa1,0x30,0x4a,0x40,0xf2,0x9a,0x3c,0x3b,0x6c,0xd2};
    static std::uint8_t multiplicand61[32] = {0x1c,0x7e,0xee,0x72,0x17,0xa4,0x9e,0x98,0x1e,0x0a,0xd7,0x5f,0x35,0xa5,0x48,0xb4,0x0a,0x68,0xc8,0xb0,0x73,0xfa,0x98,0x2e,0x9e,0x2a,0xba,0x2c,0x92,0x02,0x49,0x9c};
    static std::uint8_t product61[64]      = {0x08,0x0d,0xd6,0x58,0xce,0xa2,0x63,0x26,0xfb,0x23,0x38,0xe4,0x54,0x82,0xd0,0xa9,0x34,0xf1,0x2f,0x24,0xa4,0x83,0x94,0xcd,0x9b,0x7e,0xe8,0xc6,0xd0,0x67,0xba,0x91,0xbc,0xe0,0x36,0xa8,0xf9,0xe5,0xdd,0x4a,0xe3,0xef,0x62,0x82,0x99,0xa5,0x44,0xf0,0xe6,0xf6,0x25,0xc4,0x18,0xe1,0x2c,0x62,0x9e,0x0b,0x75,0xc8,0x43,0xe2,0x31,0xf8};
    uint256_from_bytes(multiplier, multiplier61);
    uint256_from_bytes(multiplicand, multiplicand61);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product61, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier62[32]   = {0x16,0xf1,0xf1,0xe8,0x42,0xe6,0x81,0xf1,0x5e,0x08,0xf5,0x22,0x73,0x49,0x7a,0xc4,0xfe,0x68,0x06,0xe3,0xbf,0x45,0x7b,0xd6,0xb5,0xc8,0x8f,0x0e,0x12,0x22,0x2a,0xcf};
    static std::uint8_t multiplicand62[32] = {0xee,0x02,0x24,0x6b,0xf1,0xa1,0x19,0xd1,0xc4,0x85,0x83,0x88,0x57,0xda,0xe8,0xfe,0x15,0x8e,0x4a,0xeb,0xe7,0xb8,0xd6,0x0f,0xcd,0xaf,0x68,0x47,0xb1,0x3a,0x2d,0xbd};
    static std::uint8_t product62[64]      = {0x15,0x55,0x20,0x0d,0x84,0xcf,0xcd,0x4d,0x01,0xbd,0xc6,0x39,0x1c,0xf3,0x31,0xf4,0xa2,0x90,0x8e,0x79,0x40,0xdc,0x4b,0xe1,0x41,0x77,0xa8,0x9e,0xb9,0x8c,0x42,0x9f,0x00,0x4f,0x3d,0x6e,0xcd,0x3d,0x63,0xe1,0xb6,0xf8,0xa6,0x67,0x1a,0x87,0x57,0xce,0x13,0x27,0x14,0x5f,0x10,0xd8,0xb7,0xda,0x89,0x4f,0xc9,0x53,0x36,0xa5,0xfd,0xd3};
    uint256_from_bytes(multiplier, multiplier62);
    uint256_from_bytes(multiplicand, multiplicand62);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product62, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier63[32]   = {0x2c,0x9c,0xca,0x12,0x27,0xcf,0xe5,0x4a,0x8a,0x3c,0xad,0xc6,0xf0,0x19,0xf4,0xb5,0x85,0xe7,0x10,0x7a,0x9d,0x0c,0x66,0x95,0xe1,0x80,0x3c,0x75,0x52,0x41,0x1b,0x9a};
    static std::uint8_t multiplicand63[32] = {0x41,0x29,0x42,0x27,0x8c,0x25,0x94,0x17,0x41,0x7e,0x99,0x2a,0xd6,0x08,0xa6,0x78,0x4a,0xdd,0xb3,0x4c,0x6c,0xe8,0xad,0xeb,0x3f,0xb8,0xba,0x60,0x95,0xca,0x08,0xbe};
    static std::uint8_t product63[64]      = {0x0b,0x5a,0xff,0xf2,0x49,0x6b,0xeb,0x85,0x24,0x8a,0xaa,0x17,0xf4,0x50,0x9f,0x0f,0xa5,0x70,0xce,0xf7,0x87,0xf0,0xf0,0xbe,0x61,0x96,0x0d,0x9b,0xc2,0x87,0x57,0xa8,0x15,0xdc,0xf9,0xb6,0xfe,0xc5,0x92,0xf6,0xad,0x75,0x07,0xcf,0xb3,0xc8,0x28,0x7a,0xb9,0xbd,0xdf,0x25,0xad,0x7c,0xdb,0x60,0x3f,0xab,0x93,0xd5,0x7e,0xb3,0x4c,0x4c};
    uint256_from_bytes(multiplier, multiplier63);
    uint256_from_bytes(multiplicand, multiplicand63);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product63, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier64[32]   = {0xf5,0xe8,0x8d,0xab,0xd0,0x7d,0x7b,0x19,0x63,0x89,0x10,0x44,0x8d,0x93,0xd7,0x0e,0xf7,0x77,0xab,0x3c,0xe6,0xb2,0xe6,0x0e,0x24,0x21,0x04,0xf5,0x8c,0xef,0xe8,0xb4};
    static std::uint8_t multiplicand64[32] = {0xfa,0x6e,0x02,0x24,0xd1,0x36,0xf3,0x89,0x47,0x03,0x0f,0x22,0x8e,0xa6,0x65,0x3a,0x57,0x0f,0x61,0x21,0x59,0x12,0xa8,0x9b,0xc6,0x84,0x4c,0x21,0xfc,0xb7,0x8d,0x80};
    static std::uint8_t product64[64]      = {0xf0,0x8e,0xc6,0x55,0xd8,0x35,0x08,0x92,0xc0,0x50,0xe4,0x80,0x83,0xc8,0xdc,0xd0,0x57,0x74,0x65,0xbe,0x69,0x1b,0xe5,0x73,0xe8,0xc0,0x20,0xfd,0x3f,0x1a,0x32,0xbe,0x52,0x11,0x96,0x72,0x44,0x6a,0xf9,0x72,0x6b,0xfb,0x47,0xec,0xe8,0xe9,0xbe,0xb3,0x8c,0x86,0xdc,0x67,0xe7,0xcd,0xed,0x9e,0x1b,0x54,0x11,0x2b,0x23,0xcb,0x7e,0x00};
    uint256_from_bytes(multiplier, multiplier64);
    uint256_from_bytes(multiplicand, multiplicand64);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product64, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier65[32]   = {0xa2,0x34,0xf5,0xcb,0x14,0x43,0x52,0x90,0x36,0xfe,0x62,0x94,0x87,0x24,0xd4,0x04,0xc6,0x62,0xc9,0x2b,0x09,0x82,0x6c,0x44,0x79,0x78,0x9b,0x97,0xba,0xf9,0x12,0x6f};
    static std::uint8_t multiplicand65[32] = {0x91,0xd7,0xab,0x5b,0x1b,0xf5,0xa8,0x3a,0xd8,0x9a,0xef,0x36,0x78,0xe3,0x2f,0xd2,0x55,0x13,0xba,0x86,0x45,0xa2,0x17,0xdf,0xfa,0x99,0xe7,0x1a,0x59,0xea,0x3c,0x89};
    static std::uint8_t product65[64]      = {0x5c,0x68,0xa6,0x45,0x8e,0xc1,0x69,0x3a,0xe3,0x62,0x41,0xbd,0x8d,0x50,0xa1,0x18,0x6d,0x4d,0x71,0x77,0xc4,0x54,0xa6,0x94,0xd8,0x89,0x6f,0xf2,0xf7,0x1f,0x81,0xae,0x56,0x90,0x52,0xf6,0x7e,0xb6,0x14,0x2e,0xd3,0x1c,0x16,0xff,0x8c,0x5b,0x2d,0xaa,0x74,0x9a,0xdb,0x5c,0x96,0xc6,0xad,0x20,0x65,0xf9,0x5b,0x5e,0xe0,0x12,0xe1,0x67};
    uint256_from_bytes(multiplier, multiplier65);
    uint256_from_bytes(multiplicand, multiplicand65);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product65, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier66[32]   = {0x27,0x8c,0x8c,0x32,0x7a,0x92,0xdb,0x05,0x5d,0x5f,0x5b,0x72,0xa9,0x0d,0x55,0x67,0xae,0x01,0x09,0xfd,0x84,0x89,0x51,0x15,0x8d,0x2a,0xdd,0x90,0xb5,0x74,0xec,0x33};
    static std::uint8_t multiplicand66[32] = {0x50,0x0a,0x01,0x0a,0x92,0xa5,0x1f,0x8d,0x25,0xe6,0x86,0x13,0xd6,0x30,0x33,0xc1,0xa5,0x25,0x08,0xdd,0x82,0x9e,0xde,0x85,0x24,0x0b,0x77,0xdc,0x51,0x9d,0x8b,0x13};
    static std::uint8_t product66[64]      = {0x0c,0x5d,0x77,0x76,0x6e,0xf8,0x05,0x0c,0x91,0xaa,0x09,0x55,0xd4,0x7a,0xc0,0x45,0x9e,0x61,0x38,0x1f,0x85,0x23,0xb9,0x12,0x5c,0x77,0x64,0xd3,0xbb,0x93,0x2c,0x26,0x36,0x9f,0x0b,0xc2,0x21,0x6b,0x26,0x6a,0x0c,0x2f,0x47,0xec,0x81,0x47,0x6f,0x84,0x1e,0xf2,0x62,0x76,0x65,0xb7,0xb6,0x16,0x08,0x1c,0xfc,0x88,0xf2,0x34,0x38,0xc9};
    uint256_from_bytes(multiplier, multiplier66);
    uint256_from_bytes(multiplicand, multiplicand66);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product66, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier67[32]   = {0x0c,0x86,0xbd,0xbd,0xcf,0xdd,0x41,0x77,0xc3,0x97,0xcb,0x47,0xcf,0x5b,0xe9,0x77,0xda,0x70,0x7a,0xd6,0xf2,0x4a,0xa3,0x10,0xd5,0x98,0xd2,0xce,0xc2,0x01,0xad,0x60};
    static std::uint8_t multiplicand67[32] = {0x0e,0xf1,0xef,0x3f,0x05,0x5c,0x3f,0xd5,0xce,0x45,0x26,0xdb,0x77,0x17,0xcb,0x62,0x15,0x69,0xa3,0xeb,0xa7,0x7e,0x72,0x4f,0xe3,0x56,0x0d,0x8c,0x4c,0xc0,0x13,0x01};
    static std::uint8_t product67[64]      = {0x00,0xbb,0x34,0xed,0xe1,0x9e,0xd4,0xe5,0x6a,0x2e,0xc4,0xdf,0x07,0xd3,0xdc,0xaa,0x56,0xf8,0xcf,0x09,0x47,0x5e,0x9f,0xe9,0x4a,0x9d,0x60,0x95,0xbb,0x7a,0x73,0x63,0xa3,0x67,0x94,0xd0,0xba,0x5f,0xdc,0x43,0x28,0xad,0x5c,0xe3,0x33,0x7a,0xb5,0x0f,0xe4,0x83,0x97,0xc7,0x15,0x2c,0x26,0xf7,0x36,0xe0,0xdc,0x6f,0x69,0xdf,0xcd,0x60};
    uint256_from_bytes(multiplier, multiplier67);
    uint256_from_bytes(multiplicand, multiplicand67);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product67, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier68[32]   = {0x9f,0x62,0x84,0xf9,0x07,0x2a,0xa6,0xdd,0xe1,0x1e,0x1b,0x33,0xe7,0x24,0x5a,0xa3,0xc9,0x21,0xe8,0x32,0x8f,0xfe,0xa2,0x7e,0xeb,0xfc,0x5a,0x15,0x38,0xae,0x97,0x25};
    static std::uint8_t multiplicand68[32] = {0x2c,0x59,0xab,0xc1,0x78,0x0f,0x6d,0x8f,0x54,0xe7,0x80,0x3d,0x81,0x84,0x82,0x1a,0x35,0x3c,0x92,0xb3,0xbb,0x96,0xa7,0xfa,0xee,0x93,0x6a,0x47,0x18,0x21,0xce,0x1f};
    static std::uint8_t product68[64]      = {0x1b,0x9c,0xc3,0x0a,0x4a,0xa7,0x33,0x5a,0xbf,0xe8,0xa1,0x09,0x67,0xb2,0x93,0x04,0x80,0x9e,0x58,0x09,0xb1,0x7f,0xc6,0x7a,0xdd,0x94,0xb4,0xf3,0xce,0x33,0xf4,0xeb,0x27,0x50,0x1a,0x85,0xdb,0x79,0x47,0x90,0xb5,0xb4,0x8d,0xca,0x86,0x46,0x61,0x71,0xa3,0x23,0x51,0xe5,0x6a,0x06,0x42,0x7f,0x71,0x58,0xe6,0x1e,0x4e,0x89,0x13,0x7b};
    uint256_from_bytes(multiplier, multiplier68);
    uint256_from_bytes(multiplicand, multiplicand68);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product68, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier69[32]   = {0xd2,0x6d,0xec,0xe4,0x03,0x07,0x5d,0x35,0x81,0x5a,0x16,0x9c,0x3c,0xe0,0x0b,0x3b,0xf1,0xc3,0xb0,0x97,0x41,0x94,0x9e,0x81,0x9f,0x32,0xc3,0x4a,0xa1,0xda,0xc4,0x67};
    static std::uint8_t multiplicand69[32] = {0x0e,0x85,0x81,0x7e,0x5a,0xec,0x82,0xe8,0x67,0xa4,0x7f,0x5b,0xc9,0x02,0xd6,0x4b,0x96,0x28,0x30,0xe7,0x5b,0xf3,0x83,0xd3,0x07,0x18,0x05,0xbe,0x63,0x8f,0x1f,0xba};
    static std::uint8_t product69[64]      = {0x0b,0xef,0xc0,0x81,0xcb,0xd6,0x85,0xe5,0xf3,0xd6,0x42,0xb5,0x0d,0x27,0x29,0x89,0x95,0xd9,0xcd,0x66,0x30,0xf0,0xa1,0xfc,0xdb,0x38,0xa3,0x0a,0xe4,0x15,0xd2,0x07,0x03,0x33,0xe9,0xb0,0x47,0x05,0x51,0xb6,0x44,0x9d,0x0b,0x47,0x84,0x03,0xd6,0x46,0xab,0xcb,0x4d,0x51,0x33,0xa4,0x8f,0xa9,0x64,0xab,0xb8,0x6c,0xa1,0x44,0x2b,0xd6};
    uint256_from_bytes(multiplier, multiplier69);
    uint256_from_bytes(multiplicand, multiplicand69);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product69, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier70[32]   = {0x9a,0x28,0x65,0x94,0x07,0xc4,0xc0,0xf0,0xac,0xed,0x7d,0x0c,0xfa,0x76,0x1d,0xbb,0x92,0x90,0xeb,0x07,0x7e,0x52,0x37,0x3d,0x6c,0xbe,0xe1,0xab,0x8a,0x02,0xb4,0x9b};
    static std::uint8_t multiplicand70[32] = {0x18,0xd5,0x77,0x73,0xda,0x9a,0xc3,0x2d,0x7a,0x73,0xb4,0xa5,0x9f,0x80,0x73,0x87,0xc9,0x80,0xed,0x12,0xbb,0x0a,0x27,0xaf,0xe9,0x11,0x04,0x5a,0x5d,0x39,0x1a,0xdd};
    static std::uint8_t product70[64]      = {0x0e,0xf4,0x55,0x10,0xef,0xe5,0xf2,0x3c,0x5d,0x69,0x74,0xc1,0xe8,0x64,0x6d,0xc3,0xad,0xe5,0x25,0xe8,0x00,0x78,0x15,0x75,0x9b,0x8f,0x6c,0xca,0xb3,0x21,0xd1,0xb5,0x60,0xd6,0x79,0x67,0xa8,0xbc,0x8f,0xd8,0xa5,0xc6,0xe4,0xf2,0x8c,0x11,0x6f,0x63,0x50,0x9f,0xf2,0x41,0x5f,0xd2,0x33,0x88,0x75,0x19,0xdd,0xce,0xf0,0x30,0xa7,0xcf};
    uint256_from_bytes(multiplier, multiplier70);
    uint256_from_bytes(multiplicand, multiplicand70);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product70, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier71[32]   = {0xd6,0x4f,0xac,0x6b,0xad,0xb8,0x02,0xc4,0x91,0xc9,0x6b,0xc0,0xff,0x19,0xf0,0x6d,0x7e,0x67,0x4d,0xb3,0xcc,0x22,0xd1,0x65,0x87,0xdd,0x2c,0x39,0xb8,0x0b,0x4f,0xa8};
    static std::uint8_t multiplicand71[32] = {0x22,0xe4,0x7e,0x0a,0xca,0x2a,0x31,0x1d,0xe3,0x13,0x25,0x6a,0x6c,0xe3,0xb3,0x1c,0xed,0x44,0x63,0xc2,0x3a,0xbf,0x26,0x2b,0xd8,0x25,0x7a,0x2e,0x75,0xb2,0xd9,0xe6};
    static std::uint8_t product71[64]      = {0x1d,0x35,0xdd,0x60,0x1c,0x31,0x14,0x33,0x72,0xd8,0xf7,0x14,0xc7,0x6d,0xe1,0x82,0xb6,0x2c,0xdc,0x50,0x1f,0x37,0xb8,0x41,0xf4,0x30,0x1a,0xd3,0xc3,0xc6,0x24,0x8b,0xe7,0x83,0x72,0x55,0xa6,0x38,0x0c,0x5b,0x06,0xcc,0x9a,0x40,0x2e,0x9e,0x8c,0x74,0xcb,0xd2,0x89,0x91,0xe8,0xfb,0xa8,0x86,0x65,0xb8,0x2c,0x52,0x1b,0x7e,0xf8,0xf0};
    uint256_from_bytes(multiplier, multiplier71);
    uint256_from_bytes(multiplicand, multiplicand71);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product71, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier72[32]   = {0xb7,0x3f,0x3c,0xe5,0xba,0x90,0xe1,0xa6,0xb9,0xc7,0xa1,0x6d,0x46,0xc6,0x84,0x0f,0x9d,0x35,0x17,0x12,0xe7,0x66,0xbe,0xcc,0x2d,0x36,0xdf,0xae,0xb5,0xf2,0xc1,0x20};
    static std::uint8_t multiplicand72[32] = {0xc0,0xfd,0x52,0xf2,0xf4,0x9c,0x16,0x8b,0x06,0xac,0xab,0x08,0xb6,0xdf,0x14,0x13,0xc4,0xd4,0xc1,0x72,0x51,0x8d,0x53,0x2d,0xae,0xf8,0x5b,0xef,0x84,0xa1,0x84,0x95};
    static std::uint8_t product72[64]      = {0x8a,0x24,0xc2,0x8b,0xa5,0x57,0x32,0x0f,0xd7,0x80,0xb4,0xf3,0x00,0x80,0x81,0x63,0xda,0x56,0x04,0x14,0xb2,0xab,0xbe,0x03,0x34,0xf4,0xd7,0x01,0x6e,0x75,0x41,0x03,0xe1,0xe4,0xe3,0xa2,0x2d,0x2c,0x59,0xab,0x88,0xd1,0xa0,0x92,0x21,0x99,0x1e,0x57,0xfd,0x70,0x99,0xf6,0x46,0x79,0x92,0xd7,0x5e,0x40,0x8c,0xa1,0x06,0xfe,0xe7,0xa0};
    uint256_from_bytes(multiplier, multiplier72);
    uint256_from_bytes(multiplicand, multiplicand72);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product72, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier73[32]   = {0xf8,0x85,0xfd,0x64,0x6c,0x81,0x56,0x56,0x1a,0xe5,0x32,0x43,0xec,0x4e,0xb3,0xaa,0x77,0x0f,0x93,0xca,0xef,0xe5,0xdd,0x4a,0x80,0x35,0x0d,0x22,0x88,0x06,0x5c,0x26};
    static std::uint8_t multiplicand73[32] = {0xd4,0x08,0xf3,0xc1,0xcd,0x79,0x93,0xe8,0xc7,0x6d,0x62,0x80,0xe1,0x93,0x60,0x40,0xbe,0x71,0xa7,0x6e,0x40,0xe6,0x06,0x77,0xc4,0xb3,0x30,0x44,0xd9,0x56,0x82,0x6e};
    static std::uint8_t product73[64]      = {0xcd,0xd7,0xa6,0xaa,0x69,0x02,0x2e,0x13,0xae,0x4f,0xf8,0x77,0x60,0x6e,0x93,0xd7,0x18,0x6d,0xaa,0x6e,0x16,0x6c,0x21,0xd1,0x94,0x5a,0xf5,0x85,0xaf,0x89,0xbe,0x3b,0x84,0xcb,0x43,0xea,0xf0,0xd9,0xf4,0x64,0x5c,0x73,0xb5,0x76,0xc9,0x36,0x49,0x1c,0x14,0xb0,0x1b,0x1e,0x97,0xf2,0xa0,0x69,0x8f,0xe7,0xde,0x40,0xd8,0x4a,0xe4,0x54};
    uint256_from_bytes(multiplier, multiplier73);
    uint256_from_bytes(multiplicand, multiplicand73);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product73, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier74[32]   = {0x5d,0xb4,0xc5,0x9a,0x23,0x6a,0x75,0xee,0xc5,0xdd,0xa0,0xc7,0x42,0xed,0xb6,0xa7,0x22,0x9a,0x7d,0x63,0xdd,0xf9,0xfd,0x69,0xdc,0xd2,0xde,0x77,0xe5,0x1b,0xdf,0xde};
    static std::uint8_t multiplicand74[32] = {0x63,0xc5,0xaa,0xf3,0xd9,0x08,0xca,0xfb,0x73,0x5f,0x20,0x09,0x25,0x9a,0x3d,0x2e,0xe8,0x02,0x83,0x86,0x59,0xe3,0x5a,0x81,0xbe,0xeb,0xca,0x98,0x48,0x16,0xd6,0xbc};
    static std::uint8_t product74[64]      = {0x24,0x85,0x43,0x19,0xf8,0x90,0xcc,0xce,0xea,0xdc,0x37,0xb6,0x19,0xe9,0x37,0xa1,0x5b,0x5d,0xd8,0xe4,0x0e,0xa9,0x4b,0xc0,0x0c,0x41,0x6a,0x15,0x3a,0x82,0x7f,0x0b,0xee,0x1e,0x37,0x1b,0xb0,0xa3,0x69,0x6d,0x92,0x19,0xb3,0x5e,0xf1,0xd4,0xd7,0x82,0x27,0x10,0x0b,0x26,0x2f,0x13,0x6e,0x9a,0x93,0x8d,0x38,0xbd,0x3a,0xaf,0xfb,0x08};
    uint256_from_bytes(multiplier, multiplier74);
    uint256_from_bytes(multiplicand, multiplicand74);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product74, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier75[32]   = {0xd4,0xe2,0xa1,0x0e,0x94,0xbc,0x2b,0x32,0xe0,0x00,0x22,0x08,0xa4,0x4a,0x39,0x00,0x8c,0xd9,0xb8,0x24,0x57,0xe0,0x2e,0x6e,0x62,0xa3,0xa4,0x42,0xba,0xf5,0x3c,0xb9};
    static std::uint8_t multiplicand75[32] = {0x39,0x19,0xeb,0x2b,0x6f,0xfc,0x4d,0xfd,0x81,0x5f,0x4a,0x25,0x0b,0xf4,0xf2,0xbc,0xe7,0x30,0xe5,0x0e,0x0c,0xfe,0x8a,0xcf,0x72,0xbe,0x77,0xfe,0xb9,0x48,0x50,0xa8};
    static std::uint8_t product75[64]      = {0x2f,0x7c,0x03,0x8e,0x22,0x93,0xef,0xc1,0x19,0xf2,0xdb,0xc8,0x99,0x76,0xb6,0x3a,0x18,0xfa,0xa8,0x80,0x43,0x09,0x46,0xba,0x0f,0xed,0xec,0x51,0x54,0x64,0x2e,0xb0,0xb5,0xa7,0x7b,0x4d,0x13,0x23,0xf0,0x71,0x75,0xdf,0x80,0x0e,0x21,0x8e,0x42,0xaa,0x88,0x44,0xf9,0xea,0x69,0x0a,0xc0,0xc0,0x3c,0x72,0xb2,0xa0,0x18,0xf1,0xa9,0x68};
    uint256_from_bytes(multiplier, multiplier75);
    uint256_from_bytes(multiplicand, multiplicand75);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product75, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier76[32]   = {0x76,0xff,0x6b,0xde,0x4c,0x67,0xc8,0xc8,0x5a,0x0e,0xad,0x55,0x1d,0xc6,0x27,0x8b,0x63,0x8e,0x09,0x66,0x58,0xac,0xc0,0x6c,0xef,0xb6,0x0c,0xc1,0xc3,0x35,0x83,0x1c};
    static std::uint8_t multiplicand76[32] = {0x65,0xf4,0xb4,0x31,0x50,0x03,0x54,0x93,0xa1,0xed,0x6b,0xc5,0x61,0x07,0x93,0xdb,0xae,0x61,0x1f,0x63,0x34,0xe2,0x61,0x04,0x56,0x55,0xde,0x39,0x3e,0x87,0x6b,0xf6};
    static std::uint8_t product76[64]      = {0x2f,0x64,0x84,0xc4,0x07,0xf3,0x16,0x6c,0x2e,0x58,0x23,0x1f,0x69,0x1e,0x7c,0x91,0xe3,0xe8,0x2e,0x27,0x35,0x5c,0xa5,0xc6,0xb4,0x06,0x24,0x7e,0xca,0x83,0x9f,0x98,0x44,0xa5,0x9d,0x6c,0x7b,0x2b,0x27,0xeb,0xaf,0x79,0x23,0x21,0xed,0x74,0x56,0x2b,0xd7,0x76,0x62,0xab,0x9a,0xad,0x42,0xa3,0xe6,0xa2,0x9e,0xfd,0xde,0xfc,0xb0,0xe8};
    uint256_from_bytes(multiplier, multiplier76);
    uint256_from_bytes(multiplicand, multiplicand76);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product76, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier77[32]   = {0xcd,0xee,0x7a,0x7c,0x08,0xf6,0xf2,0xef,0xf9,0xe4,0xe8,0xdd,0x45,0x04,0x9c,0x7a,0x5a,0xeb,0x7d,0x48,0x4b,0xb3,0x42,0xfa,0x23,0xf7,0xa5,0x7f,0x48,0x25,0x57,0x4c};
    static std::uint8_t multiplicand77[32] = {0x97,0xeb,0x9d,0x02,0xc7,0x0b,0x99,0xac,0x20,0x16,0xc0,0x1b,0xfe,0x12,0x38,0xb3,0xe5,0x7c,0x1f,0xbf,0xec,0x90,0x10,0x7d,0xa1,0x81,0x39,0xdf,0x3d,0x68,0xd2,0x1c};
    static std::uint8_t product77[64]      = {0x7a,0x35,0x32,0x77,0x16,0x3e,0xa0,0x87,0xbf,0x26,0x5f,0x1b,0x9e,0x47,0xc7,0x53,0x7b,0xf2,0x2a,0xc1,0x78,0x75,0x39,0xa5,0x4d,0x9c,0x7d,0x2a,0x24,0x51,0x4e,0x91,0xec,0x9c,0x6d,0x6f,0x68,0xc1,0x77,0xe7,0xdd,0x62,0x36,0xe2,0xba,0x6d,0x6b,0x0b,0x40,0x48,0x7d,0x68,0xc9,0x42,0xdb,0xab,0x97,0x01,0xaf,0x47,0x18,0x91,0xe4,0x50};
    uint256_from_bytes(multiplier, multiplier77);
    uint256_from_bytes(multiplicand, multiplicand77);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product77, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier78[32]   = {0x24,0x95,0x8c,0xb8,0x18,0x5c,0xe4,0x04,0x73,0x80,0x32,0x16,0x64,0x96,0xed,0x73,0xb7,0x82,0xb6,0x3c,0xd9,0x63,0xf4,0xb8,0xc5,0x1d,0xb7,0xf5,0xc1,0xff,0x17,0x8d};
    static std::uint8_t multiplicand78[32] = {0x88,0x9a,0xa6,0xa0,0x82,0x12,0x13,0x30,0x1e,0x55,0x28,0x6f,0x6c,0x60,0xac,0x47,0x4a,0x4c,0xfd,0x45,0x32,0x1c,0xa9,0x38,0x03,0x17,0xc2,0x36,0x0b,0xa3,0xe7,0x9f};
    static std::uint8_t product78[64]      = {0x13,0x85,0x8c,0x88,0x5c,0xfd,0xda,0x96,0x59,0x15,0x9b,0xf9,0xaf,0x1d,0x7b,0x46,0x86,0xaf,0x40,0xc1,0x85,0x6e,0xcd,0xcc,0x4d,0x47,0xf2,0xb1,0x2f,0x23,0x03,0x3e,0x5a,0x03,0x4d,0x8e,0xde,0xfb,0x78,0x43,0xdb,0x4f,0x66,0xb8,0xbb,0xae,0x8b,0x46,0x53,0xc2,0xb8,0x9f,0x6e,0xd2,0x33,0x57,0xef,0x97,0x50,0xdd,0xb9,0x76,0xdb,0x93};
    uint256_from_bytes(multiplier, multiplier78);
    uint256_from_bytes(multiplicand, multiplicand78);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product78, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier79[32]   = {0x1c,0x19,0x54,0x3c,0xbb,0x28,0xc4,0x75,0x37,0xe1,0x48,0xd1,0x99,0x73,0x2d,0xd3,0x6e,0x45,0x4b,0x7e,0x1f,0x5b,0xed,0x77,0x99,0x41,0xfe,0xc8,0x9f,0xc0,0x27,0x02};
    static std::uint8_t multiplicand79[32] = {0xf5,0x87,0x54,0x4c,0x58,0xf7,0x72,0xbb,0xa1,0x32,0x9a,0x0c,0xd4,0x31,0x9d,0xca,0x8f,0xb6,0x31,0x9b,0xc0,0xc3,0xf9,0x79,0xcf,0x0f,0xe3,0x53,0xf6,0x93,0x12,0x5d};
    static std::uint8_t product79[64]      = {0x1a,0xf3,0x18,0x3a,0x3c,0x11,0x83,0xf1,0xbf,0x7f,0x83,0x08,0x82,0x73,0xb3,0xf3,0xe1,0x65,0x63,0xac,0x8e,0xd2,0x30,0xa3,0xea,0xfb,0x4c,0xcc,0x49,0x21,0x29,0xf4,0x8a,0xd4,0xe7,0x0b,0x25,0x9c,0x50,0xa5,0xfe,0xb5,0x4f,0x37,0x65,0x93,0x48,0xf9,0x4d,0x36,0x62,0x99,0x1e,0x92,0xb7,0x65,0x7c,0x9b,0x76,0x95,0xdd,0xb2,0x4f,0xba};
    uint256_from_bytes(multiplier, multiplier79);
    uint256_from_bytes(multiplicand, multiplicand79);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product79, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier80[32]   = {0x8a,0x4f,0xc6,0x39,0x74,0x13,0x6a,0xdb,0x55,0xde,0x1f,0x3b,0x5e,0xed,0xe4,0x50,0x17,0xfd,0x21,0x20,0xd4,0x3d,0x91,0x08,0xad,0x42,0xec,0x4c,0x36,0x02,0x46,0x4d};
    static std::uint8_t multiplicand80[32] = {0xb7,0xe7,0xf3,0x8f,0xfa,0x01,0x4d,0xf4,0x5d,0x31,0x5c,0x18,0xbf,0x5a,0x0f,0x35,0xb5,0x05,0xbc,0xa8,0xc3,0x4e,0xad,0xf2,0x57,0x3a,0x23,0x7f,0xe0,0x40,0xbd,0x4b};
    static std::uint8_t product80[64]      = {0x63,0x5c,0x58,0x46,0x72,0x9c,0x7e,0x30,0x62,0x29,0x6d,0xec,0x5e,0xc7,0x44,0x2f,0x1a,0x32,0xa3,0xcd,0x3c,0x53,0x79,0x12,0x1d,0xe8,0x31,0x29,0xed,0x63,0x54,0x65,0xa2,0xab,0xc2,0xf5,0x9c,0x4b,0xdf,0x90,0xcd,0x80,0x31,0xc3,0xa3,0x8d,0xf0,0x06,0x6b,0xaf,0xc1,0x61,0xb0,0x21,0xea,0x56,0x20,0x8e,0x63,0x7b,0x73,0xd1,0x71,0x8f};
    uint256_from_bytes(multiplier, multiplier80);
    uint256_from_bytes(multiplicand, multiplicand80);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product80, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier81[32]   = {0xdd,0xa6,0xad,0xb9,0x24,0x77,0x64,0x5d,0x5c,0x75,0x5d,0x0a,0x8f,0x46,0x4b,0x7c,0xd7,0x2d,0x7c,0xb2,0x1d,0x97,0x5a,0x4d,0x77,0x29,0xe3,0xa0,0xd0,0x4f,0x61,0x1a};
    static std::uint8_t multiplicand81[32] = {0x13,0x27,0x03,0x1d,0xe1,0xf0,0x0b,0x96,0xb5,0xaf,0x25,0xf9,0x8d,0x03,0xb9,0x64,0x42,0x9d,0x9a,0x5f,0xb2,0xd7,0xe2,0x7a,0x5d,0x1e,0xf3,0x0e,0x9a,0xfc,0x05,0xe4};
    static std::uint8_t product81[64]      = {0x10,0x95,0x25,0xfc,0x08,0x73,0x99,0x04,0xfc,0xd7,0x9f,0x48,0x44,0x5a,0x75,0xbf,0x27,0xd5,0xcf,0xa5,0x11,0xfe,0x1e,0xd5,0x09,0xc6,0x91,0xfd,0xcc,0x83,0x5b,0x0a,0x66,0x73,0x32,0x49,0x64,0x08,0x49,0xf7,0xe6,0x5d,0x02,0x49,0xbd,0xf0,0xf6,0xfa,0x80,0x12,0xa0,0xd7,0x27,0xc5,0x02,0xfb,0x52,0xec,0xab,0x44,0x4d,0x2f,0xfd,0x28};
    uint256_from_bytes(multiplier, multiplier81);
    uint256_from_bytes(multiplicand, multiplicand81);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product81, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier82[32]   = {0xf7,0x57,0xad,0x2e,0x6a,0x3b,0x2b,0xd6,0x47,0xf1,0xaa,0x8f,0xc7,0x45,0xf3,0x13,0x72,0xf2,0x4b,0xf8,0xaf,0x0c,0x59,0xfc,0xc2,0x53,0xe6,0x4d,0xa7,0x2c,0x76,0x64};
    static std::uint8_t multiplicand82[32] = {0x2c,0xd2,0x07,0xf1,0x45,0xa3,0xaf,0xf5,0xd0,0xa8,0x3f,0xe8,0x66,0x0f,0x35,0xc7,0x69,0x7c,0xb4,0xaf,0x7c,0xfa,0x68,0x6d,0x05,0x09,0x80,0xea,0xed,0xcb,0x6b,0xc5};
    static std::uint8_t product82[64]      = {0x2b,0x4d,0xff,0x5c,0x8c,0xe4,0x66,0x2f,0xa1,0x20,0x88,0xc6,0x39,0x3e,0x27,0xd0,0xd2,0xce,0x10,0x4c,0xc2,0xc9,0x1e,0x3a,0xb2,0x70,0xb6,0x1b,0x5c,0x82,0x37,0x4c,0xc8,0x37,0xd5,0x4e,0x23,0x22,0x50,0x1c,0xa7,0xcb,0x66,0x3b,0x1e,0x10,0x37,0x03,0xb9,0x98,0x64,0x63,0xb5,0xf8,0xc7,0x7d,0x46,0x84,0x9f,0xe5,0xaf,0xfe,0xe6,0xf4};
    uint256_from_bytes(multiplier, multiplier82);
    uint256_from_bytes(multiplicand, multiplicand82);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product82, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier83[32]   = {0xb1,0x4a,0xeb,0x50,0xb6,0x30,0x3b,0x62,0x1f,0xed,0xd6,0x42,0x32,0x52,0xf6,0x53,0xa0,0x6c,0x2f,0x9c,0xca,0xb2,0xe0,0x9b,0x6e,0x8f,0x62,0xfd,0x5e,0x33,0xe2,0xad};
    static std::uint8_t multiplicand83[32] = {0x21,0xc7,0x14,0x74,0x77,0xfc,0xc8,0xc9,0x3d,0xaf,0xd8,0x39,0x54,0x35,0xe4,0x2e,0x70,0x8e,0x7b,0x7a,0x8d,0xc7,0xa0,0x27,0x14,0xb3,0xef,0x34,0xf8,0xec,0xe4,0x19};
    static std::uint8_t product83[64]      = {0x17,0x64,0x87,0xbc,0xd6,0xa7,0xaa,0x24,0x30,0x69,0x43,0x46,0xf0,0x48,0xc7,0x70,0x6e,0x37,0x85,0xcd,0xf5,0xfb,0x6e,0x36,0xf9,0xb0,0x01,0xcc,0x4f,0x6c,0xa0,0x1b,0x62,0x7c,0x55,0xae,0x7d,0x73,0x43,0x37,0xb8,0x87,0xe5,0xf3,0x14,0xe6,0xf0,0x6a,0x5f,0x5f,0x12,0x37,0x58,0x05,0x6c,0x7b,0xcb,0x1f,0xfc,0x34,0xf8,0x6f,0x36,0xe5};
    uint256_from_bytes(multiplier, multiplier83);
    uint256_from_bytes(multiplicand, multiplicand83);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product83, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier84[32]   = {0xb4,0x60,0x11,0x7a,0x2f,0x55,0x33,0xea,0x93,0x80,0x8c,0x1a,0xf4,0x08,0xd0,0x18,0xf9,0x6b,0x6c,0xee,0xf4,0xd1,0x42,0x7d,0xdc,0x96,0x71,0xda,0x7d,0x9a,0x7a,0x7e};
    static std::uint8_t multiplicand84[32] = {0x50,0x5c,0xd5,0x2a,0xfe,0xca,0xfb,0x62,0xcf,0x8e,0x66,0x46,0x47,0x4f,0xdf,0xb2,0x45,0x7d,0xde,0x1d,0xd2,0x50,0xfa,0xd3,0xa1,0x4a,0x01,0x68,0xe7,0x93,0x52,0x37};
    static std::uint8_t product84[64]      = {0x38,0x9f,0x6e,0x2e,0xb0,0x87,0x80,0x8a,0x74,0x19,0x42,0x98,0x95,0x19,0x33,0x24,0xb1,0xab,0x4f,0xc9,0x38,0xe1,0xa1,0x48,0xe9,0x5b,0x5d,0xf9,0xda,0xcb,0xcc,0x85,0x81,0xa9,0xa4,0x63,0x51,0x4f,0x6e,0x30,0xb0,0x54,0x24,0x91,0x8a,0x0f,0xbf,0xde,0x52,0x38,0x8d,0xc5,0xeb,0x9b,0x97,0x9d,0x64,0x3f,0x37,0x98,0x7f,0xc6,0xad,0x12};
    uint256_from_bytes(multiplier, multiplier84);
    uint256_from_bytes(multiplicand, multiplicand84);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product84, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier85[32]   = {0x70,0x63,0xb1,0x0a,0x79,0xb1,0xda,0x07,0xe3,0x16,0x53,0x2f,0x8d,0xae,0x03,0x00,0x9b,0xb9,0xb8,0x81,0x7e,0xf3,0xaa,0x71,0x8f,0x2d,0x17,0xb1,0xb4,0xcf,0x6a,0x65};
    static std::uint8_t multiplicand85[32] = {0x53,0xc9,0xbf,0xc9,0x38,0x28,0xae,0x73,0x0a,0xe2,0x68,0xab,0xe5,0x7a,0xb6,0x0a,0x8c,0x71,0x43,0xdb,0xfc,0xd1,0x7a,0xe0,0xc6,0xc5,0x73,0x45,0xab,0x71,0x90,0xf1};
    static std::uint8_t product85[64]      = {0x24,0xc8,0xe4,0xdf,0x1e,0xb2,0xb3,0x3e,0x35,0x48,0x78,0xe6,0xb3,0x1f,0x10,0xfa,0xc9,0x4d,0x12,0x9f,0xf5,0x8a,0x3a,0x7d,0xa2,0x7a,0xfd,0xae,0x94,0x1d,0x05,0xcb,0x30,0x3e,0xab,0xc7,0xe8,0xe2,0x47,0xbd,0x5c,0x2c,0x82,0xfd,0x2c,0xa1,0x88,0x6b,0xe1,0xa1,0x00,0xce,0x87,0x11,0xa8,0x92,0x36,0x6a,0xab,0xd8,0x50,0xb0,0xf9,0x15};
    uint256_from_bytes(multiplier, multiplier85);
    uint256_from_bytes(multiplicand, multiplicand85);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product85, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier86[32]   = {0x25,0x13,0x71,0x94,0x13,0xc7,0x2b,0xbb,0xd5,0x24,0x81,0x80,0xdc,0xc3,0x5d,0x2e,0xc7,0x8f,0xff,0x4f,0x95,0x5f,0x28,0x0b,0x66,0xf5,0x43,0x4c,0xf0,0xd3,0x57,0xe2};
    static std::uint8_t multiplicand86[32] = {0xb0,0xd5,0xc3,0xf0,0xe0,0xd1,0x7f,0x02,0x20,0x41,0xaa,0x61,0x35,0x33,0x76,0xc1,0x23,0x47,0x63,0x4b,0x5f,0x72,0xa3,0x0b,0xb6,0x5d,0x4e,0x74,0x7c,0xaf,0xc4,0xe1};
    static std::uint8_t product86[64]      = {0x19,0x9c,0x53,0xa4,0x00,0x1b,0x03,0x52,0x06,0x38,0x39,0x81,0x54,0x86,0xcd,0xc5,0x48,0xb7,0x2f,0xb7,0x0e,0x2a,0x4a,0xb3,0xdc,0x19,0x78,0x14,0x4b,0xd0,0xae,0xf8,0xd0,0x72,0x67,0x45,0x4f,0xc5,0x78,0x0e,0xc6,0x33,0x61,0xdf,0x21,0xb7,0x29,0x8a,0xb8,0x0c,0x9c,0xd1,0x7b,0x70,0x75,0x50,0xa8,0xfa,0xbc,0x74,0x04,0x87,0x45,0xa2};
    uint256_from_bytes(multiplier, multiplier86);
    uint256_from_bytes(multiplicand, multiplicand86);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product86, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier87[32]   = {0x5d,0x2d,0x87,0x00,0x6a,0x93,0x2d,0x7f,0x17,0xfc,0x9b,0x36,0x46,0x77,0x9e,0x6c,0x68,0x76,0x16,0x7f,0x2c,0x04,0x45,0x2f,0xb8,0xfa,0x73,0xc6,0xe7,0xb6,0xdc,0xe9};
    static std::uint8_t multiplicand87[32] = {0x14,0x9f,0xed,0xd2,0x95,0x01,0xb6,0x67,0xb7,0x82,0x6b,0x61,0x35,0x27,0x6d,0xe3,0xa5,0xde,0x27,0xa1,0x23,0x7d,0x24,0x68,0x27,0x9f,0x97,0xdc,0xbf,0x8f,0xca,0x77};
    static std::uint8_t product87[64]      = {0x07,0x81,0xc4,0x62,0xad,0x25,0xf1,0x1d,0xc0,0xc8,0x52,0x2e,0x1a,0x8f,0xe4,0xca,0x98,0x4f,0x44,0x43,0xa7,0xff,0x07,0x7e,0x4d,0x4f,0x39,0xb7,0xf4,0x61,0x87,0xbd,0x1a,0x5c,0x3b,0x62,0xb5,0x00,0x82,0xef,0xa4,0xf3,0xdc,0xb6,0x63,0x4a,0x5c,0x7d,0x32,0x5c,0xcd,0x94,0x8e,0xbb,0x1b,0xeb,0x5f,0xed,0xe9,0x7f,0x3d,0x77,0x8a,0x4f};
    uint256_from_bytes(multiplier, multiplier87);
    uint256_from_bytes(multiplicand, multiplicand87);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product87, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier88[32]   = {0xe2,0x2b,0xe6,0xdf,0x46,0xfa,0xb9,0xc9,0x1a,0x98,0x2f,0x92,0x3c,0x94,0x59,0x94,0xd5,0x07,0x45,0xd3,0xdd,0xbf,0x09,0x84,0xfa,0xbf,0x8b,0x66,0xdd,0xe2,0x22,0x6e};
    static std::uint8_t multiplicand88[32] = {0x95,0x96,0x93,0x0a,0xc0,0x7b,0x16,0x8d,0xae,0xc5,0xe6,0x6a,0xc1,0xd8,0xb8,0xa0,0x5a,0x4a,0x6e,0xc1,0x0c,0x5d,0xe4,0x56,0xbb,0x5a,0x57,0x6e,0x0d,0x56,0x4c,0x3c};
    static std::uint8_t product88[64]      = {0x84,0x28,0x95,0x01,0xf0,0x7a,0x6b,0xb1,0xfb,0xbb,0x12,0x24,0x54,0xc2,0xff,0x0f,0x95,0xa6,0x8b,0xbf,0xd7,0x6c,0x79,0x74,0x4f,0x2a,0x9c,0x0a,0x08,0xeb,0x37,0xd7,0xb1,0x9b,0x6a,0x7a,0xc1,0xc7,0x88,0xcc,0x72,0x04,0x5e,0x84,0x88,0x27,0xd7,0xda,0x5b,0x73,0xaf,0x89,0x3a,0x85,0x41,0x3e,0x55,0xa4,0x68,0xf6,0x4a,0x2c,0xb9,0xc8};
    uint256_from_bytes(multiplier, multiplier88);
    uint256_from_bytes(multiplicand, multiplicand88);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product88, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier89[32]   = {0x92,0x17,0x28,0x51,0xad,0x97,0xa1,0xf9,0xc8,0x9d,0x18,0x10,0xce,0x97,0x2e,0x7c,0xe3,0x56,0x99,0x3f,0x68,0x6c,0x99,0xe7,0x2a,0x6d,0x6e,0x2b,0x09,0xec,0x8a,0xaa};
    static std::uint8_t multiplicand89[32] = {0x3a,0x55,0x7d,0x1f,0x57,0xf1,0xe7,0x98,0x05,0x72,0x0d,0xa7,0x98,0xc3,0xb0,0xe4,0x21,0xaf,0x33,0x5b,0x3d,0x7a,0xd7,0x79,0x3f,0x5f,0x2d,0x55,0x11,0x1e,0xb0,0xe4};
    static std::uint8_t product89[64]      = {0x21,0x4a,0x08,0x3a,0x16,0x20,0xac,0x5c,0xcb,0xf6,0xe9,0xa3,0x6e,0xc4,0xea,0x59,0x11,0x25,0x12,0xc6,0x8e,0x22,0x8c,0x44,0xd0,0x8b,0xc6,0xa3,0x08,0x1f,0x87,0x3d,0x51,0xfd,0x42,0x59,0x2b,0x87,0x2d,0x5f,0xe5,0x3a,0x4d,0x5f,0x9b,0x28,0xb9,0xfc,0x03,0x3a,0x68,0x04,0xc9,0xd3,0x96,0x7a,0xf4,0xe7,0x80,0x86,0xff,0xec,0x5f,0x68};
    uint256_from_bytes(multiplier, multiplier89);
    uint256_from_bytes(multiplicand, multiplicand89);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product89, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier90[32]   = {0xa7,0x32,0x88,0x8f,0x82,0xb0,0xa0,0xf6,0x07,0x92,0xfb,0xa7,0x11,0x20,0xa6,0xa6,0x90,0x55,0xe9,0x1b,0x71,0xb1,0x9a,0x3e,0xc2,0xe5,0xcb,0xf4,0xc0,0x48,0x58,0xac};
    static std::uint8_t multiplicand90[32] = {0xfd,0x8b,0xc7,0xc6,0x50,0xbe,0xa9,0x95,0xf5,0xba,0x7c,0x8e,0x29,0xa9,0x79,0x76,0xe5,0xe6,0x55,0xf9,0xde,0xb4,0x29,0x0b,0xbf,0xca,0x5d,0x97,0x88,0xe3,0xfc,0xfd};
    static std::uint8_t product90[64]      = {0xa5,0x98,0x3b,0xdf,0xc8,0x0e,0x03,0x81,0x6d,0x35,0xb0,0xa3,0xc4,0xb3,0xc3,0xba,0x46,0x82,0xec,0xaf,0xeb,0xc5,0x69,0x3a,0x6d,0x0f,0xb6,0x55,0x21,0x85,0x9d,0x4a,0xc5,0x25,0x0c,0xc8,0x51,0x6c,0xc3,0x26,0xc5,0x7c,0x19,0x98,0x3f,0xf0,0x3f,0x47,0x02,0x8b,0xd4,0x27,0xa3,0x04,0x63,0xd8,0xb0,0xa7,0x36,0xdf,0x3f,0x4c,0xf1,0xfc};
    uint256_from_bytes(multiplier, multiplier90);
    uint256_from_bytes(multiplicand, multiplicand90);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product90, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier91[32]   = {0xca,0xc1,0x78,0x50,0xc1,0x03,0xbf,0xd6,0x5c,0x5a,0x26,0x1e,0xee,0xcf,0xb1,0x89,0x67,0x1f,0x43,0x5c,0xc9,0xdd,0xba,0x22,0x0f,0xcc,0x15,0x76,0x52,0x5f,0x47,0x78};
    static std::uint8_t multiplicand91[32] = {0x51,0x85,0x55,0x19,0x55,0xdd,0x85,0x97,0x3e,0x92,0x95,0x83,0x0c,0x38,0xb5,0xcc,0xdb,0x45,0x6f,0x33,0x7b,0x02,0xf5,0x83,0x5a,0x72,0x28,0x9e,0xb8,0x46,0x32,0x8c};
    static std::uint8_t product91[64]      = {0x40,0x90,0xd0,0xfb,0x5c,0xdf,0xb6,0x64,0x90,0xa2,0x28,0x3a,0xb2,0x32,0x7f,0x80,0xe6,0x07,0x68,0xa4,0x0f,0xc2,0x4e,0xb6,0xac,0x46,0x4a,0x77,0x69,0x50,0x5b,0xb7,0xe3,0x48,0x0c,0xe2,0x18,0x8b,0x4c,0x1f,0xfd,0x4f,0x29,0x70,0xd7,0x89,0x9f,0x6b,0xc4,0x28,0x6b,0xde,0x6c,0x54,0xc6,0xcd,0x26,0xc4,0xb6,0x47,0x72,0xe0,0x85,0xa0};
    uint256_from_bytes(multiplier, multiplier91);
    uint256_from_bytes(multiplicand, multiplicand91);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product91, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier92[32]   = {0x38,0x99,0xcc,0x7e,0x1c,0xf6,0xdc,0x9c,0x8c,0xf8,0x62,0x15,0x5e,0x03,0x19,0xd6,0xd6,0xa8,0xa1,0x5f,0xb2,0xac,0x77,0x58,0x71,0xcd,0xc7,0x15,0xfe,0x42,0xc2,0xcf};
    static std::uint8_t multiplicand92[32] = {0xa1,0x89,0xf6,0x52,0x22,0x75,0x79,0xe4,0xfb,0x5f,0x0d,0xbf,0xec,0x02,0x7e,0x5b,0xcf,0x4a,0x59,0x66,0x99,0xb7,0x2d,0xdf,0xdb,0x99,0xd7,0x8f,0xe9,0xf4,0x09,0x5f};
    static std::uint8_t product92[64]      = {0x23,0xb7,0x3a,0x5f,0xb3,0x17,0xd7,0x7b,0x8b,0x32,0x51,0xf6,0xa3,0x4a,0x33,0xd4,0x03,0x28,0x3d,0x67,0x1a,0x7d,0x42,0xf5,0xf5,0x35,0x42,0x59,0x44,0x4e,0xcb,0x63,0xdc,0xa4,0x2a,0x76,0x1e,0x9f,0xe6,0x6e,0x94,0x7d,0xc0,0xfd,0xf0,0xce,0x7b,0x40,0x1b,0xf6,0x0b,0x8f,0x00,0x3f,0xfd,0xd8,0xd8,0x5b,0x6c,0xaa,0xc7,0xeb,0x91,0xd1};
    uint256_from_bytes(multiplier, multiplier92);
    uint256_from_bytes(multiplicand, multiplicand92);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product92, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier93[32]   = {0xea,0x97,0x10,0xaa,0xe7,0x34,0x0d,0x2e,0xdb,0xf8,0x11,0xec,0x38,0x52,0x21,0xd6,0x5f,0x5f,0x8f,0x30,0x94,0x79,0xff,0x39,0x50,0x83,0x62,0x48,0xbf,0xf4,0x57,0x34};
    static std::uint8_t multiplicand93[32] = {0x0c,0xa8,0x70,0x9d,0x6a,0x5a,0x48,0x90,0xc8,0x36,0x47,0x1a,0x7d,0x96,0x45,0x14,0x34,0x8c,0x4d,0x6e,0x30,0xf7,0xe8,0x0b,0x39,0x01,0x58,0xae,0xa8,0xd9,0x8f,0x48};
    static std::uint8_t product93[64]      = {0x0b,0x99,0x6f,0x1d,0x4a,0x63,0x71,0x3f,0x32,0xb2,0x9a,0x92,0x33,0xe7,0xc8,0x91,0x18,0x6d,0xfa,0xdf,0x64,0x5c,0xc8,0x21,0xa2,0xbe,0x19,0x1e,0x11,0x1c,0x9d,0xc4,0x87,0xd5,0x8c,0xb6,0x26,0x75,0xbe,0x57,0xcb,0x0d,0x3f,0xc9,0x0c,0x83,0x5b,0xea,0x4a,0xd6,0x5a,0x0f,0xe6,0x1b,0x19,0xff,0x77,0xbe,0x7c,0x5f,0x84,0x82,0x92,0xa0};
    uint256_from_bytes(multiplier, multiplier93);
    uint256_from_bytes(multiplicand, multiplicand93);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product93, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier94[32]   = {0x51,0xfd,0xb3,0x24,0x0e,0xd5,0xa1,0xa8,0x07,0x95,0x74,0xf5,0xac,0x5b,0x06,0x9a,0x04,0xe7,0x68,0x7f,0x6d,0x84,0x3b,0x26,0xaa,0x06,0x07,0x3b,0x2e,0x43,0x2d,0xdc};
    static std::uint8_t multiplicand94[32] = {0x7b,0x62,0x2e,0x4f,0x7d,0x7a,0x79,0xb7,0x05,0x91,0xa8,0x94,0x67,0x8e,0x62,0xa1,0x64,0xdc,0xff,0x7f,0x07,0xd4,0x55,0xb2,0x97,0x82,0x2c,0x9e,0xbf,0x4f,0x80,0xd1};
    static std::uint8_t product94[64]      = {0x27,0x84,0x57,0x05,0xf2,0x99,0x2f,0x9a,0x17,0x2d,0xe1,0x57,0xdd,0x02,0x00,0xf7,0x22,0x44,0x8e,0xac,0x3a,0x54,0xf2,0xf7,0xff,0xa8,0x5a,0x2e,0x5e,0x32,0xfd,0xfe,0x1f,0xb9,0x70,0x09,0x92,0xb6,0x29,0x6c,0xf0,0x25,0x57,0x46,0xbf,0x1a,0x19,0x0d,0x3b,0xd7,0x3e,0xad,0xa4,0xbe,0x46,0x71,0x5c,0x61,0x02,0x2c,0xa6,0xaa,0x70,0x9c};
    uint256_from_bytes(multiplier, multiplier94);
    uint256_from_bytes(multiplicand, multiplicand94);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product94, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier95[32]   = {0xc3,0x6d,0xf1,0x68,0x28,0x5a,0x96,0x67,0xf9,0xbf,0xf3,0xc2,0x1b,0x79,0x55,0x89,0x84,0x7a,0x18,0x94,0x12,0xcb,0xf4,0x12,0xc2,0x03,0xcd,0xa0,0x97,0x1c,0xcc,0x8d};
    static std::uint8_t multiplicand95[32] = {0xec,0x15,0x6e,0xaf,0x63,0x01,0x5d,0x62,0x59,0x0b,0x5f,0xae,0x53,0x65,0x62,0x7c,0xec,0x2a,0x85,0xf0,0x77,0x96,0x91,0x69,0xb7,0xdd,0x88,0x9c,0xf3,0x47,0xbb,0x76};
    static std::uint8_t product95[64]      = {0xb4,0x39,0xb7,0x0f,0xf4,0x36,0x28,0xb3,0xf1,0x18,0x48,0x98,0xc2,0xfe,0xb4,0xa2,0x2f,0x56,0x09,0x06,0x30,0x21,0x89,0x5f,0x3c,0x81,0xc5,0x19,0xd8,0xde,0x51,0xcf,0xfe,0xac,0x70,0xbc,0xe1,0x2b,0xdc,0x49,0x02,0x23,0xd2,0x98,0x74,0x07,0xf7,0x29,0x93,0xbe,0x74,0x9b,0x64,0x2a,0x0a,0xa9,0x6e,0xdf,0xe3,0x7a,0x42,0xcc,0x47,0xfe};
    uint256_from_bytes(multiplier, multiplier95);
    uint256_from_bytes(multiplicand, multiplicand95);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product95, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier96[32]   = {0x1e,0xfd,0x7b,0x78,0xaf,0x69,0xdc,0xb2,0x4d,0x0f,0xdb,0xdd,0xfa,0x21,0x3a,0xd0,0xc5,0xd8,0x18,0xcf,0xa7,0x73,0xeb,0xad,0xb7,0xeb,0x69,0x6f,0xe9,0xa0,0x6c,0xa0};
    static std::uint8_t multiplicand96[32] = {0x95,0xec,0x8b,0x39,0xce,0xff,0xb6,0xd5,0xf9,0x13,0x15,0x4d,0x43,0x02,0xb5,0xc9,0x1a,0x85,0xc9,0xc0,0x9b,0xe0,0x3c,0xe3,0xb7,0x47,0xe9,0x0a,0x51,0x80,0x8e,0x09};
    static std::uint8_t product96[64]      = {0x12,0x26,0x2b,0x65,0xb2,0xe4,0x46,0x23,0xfb,0xd4,0x87,0xc7,0xdf,0xc9,0x03,0x78,0xdb,0x5b,0xb2,0x83,0xda,0xd5,0xa0,0x75,0x1b,0xb0,0x0d,0xcf,0x57,0xc9,0x91,0x4c,0x9f,0xdb,0xb2,0x40,0xad,0x26,0xbb,0x74,0x87,0xad,0x9b,0xbb,0xf9,0xb4,0xa1,0x76,0xa9,0x6b,0x70,0xb0,0x5c,0xc5,0x5c,0x37,0xd0,0x25,0x39,0x5b,0x22,0xe4,0x91,0xa0};
    uint256_from_bytes(multiplier, multiplier96);
    uint256_from_bytes(multiplicand, multiplicand96);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product96, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier97[32]   = {0x98,0x18,0xec,0x03,0x23,0x58,0x28,0x1f,0x00,0xf6,0xef,0x3f,0x96,0x99,0xe0,0xb5,0x52,0x75,0xb5,0xb2,0x56,0x27,0x93,0x35,0xf6,0xec,0xb1,0x0d,0x14,0x11,0xad,0xac};
    static std::uint8_t multiplicand97[32] = {0x10,0x8b,0xea,0x35,0xb2,0xd2,0x4b,0x97,0x32,0x32,0xfa,0x85,0x8e,0x5e,0x09,0x42,0x5c,0x58,0x03,0x71,0xb6,0x3c,0x82,0x4c,0x5c,0xc1,0x0d,0x80,0x3b,0xe7,0x59,0xb3};
    static std::uint8_t product97[64]      = {0x09,0xd4,0xaf,0x6f,0x07,0x0b,0xb3,0xc9,0x89,0xa3,0x2d,0x8e,0x55,0x22,0xc6,0xab,0x9c,0x0d,0x4b,0x64,0xd4,0xfb,0x5e,0x63,0x7d,0xd1,0x2e,0x01,0x2e,0x25,0xea,0x6d,0x4e,0xa3,0xee,0x8b,0xef,0xa2,0xff,0xd0,0x50,0xe9,0xa4,0xf0,0x79,0x9b,0x67,0x6c,0xf8,0x68,0x9f,0x7c,0xda,0x9d,0xa1,0x52,0x64,0xcf,0x19,0x19,0x87,0xf1,0x3b,0x44};
    uint256_from_bytes(multiplier, multiplier97);
    uint256_from_bytes(multiplicand, multiplicand97);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product97, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier98[32]   = {0xdb,0xd6,0x02,0xbf,0xd5,0x10,0x69,0x79,0x9a,0x9f,0x0c,0x63,0xae,0x1d,0x3f,0x1d,0xbc,0xc6,0x89,0xca,0x66,0xcd,0x94,0x3e,0x9d,0x3e,0x6d,0x48,0xda,0x7d,0x76,0x13};
    static std::uint8_t multiplicand98[32] = {0xba,0x22,0x6c,0x35,0x26,0xf0,0x20,0x44,0x06,0x82,0xfc,0x5e,0x90,0x94,0xbe,0x05,0xe5,0x9e,0xe4,0x68,0x80,0xda,0x54,0x8d,0x87,0x62,0xf1,0x1c,0xa7,0x2f,0xea,0x79};
    static std::uint8_t product98[64]      = {0x9f,0xd7,0x0d,0x57,0xac,0x2f,0xb1,0x2a,0x9d,0xa3,0x9f,0x9f,0x86,0x40,0x4f,0xd6,0xef,0x43,0xa9,0x9b,0x04,0x92,0x73,0x24,0x35,0xcc,0x38,0xc9,0x55,0xf1,0xe2,0x6d,0x69,0x24,0xa0,0x4c,0x35,0x62,0x69,0xc9,0xe6,0x66,0x8c,0x1e,0x1b,0x3b,0xa5,0x3c,0x88,0x54,0x2a,0xe7,0x57,0x96,0x80,0x7e,0x33,0x75,0x01,0x49,0x05,0xb7,0x2c,0xfb};
    uint256_from_bytes(multiplier, multiplier98);
    uint256_from_bytes(multiplicand, multiplicand98);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product98, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier99[32]   = {0x08,0x7c,0x47,0xbb,0x68,0x21,0x68,0x99,0x41,0x48,0x1e,0xe2,0xae,0x04,0x30,0x9b,0x8e,0x24,0x40,0x74,0x2c,0xc3,0x14,0x3c,0xe9,0xc3,0xc4,0x89,0xc3,0xd2,0x45,0xf2};
    static std::uint8_t multiplicand99[32] = {0xf6,0xd3,0x2d,0x36,0x0d,0xb2,0x1b,0xd9,0xed,0x59,0xd1,0x90,0x03,0xd8,0x8a,0x0b,0x76,0x0d,0x6c,0x16,0x93,0xd7,0xb2,0xfa,0xb1,0x23,0x29,0x57,0x5f,0x7e,0x55,0x32};
    static std::uint8_t product99[64]      = {0x08,0x2e,0x6c,0xdc,0xd8,0xce,0x37,0xdd,0x0a,0xda,0xd0,0xdd,0xb4,0x12,0xcf,0x3b,0x1a,0x3d,0x64,0x38,0xb1,0xbd,0xed,0x67,0x29,0x0e,0xb0,0x98,0xe6,0x6d,0xca,0x3a,0xd8,0xde,0x26,0x2d,0xf2,0xbb,0x15,0x6b,0x53,0x48,0x9e,0x90,0x61,0xa2,0x41,0xb7,0x2e,0x9c,0x90,0x1f,0x24,0x01,0x77,0x6b,0x9f,0xb7,0x11,0x9e,0x4b,0x67,0x03,0x44};
    uint256_from_bytes(multiplier, multiplier99);
    uint256_from_bytes(multiplicand, multiplicand99);
    uint256_mul(product[0], multiplier, multiplicand);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product99, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }
}
#else
void test_uint256_x64_mul()
{
}
#endif