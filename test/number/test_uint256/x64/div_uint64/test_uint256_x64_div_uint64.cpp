#if defined(CPU_FLAG_MOVBE) && defined(CPU_FLAG_BMI2)
#include <gmlib/number/internal/uint256_x64.h>
#include <stdexcept>
#include <cstring>

using namespace number::internal::x64;

void test_uint256_x64_div_uint64()
{
    uint256_t     dividend, quotient;
    std::uint64_t remainder;
    std::uint8_t  quotient_data[32];

    static std::uint8_t  dividend0[32] = {0xca,0x0b,0x69,0xef,0x39,0xbf,0xed,0xa8,0x1f,0x68,0xc6,0xda,0xc6,0xdb,0x0f,0xbc,0x15,0xc8,0x86,0x6d,0xc2,0x7b,0x36,0x4b,0xf9,0xa4,0xe3,0x00,0xcc,0xeb,0x38,0x99};
    static std::uint64_t divisor0     = 12992778651383827185ULL;
    static std::uint8_t  quotient0[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x1e,0xdb,0x4c,0x62,0xec,0xdd,0xed,0x42,0xde,0x6c,0x4c,0xe9,0x1b,0xb2,0x16,0xc4,0x93,0xf7,0x4f,0xfa,0xe2,0x11,0xc4,0x6e};
    static std::uint64_t remainder0      = 12415801952380322059ULL;
    uint256_from_bytes(dividend, dividend0);
    remainder = uint256_div_uint64(quotient, dividend, divisor0);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient0, quotient_data, 32) != 0 || remainder0 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend1[32] = {0xa2,0x91,0x51,0x4a,0x78,0xb1,0xc4,0x3f,0x4e,0x67,0x67,0x67,0x63,0x0c,0x18,0x35,0x06,0xa2,0x48,0xc1,0x14,0xd1,0x1e,0x0e,0x9f,0x9c,0xe1,0x0d,0x90,0x9f,0xc2,0x10};
    static std::uint64_t divisor1     = 1050990280918140249ULL;
    static std::uint8_t  quotient1[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0b,0x25,0x59,0xc2,0x67,0x88,0x84,0x8e,0xb8,0x1a,0xd1,0x64,0x18,0x83,0xff,0x7d,0xc7,0x48,0x71,0xaa,0x55,0x4d,0x22,0xc3,0xd8};
    static std::uint64_t remainder1      = 553623790974825464ULL;
    uint256_from_bytes(dividend, dividend1);
    remainder = uint256_div_uint64(quotient, dividend, divisor1);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient1, quotient_data, 32) != 0 || remainder1 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend2[32] = {0xd4,0xcb,0x82,0x5e,0x58,0x5e,0x7d,0x50,0x47,0xa6,0xc7,0x79,0xcb,0xcb,0x79,0x2d,0x7c,0xaf,0xc2,0x1e,0x24,0x4e,0x1d,0xce,0xbc,0x2d,0xb8,0x45,0xb3,0x44,0x84,0x36};
    static std::uint64_t divisor2     = 5874325017751880179ULL;
    static std::uint8_t  quotient2[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x9c,0x39,0xbe,0x5e,0x3a,0x18,0x06,0x31,0xde,0x32,0x48,0xe8,0x64,0xa1,0x14,0x6f,0xfc,0x8c,0x3f,0x76,0xf9,0x6b,0x34,0x36};
    static std::uint64_t remainder2      = 2965264342529261300ULL;
    uint256_from_bytes(dividend, dividend2);
    remainder = uint256_div_uint64(quotient, dividend, divisor2);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient2, quotient_data, 32) != 0 || remainder2 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend3[32] = {0x14,0xc0,0xf9,0x4b,0xe3,0x59,0x39,0x84,0xc8,0x40,0x47,0xf8,0x9d,0x53,0x59,0xfa,0x28,0x0a,0xb6,0xf6,0x21,0xfe,0xc3,0xef,0x6e,0xd8,0xb7,0x17,0x8e,0x9c,0xc1,0xe9};
    static std::uint64_t divisor3     = 17795422865820041081ULL;
    static std::uint8_t  quotient3[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x83,0x6e,0x67,0x38,0x85,0xa5,0xe7,0x75,0x85,0x35,0x8d,0xf2,0x97,0xba,0xa0,0x7c,0xc6,0x30,0x31,0xa5,0xdd,0x8e,0xe5};
    static std::uint64_t remainder3      = 11174736240614628524ULL;
    uint256_from_bytes(dividend, dividend3);
    remainder = uint256_div_uint64(quotient, dividend, divisor3);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient3, quotient_data, 32) != 0 || remainder3 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend4[32] = {0x75,0x17,0x0c,0xc8,0x81,0xc1,0x7e,0x2e,0xd8,0x11,0x7a,0x27,0xc8,0xf7,0xab,0x28,0xf5,0xb8,0x86,0xe4,0x38,0x0c,0x50,0xea,0x31,0xf9,0xe4,0x49,0x85,0x02,0x8c,0x91};
    static std::uint64_t divisor4     = 8098797038763310532ULL;
    static std::uint8_t  quotient4[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x0a,0xb2,0x97,0xe8,0x27,0x04,0xf7,0xf2,0xc3,0x31,0xbf,0xc0,0x60,0xf1,0x5d,0x55,0x5d,0xef,0x3d,0x95,0xc5,0xb3,0x83,0x20};
    static std::uint64_t remainder4      = 6698014391200876561ULL;
    uint256_from_bytes(dividend, dividend4);
    remainder = uint256_div_uint64(quotient, dividend, divisor4);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient4, quotient_data, 32) != 0 || remainder4 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend5[32] = {0xb8,0xac,0x34,0xaf,0x86,0xaa,0x2d,0x61,0xf4,0xf1,0x92,0x66,0xae,0x00,0x3a,0x99,0x0a,0x78,0x34,0xc5,0xaf,0x17,0x1b,0x0a,0x03,0x84,0x6a,0xc8,0x92,0xaa,0x1d,0x24};
    static std::uint64_t divisor5     = 17983371540947501664ULL;
    static std::uint8_t  quotient5[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xbd,0x6e,0x5b,0xd0,0x70,0x41,0xf6,0xb0,0x51,0xa0,0xd4,0xaf,0x89,0x8f,0x50,0xed,0xca,0x1a,0x6f,0x65,0x8e,0x1c,0xad,0x72};
    static std::uint64_t remainder5      = 17472585788782751332ULL;
    uint256_from_bytes(dividend, dividend5);
    remainder = uint256_div_uint64(quotient, dividend, divisor5);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient5, quotient_data, 32) != 0 || remainder5 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend6[32] = {0x35,0xed,0x72,0x8c,0x41,0xa2,0x84,0x06,0x44,0xf2,0xde,0x9f,0x03,0x0d,0x04,0x63,0x1a,0x82,0x13,0xd3,0x4f,0xf7,0xf9,0x52,0xb3,0xc6,0x0f,0xb6,0xbb,0xdc,0x47,0x14};
    static std::uint64_t divisor6     = 14337353198059674105ULL;
    static std::uint8_t  quotient6[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x45,0x62,0x61,0xff,0xd1,0x2d,0x65,0x4d,0xce,0xe6,0xd2,0x72,0x27,0xf5,0x9b,0x69,0x4c,0x92,0x87,0x29,0xb3,0xa4,0x1b,0xcd};
    static std::uint64_t remainder6      = 1226658361400555439ULL;
    uint256_from_bytes(dividend, dividend6);
    remainder = uint256_div_uint64(quotient, dividend, divisor6);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient6, quotient_data, 32) != 0 || remainder6 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend7[32] = {0x01,0x57,0xa8,0x75,0xb8,0x0f,0x1c,0x22,0x53,0x5e,0x37,0x3d,0x68,0xa5,0x9c,0xee,0x43,0x4b,0x71,0xe6,0x75,0xe7,0x4d,0xcb,0x24,0xb3,0x26,0x7e,0xc6,0xbe,0x29,0xc8};
    static std::uint64_t divisor7     = 145737638569791545ULL;
    static std::uint8_t  quotient7[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xa9,0xea,0x85,0xe5,0x74,0xfa,0x0a,0x5f,0x1c,0xf5,0xf3,0xc9,0xee,0x17,0xde,0x05,0x1e,0x0a,0x2d,0x91,0xf0,0x03,0x0e,0xa2};
    static std::uint64_t remainder7      = 86745300595066806ULL;
    uint256_from_bytes(dividend, dividend7);
    remainder = uint256_div_uint64(quotient, dividend, divisor7);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient7, quotient_data, 32) != 0 || remainder7 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend8[32] = {0xab,0xeb,0x8f,0x43,0x85,0xd4,0x3c,0x62,0x52,0x18,0x1c,0x20,0x11,0x2a,0x06,0x05,0x6f,0x58,0xf9,0x9d,0x8f,0xac,0xfb,0xc6,0x69,0x2a,0xea,0xcf,0x0a,0x08,0xc5,0xfc};
    static std::uint64_t divisor8     = 7665887966554113651ULL;
    static std::uint8_t  quotient8[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x9d,0xb2,0xd7,0x40,0x6c,0xe3,0x15,0x59,0xa7,0x31,0x34,0x23,0xd5,0x60,0x2d,0x1c,0x12,0x5a,0xdb,0xf4,0xb6,0x03,0xbd,0xaa};
    static std::uint64_t remainder8      = 593328487469815454ULL;
    uint256_from_bytes(dividend, dividend8);
    remainder = uint256_div_uint64(quotient, dividend, divisor8);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient8, quotient_data, 32) != 0 || remainder8 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend9[32] = {0x41,0x7b,0x13,0x57,0x5d,0x9c,0x3c,0x73,0xd7,0xde,0xdf,0x32,0x9f,0xc4,0xa0,0xd0,0x05,0x87,0x6b,0xd4,0x5d,0xc6,0x61,0x04,0x9a,0xe3,0x07,0x4c,0x49,0xfd,0x47,0xb4};
    static std::uint64_t divisor9     = 13446085526174587897ULL;
    static std::uint8_t  quotient9[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x59,0xd5,0x56,0x5b,0x28,0xe5,0x3d,0x93,0x3d,0xc9,0xb1,0xe5,0x06,0x0c,0x77,0xe6,0x51,0x57,0xca,0x17,0xbd,0x03,0x93,0x89};
    static std::uint64_t remainder9      = 4332921580404937843ULL;
    uint256_from_bytes(dividend, dividend9);
    remainder = uint256_div_uint64(quotient, dividend, divisor9);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient9, quotient_data, 32) != 0 || remainder9 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend10[32] = {0x8c,0xee,0x1a,0x4c,0x31,0x80,0x5d,0x30,0x16,0x9a,0x63,0xcf,0x9c,0x06,0x51,0xb6,0xc0,0x49,0xec,0x2f,0x66,0x34,0xc1,0xed,0xe6,0x40,0x97,0xb9,0x6e,0xc1,0xd4,0xd3};
    static std::uint64_t divisor10     = 9589500204614487286ULL;
    static std::uint8_t  quotient10[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x0f,0x19,0x46,0x0c,0x57,0x68,0xef,0xce,0x40,0xa2,0x6c,0xaa,0xa7,0xb0,0xb5,0xa8,0xa5,0xd2,0xb3,0x19,0x0b,0x16,0x68,0xae};
    static std::uint64_t remainder10      = 4503648187462653343ULL;
    uint256_from_bytes(dividend, dividend10);
    remainder = uint256_div_uint64(quotient, dividend, divisor10);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient10, quotient_data, 32) != 0 || remainder10 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend11[32] = {0x2a,0x81,0x1d,0x18,0xc2,0x3f,0x6b,0x0e,0x02,0x65,0x05,0x75,0xae,0x4c,0x58,0xb5,0x3b,0x51,0x6c,0xde,0x86,0x2b,0xa5,0x7e,0xe7,0xf9,0x74,0x32,0x84,0x94,0x34,0x43};
    static std::uint64_t divisor11     = 2385919087538714732ULL;
    static std::uint8_t  quotient11[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x48,0x9f,0x60,0xfa,0x2e,0xc5,0x95,0x7c,0x22,0xbd,0x3d,0x93,0xfc,0xaa,0xe9,0xac,0xeb,0x0a,0xbf,0xaf,0xee,0xc4,0xbf,0x5c};
    static std::uint64_t remainder11      = 891293572994521459ULL;
    uint256_from_bytes(dividend, dividend11);
    remainder = uint256_div_uint64(quotient, dividend, divisor11);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient11, quotient_data, 32) != 0 || remainder11 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend12[32] = {0x54,0x08,0x1d,0x97,0x2c,0x09,0x89,0x9d,0xb9,0xf2,0x04,0x23,0xe2,0xd6,0x45,0x8e,0xc1,0x31,0xe9,0x54,0xb9,0x33,0x70,0x72,0x00,0x01,0x88,0xfe,0xd7,0xc5,0x0a,0xfc};
    static std::uint64_t divisor12     = 296461809639247693ULL;
    static std::uint8_t  quotient12[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x14,0x6c,0xb4,0x6e,0xd8,0xa8,0x18,0xf6,0x86,0x51,0x30,0x56,0x78,0xa0,0xa3,0xf7,0x7d,0xf1,0x0c,0x6b,0x75,0x05,0x85,0x43,0xa7};
    static std::uint64_t remainder12      = 134874399193114817ULL;
    uint256_from_bytes(dividend, dividend12);
    remainder = uint256_div_uint64(quotient, dividend, divisor12);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient12, quotient_data, 32) != 0 || remainder12 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend13[32] = {0x30,0x93,0xfa,0x02,0x5c,0x1a,0x05,0x14,0xb8,0xe1,0x21,0x48,0x87,0x1c,0xb5,0x13,0xf2,0x8b,0xa5,0x7c,0xb1,0xf2,0xcb,0x18,0x7b,0x80,0x69,0xce,0x12,0xd4,0x19,0xe0};
    static std::uint64_t divisor13     = 9837080236493174417ULL;
    static std::uint8_t  quotient13[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x5b,0x18,0x42,0xca,0x68,0xcb,0x75,0x7e,0x28,0xf1,0x0d,0x76,0x32,0x32,0x86,0xf7,0x62,0x58,0xf7,0x25,0xa3,0x28,0xd4,0xc3};
    static std::uint64_t remainder13      = 1972990756976080237ULL;
    uint256_from_bytes(dividend, dividend13);
    remainder = uint256_div_uint64(quotient, dividend, divisor13);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient13, quotient_data, 32) != 0 || remainder13 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend14[32] = {0x05,0x72,0xc6,0x76,0x92,0xc1,0x03,0x89,0xd2,0x60,0x48,0x96,0x02,0x08,0x4c,0x15,0x2d,0x36,0x87,0xb6,0xa8,0x3d,0xa8,0x8c,0x24,0xd1,0xf5,0x65,0x5d,0x0f,0x3c,0x6f};
    static std::uint64_t divisor14     = 7260253115445104908ULL;
    static std::uint8_t  quotient14[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0d,0xd7,0xd3,0x0a,0xc4,0xd5,0xc6,0xaf,0x23,0x60,0x2b,0x74,0x39,0x31,0x31,0x6b,0xad,0xd0,0xe4,0x03,0x24,0x9e,0x65,0x25};
    static std::uint64_t remainder14      = 4532194646811396531ULL;
    uint256_from_bytes(dividend, dividend14);
    remainder = uint256_div_uint64(quotient, dividend, divisor14);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient14, quotient_data, 32) != 0 || remainder14 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend15[32] = {0xa6,0x1f,0x0f,0xe3,0x10,0xc8,0x37,0x10,0x31,0xb9,0x51,0x1b,0x73,0x9f,0x60,0x14,0x94,0x59,0x91,0xe7,0xfb,0xa1,0xd0,0x09,0x6c,0xa1,0xf8,0x1b,0x78,0x77,0x47,0x8e};
    static std::uint64_t divisor15     = 12401188241863149058ULL;
    static std::uint8_t  quotient15[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf7,0x1a,0xec,0xa8,0x51,0xd3,0x92,0x89,0x92,0x6f,0x99,0x98,0x8b,0xd6,0xe3,0xa2,0x02,0x6d,0x3b,0x60,0xcb,0x92,0xa2,0xc2};
    static std::uint64_t remainder15      = 7898191923309934090ULL;
    uint256_from_bytes(dividend, dividend15);
    remainder = uint256_div_uint64(quotient, dividend, divisor15);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient15, quotient_data, 32) != 0 || remainder15 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend16[32] = {0x9c,0x3b,0x84,0x6e,0x18,0x06,0xdb,0x55,0xf0,0x38,0x89,0x70,0x46,0x2c,0x62,0xb8,0x44,0xc9,0x4a,0xca,0x15,0x9a,0x56,0x75,0x25,0x3b,0x54,0x81,0xed,0x29,0xb1,0x2f};
    static std::uint64_t divisor16     = 1797473934044984316ULL;
    static std::uint8_t  quotient16[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x43,0x59,0xbb,0x09,0xff,0xcd,0xef,0x53,0x68,0x3f,0x5a,0x23,0x70,0xc8,0x34,0x6d,0xae,0x0e,0x7b,0x8e,0xde,0x92,0x08,0xa7};
    static std::uint64_t remainder16      = 30259193862432715ULL;
    uint256_from_bytes(dividend, dividend16);
    remainder = uint256_div_uint64(quotient, dividend, divisor16);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient16, quotient_data, 32) != 0 || remainder16 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend17[32] = {0x36,0x5c,0x9b,0x54,0x0b,0xef,0x76,0x33,0x9c,0xa3,0x2f,0xd8,0x9f,0x9d,0x55,0x3b,0x77,0x5a,0x43,0x01,0x44,0x64,0x0d,0x11,0x93,0x8b,0xe4,0xc9,0x3b,0x71,0xf7,0x84};
    static std::uint64_t divisor17     = 7163795672833566399ULL;
    static std::uint8_t  quotient17[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x8b,0xfb,0x34,0x5b,0xc6,0x0c,0x07,0x7b,0x76,0xbe,0xdf,0x3a,0x1e,0x1a,0x3f,0x1e,0xce,0xed,0xfd,0x81,0xc4,0x08,0x94,0xe2};
    static std::uint64_t remainder17      = 5464325683619452646ULL;
    uint256_from_bytes(dividend, dividend17);
    remainder = uint256_div_uint64(quotient, dividend, divisor17);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient17, quotient_data, 32) != 0 || remainder17 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend18[32] = {0xd4,0xd2,0xb1,0xf7,0xec,0x4a,0x4b,0x15,0x6c,0x3f,0xd5,0x73,0xdc,0xdc,0xc2,0xd7,0x96,0x48,0xe0,0xdb,0xa5,0x89,0x9a,0xc2,0xaf,0x44,0x81,0xd5,0x7b,0x30,0xef,0xc8};
    static std::uint64_t divisor18     = 5720058506345001682ULL;
    static std::uint8_t  quotient18[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xae,0x56,0x75,0x07,0xbb,0x33,0x77,0x37,0xa8,0xfb,0x85,0x11,0xf2,0x81,0xff,0x46,0xa2,0xbb,0x4c,0x78,0x75,0xee,0x4f,0x31};
    static std::uint64_t remainder18      = 3198332416031156118ULL;
    uint256_from_bytes(dividend, dividend18);
    remainder = uint256_div_uint64(quotient, dividend, divisor18);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient18, quotient_data, 32) != 0 || remainder18 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend19[32] = {0xf5,0x6b,0x26,0x5c,0x06,0x72,0xfc,0xce,0x87,0xde,0x8e,0xca,0x03,0x8c,0x66,0xd9,0x54,0x97,0x2f,0x35,0x2b,0x21,0xb0,0x22,0x6d,0x80,0x24,0x8a,0x6d,0x0b,0x85,0x78};
    static std::uint64_t divisor19     = 1010578932076313387ULL;
    static std::uint8_t  quotient19[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x7f,0xc8,0x2d,0xcd,0x93,0x02,0x3f,0x2a,0xd9,0x61,0x7d,0x2b,0x6d,0x01,0xe7,0x75,0xcd,0x5a,0xa2,0x61,0x33,0x08,0xad,0x85};
    static std::uint64_t remainder19      = 256004441423411489ULL;
    uint256_from_bytes(dividend, dividend19);
    remainder = uint256_div_uint64(quotient, dividend, divisor19);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient19, quotient_data, 32) != 0 || remainder19 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend20[32] = {0x00,0x0b,0xc2,0x7c,0x44,0x40,0x5e,0x67,0x09,0xc8,0x6b,0x38,0xf3,0x41,0x73,0xa6,0xb1,0x12,0xcf,0xd7,0xc7,0x42,0x98,0x7e,0xe7,0x5d,0x94,0x63,0xb5,0xc3,0xc2,0x97};
    static std::uint64_t divisor20     = 5286599747828246939ULL;
    static std::uint8_t  quotient20[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x29,0x08,0x9b,0x74,0x6f,0x58,0x2c,0xdc,0xca,0x90,0x56,0xd7,0x4f,0x86,0xe7,0x84,0x7c,0xb1,0x7a,0x80,0xaa,0x8b,0xb7};
    static std::uint64_t remainder20      = 4430991474125937610ULL;
    uint256_from_bytes(dividend, dividend20);
    remainder = uint256_div_uint64(quotient, dividend, divisor20);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient20, quotient_data, 32) != 0 || remainder20 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend21[32] = {0xa9,0xae,0x50,0xaa,0xc5,0xe6,0x05,0xac,0xb0,0x8a,0x29,0x0b,0x44,0xf8,0xce,0xeb,0x15,0xbb,0x01,0xac,0x1c,0x65,0xa0,0xe5,0xf0,0x0f,0x67,0x70,0x1f,0x4b,0x3c,0xeb};
    static std::uint64_t divisor21     = 5967765335406619322ULL;
    static std::uint8_t  quotient21[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x0c,0x7e,0x9b,0xb9,0x40,0x76,0xbe,0x3a,0x19,0x1b,0x07,0xa3,0xde,0x64,0x4d,0x19,0x7c,0xe1,0x58,0x79,0x3a,0xca,0x5e,0x06};
    static std::uint64_t remainder21      = 4905409269593534607ULL;
    uint256_from_bytes(dividend, dividend21);
    remainder = uint256_div_uint64(quotient, dividend, divisor21);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient21, quotient_data, 32) != 0 || remainder21 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend22[32] = {0x2d,0xbf,0xd6,0xb1,0xc2,0xd0,0x75,0xf4,0x03,0x13,0x26,0xa5,0x7e,0x17,0xdb,0x89,0x3e,0x22,0x43,0x9d,0x22,0xb7,0xe6,0x9e,0x50,0x25,0x8b,0x0a,0xd8,0x6b,0x98,0x59};
    static std::uint64_t divisor22     = 11756890222917557735ULL;
    static std::uint8_t  quotient22[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x47,0xc8,0x0e,0xb5,0x41,0x30,0x34,0x7b,0x77,0x1a,0x39,0xee,0x6a,0xad,0xcf,0xae,0xd0,0x05,0xab,0xd1,0x4b,0x9f,0x50,0x59};
    static std::uint64_t remainder22      = 3276931617261126410ULL;
    uint256_from_bytes(dividend, dividend22);
    remainder = uint256_div_uint64(quotient, dividend, divisor22);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient22, quotient_data, 32) != 0 || remainder22 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend23[32] = {0x90,0x28,0x3a,0x5c,0x04,0x34,0x3c,0xd4,0x83,0xe2,0xa1,0x44,0xac,0x45,0xcd,0x2b,0x80,0x8d,0xf8,0xbc,0xd1,0x04,0x7a,0x1e,0x77,0x23,0x93,0xe9,0x8b,0xa6,0xbd,0x9e};
    static std::uint64_t divisor23     = 6434764020632750578ULL;
    static std::uint8_t  quotient23[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x9d,0x42,0x88,0x35,0xab,0xaf,0xda,0x49,0xd3,0x1f,0x0d,0xfa,0x97,0x45,0x28,0xb6,0xfd,0x17,0x3b,0x25,0x1d,0xea,0x9e,0x84};
    static std::uint64_t remainder23      = 5708114901255078102ULL;
    uint256_from_bytes(dividend, dividend23);
    remainder = uint256_div_uint64(quotient, dividend, divisor23);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient23, quotient_data, 32) != 0 || remainder23 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend24[32] = {0x85,0x36,0x51,0xc9,0xf1,0xa7,0xf0,0xab,0xc2,0xd3,0x38,0x25,0xb8,0x4a,0x75,0x2f,0xed,0x9e,0xa3,0x95,0x81,0x64,0x73,0xa4,0x5f,0xcd,0xf4,0x84,0xc3,0x68,0x39,0x28};
    static std::uint64_t divisor24     = 1503515038832321281ULL;
    static std::uint8_t  quotient24[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x62,0x64,0x09,0x20,0x67,0x2e,0x83,0x68,0xc4,0x8a,0xd4,0xfa,0xd5,0xd1,0x9e,0x99,0x23,0xab,0xce,0x3b,0x22,0x2a,0xe4,0xd4};
    static std::uint64_t remainder24      = 422299650297256020ULL;
    uint256_from_bytes(dividend, dividend24);
    remainder = uint256_div_uint64(quotient, dividend, divisor24);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient24, quotient_data, 32) != 0 || remainder24 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend25[32] = {0x95,0x8d,0xd1,0x9a,0x75,0x09,0x88,0x32,0x17,0x6a,0x6a,0x04,0xd8,0x92,0xde,0x70,0x0e,0xf9,0x6c,0x4f,0x67,0x79,0x6c,0x8f,0x6f,0x5f,0xbb,0xd7,0xde,0xca,0xd0,0x91};
    static std::uint64_t divisor25     = 16866682796687397546ULL;
    static std::uint8_t  quotient25[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xa3,0x90,0x69,0x9c,0xba,0xbb,0xdb,0xf3,0xc7,0x55,0xef,0x06,0x71,0xe6,0xc7,0x5a,0x67,0xe0,0xa1,0xa8,0x3e,0x84,0x78,0x68};
    static std::uint64_t remainder25      = 16626404633521654657ULL;
    uint256_from_bytes(dividend, dividend25);
    remainder = uint256_div_uint64(quotient, dividend, divisor25);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient25, quotient_data, 32) != 0 || remainder25 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend26[32] = {0x96,0x90,0x1c,0xaa,0xf6,0xdc,0xcc,0x41,0x27,0xef,0x39,0x6b,0x97,0x57,0xdb,0xe6,0xa0,0x07,0x6b,0x09,0xed,0xf0,0xed,0x2f,0xe8,0x10,0x73,0x80,0x62,0x4e,0x7f,0xf2};
    static std::uint64_t divisor26     = 17481905851851200416ULL;
    static std::uint8_t  quotient26[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x9e,0xdf,0x63,0x3b,0x58,0x54,0x48,0xaf,0x77,0x98,0xe5,0xfd,0x1b,0xb3,0x7d,0x69,0x9e,0xc9,0xc3,0xad,0xb9,0x08,0x82,0xf7};
    static std::uint64_t remainder26      = 2834966963739964562ULL;
    uint256_from_bytes(dividend, dividend26);
    remainder = uint256_div_uint64(quotient, dividend, divisor26);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient26, quotient_data, 32) != 0 || remainder26 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend27[32] = {0x0e,0xf8,0x3a,0xb5,0xef,0x99,0xa7,0x59,0x99,0x15,0xda,0xf2,0x24,0x15,0xea,0x18,0x27,0x89,0x26,0x03,0x08,0xf0,0x82,0x82,0x5a,0xab,0xca,0x88,0xf0,0x7e,0xe1,0x21};
    static std::uint64_t divisor27     = 607039844645091514ULL;
    static std::uint8_t  quotient27[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xc6,0xe5,0xe4,0xea,0x0e,0xd4,0x69,0xac,0x28,0xb8,0x30,0x79,0xd3,0xb7,0x1d,0x3e,0xb5,0xb8,0x4b,0x55,0xc1,0xf6,0x46,0x5c};
    static std::uint64_t remainder27      = 49067744200204873ULL;
    uint256_from_bytes(dividend, dividend27);
    remainder = uint256_div_uint64(quotient, dividend, divisor27);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient27, quotient_data, 32) != 0 || remainder27 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend28[32] = {0xaa,0xbc,0xf0,0x7c,0xb9,0x7d,0x3e,0xff,0xf5,0x9b,0x78,0x57,0xda,0x5b,0xc6,0xc6,0xbc,0x1c,0x36,0xd3,0xc6,0xd2,0xd5,0xeb,0x1f,0x37,0x3c,0xe3,0x23,0xf8,0x63,0xfb};
    static std::uint64_t divisor28     = 7184633713806237904ULL;
    static std::uint8_t  quotient28[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xb6,0x5f,0xe6,0x86,0x09,0x63,0x83,0xf1,0x82,0x2f,0x07,0xa0,0xa1,0x04,0x31,0xd1,0xa6,0xb1,0x20,0x86,0x62,0x61,0x86,0x6a};
    static std::uint64_t remainder28      = 2053073667827264987ULL;
    uint256_from_bytes(dividend, dividend28);
    remainder = uint256_div_uint64(quotient, dividend, divisor28);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient28, quotient_data, 32) != 0 || remainder28 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend29[32] = {0xb0,0x60,0x5c,0x9d,0x4d,0x09,0x4b,0xbe,0x29,0xa9,0x53,0x26,0xf7,0x5c,0x3d,0xce,0x2e,0xe3,0xfc,0xfb,0xc6,0xa7,0xb7,0xad,0x58,0x23,0x93,0xae,0xc6,0x88,0xa1,0xf8};
    static std::uint64_t divisor29     = 6641547469254509166ULL;
    static std::uint8_t  quotient29[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xe9,0xe1,0xa3,0x41,0x56,0x9e,0x37,0x3e,0x5f,0x50,0xbc,0xa7,0x2c,0x31,0x5b,0xf3,0x1f,0x37,0x8b,0xf9,0xe1,0xf7,0x84,0x91};
    static std::uint64_t remainder29      = 3750227317218167210ULL;
    uint256_from_bytes(dividend, dividend29);
    remainder = uint256_div_uint64(quotient, dividend, divisor29);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient29, quotient_data, 32) != 0 || remainder29 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend30[32] = {0x4b,0xd1,0x3c,0x65,0x80,0xe7,0x30,0x39,0x34,0xed,0xc4,0x68,0x8f,0xcc,0x69,0x5f,0xf9,0xee,0x3e,0x39,0xcd,0xa0,0x63,0x80,0x65,0xfd,0x02,0x1e,0xaf,0x6a,0xbb,0x99};
    static std::uint64_t divisor30     = 16792620075262455686ULL;
    static std::uint8_t  quotient30[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x53,0x49,0x1a,0xc1,0xae,0x4d,0x78,0xb4,0xfc,0x6b,0x16,0x81,0xeb,0x8d,0x79,0xcd,0x1a,0x57,0x29,0xde,0x47,0x9f,0xf3,0xcc};
    static std::uint64_t remainder30      = 11342935509463247569ULL;
    uint256_from_bytes(dividend, dividend30);
    remainder = uint256_div_uint64(quotient, dividend, divisor30);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient30, quotient_data, 32) != 0 || remainder30 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend31[32] = {0xfd,0xb2,0x59,0x99,0xcf,0x90,0x56,0x01,0x42,0x8d,0xef,0x98,0x69,0xe3,0xb7,0x72,0x60,0xcc,0x7d,0xeb,0x38,0xd1,0x96,0xa3,0x0b,0x0e,0xbe,0x91,0xc1,0x9c,0x66,0xe5};
    static std::uint64_t divisor31     = 3581216127663815432ULL;
    static std::uint8_t  quotient31[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x1a,0xc8,0xd4,0xeb,0x31,0x87,0x57,0x44,0x38,0x02,0x5a,0x79,0xba,0xfe,0xb4,0xd0,0x53,0x48,0xd6,0x45,0x4f,0x44,0x61,0xae};
    static std::uint64_t remainder31      = 3010492268476907381ULL;
    uint256_from_bytes(dividend, dividend31);
    remainder = uint256_div_uint64(quotient, dividend, divisor31);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient31, quotient_data, 32) != 0 || remainder31 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend32[32] = {0xcb,0x15,0x49,0x4e,0x2d,0x7b,0x4c,0x9b,0x27,0x79,0x24,0xdf,0x0e,0x0b,0x64,0x1d,0xc5,0xc6,0x28,0x0c,0xbe,0x04,0x96,0xa8,0x0c,0x09,0x8a,0x43,0xd3,0x51,0x01,0x87};
    static std::uint64_t divisor32     = 17397815213712060817ULL;
    static std::uint8_t  quotient32[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xd7,0x53,0xc3,0x95,0x21,0xc7,0xc4,0x1a,0x30,0x7e,0xa2,0x4c,0x07,0x48,0x8a,0x2e,0x33,0x90,0xdc,0x4c,0x00,0xea,0x93,0xbc};
    static std::uint64_t remainder32      = 9878086391522547723ULL;
    uint256_from_bytes(dividend, dividend32);
    remainder = uint256_div_uint64(quotient, dividend, divisor32);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient32, quotient_data, 32) != 0 || remainder32 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend33[32] = {0x8f,0xde,0xe6,0x28,0x37,0x4a,0x32,0x19,0xab,0x1b,0xfd,0xe7,0x05,0x80,0xed,0xc0,0x81,0x7e,0x60,0xec,0x71,0x9d,0x05,0xa0,0xa5,0x90,0xe5,0x2f,0x9b,0xde,0xb1,0x81};
    static std::uint64_t divisor33     = 13317560960620505272ULL;
    static std::uint8_t  quotient33[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc7,0x48,0x1c,0x6d,0x5f,0xc5,0x97,0x7c,0x43,0xe1,0xfd,0xa5,0xdb,0xf7,0x33,0x74,0x7f,0x00,0x0f,0x00,0x91,0x8d,0x60,0x4a};
    static std::uint64_t remainder33      = 3256510257505234001ULL;
    uint256_from_bytes(dividend, dividend33);
    remainder = uint256_div_uint64(quotient, dividend, divisor33);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient33, quotient_data, 32) != 0 || remainder33 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend34[32] = {0x68,0x2f,0x3f,0x85,0xa7,0x5c,0xca,0x64,0x3e,0xb1,0x45,0xe4,0x88,0xd8,0xaa,0x90,0xac,0x2d,0x75,0x07,0x49,0x92,0x1a,0xa7,0xe6,0x01,0xf5,0xe1,0x60,0xf1,0x72,0xae};
    static std::uint64_t divisor34     = 16998674335977622305ULL;
    static std::uint8_t  quotient34[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x71,0x0f,0x4c,0x29,0x10,0x1e,0x16,0x0c,0x5d,0x6d,0xd8,0x3d,0x7e,0xcf,0xca,0x94,0x5d,0x59,0x8d,0x24,0x3b,0x7a,0x1f,0x00};
    static std::uint64_t remainder34      = 12044759386503934894ULL;
    uint256_from_bytes(dividend, dividend34);
    remainder = uint256_div_uint64(quotient, dividend, divisor34);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient34, quotient_data, 32) != 0 || remainder34 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend35[32] = {0xeb,0xa5,0x73,0x16,0x40,0x6b,0x43,0x46,0x97,0x36,0xa6,0xaa,0x34,0x23,0xdd,0xcf,0x60,0x4b,0x89,0x6c,0x74,0x51,0x38,0x8a,0xf8,0xd7,0x56,0xdc,0xc8,0xae,0xc5,0x6c};
    static std::uint64_t divisor35     = 11556129404795932420ULL;
    static std::uint8_t  quotient35[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x78,0x27,0xeb,0xe2,0x76,0x4a,0x8b,0xbf,0x19,0xad,0xf4,0x1c,0x72,0xc6,0x29,0x94,0x35,0x6e,0x68,0xff,0xdf,0x3d,0xaf,0xef};
    static std::uint64_t remainder35      = 7748392227937961136ULL;
    uint256_from_bytes(dividend, dividend35);
    remainder = uint256_div_uint64(quotient, dividend, divisor35);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient35, quotient_data, 32) != 0 || remainder35 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend36[32] = {0x0d,0xc0,0x10,0x81,0x25,0x5d,0x8c,0xfe,0x4f,0x84,0x3b,0x08,0x1c,0x09,0xf6,0x6b,0x5a,0x3d,0x10,0x24,0xb1,0x89,0x16,0x95,0x7b,0x5e,0x59,0xf5,0xca,0x6e,0xc3,0x13};
    static std::uint64_t divisor36     = 13480794587338723839ULL;
    static std::uint8_t  quotient36[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x12,0xd0,0xc2,0x1c,0x06,0xc1,0xde,0x6c,0xe5,0xfc,0x0a,0xb8,0x08,0x52,0x42,0x6b,0x08,0xe8,0x28,0xb0,0x41,0x35,0xa2,0x34};
    static std::uint64_t remainder36      = 641071172933107015ULL;
    uint256_from_bytes(dividend, dividend36);
    remainder = uint256_div_uint64(quotient, dividend, divisor36);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient36, quotient_data, 32) != 0 || remainder36 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend37[32] = {0xd8,0xd5,0xf0,0x27,0x45,0xeb,0x6d,0xb4,0x2e,0x6a,0xe4,0x72,0x56,0x87,0x4d,0x2f,0xe0,0x78,0xdc,0xa1,0xb9,0xa7,0x8f,0x13,0xd3,0x56,0xd8,0x15,0x88,0x51,0xeb,0x08};
    static std::uint64_t divisor37     = 14582188347282811964ULL;
    static std::uint8_t  quotient37[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x12,0x4d,0x1f,0x23,0x95,0xfe,0x37,0xf8,0x12,0x87,0x07,0x72,0x9e,0x77,0xb1,0x64,0x75,0xa9,0x27,0xe7,0xbb,0xc6,0x7d,0x5a};
    static std::uint64_t remainder37      = 4453213273275470320ULL;
    uint256_from_bytes(dividend, dividend37);
    remainder = uint256_div_uint64(quotient, dividend, divisor37);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient37, quotient_data, 32) != 0 || remainder37 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend38[32] = {0x2e,0xd0,0x19,0xec,0xaa,0x8a,0x4a,0x5e,0xd2,0xc5,0x3c,0x91,0x3d,0x99,0x12,0xe4,0xdd,0xa4,0x03,0x31,0x51,0x54,0xf5,0xdc,0x36,0x5e,0x80,0xfc,0xc2,0x2d,0x54,0xf2};
    static std::uint64_t divisor38     = 12969442773411566729ULL;
    static std::uint8_t  quotient38[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x42,0x95,0x45,0x06,0x87,0x27,0xfd,0x31,0x4f,0x42,0xa3,0x9b,0xa2,0x7a,0xf5,0x6c,0x13,0x9a,0xf1,0xf6,0x19,0xf1,0x6b,0x69};
    static std::uint64_t remainder38      = 4477727546070443457ULL;
    uint256_from_bytes(dividend, dividend38);
    remainder = uint256_div_uint64(quotient, dividend, divisor38);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient38, quotient_data, 32) != 0 || remainder38 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend39[32] = {0xd1,0xf9,0xb3,0x13,0x6d,0xd6,0xa2,0xed,0xab,0x10,0x2e,0x0c,0x2f,0xa9,0xbe,0xfc,0xa3,0xd3,0x05,0xea,0x24,0xd2,0xc8,0x31,0x2c,0xb5,0x03,0x96,0x7c,0x99,0x6b,0xab};
    static std::uint64_t divisor39     = 7551154671160328385ULL;
    static std::uint8_t  quotient39[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0xf3,0x1d,0x3c,0x19,0x14,0x98,0x48,0x8c,0xba,0xd3,0x39,0x12,0xad,0xba,0x11,0x3e,0x6c,0x9f,0xdb,0x66,0x1a,0x69,0x9e};
    static std::uint64_t remainder39      = 7515550308502981517ULL;
    uint256_from_bytes(dividend, dividend39);
    remainder = uint256_div_uint64(quotient, dividend, divisor39);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient39, quotient_data, 32) != 0 || remainder39 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend40[32] = {0xe3,0xfb,0x1c,0x7d,0x0b,0xe7,0x05,0xd0,0xe7,0x56,0xe5,0x62,0x38,0x06,0x69,0x6d,0xcb,0x97,0xfc,0xa0,0xce,0x76,0xcb,0xbc,0x75,0xd5,0x6e,0xb9,0xd8,0x08,0x64,0x0f};
    static std::uint64_t divisor40     = 18322603976324979239ULL;
    static std::uint8_t  quotient40[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe5,0x86,0x89,0x1a,0x10,0x73,0x52,0x0d,0x9d,0x5c,0x88,0x08,0xc3,0xc9,0x0d,0xd2,0x5e,0xfa,0x69,0x73,0xea,0x73,0x77,0xa6};
    static std::uint64_t remainder40      = 489603657754168773ULL;
    uint256_from_bytes(dividend, dividend40);
    remainder = uint256_div_uint64(quotient, dividend, divisor40);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient40, quotient_data, 32) != 0 || remainder40 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend41[32] = {0x12,0xb9,0xb2,0xd4,0x03,0xec,0xfd,0xe5,0xac,0xda,0x0c,0x3c,0xe0,0xe4,0x8e,0xc9,0x0d,0xaa,0xaa,0x29,0x6c,0x9e,0x1a,0xda,0x24,0x18,0x26,0xc5,0x78,0xc9,0x4b,0xe7};
    static std::uint64_t divisor41     = 2248093394202565061ULL;
    static std::uint8_t  quotient41[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x99,0xa6,0xb9,0x03,0x24,0x02,0x0b,0x13,0x22,0x46,0x74,0x87,0x1f,0x3a,0xdc,0xe8,0x97,0xd2,0x7e,0xbc,0x6a,0x1f,0xd5,0x3a};
    static std::uint64_t remainder41      = 1700315672844340293ULL;
    uint256_from_bytes(dividend, dividend41);
    remainder = uint256_div_uint64(quotient, dividend, divisor41);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient41, quotient_data, 32) != 0 || remainder41 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend42[32] = {0x91,0xa1,0x68,0x89,0x83,0x0a,0xea,0x7a,0x0b,0x2a,0xa4,0x95,0x95,0x06,0xd2,0x9b,0xf0,0x93,0x3f,0xe5,0x1f,0x4b,0x0c,0x88,0x8d,0xd0,0xcd,0x73,0x7d,0xbf,0xdd,0x25};
    static std::uint64_t divisor42     = 10722216007638947226ULL;
    static std::uint8_t  quotient42[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfa,0x8b,0xc8,0x38,0x9d,0x79,0x2b,0xfa,0x78,0x0e,0x8c,0x99,0x6e,0xe9,0xa4,0xf9,0x7e,0x81,0xbc,0x34,0x3c,0x5f,0xe8,0x0f};
    static std::uint64_t remainder42      = 6470901813752138015ULL;
    uint256_from_bytes(dividend, dividend42);
    remainder = uint256_div_uint64(quotient, dividend, divisor42);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient42, quotient_data, 32) != 0 || remainder42 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend43[32] = {0x40,0xdf,0x5e,0x98,0xd9,0x1a,0xe0,0x3b,0x71,0x43,0xbb,0x04,0x84,0xc9,0xd0,0x55,0x36,0x78,0x31,0x05,0x88,0xdc,0xc1,0x79,0x2e,0x10,0xbb,0x15,0x0f,0x68,0xce,0x53};
    static std::uint64_t divisor43     = 8173273794996686227ULL;
    static std::uint8_t  quotient43[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x92,0x6a,0x27,0x0d,0xee,0xbf,0x2f,0x84,0x78,0xb5,0xd3,0x4b,0xe6,0x74,0x7a,0xbf,0xa8,0x16,0xe7,0xaf,0x76,0xee,0x3e,0x42};
    static std::uint64_t remainder43      = 6226919013252805741ULL;
    uint256_from_bytes(dividend, dividend43);
    remainder = uint256_div_uint64(quotient, dividend, divisor43);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient43, quotient_data, 32) != 0 || remainder43 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend44[32] = {0x1f,0x09,0xf4,0x09,0x19,0x40,0xe2,0x88,0xb3,0x5a,0xcb,0xdc,0xbf,0x70,0xbb,0x42,0xa2,0xfe,0xc9,0xb1,0x6b,0x7d,0xf0,0x61,0x2d,0x45,0x33,0x3f,0x5f,0x3a,0xc2,0x66};
    static std::uint64_t divisor44     = 8738586700243287311ULL;
    static std::uint8_t  quotient44[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x41,0x85,0x88,0x44,0xdc,0xfe,0x4a,0x53,0x22,0x54,0xe8,0x52,0x84,0x73,0xa8,0xd2,0x6c,0xf4,0xa6,0x67,0x47,0x10,0x94,0x38};
    static std::uint64_t remainder44      = 4818390475554732830ULL;
    uint256_from_bytes(dividend, dividend44);
    remainder = uint256_div_uint64(quotient, dividend, divisor44);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient44, quotient_data, 32) != 0 || remainder44 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend45[32] = {0x44,0x87,0x6e,0xf6,0xfa,0x1f,0x1c,0x36,0xfb,0xc8,0xa3,0x04,0x10,0x20,0xbe,0x9c,0x1e,0xeb,0x77,0x59,0x39,0xe8,0x88,0xd8,0x0e,0x9f,0x40,0x37,0xb4,0x14,0x8d,0x6a};
    static std::uint64_t divisor45     = 16439515359689446201ULL;
    static std::uint8_t  quotient45[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4c,0xe5,0x72,0xb9,0x9d,0x93,0x36,0x70,0x24,0xf7,0x2a,0x22,0x75,0x2e,0x0a,0xa3,0xb3,0x07,0x1c,0xb3,0xa0,0x2a,0xa5,0x8b};
    static std::uint64_t remainder45      = 283993832268390519ULL;
    uint256_from_bytes(dividend, dividend45);
    remainder = uint256_div_uint64(quotient, dividend, divisor45);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient45, quotient_data, 32) != 0 || remainder45 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend46[32] = {0x4d,0xa9,0x23,0x22,0xeb,0xce,0x79,0xfd,0x3f,0xa6,0x55,0xa2,0x68,0x7e,0xdf,0xea,0x3f,0x2f,0x16,0xeb,0x55,0x51,0xbb,0x05,0x17,0x0b,0xc2,0x98,0x73,0x19,0xef,0x6f};
    static std::uint64_t divisor46     = 4859165432598822595ULL;
    static std::uint8_t  quotient46[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x26,0xd2,0x54,0x3c,0xb4,0x9e,0x43,0xd4,0xa1,0xc0,0xc6,0x2e,0xd7,0x3f,0x5f,0x88,0xf7,0x76,0x40,0x4c,0x3c,0x74,0xfb,0x98};
    static std::uint64_t remainder46      = 976617170389531303ULL;
    uint256_from_bytes(dividend, dividend46);
    remainder = uint256_div_uint64(quotient, dividend, divisor46);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient46, quotient_data, 32) != 0 || remainder46 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend47[32] = {0x21,0xc5,0xe7,0x1a,0xb7,0x69,0xd8,0x2e,0x1b,0xa7,0x75,0x16,0x88,0xe2,0x70,0x2d,0x41,0xe9,0xe8,0x38,0x99,0x16,0xf5,0xf1,0xe2,0x50,0xf2,0xa1,0x4b,0xbd,0x75,0x2f};
    static std::uint64_t divisor47     = 5903268919773089764ULL;
    static std::uint8_t  quotient47[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x69,0x89,0x06,0x06,0x6a,0xeb,0x90,0x40,0x36,0xc8,0x0b,0x3a,0xd7,0x6e,0x13,0x2f,0x6e,0x15,0xa1,0x0d,0xf2,0x55,0x85,0x7a};
    static std::uint64_t remainder47      = 4729034612174679687ULL;
    uint256_from_bytes(dividend, dividend47);
    remainder = uint256_div_uint64(quotient, dividend, divisor47);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient47, quotient_data, 32) != 0 || remainder47 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend48[32] = {0x8b,0xee,0x16,0xdf,0xf4,0x78,0xe7,0x1c,0xfc,0x31,0x76,0x6d,0x72,0x0d,0x23,0xc6,0x1c,0xa7,0xf6,0x98,0x86,0xa2,0xde,0x77,0x1a,0x3b,0xe7,0xef,0xc7,0xbc,0x8a,0x9c};
    static std::uint64_t divisor48     = 1892268268755585241ULL;
    static std::uint8_t  quotient48[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x54,0x1b,0x02,0xb8,0x94,0x05,0x19,0x8c,0x9f,0xef,0x84,0xcd,0x0a,0x8f,0x4d,0x4f,0xe6,0x4a,0x4c,0x8f,0xff,0xf5,0x7d,0xe5};
    static std::uint64_t remainder48      = 463388673863068543ULL;
    uint256_from_bytes(dividend, dividend48);
    remainder = uint256_div_uint64(quotient, dividend, divisor48);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient48, quotient_data, 32) != 0 || remainder48 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend49[32] = {0x9e,0x5c,0xe8,0xae,0x88,0xb3,0x13,0xf4,0x04,0x85,0xdb,0x56,0xc7,0x53,0x97,0x93,0x28,0x81,0x3b,0x7e,0x09,0x56,0xad,0x3c,0x45,0xf2,0xe8,0xd2,0x83,0x1a,0xdb,0x8c};
    static std::uint64_t divisor49     = 5951189855206252709ULL;
    static std::uint8_t  quotient49[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xea,0xdf,0x92,0x46,0xbe,0xb4,0x69,0x19,0xc2,0x9f,0xfe,0x2a,0x5e,0x07,0x35,0x28,0xd2,0x1c,0x35,0x78,0x82,0xde,0xda,0xe7};
    static std::uint64_t remainder49      = 5651981095089267881ULL;
    uint256_from_bytes(dividend, dividend49);
    remainder = uint256_div_uint64(quotient, dividend, divisor49);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient49, quotient_data, 32) != 0 || remainder49 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend50[32] = {0x19,0x01,0xb3,0xc0,0x0c,0xbb,0x33,0xc8,0x9d,0xd7,0x80,0x01,0x32,0x1f,0x5f,0xb1,0xb2,0xa3,0xa2,0x31,0x44,0x1e,0x24,0x08,0xfa,0x52,0x37,0x65,0x8a,0x47,0x88,0x1d};
    static std::uint64_t divisor50     = 18351700370796604475ULL;
    static std::uint8_t  quotient50[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x19,0x22,0xdb,0x4d,0x75,0x86,0xb1,0x97,0xd8,0x7b,0x06,0xde,0xdf,0x0a,0x1f,0xa0,0x3d,0xab,0x01,0xba,0xce,0x42,0x44,0x75};
    static std::uint64_t remainder50      = 14927330058152731942ULL;
    uint256_from_bytes(dividend, dividend50);
    remainder = uint256_div_uint64(quotient, dividend, divisor50);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient50, quotient_data, 32) != 0 || remainder50 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend51[32] = {0x4a,0xf5,0x7d,0x46,0xe8,0x74,0xe3,0xdf,0xf1,0x35,0x6c,0x55,0x7c,0xc1,0x9e,0xfd,0xf3,0x17,0x6c,0x02,0x22,0xb7,0xcc,0xe0,0xb7,0x76,0xc9,0xc8,0x3e,0x8b,0x47,0x5d};
    static std::uint64_t divisor51     = 7517248030505603855ULL;
    static std::uint8_t  quotient51[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xb7,0xf1,0x85,0x0a,0xc3,0xc6,0x36,0x42,0x5e,0x38,0xa1,0x2b,0x7d,0x83,0x2d,0xa8,0x51,0x6e,0xd1,0x7b,0x17,0x35,0xbe,0xad};
    static std::uint64_t remainder51      = 2827802067616515130ULL;
    uint256_from_bytes(dividend, dividend51);
    remainder = uint256_div_uint64(quotient, dividend, divisor51);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient51, quotient_data, 32) != 0 || remainder51 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend52[32] = {0x8d,0x04,0x33,0x7a,0x5c,0xe3,0x05,0xba,0xb6,0xf3,0x52,0x0b,0xb1,0x0c,0x0f,0x32,0xf9,0xba,0x32,0x60,0x29,0x44,0x30,0xbe,0xbb,0x03,0x51,0xc4,0x30,0x1f,0x6f,0xfc};
    static std::uint64_t divisor52     = 5771240429455709846ULL;
    static std::uint8_t  quotient52[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xc2,0xbb,0xe0,0x0d,0x4d,0x08,0x2f,0x7a,0x06,0x3c,0x77,0x0d,0xfb,0x72,0xe5,0x22,0xd1,0xff,0xb5,0x3d,0xb8,0xb0,0x84,0x1f};
    static std::uint64_t remainder52      = 2670746970672061394ULL;
    uint256_from_bytes(dividend, dividend52);
    remainder = uint256_div_uint64(quotient, dividend, divisor52);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient52, quotient_data, 32) != 0 || remainder52 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend53[32] = {0xb1,0xab,0x6f,0xbd,0x05,0xf9,0xee,0x2b,0x9d,0x83,0x50,0xa3,0x06,0x6b,0xdc,0x0f,0xd9,0xf8,0x21,0xc9,0x8c,0xc6,0x50,0x50,0x7f,0x81,0x11,0xd8,0x8a,0x8d,0x51,0x2a};
    static std::uint64_t divisor53     = 1260052764481426412ULL;
    static std::uint8_t  quotient53[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x29,0x06,0x0b,0xdf,0x7a,0x68,0x86,0x3d,0x32,0xe2,0x87,0xfc,0x59,0xc5,0x1d,0xdc,0xa4,0x3d,0xd4,0x34,0x78,0x40,0xba,0xbb};
    static std::uint64_t remainder53      = 91156937581218758ULL;
    uint256_from_bytes(dividend, dividend53);
    remainder = uint256_div_uint64(quotient, dividend, divisor53);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient53, quotient_data, 32) != 0 || remainder53 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend54[32] = {0x27,0xe6,0xfd,0x66,0xd0,0x07,0x04,0xbe,0x42,0x3e,0xea,0x27,0xf7,0x57,0x42,0xaa,0x83,0xb1,0x65,0x0f,0x3f,0x16,0x78,0xfb,0x61,0x94,0x2a,0x9b,0xd2,0xa3,0xcc,0x17};
    static std::uint64_t divisor54     = 7612154879327796468ULL;
    static std::uint8_t  quotient54[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0xb2,0x43,0xfc,0xb5,0xaa,0xdd,0x1b,0xf5,0x3d,0x33,0xc1,0xea,0xf6,0xff,0xc7,0x44,0x0c,0xc9,0x1a,0xd0,0xb3,0x3b,0x06};
    static std::uint64_t remainder54      = 1586876616522441311ULL;
    uint256_from_bytes(dividend, dividend54);
    remainder = uint256_div_uint64(quotient, dividend, divisor54);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient54, quotient_data, 32) != 0 || remainder54 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend55[32] = {0x81,0xd1,0x48,0xfd,0x02,0xcb,0x57,0x41,0xa0,0xf4,0x3f,0x3a,0x45,0x21,0x34,0x70,0x58,0xc3,0xba,0xfd,0x79,0xe8,0x11,0xb4,0xca,0x5d,0x6b,0x1b,0x75,0xc2,0xef,0xe0};
    static std::uint64_t divisor55     = 71327682387496855ULL;
    static std::uint8_t  quotient55[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x83,0x25,0x5e,0x57,0xdb,0x30,0x65,0xa3,0xd9,0x9b,0xd6,0xf1,0x51,0x4d,0x71,0x64,0x42,0xbe,0xc5,0x08,0xea,0x18,0xc2,0xbd,0x92};
    static std::uint64_t remainder55      = 41889571594965186ULL;
    uint256_from_bytes(dividend, dividend55);
    remainder = uint256_div_uint64(quotient, dividend, divisor55);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient55, quotient_data, 32) != 0 || remainder55 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend56[32] = {0x90,0x41,0x4b,0xcc,0x82,0xe5,0x5b,0x0b,0x5a,0xf1,0x00,0xaa,0xa8,0x3a,0xa5,0xf9,0x18,0xf7,0x14,0xbe,0x19,0x5b,0x0b,0x5f,0x8a,0x0d,0x8a,0x10,0x0f,0xba,0x43,0x2b};
    static std::uint64_t divisor56     = 8069470153101344304ULL;
    static std::uint8_t  quotient56[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x49,0xc4,0x13,0x24,0xf7,0x31,0x2f,0xdf,0x46,0x9b,0x66,0xe3,0xa3,0x08,0x58,0xcb,0xd6,0x38,0xd8,0x55,0xad,0xbe,0x6e,0x2a};
    static std::uint64_t remainder56      = 2992456338523025227ULL;
    uint256_from_bytes(dividend, dividend56);
    remainder = uint256_div_uint64(quotient, dividend, divisor56);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient56, quotient_data, 32) != 0 || remainder56 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend57[32] = {0x4e,0x79,0xa8,0xf9,0x43,0x61,0x44,0x75,0xf9,0x11,0x50,0x56,0x2b,0x9a,0xe7,0xcd,0xbf,0x80,0x9c,0x83,0x34,0x53,0x9a,0x94,0xdd,0xd0,0xd6,0xac,0x7d,0xad,0x5b,0xcd};
    static std::uint64_t divisor57     = 5917825530464714443ULL;
    static std::uint8_t  quotient57[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf4,0x9e,0x76,0xd7,0x09,0x06,0xcb,0x56,0xe9,0x8e,0x99,0x61,0xdc,0x8c,0x24,0x86,0x8f,0x04,0xad,0x13,0x30,0x0f,0x80,0xac};
    static std::uint64_t remainder57      = 2735770020875381609ULL;
    uint256_from_bytes(dividend, dividend57);
    remainder = uint256_div_uint64(quotient, dividend, divisor57);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient57, quotient_data, 32) != 0 || remainder57 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend58[32] = {0xba,0x6a,0xbd,0x59,0xb1,0x4b,0x23,0xf2,0x98,0x0e,0x54,0xa9,0x95,0x64,0xaa,0x8b,0x6d,0x16,0x68,0x8a,0x3b,0xbf,0x65,0xf9,0x53,0xbf,0x3f,0x95,0x68,0x47,0x48,0x8b};
    static std::uint64_t divisor58     = 4716184802934016516ULL;
    static std::uint8_t  quotient58[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xd9,0x25,0x4b,0xa1,0x7f,0x1b,0x25,0x8b,0x56,0xe3,0x1a,0x9a,0xba,0x5a,0x2f,0x34,0x69,0x8b,0x82,0x0d,0xdc,0x46,0x59,0x0c};
    static std::uint64_t remainder58      = 2319406922341051483ULL;
    uint256_from_bytes(dividend, dividend58);
    remainder = uint256_div_uint64(quotient, dividend, divisor58);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient58, quotient_data, 32) != 0 || remainder58 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend59[32] = {0x5b,0xab,0xe7,0xa9,0x03,0xf9,0xd2,0xb2,0x85,0xab,0xed,0xe7,0xa1,0x4f,0x66,0xbc,0xb0,0xe1,0xa0,0xac,0xd5,0xe2,0x74,0x90,0x5a,0x80,0x8f,0xf5,0xa2,0x88,0x5b,0x03};
    static std::uint64_t divisor59     = 14712774221015976610ULL;
    static std::uint8_t  quotient59[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x72,0xef,0xd9,0x27,0x16,0xfe,0xb4,0xcd,0xcd,0xc2,0xa0,0x75,0xff,0x90,0x0b,0x40,0xad,0x26,0x40,0x23,0xa7,0xe6,0x60,0x81};
    static std::uint64_t remainder59      = 1616483724559105889ULL;
    uint256_from_bytes(dividend, dividend59);
    remainder = uint256_div_uint64(quotient, dividend, divisor59);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient59, quotient_data, 32) != 0 || remainder59 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend60[32] = {0xcb,0xba,0x3a,0xd7,0x70,0x59,0x72,0xcc,0x88,0x20,0x03,0xe6,0x52,0xa6,0xf8,0x5c,0xf3,0x6d,0xe7,0x65,0xce,0x4e,0x09,0x86,0x9b,0x39,0x86,0x48,0xf5,0x90,0x68,0x78};
    static std::uint64_t divisor60     = 9561729101412498497ULL;
    static std::uint8_t  quotient60[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x89,0x09,0x56,0x91,0xb9,0x4a,0x44,0xd6,0x3a,0x5e,0x50,0x57,0x2c,0x23,0x5e,0x65,0x6c,0xb8,0x58,0x91,0xcb,0xeb,0xcf,0x8a};
    static std::uint64_t remainder60      = 6591208951564263022ULL;
    uint256_from_bytes(dividend, dividend60);
    remainder = uint256_div_uint64(quotient, dividend, divisor60);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient60, quotient_data, 32) != 0 || remainder60 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend61[32] = {0x38,0x37,0x4d,0x49,0x7c,0x70,0x94,0xd0,0x76,0x23,0x76,0xa1,0xf1,0x12,0x37,0x4b,0xeb,0xc1,0x25,0x40,0x30,0xdd,0xfc,0xd1,0x16,0xf0,0x5f,0x6f,0xf5,0x2b,0x84,0xaa};
    static std::uint64_t divisor61     = 5032746732986586887ULL;
    static std::uint8_t  quotient61[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xce,0x0d,0x0f,0x8c,0x5a,0x3e,0x93,0x6e,0x95,0xf1,0x05,0x4a,0x64,0xd3,0x54,0x48,0x6c,0xa2,0x49,0x28,0xc7,0xbf,0x33,0x30};
    static std::uint64_t remainder61      = 224571447724199514ULL;
    uint256_from_bytes(dividend, dividend61);
    remainder = uint256_div_uint64(quotient, dividend, divisor61);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient61, quotient_data, 32) != 0 || remainder61 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend62[32] = {0xc6,0xc9,0x2d,0x4f,0x8e,0xe1,0xee,0x05,0xc5,0x5f,0x99,0xf6,0xe9,0x52,0xf4,0x97,0xe0,0xd3,0xbb,0x79,0x34,0x1b,0xec,0x00,0x62,0xaf,0x31,0xee,0xf3,0xde,0x23,0x41};
    static std::uint64_t divisor62     = 871703620383519560ULL;
    static std::uint8_t  quotient62[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x6e,0xa6,0x49,0xfe,0x4a,0xba,0xdc,0x2b,0xb3,0xd7,0x90,0x20,0xbe,0xae,0x67,0xac,0x85,0x3a,0x2d,0x94,0x90,0xe6,0xfe,0x9a};
    static std::uint64_t remainder62      = 826628660168940017ULL;
    uint256_from_bytes(dividend, dividend62);
    remainder = uint256_div_uint64(quotient, dividend, divisor62);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient62, quotient_data, 32) != 0 || remainder62 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend63[32] = {0x0d,0x4a,0x59,0x38,0x1c,0xa5,0x4e,0x03,0x8f,0x40,0x13,0x92,0xa8,0xcb,0x5d,0x80,0xd4,0x79,0x53,0xfc,0x78,0x04,0x78,0x4f,0x9c,0x23,0x02,0xca,0xfc,0x12,0xb0,0xe3};
    static std::uint64_t divisor63     = 347890582955225196ULL;
    static std::uint8_t  quotient63[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xc0,0xb8,0x05,0xdd,0x32,0x72,0xa4,0x25,0x3d,0x5f,0xf9,0xb7,0xa4,0x2d,0xf4,0xc5,0x23,0xc9,0x3c,0x93,0x95,0x81,0xd5,0x78};
    static std::uint64_t remainder63      = 58907886824464963ULL;
    uint256_from_bytes(dividend, dividend63);
    remainder = uint256_div_uint64(quotient, dividend, divisor63);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient63, quotient_data, 32) != 0 || remainder63 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend64[32] = {0x9d,0x2a,0x0a,0x17,0x19,0x1f,0x46,0x5b,0xef,0xa2,0x24,0x37,0x89,0xb2,0xaf,0x69,0x72,0x02,0xdf,0xf6,0x26,0x6a,0xd0,0x42,0x10,0xe8,0xba,0xed,0x65,0xd1,0xcf,0xa0};
    static std::uint64_t divisor64     = 13838657706887574113ULL;
    static std::uint8_t  quotient64[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xd1,0x7f,0x6e,0x8f,0xca,0x28,0xae,0x25,0xf4,0xee,0xe1,0xe1,0xee,0xd8,0x92,0x1a,0x6c,0x0f,0xed,0xfe,0x87,0x59,0xe8,0x9a};
    static std::uint64_t remainder64      = 924987355428952390ULL;
    uint256_from_bytes(dividend, dividend64);
    remainder = uint256_div_uint64(quotient, dividend, divisor64);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient64, quotient_data, 32) != 0 || remainder64 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend65[32] = {0x89,0xba,0x12,0x63,0xe7,0x0c,0xb2,0xd5,0x95,0xb7,0xa1,0x15,0x53,0xc2,0x7e,0x6c,0x5c,0x2d,0xae,0xdb,0x9d,0x24,0xd0,0x92,0xb8,0x87,0xbf,0x77,0x81,0xa6,0xdb,0x29};
    static std::uint64_t divisor65     = 8234421785533714419ULL;
    static std::uint8_t  quotient65[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x34,0x89,0x19,0x95,0xe6,0x49,0x75,0xd1,0xac,0x14,0xd6,0x9f,0xc6,0x32,0x52,0xa9,0xb8,0x25,0x49,0x64,0xef,0xe6,0xd4,0xdc};
    static std::uint64_t remainder65      = 1759018519643023957ULL;
    uint256_from_bytes(dividend, dividend65);
    remainder = uint256_div_uint64(quotient, dividend, divisor65);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient65, quotient_data, 32) != 0 || remainder65 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend66[32] = {0x65,0x36,0x32,0x5d,0x4d,0xa3,0x45,0x77,0xfe,0x79,0xef,0x8d,0xbb,0x59,0x02,0x6a,0xe3,0x48,0xee,0x3d,0x29,0x03,0xf1,0x08,0xcd,0x42,0xdb,0x1d,0xe2,0xfd,0xe6,0x89};
    static std::uint64_t divisor66     = 2704561891590096272ULL;
    static std::uint8_t  quotient66[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xb2,0x53,0x2d,0x24,0xab,0x7f,0x2d,0x4c,0xfb,0x6b,0xf1,0x8b,0x72,0xd0,0xc7,0x47,0xad,0x88,0x66,0x81,0xfc,0xe4,0xfd,0x72};
    static std::uint64_t remainder66      = 1722015023982550121ULL;
    uint256_from_bytes(dividend, dividend66);
    remainder = uint256_div_uint64(quotient, dividend, divisor66);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient66, quotient_data, 32) != 0 || remainder66 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend67[32] = {0xb5,0x46,0xaa,0x6a,0xa2,0x36,0xae,0x7d,0xe7,0x10,0xfc,0xd0,0xcf,0x56,0x02,0x69,0x35,0x6e,0x80,0xb7,0x11,0x93,0x49,0x7d,0x61,0xf9,0xad,0xf4,0x7d,0x29,0x0b,0x07};
    static std::uint64_t divisor67     = 16775540842476832933ULL;
    static std::uint8_t  quotient67[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc7,0x55,0xc3,0x82,0x76,0xd6,0xaa,0x5e,0x98,0xe6,0x44,0x2f,0x5e,0xaa,0x05,0x60,0x9a,0xee,0xf0,0x84,0x81,0xb8,0x3d,0x69};
    static std::uint64_t remainder67      = 9350434466892263002ULL;
    uint256_from_bytes(dividend, dividend67);
    remainder = uint256_div_uint64(quotient, dividend, divisor67);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient67, quotient_data, 32) != 0 || remainder67 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend68[32] = {0x28,0xb7,0xe8,0xc4,0x9f,0x66,0x17,0x1a,0x9e,0x1e,0x4d,0xdf,0x47,0xce,0xb5,0xee,0xdd,0x5a,0xd1,0x2c,0x45,0xc3,0x5a,0x09,0x95,0xa9,0x94,0xc9,0xd1,0xc8,0x0c,0x1c};
    static std::uint64_t divisor68     = 2793000940572288239ULL;
    static std::uint8_t  quotient68[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x0c,0xee,0x16,0x4f,0xf9,0x2e,0x1a,0xf9,0xb3,0xda,0x4c,0xbf,0xba,0x4d,0xe0,0x31,0xc2,0x52,0x35,0x28,0xab,0xe7,0x00,0xf2};
    static std::uint64_t remainder68      = 1179490426885448238ULL;
    uint256_from_bytes(dividend, dividend68);
    remainder = uint256_div_uint64(quotient, dividend, divisor68);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient68, quotient_data, 32) != 0 || remainder68 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend69[32] = {0x7a,0x64,0x63,0xbe,0x50,0x63,0x8c,0xb2,0x4d,0x86,0xd0,0xc9,0xdd,0x81,0x3e,0x1a,0xac,0x90,0xb5,0x65,0x28,0x54,0xfd,0xef,0xfb,0x79,0x38,0xfd,0x29,0x59,0x58,0x99};
    static std::uint64_t divisor69     = 4921161401758617765ULL;
    static std::uint8_t  quotient69[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xca,0xc8,0x00,0x6e,0x30,0x45,0xa1,0xb2,0x0b,0xc9,0xcd,0xfc,0x3e,0x68,0xce,0x5f,0x3b,0x4a,0xa5,0xb7,0xa5,0x32,0xa7,0xaa};
    static std::uint64_t remainder69      = 2001531872671016967ULL;
    uint256_from_bytes(dividend, dividend69);
    remainder = uint256_div_uint64(quotient, dividend, divisor69);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient69, quotient_data, 32) != 0 || remainder69 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend70[32] = {0xdc,0x15,0xb7,0x16,0x73,0xb7,0xd1,0xb1,0xf8,0xf6,0x31,0x0c,0x0d,0xa3,0xe1,0xca,0x25,0xa5,0xde,0x8d,0x37,0xf2,0x3a,0xe8,0x2b,0xd6,0x85,0x09,0x53,0x79,0xc6,0x33};
    static std::uint64_t divisor70     = 4142808800768941179ULL;
    static std::uint8_t  quotient70[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xd3,0xf9,0x8f,0xe2,0x1e,0x18,0xee,0x02,0x59,0x7c,0xce,0xbf,0xc5,0xbb,0x4d,0x8c,0x8d,0xa7,0xa0,0x55,0x3e,0x37,0xc3,0x06};
    static std::uint64_t remainder70      = 1536970644689775185ULL;
    uint256_from_bytes(dividend, dividend70);
    remainder = uint256_div_uint64(quotient, dividend, divisor70);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient70, quotient_data, 32) != 0 || remainder70 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend71[32] = {0x8d,0xa7,0x8a,0x98,0x51,0xf2,0x3c,0xd4,0xac,0xe1,0xa9,0xeb,0x90,0x56,0x2c,0x2e,0x7d,0x41,0xfe,0xc9,0xf3,0x4a,0xf6,0xee,0xad,0x91,0x78,0x54,0x43,0x07,0xd1,0x19};
    static std::uint64_t divisor71     = 10667673622244079940ULL;
    static std::uint8_t  quotient71[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf4,0xf3,0x9a,0xf6,0x22,0x6c,0xc7,0x0a,0x19,0x7c,0xd8,0x99,0xb2,0x2f,0xdb,0xbd,0xdd,0x4b,0x83,0xfe,0x70,0x29,0x2a,0x39};
    static std::uint64_t remainder71      = 8576229608518871285ULL;
    uint256_from_bytes(dividend, dividend71);
    remainder = uint256_div_uint64(quotient, dividend, divisor71);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient71, quotient_data, 32) != 0 || remainder71 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend72[32] = {0x74,0x04,0xe9,0x0c,0x61,0xb9,0xfc,0xd4,0x19,0x56,0x5a,0xde,0xa3,0xd5,0x68,0x3a,0x68,0xb1,0x09,0x21,0x27,0xba,0x01,0xb7,0x62,0x3f,0xfa,0xea,0xe5,0x7a,0x79,0xb4};
    static std::uint64_t divisor72     = 9952729439092562301ULL;
    static std::uint8_t  quotient72[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xd7,0x08,0xba,0x44,0xd0,0x72,0x4c,0xdd,0xa8,0xf8,0x22,0x61,0x19,0x8e,0x59,0x19,0x5c,0x3f,0xba,0x2e,0x63,0x8f,0x92,0x00};
    static std::uint64_t remainder72      = 2715809176325337012ULL;
    uint256_from_bytes(dividend, dividend72);
    remainder = uint256_div_uint64(quotient, dividend, divisor72);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient72, quotient_data, 32) != 0 || remainder72 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend73[32] = {0x55,0xc6,0x6c,0x95,0xd8,0xa6,0x52,0x3d,0x18,0x1f,0x94,0x4f,0x25,0x6d,0x31,0x52,0x16,0x81,0xb3,0xa1,0xea,0xfe,0x86,0x1e,0x39,0xeb,0x04,0xa8,0x50,0x15,0x67,0x05};
    static std::uint64_t divisor73     = 17425360407256527995ULL;
    static std::uint8_t  quotient73[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x5a,0xcd,0x83,0x2a,0x31,0x0e,0x57,0x5a,0xc7,0x84,0x4d,0x38,0x59,0x9f,0x14,0xfd,0xe8,0x61,0x0f,0x35,0xa9,0x04,0x87,0x92};
    static std::uint64_t remainder73      = 12973106811258149855ULL;
    uint256_from_bytes(dividend, dividend73);
    remainder = uint256_div_uint64(quotient, dividend, divisor73);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient73, quotient_data, 32) != 0 || remainder73 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend74[32] = {0x7d,0x2f,0xb3,0x65,0x4c,0x45,0x49,0x80,0xb3,0x2a,0xc6,0x7b,0x42,0xbe,0xc1,0xa2,0x07,0xa4,0xe4,0x1b,0x21,0x8e,0x28,0x78,0x2a,0x42,0x71,0x41,0x22,0x15,0xc0,0xca};
    static std::uint64_t divisor74     = 8185374989004763833ULL;
    static std::uint8_t  quotient74[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x1a,0x1f,0x6a,0x38,0x90,0x09,0xe3,0xa9,0xd2,0x4c,0xcb,0xa3,0x61,0x0b,0xb7,0x10,0x42,0x84,0x45,0xb1,0x05,0xad,0x3d,0xb7};
    static std::uint64_t remainder74      = 3767136856970045835ULL;
    uint256_from_bytes(dividend, dividend74);
    remainder = uint256_div_uint64(quotient, dividend, divisor74);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient74, quotient_data, 32) != 0 || remainder74 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend75[32] = {0xe6,0x73,0x57,0x61,0x13,0xe6,0x42,0xab,0x33,0xc7,0x90,0x9c,0xcd,0x64,0x4a,0x94,0x19,0xa3,0xb8,0xde,0x23,0xe2,0xd1,0x3d,0x1a,0xa8,0xae,0x8f,0xf4,0x39,0x6e,0x54};
    static std::uint64_t divisor75     = 9461447192255884162ULL;
    static std::uint8_t  quotient75[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xc1,0x4d,0xb9,0x38,0x08,0xd6,0xa7,0x13,0x89,0xd4,0x6d,0x7e,0x17,0xdd,0x49,0x7f,0x9f,0x6c,0xfc,0xa9,0x55,0xf6,0x7f,0xb5};
    static std::uint64_t remainder75      = 3793178870979030378ULL;
    uint256_from_bytes(dividend, dividend75);
    remainder = uint256_div_uint64(quotient, dividend, divisor75);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient75, quotient_data, 32) != 0 || remainder75 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend76[32] = {0x31,0x95,0x2a,0xb2,0x92,0xa3,0xfa,0xfe,0x52,0x47,0x90,0x67,0xee,0x6f,0xba,0xc5,0xad,0x49,0x6b,0xf9,0x29,0xc5,0x13,0x38,0xb9,0xb8,0xe8,0x33,0x25,0xd2,0x0d,0x6d};
    static std::uint64_t divisor76     = 9541804974099189957ULL;
    static std::uint8_t  quotient76[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x5f,0xdb,0x21,0x74,0x6f,0x84,0xfd,0xdf,0x67,0x54,0xa7,0x5d,0xc1,0xfd,0x8d,0x77,0x94,0x8c,0x4b,0xc9,0x18,0xec,0x11,0xc0};
    static std::uint64_t remainder76      = 2117575850478822573ULL;
    uint256_from_bytes(dividend, dividend76);
    remainder = uint256_div_uint64(quotient, dividend, divisor76);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient76, quotient_data, 32) != 0 || remainder76 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend77[32] = {0xba,0xc4,0xd8,0x69,0x54,0x4a,0x93,0x58,0x53,0xce,0xe8,0xd6,0x00,0x33,0x0e,0x53,0xde,0x81,0x3a,0x9a,0x38,0xed,0xa4,0x33,0xfa,0xfe,0xbf,0xca,0xc0,0x07,0x99,0xd8};
    static std::uint64_t divisor77     = 639628524090026884ULL;
    static std::uint8_t  quotient77[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x0a,0x5f,0xcd,0xb3,0xec,0x15,0xfb,0xad,0x82,0x55,0x1e,0x86,0x82,0x56,0x84,0x22,0x69,0x89,0xb3,0x33,0xcf,0xf1,0x5f,0xbf};
    static std::uint64_t remainder77      = 382606475434190428ULL;
    uint256_from_bytes(dividend, dividend77);
    remainder = uint256_div_uint64(quotient, dividend, divisor77);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient77, quotient_data, 32) != 0 || remainder77 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend78[32] = {0xe2,0x15,0x0d,0x1b,0x8d,0x38,0x19,0x69,0x3e,0xdc,0x96,0xb3,0x78,0xdb,0x9d,0x78,0x18,0x3c,0x7d,0x09,0x83,0x17,0x2b,0xd9,0xae,0xcc,0x1e,0x48,0x69,0x00,0xeb,0xa0};
    static std::uint64_t divisor78     = 15000880466823531264ULL;
    static std::uint8_t  quotient78[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x16,0x04,0x08,0x4e,0x2e,0xbe,0xf6,0x9b,0x77,0xc0,0x35,0x51,0x41,0xc1,0xd1,0x6e,0xb9,0x83,0xf6,0x38,0x6b,0xea,0xd5,0xa7};
    static std::uint64_t remainder78      = 6812642022991691424ULL;
    uint256_from_bytes(dividend, dividend78);
    remainder = uint256_div_uint64(quotient, dividend, divisor78);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient78, quotient_data, 32) != 0 || remainder78 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend79[32] = {0xf0,0xc7,0x27,0x15,0x17,0xe7,0x0f,0xdb,0x26,0x79,0xa2,0xc2,0x94,0xd9,0x7a,0x16,0xbd,0xd1,0x60,0x74,0x89,0xce,0xe3,0x52,0xfa,0xba,0x4f,0xb0,0xf2,0x6f,0x18,0x60};
    static std::uint64_t divisor79     = 9934899154909222877ULL;
    static std::uint8_t  quotient79[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xbf,0x11,0x3d,0xdc,0xbc,0x7c,0x39,0xa4,0x0b,0xc9,0x17,0xdc,0xe2,0xb2,0xdb,0xfd,0x30,0x58,0xc6,0xad,0xa7,0x4b,0xe9,0x52};
    static std::uint64_t remainder79      = 2592763497547419286ULL;
    uint256_from_bytes(dividend, dividend79);
    remainder = uint256_div_uint64(quotient, dividend, divisor79);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient79, quotient_data, 32) != 0 || remainder79 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend80[32] = {0x0a,0x25,0xce,0xdc,0xb7,0x1f,0x96,0xb8,0xc4,0x1e,0x40,0xe0,0xd2,0x92,0x83,0x0b,0xc8,0xd6,0x4d,0x88,0xc3,0xbe,0x1f,0x1f,0xb9,0xcb,0x8f,0x72,0xad,0x34,0x7d,0x1f};
    static std::uint64_t divisor80     = 10610962907167942787ULL;
    static std::uint8_t  quotient80[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0xa4,0x30,0x0e,0x3c,0xfd,0xdd,0x20,0x05,0x08,0x53,0xb7,0x86,0x14,0x26,0x5e,0x04,0x39,0x1a,0x2e,0x16,0xda,0xe7,0x16};
    static std::uint64_t remainder80      = 6232122064498937053ULL;
    uint256_from_bytes(dividend, dividend80);
    remainder = uint256_div_uint64(quotient, dividend, divisor80);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient80, quotient_data, 32) != 0 || remainder80 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend81[32] = {0xae,0xfc,0x90,0x55,0x35,0xf6,0x6f,0x27,0x49,0x8a,0x17,0x46,0xed,0xf9,0xe4,0xa5,0x72,0x9e,0xa9,0x2e,0x59,0x60,0x2b,0x06,0x58,0x2b,0x16,0x05,0x8d,0x92,0x52,0x34};
    static std::uint64_t divisor81     = 10549597002128652682ULL;
    static std::uint8_t  quotient81[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x31,0xfa,0x13,0xc4,0x9c,0xc6,0xa1,0x1d,0xd8,0x85,0xa5,0xaf,0xb1,0x5b,0xcd,0x48,0xb3,0xd1,0x7b,0x20,0x19,0x11,0x40,0x1a};
    static std::uint64_t remainder81      = 6469777237389572656ULL;
    uint256_from_bytes(dividend, dividend81);
    remainder = uint256_div_uint64(quotient, dividend, divisor81);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient81, quotient_data, 32) != 0 || remainder81 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend82[32] = {0x78,0xc2,0x44,0x61,0x63,0x5b,0x81,0x85,0xb3,0x77,0x05,0x10,0xc1,0x7b,0x06,0x8d,0x8a,0x04,0x6d,0x56,0xdd,0x9f,0x20,0x8e,0x50,0x3c,0xd6,0xa2,0x5d,0xe8,0x00,0xae};
    static std::uint64_t divisor82     = 13167357565575763089ULL;
    static std::uint8_t  quotient82[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xa9,0x2d,0x30,0x4f,0x51,0x46,0x9f,0x2e,0xf0,0xa9,0xa5,0xf8,0xfd,0xb3,0x44,0xa1,0xed,0xd8,0xd0,0x15,0xee,0x57,0x14,0x26};
    static std::uint64_t remainder82      = 7842736200377343784ULL;
    uint256_from_bytes(dividend, dividend82);
    remainder = uint256_div_uint64(quotient, dividend, divisor82);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient82, quotient_data, 32) != 0 || remainder82 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend83[32] = {0x2d,0x74,0x4b,0xf6,0x73,0x75,0x36,0x75,0xb9,0xd2,0x14,0xea,0xac,0x74,0x89,0x1c,0x54,0xaf,0x7d,0x83,0xba,0xa9,0xd1,0xc2,0xa5,0xc3,0x55,0xdf,0x71,0x29,0x5a,0xc0};
    static std::uint64_t divisor83     = 14579931254564508888ULL;
    static std::uint8_t  quotient83[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x39,0x82,0x6a,0x0c,0x94,0x4d,0x81,0x16,0x21,0xf0,0x40,0x7a,0x73,0x37,0xa4,0xfa,0x0c,0xf5,0xec,0x37,0x2a,0x11,0x11,0xe9};
    static std::uint64_t remainder83      = 1770837371249445416ULL;
    uint256_from_bytes(dividend, dividend83);
    remainder = uint256_div_uint64(quotient, dividend, divisor83);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient83, quotient_data, 32) != 0 || remainder83 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend84[32] = {0x23,0x03,0xc9,0x59,0xd3,0x15,0x66,0x48,0x0b,0xa9,0xd3,0x8d,0x56,0x82,0x7c,0x1e,0x95,0x12,0x23,0x3b,0x5b,0x00,0x1e,0x4c,0xfb,0x94,0x63,0xd1,0x67,0x71,0xb3,0x76};
    static std::uint64_t divisor84     = 1971129039248990208ULL;
    static std::uint8_t  quotient84[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x47,0xaf,0x4a,0x95,0x87,0xf8,0x47,0x1f,0xba,0x6b,0x55,0x20,0x1b,0xd3,0xd3,0x78,0xef,0x8f,0x4d,0xa2,0x3e,0xbd,0x29,0xe2};
    static std::uint64_t remainder84      = 1414008914801619830ULL;
    uint256_from_bytes(dividend, dividend84);
    remainder = uint256_div_uint64(quotient, dividend, divisor84);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient84, quotient_data, 32) != 0 || remainder84 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend85[32] = {0x74,0x52,0x1b,0xd6,0x4f,0xa2,0x0e,0x70,0x38,0x1f,0xcc,0xff,0x95,0x17,0x4c,0x1d,0x87,0xbf,0xd7,0x52,0x1f,0xd5,0x25,0xf7,0xdc,0x99,0xc6,0xe3,0x3e,0xd2,0x95,0x7f};
    static std::uint64_t divisor85     = 2235723617532132798ULL;
    static std::uint8_t  quotient85[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xbf,0xc0,0x5b,0xb6,0xf9,0xc2,0x4c,0x38,0x55,0x23,0x08,0x73,0xc6,0x2b,0x2e,0x7a,0xfd,0x77,0x89,0x22,0xa0,0xff,0x08,0x2b};
    static std::uint64_t remainder85      = 2168433538840151701ULL;
    uint256_from_bytes(dividend, dividend85);
    remainder = uint256_div_uint64(quotient, dividend, divisor85);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient85, quotient_data, 32) != 0 || remainder85 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend86[32] = {0x91,0x5e,0x57,0x78,0x82,0x62,0x4a,0x29,0x03,0x83,0x58,0x1e,0xc6,0xb7,0x2f,0x0b,0x33,0xb8,0xa9,0x69,0x36,0x10,0x05,0xd9,0xf0,0x47,0xb4,0x37,0xfb,0x95,0xf6,0x23};
    static std::uint64_t divisor86     = 1566197373278910894ULL;
    static std::uint8_t  quotient86[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0xb0,0x28,0x36,0x90,0x18,0xf1,0x05,0x23,0xd2,0x4d,0x95,0x0f,0x27,0x87,0x40,0x12,0x0c,0x91,0xb4,0x0b,0x43,0xb6,0x11,0xc5};
    static std::uint64_t remainder86      = 527182097530471741ULL;
    uint256_from_bytes(dividend, dividend86);
    remainder = uint256_div_uint64(quotient, dividend, divisor86);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient86, quotient_data, 32) != 0 || remainder86 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend87[32] = {0x6b,0xf1,0x9b,0x57,0x43,0x12,0x69,0x05,0x6b,0x68,0x82,0x93,0x44,0x05,0xd0,0xc3,0x5e,0x04,0x2d,0xac,0x2b,0xf7,0x04,0x35,0x3a,0x86,0xd8,0xdc,0xcc,0xb3,0xd4,0x0a};
    static std::uint64_t divisor87     = 7231883044208493225ULL;
    static std::uint8_t  quotient87[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x13,0x56,0x7e,0x2b,0x54,0x74,0xc2,0x0f,0x3c,0x36,0x72,0x29,0xb4,0xb6,0x62,0x26,0xb6,0x4c,0x2e,0x07,0xb5,0x96,0xe9,0x46};
    static std::uint64_t remainder87      = 4152695033818171604ULL;
    uint256_from_bytes(dividend, dividend87);
    remainder = uint256_div_uint64(quotient, dividend, divisor87);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient87, quotient_data, 32) != 0 || remainder87 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend88[32] = {0x7d,0x9c,0x1c,0xfb,0x35,0xc5,0x7a,0x6a,0xd9,0x17,0xb4,0x7b,0x77,0xf6,0x99,0x4f,0x11,0xca,0x13,0xf6,0x7f,0x61,0xbc,0xf7,0x71,0x38,0x1c,0xde,0x4a,0xc4,0xb5,0x3c};
    static std::uint64_t divisor88     = 15139801820385323767ULL;
    static std::uint8_t  quotient88[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x99,0x0b,0xe0,0xcf,0x62,0x2d,0x70,0x4d,0x16,0x9f,0x6c,0x39,0x67,0x46,0x0f,0x54,0x27,0x73,0xee,0xc8,0xa2,0x93,0x19,0x8d};
    static std::uint64_t remainder88      = 10574791949753576497ULL;
    uint256_from_bytes(dividend, dividend88);
    remainder = uint256_div_uint64(quotient, dividend, divisor88);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient88, quotient_data, 32) != 0 || remainder88 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend89[32] = {0xc7,0x1a,0x5d,0xce,0xb2,0xf4,0x75,0xcd,0x22,0x65,0x05,0x1b,0xc8,0xa5,0x0d,0x11,0x97,0x81,0x10,0xde,0xe3,0x4b,0x3e,0x9e,0x04,0x72,0x4b,0x01,0x3d,0x07,0xe6,0x6f};
    static std::uint64_t divisor89     = 7675427614560562597ULL;
    static std::uint8_t  quotient89[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xde,0x83,0xaa,0x05,0x95,0xcf,0x1a,0x4a,0x5a,0x0c,0xfe,0x22,0xcc,0x6f,0xb1,0x94,0xdf,0x08,0x7d,0x46,0x79,0x5a,0x0a,0x36};
    static std::uint64_t remainder89      = 7376100285091009441ULL;
    uint256_from_bytes(dividend, dividend89);
    remainder = uint256_div_uint64(quotient, dividend, divisor89);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient89, quotient_data, 32) != 0 || remainder89 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend90[32] = {0xe4,0x09,0x74,0x1e,0xfb,0x1d,0xad,0xef,0x5d,0xb7,0x8e,0x46,0xa0,0xb0,0xf3,0x31,0xc3,0xc5,0xae,0xb4,0xf1,0x4e,0xfd,0xab,0xc6,0x72,0xe3,0x28,0xb3,0x0a,0x10,0xb9};
    static std::uint64_t divisor90     = 17168228571235869089ULL;
    static std::uint8_t  quotient90[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf5,0x04,0xd0,0x6b,0x48,0x34,0xfa,0xf6,0x20,0x9e,0xc5,0x6e,0x13,0xfd,0x76,0x39,0x42,0x6c,0x0c,0xf5,0x73,0xd7,0xf4,0xc2};
    static std::uint64_t remainder90      = 8813398463433187511ULL;
    uint256_from_bytes(dividend, dividend90);
    remainder = uint256_div_uint64(quotient, dividend, divisor90);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient90, quotient_data, 32) != 0 || remainder90 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend91[32] = {0x82,0x03,0x85,0xa3,0xd0,0xf6,0xe4,0x08,0x97,0xdb,0xf3,0x68,0xf4,0x9c,0x5c,0x27,0x7b,0xa5,0x9f,0x68,0x3f,0x01,0xfc,0x43,0x74,0x6d,0xa2,0x15,0xe5,0x6e,0xd9,0x4f};
    static std::uint64_t divisor91     = 844761202813100899ULL;
    static std::uint8_t  quotient91[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0b,0x17,0x10,0x33,0xb0,0xc6,0x47,0x3c,0xcb,0xc8,0x56,0xd8,0x79,0x94,0x4d,0xae,0x4b,0x3d,0x60,0xc0,0x43,0x92,0x30,0xd2,0xdc};
    static std::uint64_t remainder91      = 560074029409778235ULL;
    uint256_from_bytes(dividend, dividend91);
    remainder = uint256_div_uint64(quotient, dividend, divisor91);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient91, quotient_data, 32) != 0 || remainder91 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend92[32] = {0x42,0x80,0x78,0xb6,0xc9,0xc3,0xd3,0xc8,0x49,0x58,0x92,0x8a,0xc7,0x77,0x6f,0x12,0xdc,0x12,0xb3,0x82,0x3e,0x90,0x2f,0xe7,0x0d,0xb2,0x8f,0xb3,0x6b,0x32,0xe6,0xfd};
    static std::uint64_t divisor92     = 10032174234323803870ULL;
    static std::uint8_t  quotient92[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7a,0x47,0xe3,0x9a,0xcf,0xc1,0x33,0x06,0x8e,0x21,0xe0,0xa8,0x3c,0x5d,0x03,0x1f,0x18,0xb6,0xbd,0x46,0x36,0x0c,0xeb,0xb4};
    static std::uint64_t remainder92      = 8770781443498076389ULL;
    uint256_from_bytes(dividend, dividend92);
    remainder = uint256_div_uint64(quotient, dividend, divisor92);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient92, quotient_data, 32) != 0 || remainder92 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend93[32] = {0xee,0x41,0x29,0x2d,0xc3,0x05,0xc5,0x3d,0x49,0x7a,0xc6,0xcb,0xd8,0x20,0xee,0x95,0x87,0x42,0x5e,0x5b,0xad,0x20,0x52,0xea,0xe9,0xcc,0x20,0x96,0x51,0xf3,0x7d,0x55};
    static std::uint64_t divisor93     = 18075749157316147943ULL;
    static std::uint8_t  quotient93[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf3,0x25,0x03,0x25,0xbb,0xee,0x72,0x54,0x84,0x8f,0xa2,0x7e,0x72,0xbb,0xe3,0x73,0xca,0x7c,0xce,0x1e,0xcd,0x47,0xb3,0x59};
    static std::uint64_t remainder93      = 14670130953553280518ULL;
    uint256_from_bytes(dividend, dividend93);
    remainder = uint256_div_uint64(quotient, dividend, divisor93);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient93, quotient_data, 32) != 0 || remainder93 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend94[32] = {0x40,0x42,0xb6,0x84,0x83,0x9d,0x25,0x20,0xff,0xcc,0xfd,0x6c,0xa3,0xc5,0x75,0xe3,0x6a,0xb0,0x07,0xde,0x43,0xb1,0x81,0xdc,0x3a,0x02,0x98,0xc5,0xbd,0x71,0x7f,0xc0};
    static std::uint64_t divisor94     = 5305520669779735435ULL;
    static std::uint8_t  quotient94[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xdf,0x6d,0x6b,0x69,0x07,0xbf,0x24,0xde,0x7e,0xf8,0xc4,0x89,0xe0,0xcc,0xb8,0x70,0x97,0xb0,0x62,0x0f,0xe7,0x7e,0x94,0x88};
    static std::uint64_t remainder94      = 4728532567608508904ULL;
    uint256_from_bytes(dividend, dividend94);
    remainder = uint256_div_uint64(quotient, dividend, divisor94);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient94, quotient_data, 32) != 0 || remainder94 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend95[32] = {0x79,0xf6,0x51,0xb6,0x2d,0x88,0xc0,0xcd,0x46,0x00,0x59,0x10,0xa1,0x86,0x25,0xba,0x95,0x2e,0xa1,0x1e,0x80,0xa7,0x63,0x50,0xe5,0xad,0xc7,0xb9,0x1c,0x8c,0xe5,0xe5};
    static std::uint64_t divisor95     = 12371161943392597462ULL;
    static std::uint8_t  quotient95[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xb5,0xdb,0xdd,0x26,0xea,0x96,0x12,0xb7,0xfd,0x2d,0x6c,0x89,0x6e,0x8c,0x5a,0x35,0x20,0x76,0xa9,0x75,0xad,0x9f,0x17,0x3a};
    static std::uint64_t remainder95      = 4814781339590621545ULL;
    uint256_from_bytes(dividend, dividend95);
    remainder = uint256_div_uint64(quotient, dividend, divisor95);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient95, quotient_data, 32) != 0 || remainder95 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend96[32] = {0xa1,0x49,0x43,0x1d,0x95,0x7e,0x89,0x91,0x54,0x67,0x90,0xb6,0x5d,0x51,0x78,0xe7,0x86,0xb5,0x89,0x2d,0x50,0xd2,0x9b,0xbb,0xac,0x1a,0x67,0xb1,0x19,0xf3,0xd2,0x19};
    static std::uint64_t divisor96     = 3927545314200780463ULL;
    static std::uint8_t  quotient96[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xf5,0x85,0xd2,0x59,0xad,0xe0,0x1d,0xdb,0x4e,0xe4,0xdf,0x1e,0xd8,0x8d,0x70,0x0b,0x9b,0x40,0xe9,0x27,0x86,0xe8,0x6f,0x28};
    static std::uint64_t remainder96      = 2446096942140106177ULL;
    uint256_from_bytes(dividend, dividend96);
    remainder = uint256_div_uint64(quotient, dividend, divisor96);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient96, quotient_data, 32) != 0 || remainder96 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend97[32] = {0xc8,0x3b,0x01,0xf8,0x43,0xb6,0x56,0xe1,0xe2,0x71,0x0d,0x8c,0xf3,0xe9,0x90,0x8b,0x8a,0xa3,0x1a,0x20,0xf1,0x87,0xa1,0xeb,0x65,0xdb,0xd7,0x9c,0x3e,0xa9,0x09,0x36};
    static std::uint64_t divisor97     = 7183719435946091191ULL;
    static std::uint8_t  quotient97[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x02,0x29,0xa8,0x67,0x73,0x9b,0xfe,0x27,0x48,0x39,0x2e,0xfe,0x66,0xd6,0x7d,0x06,0x8d,0x17,0x72,0x55,0x2f,0xfd,0x4a,0xe2};
    static std::uint64_t remainder97      = 2544908413146037672ULL;
    uint256_from_bytes(dividend, dividend97);
    remainder = uint256_div_uint64(quotient, dividend, divisor97);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient97, quotient_data, 32) != 0 || remainder97 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend98[32] = {0x54,0xd1,0x4f,0xed,0x75,0xe0,0x4a,0xe2,0xee,0xff,0x7b,0xf8,0x2d,0xcd,0x1d,0xcb,0x63,0x66,0x1a,0xde,0x25,0x86,0x8c,0xd0,0x43,0x67,0x3c,0x81,0x6f,0xf2,0xe6,0x4e};
    static std::uint64_t divisor98     = 15348918511466518888ULL;
    static std::uint8_t  quotient98[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x65,0xef,0xa4,0xde,0x0b,0x28,0x68,0x96,0xea,0xd8,0xbc,0x24,0xe6,0xe6,0xd7,0x72,0x2c,0x28,0x44,0xfd,0x9b,0x2a,0xe6,0x4d};
    static std::uint64_t remainder98      = 5023323269271048710ULL;
    uint256_from_bytes(dividend, dividend98);
    remainder = uint256_div_uint64(quotient, dividend, divisor98);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient98, quotient_data, 32) != 0 || remainder98 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
    static std::uint8_t  dividend99[32] = {0x1c,0xea,0xfa,0x63,0xab,0xeb,0xd7,0x85,0x43,0x4b,0x34,0x42,0xf6,0xbf,0xfa,0x45,0x0f,0x9f,0x7e,0xdf,0xbb,0x78,0xf0,0xd8,0x58,0x21,0x68,0xf6,0xeb,0x18,0x0f,0x55};
    static std::uint64_t divisor99     = 17168462887388402098ULL;
    static std::uint8_t  quotient99[32]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0x12,0x2b,0x11,0x3c,0xb7,0x73,0x1b,0x41,0x05,0x78,0x0b,0x18,0x37,0xd6,0x38,0x82,0x45,0x91,0xc7,0xa4,0x55,0xdb,0x32};
    static std::uint64_t remainder99      = 16982058066804790417ULL;
    uint256_from_bytes(dividend, dividend99);
    remainder = uint256_div_uint64(quotient, dividend, divisor99);
    uint256_to_bytes(quotient_data, quotient);
    if (std::memcmp(quotient99, quotient_data, 32) != 0 || remainder99 != remainder)
    {
        throw std::runtime_error("err in x64::uint256_div_uint64");
    }
}
#else
void test_uint256_x64_div_uint64()
{
}
#endif