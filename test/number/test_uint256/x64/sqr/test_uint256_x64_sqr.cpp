#if defined(CPU_FLAG_MOVBE) && defined(CPU_FLAG_BMI2)
#include <gmlib/number/internal/uint256_x64.h>
#include <stdexcept>
#include <cstring>

using namespace number::internal::x64;

void test_uint256_x64_sqr()
{
    uint256_t    multiplier, product[2];
    std::uint8_t product_data[64];

    static std::uint8_t multiplier0[32]   = {0x7d,0x6f,0xa0,0xe7,0x38,0x52,0xea,0xd1,0x06,0xf6,0x40,0x12,0xdd,0xfa,0xdd,0x1d,0x5c,0xc9,0x17,0xfb,0x81,0x29,0xfa,0xd6,0x06,0xb2,0xe9,0x27,0xf8,0x71,0xef,0xbf};
    static std::uint8_t product0[64]      = {0x3d,0x76,0x33,0xce,0xba,0xa5,0xa8,0x76,0x19,0x9d,0xf3,0xa3,0x15,0xf9,0xb0,0x30,0x73,0xce,0x20,0xb6,0xdf,0x12,0x9e,0x76,0x5c,0x5d,0x68,0x9b,0xb4,0xf8,0x50,0x13,0xc5,0x65,0x52,0x84,0x19,0x16,0xba,0x7a,0x3c,0x8d,0xca,0x71,0x2d,0xf1,0xad,0xd5,0x04,0x4b,0x9a,0xb0,0x1f,0x80,0x7d,0x7f,0x63,0xd9,0xad,0x69,0x97,0x24,0x30,0x81};
    uint256_from_bytes(multiplier, multiplier0);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product0, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier1[32]   = {0x62,0xd6,0x90,0x2f,0x8e,0x99,0x8c,0x23,0x36,0x4f,0xb7,0x94,0x8a,0x7c,0x88,0x0e,0xc2,0xe2,0x06,0x8a,0xac,0x46,0x03,0x0f,0xca,0x8b,0xbb,0x7d,0xe1,0xdf,0x12,0x28};
    static std::uint8_t product1[64]      = {0x26,0x28,0xfa,0x39,0xc9,0xe5,0x81,0x43,0xa9,0xeb,0x9b,0x6c,0x25,0x39,0x47,0xe7,0x07,0xf9,0x83,0xb5,0x82,0x8c,0xc9,0x2e,0x0d,0x36,0x1b,0x77,0x4b,0x5f,0xf5,0x1e,0x94,0x27,0xec,0xeb,0x8f,0xf6,0x0a,0xa2,0xf0,0xf3,0x58,0x58,0x13,0x51,0x54,0x22,0xfb,0x5a,0x75,0xb7,0x2c,0xe9,0x87,0x77,0x17,0x18,0x0b,0x5a,0xf2,0xf9,0xa6,0x40};
    uint256_from_bytes(multiplier, multiplier1);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product1, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier2[32]   = {0x57,0x75,0x49,0xc4,0x97,0x57,0x23,0xdb,0x74,0xf4,0xe4,0x99,0xd7,0x29,0x55,0x74,0xb9,0x48,0xa1,0xd5,0x16,0x35,0x90,0xf6,0x32,0x23,0xab,0xa5,0x1e,0xc6,0xb4,0xe2};
    static std::uint8_t product2[64]      = {0x1d,0xe0,0xed,0xe0,0x21,0xd1,0x45,0x4d,0xb9,0x71,0x55,0xee,0x8e,0x62,0xae,0x61,0x9f,0xfb,0x31,0x2d,0x17,0xc3,0xc9,0x09,0xd6,0x3f,0x6d,0xce,0xd8,0xab,0xa3,0xbc,0x3a,0x73,0x0b,0x95,0xec,0x39,0xc6,0xaa,0x85,0xc5,0x80,0xb6,0x8d,0xd8,0x9c,0xf1,0x84,0x6f,0xc1,0x6d,0x51,0x37,0xec,0xf3,0xe3,0x4a,0x43,0xf5,0x45,0x66,0x97,0x84};
    uint256_from_bytes(multiplier, multiplier2);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product2, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier3[32]   = {0xd3,0xaf,0xc2,0xba,0x7d,0x1a,0x2e,0xba,0x3a,0x25,0x2d,0xf4,0x71,0xfa,0x96,0xee,0xae,0xea,0xcb,0xe6,0x94,0xc1,0x81,0x6d,0xfe,0xcf,0xee,0x3f,0xff,0x5c,0x29,0x55};
    static std::uint8_t product3[64]      = {0xaf,0x0b,0x33,0xab,0x39,0x4f,0x60,0x48,0x94,0x75,0x83,0xa2,0x02,0xe7,0xc0,0x29,0x30,0x44,0xa1,0xc3,0x6a,0xec,0x65,0x42,0x38,0x1a,0x08,0x91,0x4f,0x7a,0x99,0x02,0xc7,0x43,0xf6,0x7a,0x63,0xca,0x23,0x87,0x97,0xea,0x96,0x72,0x59,0x54,0xd7,0xc1,0xe3,0x1b,0x53,0x01,0x18,0x41,0xc4,0x40,0x8e,0x65,0x1f,0x5b,0x11,0xc4,0x56,0x39};
    uint256_from_bytes(multiplier, multiplier3);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product3, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier4[32]   = {0x39,0x7d,0x50,0xeb,0xaa,0xf4,0x70,0xac,0x98,0x5f,0x0a,0xfc,0x23,0x9e,0xb0,0xc1,0x46,0xef,0x58,0x1a,0xc0,0x22,0xad,0xa1,0x5c,0xdc,0xc5,0x40,0xeb,0xe7,0x7b,0x3c};
    static std::uint8_t product4[64]      = {0x0c,0xe9,0x0b,0x61,0x11,0xd9,0xf0,0xae,0xf9,0xc3,0x6a,0xdc,0x5c,0x6b,0x5e,0x4f,0x56,0x1e,0x35,0xb6,0xb2,0x9e,0xd4,0x39,0x4e,0xdf,0x77,0x84,0xd8,0xa1,0x93,0x0f,0xb4,0x0a,0x50,0x87,0xcc,0x94,0x45,0x0b,0xed,0x54,0xd9,0xab,0x97,0x25,0x65,0x32,0x12,0xd9,0x71,0x30,0x9a,0xc8,0xeb,0x6f,0xff,0xea,0xc3,0x8f,0xc9,0x9a,0xb6,0x10};
    uint256_from_bytes(multiplier, multiplier4);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product4, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier5[32]   = {0x44,0x2d,0x88,0xae,0x03,0x1f,0x88,0x21,0x67,0xe7,0x89,0xff,0xb6,0x78,0x96,0x5b,0xcd,0x35,0x2a,0xf4,0x9b,0x22,0xcf,0x29,0x52,0x9f,0x6a,0xf7,0xac,0xe9,0xe8,0x74};
    static std::uint8_t product5[64]      = {0x12,0x28,0x38,0xb5,0xc7,0xcf,0x33,0x01,0x5a,0x7b,0xd5,0x98,0xa7,0x1f,0x99,0xd3,0x2d,0xaa,0xbf,0x54,0x54,0xea,0x98,0x8f,0x80,0x19,0x35,0xa4,0xe8,0xa5,0xba,0xde,0xa9,0x2f,0xf8,0x9e,0x50,0x42,0xa4,0x25,0x28,0xa7,0x64,0x6a,0x64,0x97,0x6e,0xa4,0x1c,0x15,0xab,0x82,0x96,0xc8,0xbb,0x71,0xe4,0xc1,0xc5,0xec,0xd6,0x3a,0x74,0x90};
    uint256_from_bytes(multiplier, multiplier5);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product5, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier6[32]   = {0x08,0x49,0x81,0xcb,0xa1,0x77,0x4e,0x0b,0x4f,0xce,0x55,0xa2,0xea,0x3a,0x04,0x2c,0x81,0x26,0x73,0x71,0x42,0x29,0x1f,0x5b,0xd2,0x92,0xe5,0x80,0xb9,0xab,0x27,0x63};
    static std::uint8_t product6[64]      = {0x00,0x44,0xad,0x38,0x02,0x08,0x65,0x9e,0xed,0x24,0xdd,0x29,0x69,0xc7,0xd4,0x73,0x52,0x89,0xe4,0xf6,0x50,0xcd,0xcc,0x5a,0x4c,0x5a,0x3f,0xb0,0x42,0xec,0xe3,0xd7,0xe2,0x24,0xab,0x0e,0xf8,0xdd,0xc0,0x1b,0xb2,0x93,0x7e,0xd6,0x25,0xf7,0x10,0x4f,0xfe,0x11,0x1b,0xd4,0xe2,0x1e,0x1b,0x1f,0xbf,0x33,0x52,0x5a,0xba,0x51,0x50,0x49};
    uint256_from_bytes(multiplier, multiplier6);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product6, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier7[32]   = {0x46,0x08,0x07,0x76,0xfc,0x3f,0xb7,0xe9,0xa2,0x25,0x60,0x26,0x42,0xd0,0x86,0xe6,0xeb,0x2a,0x43,0xc2,0x9b,0xb1,0xfc,0x6c,0xfa,0x8c,0x26,0x08,0x90,0x5a,0x09,0x26};
    static std::uint8_t product7[64]      = {0x13,0x28,0x64,0x55,0x89,0x9a,0x55,0xa8,0x42,0xa0,0x67,0x1a,0x74,0xfc,0x30,0x76,0x5b,0x39,0x45,0xf9,0xe4,0xcc,0xc8,0xb1,0x2c,0xbc,0x79,0x74,0x54,0xcd,0x28,0x6e,0x15,0xf5,0xa7,0xae,0x32,0xf8,0xbe,0x52,0xac,0xe5,0xac,0x5c,0x64,0x41,0xea,0xab,0xea,0xb3,0x5f,0x9a,0x11,0x7a,0xcf,0x8c,0x4b,0x4d,0x44,0x55,0x2f,0x0b,0xb1,0xa4};
    uint256_from_bytes(multiplier, multiplier7);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product7, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier8[32]   = {0x11,0x81,0x85,0xcd,0xc9,0x92,0xa9,0xdf,0xbf,0x9a,0xae,0x49,0x70,0x60,0x52,0x9d,0xa8,0x9e,0x6c,0x71,0xcb,0x6c,0x1c,0xac,0x4e,0x86,0x05,0xd1,0xdb,0x19,0xac,0xe4};
    static std::uint8_t product8[64]      = {0x01,0x32,0x75,0x4d,0x74,0x1a,0x19,0x3d,0xc3,0x0f,0xd5,0x40,0x8c,0x94,0x1d,0x15,0xfa,0xa1,0x53,0x37,0x92,0x4f,0x55,0xac,0x1b,0x4d,0xfe,0xa6,0xfe,0x02,0x23,0x93,0x46,0x73,0xae,0x34,0x67,0x23,0xac,0x2e,0x3a,0x3b,0x12,0xe6,0xda,0x37,0x6d,0xdc,0x67,0xfa,0x42,0xc5,0x7a,0x09,0x15,0x32,0x6a,0xe2,0x24,0xa9,0x51,0x4b,0x2b,0x10};
    uint256_from_bytes(multiplier, multiplier8);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product8, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier9[32]   = {0x70,0x77,0x4b,0x77,0xa0,0xa0,0xf1,0x06,0x7b,0x5d,0x09,0x97,0x3c,0x65,0xe4,0xe4,0xce,0xc3,0x9a,0x11,0xc4,0xeb,0x58,0x1d,0xd5,0x9b,0xd0,0xb9,0x4d,0xd4,0x39,0xd9};
    static std::uint8_t product9[64]      = {0x31,0x68,0x99,0x9f,0xec,0x03,0x78,0x8a,0xc7,0x9b,0x8b,0xa8,0xb8,0xcc,0x8b,0xb9,0x14,0xe4,0xd7,0xd9,0xb9,0x6e,0xea,0x7d,0x6a,0x29,0x8e,0xca,0x34,0x9e,0x30,0xe5,0x17,0x18,0x51,0x61,0x9c,0x92,0xd8,0xf2,0x08,0x19,0x40,0xce,0xa3,0xdb,0xa5,0x33,0x32,0xc9,0xf6,0xb0,0xcc,0x55,0x57,0x05,0x99,0x2b,0x96,0x5e,0x66,0x7a,0x59,0xf1};
    uint256_from_bytes(multiplier, multiplier9);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product9, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier10[32]   = {0xb4,0x90,0x0b,0x23,0x01,0xd5,0xa4,0x5b,0xf8,0x0d,0xc2,0x23,0xa2,0xbd,0x2d,0x9b,0x3a,0xa6,0xe2,0xb2,0x75,0xa2,0x2b,0x32,0x55,0xe5,0x67,0xc7,0xb2,0x74,0xd4,0xd4};
    static std::uint8_t product10[64]      = {0x7f,0x5a,0xe0,0xb5,0xc2,0x72,0x86,0x6c,0x18,0xd8,0x9e,0x87,0x29,0xe4,0x1b,0xf5,0x9c,0x35,0x19,0xe9,0xe5,0x27,0x04,0x43,0xa6,0x2b,0x37,0xfd,0x0f,0x26,0xe6,0x62,0xd9,0x75,0x78,0x15,0x9a,0xad,0x41,0x3b,0xd5,0x16,0xac,0xce,0x04,0xef,0xe3,0x6b,0x22,0x56,0xb1,0xa9,0x8b,0x4b,0x82,0x8a,0x7c,0x94,0x26,0xe0,0x61,0x0f,0xcf,0x90};
    uint256_from_bytes(multiplier, multiplier10);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product10, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier11[32]   = {0x97,0xff,0x92,0x98,0xd6,0x33,0xf0,0x56,0xce,0x25,0x46,0x31,0xc9,0x74,0xf9,0x34,0xf4,0xa5,0xf4,0x3f,0x43,0x10,0xaf,0x17,0x14,0x1b,0x6f,0xfe,0x2f,0xa8,0x51,0x29};
    static std::uint8_t product11[64]      = {0x5a,0x3f,0x7e,0x15,0xad,0x1e,0xb0,0x91,0x83,0x29,0xf1,0xa2,0xa8,0x0a,0xce,0x17,0xd6,0x91,0xd9,0x83,0x06,0xa4,0xe6,0xe9,0x4c,0xa7,0x0e,0xa5,0x9b,0x53,0xec,0xf5,0x8d,0xad,0x08,0xfc,0x9f,0xd2,0x30,0x27,0x80,0x7f,0x16,0xee,0x44,0x14,0x1d,0xea,0x44,0xc0,0x1a,0xf8,0xd2,0x63,0x67,0x44,0x17,0xe7,0xd7,0xd3,0xad,0x8a,0xf8,0x91};
    uint256_from_bytes(multiplier, multiplier11);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product11, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier12[32]   = {0xc4,0xef,0x48,0xa3,0xd2,0x93,0xbc,0x90,0xe8,0xd6,0x7a,0x47,0xda,0xc6,0x50,0xfc,0x46,0xee,0xbb,0x05,0xc1,0x8c,0xf2,0x17,0x4a,0x33,0x08,0x66,0x3d,0xa1,0x7d,0xab};
    static std::uint8_t product12[64]      = {0x97,0x7f,0x46,0xe3,0x90,0xf1,0xf7,0xe0,0xea,0x85,0x85,0xd7,0x56,0x62,0xbb,0xcd,0xc3,0xde,0x31,0x65,0xd5,0x8d,0x2a,0x1a,0xdc,0xad,0x78,0x8d,0x75,0x61,0x4d,0x40,0x51,0x57,0x42,0xa9,0x43,0xf5,0x9e,0x6d,0x29,0x7c,0xad,0xe9,0xad,0x5b,0x08,0x91,0xc3,0x29,0xfc,0xb7,0x22,0x48,0x58,0x68,0x31,0x83,0x30,0x06,0xcc,0xc6,0x70,0x39};
    uint256_from_bytes(multiplier, multiplier12);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product12, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier13[32]   = {0x6c,0x63,0x6c,0xbd,0x84,0x5a,0xe6,0x3c,0x8a,0xd5,0xaf,0x94,0xb0,0xc4,0xff,0xe7,0x7a,0xb3,0x30,0x15,0xc9,0x00,0x8d,0x80,0x37,0xc2,0x19,0xdf,0x69,0xa0,0xb7,0xa3};
    static std::uint8_t product13[64]      = {0x2d,0xe4,0x0a,0x5d,0x30,0x71,0x84,0x8a,0x8c,0xe0,0x95,0xa9,0xae,0xa0,0x7a,0x16,0x99,0x29,0x43,0xe5,0x61,0x7f,0x6f,0xe6,0x42,0x9c,0xcc,0xe9,0x0b,0x61,0xcb,0x6c,0xb9,0x1b,0x39,0x5f,0x24,0x58,0x3c,0xb4,0x30,0xbb,0xd2,0xee,0xd3,0xe6,0x58,0x7a,0x35,0xca,0x95,0x29,0xd9,0x9d,0xbd,0x18,0xf2,0x7e,0xff,0x83,0xc5,0x7a,0x71,0xc9};
    uint256_from_bytes(multiplier, multiplier13);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product13, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier14[32]   = {0x67,0xcf,0xf6,0x1c,0xab,0xe4,0x60,0x8b,0xfa,0x32,0x11,0x6d,0x1d,0x3a,0x17,0x76,0xa4,0xd5,0x7c,0x82,0x4d,0x2d,0x46,0xd5,0x5c,0x7d,0x3e,0x68,0x69,0x9a,0xcb,0x0d};
    static std::uint8_t product14[64]      = {0x2a,0x19,0x00,0xfb,0x01,0x4a,0xde,0x95,0xbc,0x9f,0xef,0x2c,0x0e,0x69,0x5b,0x83,0x77,0xad,0xc3,0x3e,0x15,0xee,0xbb,0x07,0x9e,0x22,0x19,0xd8,0x3a,0x4c,0x2b,0xd7,0x3e,0xcb,0x6f,0x52,0x9f,0xe5,0xb1,0x7e,0x79,0x31,0x21,0xbb,0x58,0x09,0x5a,0x0e,0x09,0xbe,0x45,0x66,0xa4,0x48,0x20,0x7a,0x96,0x61,0x9e,0xb9,0x96,0xb1,0x9e,0xa9};
    uint256_from_bytes(multiplier, multiplier14);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product14, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier15[32]   = {0x81,0x62,0xb3,0x4b,0x68,0x58,0xe7,0x71,0x6c,0x2f,0x61,0x97,0x37,0xf0,0x88,0xf7,0x18,0xe9,0xa7,0x27,0xfe,0xdd,0x23,0x9e,0x48,0xc3,0xe9,0x6c,0x6b,0x9f,0x60,0x9e};
    static std::uint8_t product15[64]      = {0x41,0x64,0x9e,0xbf,0xc2,0x78,0x07,0x74,0x24,0x27,0x29,0x4c,0xdb,0x82,0xa8,0x63,0x31,0xd9,0x51,0x30,0x9b,0xb7,0x20,0x34,0x8d,0xf0,0x60,0x0a,0x9d,0x77,0xf7,0x4c,0x54,0x73,0x5b,0xdb,0xb2,0xac,0x15,0x5c,0x08,0x31,0xbd,0x8f,0xae,0xdd,0xbd,0xc9,0xdd,0x52,0x39,0x87,0x32,0x7e,0x9c,0x01,0x2a,0x4b,0xbf,0x4d,0x3c,0xba,0xe1,0x84};
    uint256_from_bytes(multiplier, multiplier15);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product15, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier16[32]   = {0xb6,0x4a,0x77,0xc4,0xd5,0xcc,0x5d,0x20,0xcd,0xfa,0x5e,0x46,0x46,0x20,0x67,0x35,0x67,0x6b,0x17,0x55,0x92,0xa3,0x2a,0xd6,0x09,0x13,0x62,0x01,0xee,0x2d,0xe2,0x31};
    static std::uint8_t product16[64]      = {0x81,0xcd,0xf7,0xf5,0x55,0xd2,0xc4,0xac,0x8d,0xe7,0xe2,0xa1,0xbc,0x48,0x10,0x0c,0x59,0x00,0xfe,0xc4,0x54,0x3a,0x3d,0xf7,0xe9,0x19,0x84,0x3b,0xf7,0xe9,0x82,0x48,0xd6,0x18,0xe7,0xd9,0xc5,0xdf,0x0c,0x49,0x2e,0xcd,0x10,0x1d,0x97,0x19,0x23,0x23,0x77,0x17,0x82,0xb5,0x05,0xe2,0x4d,0x01,0xe0,0x68,0xa1,0x2e,0x69,0x14,0x8d,0x61};
    uint256_from_bytes(multiplier, multiplier16);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product16, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier17[32]   = {0xe8,0x05,0x21,0xf8,0xef,0xd1,0x85,0x51,0x24,0xac,0x47,0x42,0xe0,0xd0,0x45,0x53,0x8f,0xeb,0x9b,0x6c,0x0b,0x77,0x7a,0xb3,0x8b,0x50,0x9c,0xa9,0x3d,0xff,0x35,0x67};
    static std::uint8_t product17[64]      = {0xd2,0x49,0x4d,0xad,0x8a,0xe7,0x3f,0xb7,0xd2,0x9d,0xca,0xf7,0xee,0xa4,0x8d,0x81,0xe6,0xcd,0xf9,0x52,0x07,0x7e,0x70,0x37,0x83,0x18,0xe5,0x59,0xaa,0x79,0xc4,0x01,0x43,0x5f,0x4f,0x55,0x71,0x32,0xe9,0x63,0x03,0x09,0x1b,0xf5,0x65,0x0e,0x47,0xfb,0x9b,0xa2,0x62,0x08,0x84,0x85,0x70,0xfb,0x2d,0x6d,0xa7,0xdc,0x84,0x55,0xcf,0x71};
    uint256_from_bytes(multiplier, multiplier17);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product17, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier18[32]   = {0x98,0xc1,0x32,0xf8,0x66,0xd2,0xdf,0x42,0x88,0x93,0xed,0x78,0x74,0xbe,0x85,0xc3,0x55,0x43,0x56,0xc1,0xcf,0xb0,0x94,0x8f,0x13,0x88,0x35,0xaa,0x29,0xca,0x63,0x16};
    static std::uint8_t product18[64]      = {0x5b,0x25,0xfe,0x54,0xde,0xcb,0x6c,0x45,0x65,0x94,0xde,0xe9,0x92,0x54,0x5c,0x44,0x46,0xad,0x28,0xc8,0x43,0x92,0x39,0xf0,0xea,0xde,0x85,0x52,0x87,0x5c,0xb3,0xfa,0x40,0xeb,0x89,0x0c,0x78,0x2e,0x02,0x64,0x76,0x9d,0x7b,0x55,0x04,0xb8,0x34,0x86,0xc2,0x85,0x26,0x8e,0xd7,0x2c,0x7a,0xbb,0xe0,0x05,0x28,0xf5,0x91,0x12,0x05,0xe4};
    uint256_from_bytes(multiplier, multiplier18);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product18, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier19[32]   = {0x49,0xd8,0x79,0x83,0xbf,0x9a,0x22,0x81,0x68,0x35,0x8b,0x4c,0xd7,0x25,0x1c,0x6f,0x91,0xe5,0xfd,0x60,0x28,0xd2,0xde,0xab,0xa3,0xae,0x44,0x7e,0x1b,0x7e,0x99,0x7d};
    static std::uint8_t product19[64]      = {0x15,0x4d,0x2c,0x5a,0x6b,0x47,0x0a,0xb5,0x63,0x93,0x65,0x0a,0xca,0xb1,0x54,0x3d,0x8d,0x36,0x82,0xc3,0xed,0xc4,0x26,0xfe,0x65,0x75,0x16,0x2c,0xfd,0x29,0x0e,0xd3,0xbf,0xa0,0xd4,0x14,0x30,0x55,0x8a,0x38,0xd9,0x9f,0x88,0xe6,0x2e,0xc2,0xcf,0xf7,0x27,0xb4,0x75,0x6c,0xf3,0x2d,0xad,0x46,0x29,0x09,0x72,0x07,0xd1,0x12,0xa7,0x09};
    uint256_from_bytes(multiplier, multiplier19);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product19, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier20[32]   = {0x05,0x9f,0xa0,0x53,0xbc,0x97,0x7c,0x0a,0x33,0xda,0x91,0x5c,0x7f,0x24,0x48,0xf6,0xf6,0x77,0x3f,0x0c,0x74,0xf8,0x93,0xe7,0xa5,0xe8,0xec,0x2e,0xe8,0x83,0x11,0x78};
    static std::uint8_t product20[64]      = {0x00,0x1f,0x9f,0xcb,0xd1,0xca,0xf6,0x25,0xaa,0xe8,0xfa,0x6f,0x8f,0x97,0x4e,0xcf,0x3f,0x63,0xe3,0xb4,0x4f,0xc3,0x36,0x80,0x31,0xe1,0x3d,0x60,0xd3,0x04,0xaf,0xc4,0xc0,0x0f,0x37,0x5b,0xb8,0xd4,0xaa,0x92,0x3a,0x86,0x38,0xa1,0x50,0xa6,0xc0,0x5d,0x9f,0x2a,0x29,0x16,0x21,0xbe,0x3d,0xee,0x63,0xfd,0x59,0xe4,0x62,0x01,0x28,0x40};
    uint256_from_bytes(multiplier, multiplier20);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product20, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier21[32]   = {0xcf,0x3f,0xd2,0xde,0x9d,0x9d,0x6e,0xfc,0x13,0xb5,0x9a,0x2c,0xba,0x6f,0x45,0x35,0x17,0xe9,0xcf,0x5d,0xbc,0xa0,0x65,0xfa,0x3f,0xcd,0x38,0xd1,0xf7,0xa6,0x38,0x6f};
    static std::uint8_t product21[64]      = {0xa7,0xc8,0x46,0xed,0x7a,0x28,0x29,0x24,0x50,0x1d,0xeb,0x30,0xd8,0xe7,0x01,0x22,0xaa,0x68,0x9b,0x19,0x69,0xab,0xa7,0xd8,0xc2,0x9d,0xb1,0x6b,0x01,0x86,0x47,0x8e,0xdd,0x0b,0xa3,0xce,0xbe,0x13,0x14,0x4b,0x66,0xfb,0xbd,0xcc,0xf6,0x59,0x4c,0xad,0x6f,0xd7,0x83,0x4b,0xd0,0xb4,0xc7,0x58,0x09,0x70,0xe2,0x11,0x6e,0x64,0xc0,0x21};
    uint256_from_bytes(multiplier, multiplier21);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product21, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier22[32]   = {0x65,0x22,0xbe,0xef,0x9a,0xfd,0xb9,0xae,0xbb,0xe0,0x02,0x0a,0x33,0x29,0x51,0xb1,0x77,0x06,0xf4,0xee,0x18,0xad,0xf1,0x03,0x7f,0x51,0x31,0x1b,0x87,0xc0,0x15,0x92};
    static std::uint8_t product22[64]      = {0x27,0xf4,0x6f,0x60,0x56,0x59,0xea,0x3c,0x95,0xde,0xfb,0x1e,0xaa,0x76,0x02,0x72,0x96,0x86,0x71,0xea,0x3a,0x19,0xcc,0x26,0x66,0xdf,0x53,0xe2,0x67,0x3d,0x0a,0xef,0x32,0x13,0x4e,0x72,0x5d,0xd1,0x04,0x16,0xce,0xdc,0xa3,0x8a,0x09,0x9b,0xd5,0x9d,0xf3,0x76,0x8d,0xd6,0xcb,0xf9,0x6f,0x4d,0xf5,0x26,0x97,0xac,0x58,0xd1,0x47,0x44};
    uint256_from_bytes(multiplier, multiplier22);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product22, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier23[32]   = {0xf6,0x41,0x0f,0x5f,0x70,0x98,0x73,0x74,0x46,0x48,0xe0,0x74,0xe2,0x63,0xa8,0x19,0xfe,0xde,0x60,0xb8,0x59,0x72,0x0f,0xc6,0xdb,0xc5,0x76,0x09,0x9d,0x90,0xec,0x8a};
    static std::uint8_t product23[64]      = {0xec,0xe1,0x1a,0x14,0x3b,0xc8,0x7e,0x14,0xb8,0x52,0xd0,0xba,0x5e,0x7b,0xad,0xdb,0x16,0x95,0x04,0x38,0xa5,0x79,0x8e,0x53,0xfe,0x2a,0x54,0x4f,0xa5,0xf8,0xd5,0x88,0xa7,0x4c,0x9e,0xc9,0x37,0x68,0xfd,0xc9,0x84,0x16,0x9e,0xa7,0xbc,0x1d,0x03,0xd8,0xef,0x25,0xc7,0x84,0xab,0x9d,0x64,0xd6,0x37,0x9e,0xed,0xe0,0x39,0xce,0xba,0x64};
    uint256_from_bytes(multiplier, multiplier23);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product23, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier24[32]   = {0x87,0x6c,0xc4,0xf5,0x88,0x91,0x9c,0xda,0xd7,0x39,0x4b,0xd2,0x72,0x97,0xef,0x04,0x72,0xed,0xdd,0x91,0x54,0x4b,0x2b,0x6e,0x4d,0xe4,0x63,0x7d,0xe3,0x5a,0xf5,0x29};
    static std::uint8_t product24[64]      = {0x47,0xa3,0xe5,0xf1,0xbc,0xbd,0xb2,0xe8,0xcf,0x64,0x64,0x3b,0x32,0xe2,0x6f,0x68,0xee,0xdc,0x4d,0x36,0x99,0xf5,0xac,0x45,0x9c,0x95,0x99,0x5b,0x9b,0x51,0x76,0x7d,0xb8,0x7a,0xac,0x8e,0x9d,0xf4,0x66,0xb3,0xbe,0x8a,0x50,0xdc,0x6e,0x2a,0x01,0xff,0xb4,0x98,0x64,0xcb,0x98,0x38,0xc2,0x7b,0x85,0x63,0x8f,0x22,0x01,0x9b,0x80,0x91};
    uint256_from_bytes(multiplier, multiplier24);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product24, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier25[32]   = {0x00,0x98,0x32,0x90,0xd8,0x63,0xd2,0x7a,0xf9,0x95,0x0e,0x2b,0xab,0xb1,0x39,0x5c,0xb7,0xeb,0x11,0x3e,0xef,0x07,0x45,0x4a,0xde,0xbf,0xb0,0x9d,0xa4,0xd5,0x01,0x25};
    static std::uint8_t product25[64]      = {0x00,0x00,0x5a,0x7c,0x15,0xfd,0xdd,0x05,0x17,0x75,0xce,0xf3,0xd2,0x6b,0x70,0x64,0x88,0x09,0x76,0xd2,0xe4,0xa2,0xf7,0xf2,0x2d,0x33,0x91,0x55,0x20,0x1e,0x7d,0xe8,0x22,0x2b,0xe2,0x03,0x77,0x04,0x82,0x16,0x25,0x33,0x29,0x15,0xfc,0xec,0x7b,0xc6,0x01,0x7e,0x4f,0x8d,0xb2,0xbf,0x22,0xf0,0x5a,0x2d,0xe2,0x14,0x4f,0x93,0x4f,0x59};
    uint256_from_bytes(multiplier, multiplier25);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product25, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier26[32]   = {0xa7,0x68,0xc8,0x15,0x53,0xa5,0x2d,0x78,0x9e,0xfe,0xdc,0x30,0xcb,0xa5,0x26,0x70,0x84,0x41,0x6b,0x80,0x7d,0x9d,0xe1,0x7e,0x01,0xd6,0xf2,0x4f,0x14,0xa6,0x8e,0x18};
    static std::uint8_t product26[64]      = {0x6d,0x79,0xdf,0xef,0x00,0xd6,0xcc,0x01,0x3c,0xec,0x26,0xa2,0xbb,0xdd,0x24,0x94,0x03,0x2b,0xb1,0x32,0x4d,0xba,0xd2,0x55,0xcf,0xc0,0x68,0x36,0xd7,0xdf,0xfe,0x32,0x8c,0x4c,0x90,0xa8,0xca,0xe6,0x3f,0xef,0x14,0xe9,0xc8,0x88,0x46,0xc9,0x05,0xfc,0xde,0x39,0x0d,0x91,0x72,0xe3,0x7e,0xaa,0x65,0x3b,0x85,0x60,0x55,0xfe,0xa2,0x40};
    uint256_from_bytes(multiplier, multiplier26);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product26, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier27[32]   = {0x54,0xd2,0xc5,0x12,0x4e,0x13,0xcf,0x47,0x0f,0x28,0x5c,0x4b,0x5a,0x8b,0x14,0x98,0x00,0x91,0x80,0x26,0x20,0x8b,0xdb,0xd5,0xcc,0x3e,0x8d,0x42,0x9a,0xbd,0xd2,0x46};
    static std::uint8_t product27[64]      = {0x1c,0x1a,0xfe,0xdb,0xec,0xfa,0x46,0x00,0x42,0x23,0xf1,0xf2,0xd8,0x61,0x9c,0x1c,0x9f,0xe8,0x41,0xa7,0xe8,0x64,0xb5,0x3b,0x10,0x21,0x88,0x3d,0x46,0x87,0x04,0xd9,0x8e,0x47,0xc9,0x07,0x3c,0x6a,0x56,0xbe,0x21,0x66,0xe0,0x36,0x19,0x93,0x65,0xea,0x8b,0xaa,0xb1,0x7c,0xfe,0x7b,0x97,0x56,0xaa,0xf2,0x75,0xd4,0x60,0x12,0xeb,0x24};
    uint256_from_bytes(multiplier, multiplier27);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product27, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier28[32]   = {0x1e,0x5b,0x75,0x5e,0xba,0xaf,0xb2,0x43,0xa1,0xf5,0x77,0x93,0x68,0xff,0x65,0xd8,0xea,0xe6,0x15,0xb4,0x0b,0xed,0x13,0x3a,0xbb,0xa6,0x58,0x5a,0x90,0xd0,0xb8,0xd4};
    static std::uint8_t product28[64]      = {0x03,0x99,0x90,0x2e,0xda,0xe9,0xa0,0x62,0xd0,0x27,0x2f,0xde,0x5a,0xeb,0x4e,0x1f,0x05,0x44,0xec,0xca,0x86,0xe5,0x99,0xee,0x17,0x3a,0xe5,0x43,0x70,0x9c,0xad,0x13,0x43,0x08,0x97,0x7b,0x5e,0xac,0x97,0xaf,0xe5,0x82,0x31,0x8e,0xb0,0x9d,0x94,0xb9,0x32,0xf2,0xb0,0x2c,0x0e,0x0e,0x58,0x5f,0x0e,0xaf,0x2f,0x2b,0x5d,0xf1,0x6f,0x90};
    uint256_from_bytes(multiplier, multiplier28);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product28, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier29[32]   = {0x73,0x39,0x5f,0x92,0x00,0x58,0x1d,0x69,0x49,0x4c,0x43,0x56,0x2d,0x4c,0x5a,0x2f,0x29,0x62,0xab,0x11,0x1f,0xac,0x2f,0xd4,0x06,0x5a,0x88,0x62,0x54,0x56,0x08,0xa6};
    static std::uint8_t product29[64]      = {0x33,0xdc,0x98,0xb8,0xdf,0x01,0x01,0x2f,0x7b,0x12,0xf7,0x47,0xd9,0xcc,0xf3,0x47,0xa6,0x41,0x6e,0xb5,0xa7,0xca,0x6a,0x12,0x7f,0x9e,0x1e,0xfa,0x6e,0x48,0x64,0x8c,0x71,0xfa,0xac,0x01,0xdf,0xe6,0x79,0x06,0xd3,0x1c,0xdc,0x1a,0x50,0x23,0x7f,0xf0,0xc6,0xcf,0x6f,0xfb,0xe2,0x7b,0x3b,0x35,0xf3,0x8f,0x91,0xae,0xbf,0xd2,0xcb,0xa4};
    uint256_from_bytes(multiplier, multiplier29);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product29, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier30[32]   = {0x6d,0xc4,0xdd,0xc8,0x37,0xf7,0x48,0xb5,0x72,0xe2,0xab,0x22,0xd8,0xa4,0x9f,0x72,0x6a,0x7c,0x3a,0x42,0x1f,0x1d,0x7d,0xc8,0xf9,0x26,0x4f,0xe2,0x40,0xad,0xa7,0xc0};
    static std::uint8_t product30[64]      = {0x2f,0x11,0x3c,0x40,0xda,0x61,0x93,0xca,0x4b,0xd4,0x04,0xcb,0xf1,0xa5,0x24,0x84,0xb1,0x12,0x92,0xe5,0xd2,0x55,0x56,0x96,0x2f,0x7e,0x07,0xa5,0xdb,0x86,0xf0,0xa8,0xc7,0x9b,0xf4,0xa3,0x27,0xed,0xb0,0x4d,0xb4,0x9e,0x56,0x13,0x3d,0x69,0xaf,0x3a,0x18,0xd5,0x86,0xc9,0x18,0x92,0x0b,0xc2,0xbd,0x7b,0xf8,0xac,0x27,0x6c,0x10,0x00};
    uint256_from_bytes(multiplier, multiplier30);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product30, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier31[32]   = {0xa3,0x33,0xe4,0x57,0x72,0xdc,0x28,0x53,0x88,0x3b,0x82,0xaa,0xe8,0xfa,0x71,0x8f,0xde,0x07,0xc5,0x37,0x53,0xea,0x29,0x77,0x27,0xaf,0x84,0x4a,0x8e,0xb3,0x75,0x38};
    static std::uint8_t product31[64]      = {0x68,0x0b,0x1f,0x4c,0x22,0xc8,0x01,0x89,0xdd,0xc5,0x14,0xcc,0x09,0x3c,0x5c,0x0b,0xed,0xbc,0xb7,0x67,0x85,0x64,0xdd,0xac,0xd9,0xbc,0x20,0x1b,0x78,0x62,0x6a,0xfc,0x25,0x2f,0x6e,0x8a,0xe2,0x0f,0x72,0x18,0x99,0xa1,0x9d,0x01,0x1e,0x38,0xc8,0x29,0x61,0x1d,0x9d,0xcf,0x9a,0x89,0xaa,0x01,0x32,0xbd,0x18,0x37,0x41,0xfc,0x3c,0x40};
    uint256_from_bytes(multiplier, multiplier31);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product31, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier32[32]   = {0x28,0x5d,0x8f,0x52,0xc6,0x6f,0xfb,0x27,0x19,0xd3,0xdf,0xe6,0x06,0x55,0x81,0xb5,0x1c,0xfc,0x46,0x83,0x8f,0x1d,0x2a,0xc4,0xf7,0xea,0xa1,0xcc,0xe4,0xf4,0xa7,0x4a};
    static std::uint8_t product32[64]      = {0x06,0x5d,0x5e,0xfb,0x50,0x64,0xc0,0x4d,0x86,0x9e,0xf7,0x4c,0x0d,0x3b,0x93,0xca,0xc1,0xd1,0x70,0x1e,0xc5,0x3c,0xfc,0x98,0x9d,0xa5,0x5c,0x92,0x84,0xdf,0x31,0x55,0xbf,0x31,0x49,0xa1,0x1d,0x39,0xf1,0xfe,0xf5,0xf2,0xd1,0x59,0x0e,0x84,0x92,0x9e,0xc4,0x3a,0x78,0x33,0x02,0xee,0x77,0x5c,0x0c,0x62,0x65,0xbb,0x22,0x61,0xa1,0x64};
    uint256_from_bytes(multiplier, multiplier32);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product32, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier33[32]   = {0x35,0xeb,0x6d,0x60,0xe9,0x2e,0x7d,0x2b,0x62,0x04,0x37,0xbf,0x08,0xd6,0x36,0xcb,0x94,0x7a,0xaf,0x50,0xd8,0x81,0x11,0x08,0x04,0x57,0x81,0xf0,0xbf,0xaf,0x3a,0xb9};
    static std::uint8_t product33[64]      = {0x0b,0x5b,0x53,0xcc,0x1f,0x35,0x06,0x6f,0x12,0x16,0x2d,0x1e,0xbe,0x3b,0xb4,0xd5,0xe8,0xaf,0x7b,0x3d,0xa9,0x2b,0x16,0x9e,0x8a,0xf0,0x4c,0x75,0x8a,0x7b,0xb2,0x13,0x2b,0xa4,0x74,0xa3,0xac,0x64,0x39,0x66,0xe2,0x49,0x29,0xc5,0xed,0xf4,0xf5,0x24,0x5d,0x07,0x75,0xcb,0xb8,0xc6,0x84,0x16,0x43,0x01,0x7e,0x71,0x64,0x66,0x59,0xb1};
    uint256_from_bytes(multiplier, multiplier33);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product33, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier34[32]   = {0xa8,0xc6,0xe3,0xad,0x71,0xe9,0xd4,0x49,0x3e,0x32,0xbf,0x91,0x1b,0x50,0x5a,0x66,0x1d,0xe7,0x7c,0x08,0xcb,0x81,0xd6,0xa2,0x37,0x01,0x45,0x4b,0x49,0xa5,0x2a,0x78};
    static std::uint8_t product34[64]      = {0x6f,0x45,0xa5,0x58,0xa0,0x4c,0x29,0xdc,0x5a,0x21,0xe4,0x37,0x9e,0xe7,0x60,0xf8,0xad,0xb8,0x38,0xd7,0x64,0xa3,0x5e,0x2a,0xdb,0x91,0x88,0xb3,0xc8,0x79,0xb1,0x9c,0x64,0xaf,0x75,0x15,0x70,0x55,0x86,0x73,0xbe,0xb3,0x7b,0x90,0xba,0xe8,0xdd,0x4b,0x75,0xfa,0x2f,0x80,0x6b,0xf7,0x97,0x41,0x29,0xcb,0x2f,0x18,0x35,0xbb,0x98,0x40};
    uint256_from_bytes(multiplier, multiplier34);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product34, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier35[32]   = {0x2c,0xff,0x41,0x22,0x8e,0x59,0xfa,0x1d,0xba,0xb3,0x94,0x70,0x58,0xde,0x60,0x74,0xed,0x26,0x15,0x1c,0x18,0x4e,0xea,0xad,0x7c,0xea,0x94,0x57,0x10,0xa4,0xeb,0xf0};
    static std::uint8_t product35[64]      = {0x07,0xe8,0xbc,0xe6,0xb4,0x59,0x16,0x2e,0x4f,0x79,0x26,0x95,0xf7,0x9b,0x14,0xc9,0x4d,0xfb,0x86,0xef,0x76,0xa4,0x4e,0x77,0x72,0x22,0x3e,0xd2,0xbc,0xc5,0x96,0x15,0xf5,0x9e,0x62,0xe4,0x7b,0x29,0x46,0x0b,0x63,0xe4,0x0a,0xb4,0x69,0x40,0x93,0xc8,0xbf,0x65,0xcb,0xfe,0xa1,0xb8,0x9d,0x4a,0xd4,0xba,0xe4,0xdd,0x24,0xf2,0x81,0x00};
    uint256_from_bytes(multiplier, multiplier35);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product35, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier36[32]   = {0x6a,0xbb,0xf2,0xdc,0x5c,0xf8,0xf1,0xd7,0xed,0x63,0xe8,0x5a,0xb2,0x49,0x61,0x5d,0x57,0xca,0xac,0x3b,0xbc,0x26,0x61,0x66,0x54,0xe7,0xfa,0x4b,0x91,0x9a,0x2f,0x30};
    static std::uint8_t product36[64]      = {0x2c,0x80,0x2f,0x1b,0x31,0x53,0x59,0x6e,0xb8,0xeb,0x54,0x3a,0x20,0x9c,0x14,0x74,0xca,0x91,0x46,0x85,0xfc,0xba,0xf3,0xfb,0xa8,0x95,0xda,0x62,0xaf,0xa6,0xb7,0x4f,0x8b,0xcb,0x17,0xc2,0xf5,0xcb,0x5a,0xe1,0xa0,0xeb,0x36,0xd4,0xde,0xc8,0xc8,0x7e,0x41,0x35,0xb6,0x3a,0xa1,0x85,0x9c,0x28,0x6f,0xf1,0x6c,0x71,0x2e,0x72,0xa9,0x00};
    uint256_from_bytes(multiplier, multiplier36);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product36, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier37[32]   = {0xb0,0x23,0x5a,0x6a,0xe1,0x7a,0x72,0xb8,0x09,0xf3,0x1f,0xed,0xfa,0xe2,0xd3,0xb0,0x33,0x87,0x9b,0x4a,0x1b,0x43,0xb0,0x70,0x07,0xef,0x7b,0x89,0xb7,0x7f,0x3c,0x96};
    static std::uint8_t product37[64]      = {0x79,0x30,0xa1,0x34,0xcf,0x31,0x58,0x62,0x04,0xa9,0xe4,0x02,0x30,0x23,0x89,0x99,0x01,0xde,0x6f,0xbc,0xe7,0xc5,0xb0,0x8b,0x46,0xb6,0x56,0xb1,0x88,0x69,0xf6,0x5d,0xd3,0x4b,0x7e,0xbb,0x7f,0xf5,0xa8,0x45,0x62,0x84,0xaf,0xdb,0x33,0xfd,0xe3,0xc1,0xc5,0x93,0xfb,0xb2,0x4b,0xf2,0x78,0x8d,0x82,0x02,0x24,0x67,0x9f,0x2a,0xa7,0xe4};
    uint256_from_bytes(multiplier, multiplier37);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product37, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier38[32]   = {0x7b,0x4b,0x4b,0xa7,0x03,0x90,0xfb,0xa3,0x2a,0x05,0x7e,0x0e,0xb3,0x0b,0xc1,0xa5,0x8e,0x9b,0xf8,0x9a,0x16,0x2e,0x23,0x97,0x43,0x6a,0x6c,0xf9,0xb2,0x46,0x37,0x95};
    static std::uint8_t product38[64]      = {0x3b,0x61,0x70,0xd7,0xe7,0xa4,0xb1,0xce,0xd6,0xa2,0x87,0xdb,0xe9,0x96,0x0c,0x96,0x82,0xa9,0xf2,0xe6,0xf6,0x72,0xa0,0x20,0x74,0xd5,0xf1,0xe1,0x8d,0xd4,0xfd,0x36,0x81,0x81,0x69,0xb3,0xbc,0x3a,0x34,0xc6,0x98,0xd4,0xcb,0x8b,0xe9,0x58,0x37,0x5e,0xea,0x13,0x68,0xa6,0x38,0x10,0x54,0xfb,0x8d,0x07,0x90,0x67,0xa5,0x8d,0x5c,0xb9};
    uint256_from_bytes(multiplier, multiplier38);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product38, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier39[32]   = {0x7d,0xa6,0xcc,0x59,0xbc,0xb0,0xbb,0x4c,0xd9,0x54,0x75,0x49,0x6f,0x9b,0x8c,0xa1,0xc6,0x93,0x17,0xc9,0x75,0xbf,0x92,0xc9,0xd3,0x0d,0xaf,0xb8,0xe3,0xb8,0xaf,0x5e};
    static std::uint8_t product39[64]      = {0x3d,0xac,0x50,0x3d,0x49,0xc4,0x70,0x4a,0x5c,0x5f,0x16,0xfa,0x7b,0xc9,0x78,0xf8,0x26,0xe7,0xec,0xbe,0x41,0x7d,0x7c,0x75,0x9f,0xc2,0x89,0xcb,0xcc,0x3d,0xf6,0x9a,0xe6,0x27,0x51,0x04,0x39,0x93,0x6a,0x55,0xff,0xb6,0x16,0xe0,0xd5,0xd6,0x07,0xbf,0x81,0x71,0x47,0xf7,0xf3,0x16,0x78,0x51,0x67,0x5b,0xa7,0x5d,0x43,0x41,0xa6,0x84};
    uint256_from_bytes(multiplier, multiplier39);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product39, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier40[32]   = {0xff,0xb6,0x93,0x49,0x3c,0x41,0x40,0x5f,0x0d,0x95,0x72,0xc1,0xcb,0x4c,0x1e,0x92,0xe5,0x71,0x48,0xed,0x43,0x06,0xcf,0x23,0xcc,0x93,0x8f,0x76,0x4c,0xc1,0xf3,0x8c};
    static std::uint8_t product40[64]      = {0xff,0x6d,0x3b,0xa1,0xa6,0xe8,0xdb,0x2b,0x3f,0x89,0x91,0xba,0xee,0x67,0x54,0xe8,0x67,0x35,0x91,0x01,0x1c,0xda,0x3f,0x91,0x8a,0x6b,0x69,0x5f,0xe4,0x3e,0x89,0x04,0x2a,0xff,0xca,0xaf,0xe4,0xbf,0x4d,0x42,0xd6,0x81,0x46,0x52,0xd5,0x79,0x46,0xb3,0x8d,0x42,0xdb,0xf7,0xf4,0x0b,0xa3,0x98,0x5a,0xae,0xa8,0x9c,0x40,0xcb,0x14,0x90};
    uint256_from_bytes(multiplier, multiplier40);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product40, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier41[32]   = {0x78,0xf7,0xf5,0x6b,0xeb,0xb5,0x19,0x51,0x81,0xcf,0x27,0x42,0xec,0x56,0x37,0xf6,0x41,0x87,0x65,0x89,0x0e,0x1a,0x93,0x9b,0xdf,0xac,0xde,0xc0,0x47,0x06,0x59,0x5d};
    static std::uint8_t product41[64]      = {0x39,0x29,0x66,0x40,0xae,0x82,0x5d,0xda,0xc9,0xd9,0xdb,0xbd,0xf9,0x1a,0xb3,0x75,0xb0,0xee,0x58,0x1b,0xf5,0xac,0xa5,0x12,0x68,0x6a,0x95,0x5c,0x08,0x51,0xe0,0x5c,0xb9,0xe3,0x67,0x8e,0x3e,0x20,0xe3,0xfb,0x08,0xaa,0x26,0xb4,0x7b,0xf8,0xb1,0xe9,0xee,0xcd,0x55,0xd0,0xaf,0x23,0x90,0x6f,0xbb,0x2f,0xdd,0x39,0xe5,0x8d,0xcb,0xc9};
    uint256_from_bytes(multiplier, multiplier41);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product41, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier42[32]   = {0x3b,0xec,0x4a,0x4a,0xed,0x07,0x84,0xa4,0xdb,0xe8,0x61,0x83,0xb4,0x79,0x1d,0x68,0x2a,0x86,0x4b,0x1d,0xdb,0x64,0xec,0xba,0xd2,0xc8,0xa2,0xde,0x7b,0x19,0x81,0x4f};
    static std::uint8_t product42[64]      = {0x0e,0x06,0xc4,0x57,0x98,0xf5,0xe3,0xf6,0xc9,0xd1,0x7b,0xa9,0xbf,0xa7,0xcf,0x8b,0xeb,0x3d,0xd2,0xbf,0x51,0xd1,0x31,0x65,0xa3,0x3a,0x4c,0x9e,0x8c,0x86,0x23,0x10,0x4a,0x29,0x21,0x1b,0x22,0xea,0x8f,0x48,0x18,0xf6,0x9b,0x97,0x64,0x64,0x66,0x3a,0xea,0x12,0x0b,0xc5,0xfc,0x66,0x13,0xf1,0xaa,0x85,0xc5,0xd0,0x6c,0xbe,0xb6,0x61};
    uint256_from_bytes(multiplier, multiplier42);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product42, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier43[32]   = {0xd1,0xcc,0x10,0x9e,0x39,0x45,0xfb,0x8c,0xd7,0x6f,0x0b,0x05,0xc8,0x2c,0x8f,0xc6,0xe7,0xf9,0x29,0x50,0x4a,0x20,0xb8,0x67,0xa6,0x80,0x7d,0x41,0x9d,0xd5,0xb7,0x9c};
    static std::uint8_t product43[64]      = {0xab,0xee,0xd5,0xcc,0xd6,0xc3,0xb5,0x38,0x5e,0xdf,0x02,0xe7,0x19,0x8b,0x2e,0xa5,0x2f,0x5f,0xba,0xa9,0x1a,0xa3,0xd6,0x3f,0x1b,0x12,0xf2,0x90,0xd8,0xf7,0xdf,0x93,0x17,0x14,0x34,0x6f,0x66,0xbe,0x3a,0x17,0x26,0x5e,0xff,0x2f,0x9f,0x43,0x67,0xd5,0x2b,0x3f,0xbd,0xb2,0xe8,0x82,0x24,0x52,0x29,0x25,0x6a,0xd8,0x65,0x48,0x67,0x10};
    uint256_from_bytes(multiplier, multiplier43);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product43, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier44[32]   = {0x74,0x07,0x65,0x8e,0xe4,0x74,0x39,0x69,0x28,0x48,0x69,0x8b,0x16,0x48,0x3c,0x22,0x25,0x4f,0xc4,0xc1,0xcb,0xf1,0x5a,0xe9,0x7d,0x66,0x4f,0x05,0x37,0xec,0x18,0xa4};
    static std::uint8_t product44[64]      = {0x34,0x96,0xb4,0x40,0x35,0x23,0xe2,0x68,0x62,0x5d,0xb9,0x15,0x09,0x57,0x01,0x15,0xa9,0xbe,0x12,0x0d,0x7d,0x52,0x02,0x29,0xdc,0x6e,0xd4,0x66,0xe6,0xc4,0xbc,0xa8,0x81,0xe7,0x57,0xd5,0x45,0x01,0x40,0xbe,0x71,0x91,0x00,0x86,0x2f,0xf0,0xae,0xfa,0xf4,0xac,0x95,0xc2,0x73,0x09,0x83,0x5a,0xbd,0x55,0x7a,0xbb,0xe8,0xbf,0x29,0x10};
    uint256_from_bytes(multiplier, multiplier44);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product44, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier45[32]   = {0xda,0xf4,0xb1,0x39,0xa4,0xa4,0x2b,0xde,0x24,0x39,0xb6,0xad,0x44,0xb9,0xd3,0xc1,0xaf,0x9c,0xad,0x42,0xe2,0x86,0x01,0x11,0x21,0x7d,0x4d,0x6a,0x6d,0xd2,0x7b,0xdf};
    static std::uint8_t product45[64]      = {0xbb,0x45,0xa7,0xb8,0x7c,0xfa,0x36,0x4f,0xb4,0xce,0xd1,0xa4,0x1e,0x33,0x2e,0x01,0x64,0x85,0x32,0x3b,0xbc,0x17,0x73,0x3d,0x3d,0x0d,0x6b,0x2a,0xf4,0x66,0x45,0x22,0x17,0x85,0x90,0xcb,0x9a,0xf1,0x63,0x02,0x7e,0x45,0xeb,0x9b,0xe8,0x09,0x30,0xb4,0x5c,0xae,0x88,0x53,0xc6,0x08,0xe7,0x6a,0x35,0xb5,0xa5,0x37,0x5b,0xcc,0x0c,0x41};
    uint256_from_bytes(multiplier, multiplier45);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product45, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier46[32]   = {0x57,0x5b,0x17,0xac,0x51,0x62,0xf7,0x2c,0x2e,0xd3,0x62,0xf0,0x53,0xaf,0x07,0xae,0xa3,0x84,0x1c,0x7f,0x94,0x40,0xae,0xb7,0xee,0x1c,0xe9,0x3f,0xd3,0xcd,0xa4,0xe8};
    static std::uint8_t product46[64]      = {0x1d,0xcf,0x0a,0x80,0xf6,0x03,0x8a,0xf9,0x00,0x82,0xd1,0xfc,0xb9,0xac,0x80,0x11,0xee,0xfa,0xfe,0x69,0xf6,0xc2,0xbe,0x88,0x34,0xe1,0x48,0x5d,0x9f,0x1f,0xd1,0xde,0x4f,0xce,0x18,0x97,0xcf,0x88,0xe6,0xe0,0x52,0x17,0x1f,0x37,0xf3,0x87,0x93,0x16,0xa6,0x0e,0x0d,0xd1,0x98,0x7b,0x16,0xc1,0xb7,0x62,0x1d,0x37,0xf5,0xca,0x12,0x40};
    uint256_from_bytes(multiplier, multiplier46);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product46, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier47[32]   = {0x31,0xeb,0x42,0x91,0xf0,0x86,0x58,0x5d,0xd8,0x49,0xb2,0x95,0x2d,0xe2,0x5b,0xad,0xf5,0xc2,0x66,0x2d,0xd3,0x00,0x6a,0xa5,0x22,0x28,0x87,0xa0,0xc9,0x59,0x48,0x32};
    static std::uint8_t product47[64]      = {0x09,0xbb,0xe7,0xaf,0x27,0x52,0x97,0xb1,0xc8,0xd3,0xf7,0xb0,0x93,0x4d,0x60,0x6b,0xcc,0x6a,0x63,0x2d,0xf5,0x4c,0xd9,0x4a,0x69,0xf1,0xcd,0xb2,0x2f,0xa0,0x42,0xc4,0x71,0xb7,0x89,0xce,0x5e,0x2b,0x0a,0x0e,0xf7,0x6c,0x33,0xc8,0xaa,0x6c,0xf8,0x70,0xb7,0xbb,0x2d,0x09,0x48,0x76,0x14,0xe0,0x4f,0xbc,0x4d,0x01,0xcb,0x20,0x29,0xc4};
    uint256_from_bytes(multiplier, multiplier47);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product47, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier48[32]   = {0xe0,0x3e,0x9e,0x19,0x22,0xe9,0x72,0x5b,0x02,0x0d,0x3b,0x03,0x8c,0xd2,0x36,0x73,0x7d,0xa4,0xea,0x65,0x57,0x3e,0x9f,0x78,0x92,0x9f,0x24,0x78,0x96,0x12,0x15,0xc0};
    static std::uint8_t product48[64]      = {0xc4,0x6d,0xa3,0xfc,0xf2,0xe8,0x7a,0xc2,0xa7,0x2f,0xa9,0x3f,0x10,0xe0,0x6b,0x92,0x13,0xf0,0x28,0x63,0x39,0x05,0x08,0x85,0x36,0xe6,0x48,0xbf,0xee,0x27,0xb8,0xc8,0xa6,0x48,0xae,0xe2,0x34,0x3d,0x89,0x6c,0x2a,0xa3,0xca,0x04,0xd7,0x1f,0xe3,0x33,0xf0,0xeb,0x09,0x0a,0x0f,0x22,0x12,0x48,0x23,0x8b,0x96,0xc4,0x10,0xd9,0x10,0x00};
    uint256_from_bytes(multiplier, multiplier48);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product48, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier49[32]   = {0x6b,0x89,0xf0,0x67,0xc4,0xf3,0x50,0xf8,0x64,0x06,0x40,0x92,0x17,0xc4,0x2b,0x43,0x43,0xc8,0x80,0xeb,0x8e,0x88,0xd8,0xa4,0x80,0x3d,0x06,0xb7,0x06,0x7d,0x1b,0x59};
    static std::uint8_t product49[64]      = {0x2d,0x2c,0x99,0x49,0xef,0x76,0xed,0x74,0x98,0x9a,0xa7,0x56,0x9c,0xa8,0xf4,0x83,0x9e,0xeb,0xe4,0xc2,0x64,0xa5,0xab,0x5c,0x89,0xc9,0xd1,0x94,0xaa,0x43,0x77,0x76,0x63,0xdd,0x3d,0xb3,0xe9,0xfe,0x90,0x04,0x03,0x91,0xc4,0x97,0x71,0x77,0x27,0x4a,0x0d,0x85,0x6f,0x60,0x72,0xe4,0x84,0x28,0x2c,0xb9,0x5f,0xa9,0xe3,0xd5,0xe4,0xf1};
    uint256_from_bytes(multiplier, multiplier49);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product49, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier50[32]   = {0x37,0x95,0x4e,0x7c,0xcf,0x6d,0xf6,0xcf,0xa8,0x77,0xde,0x8e,0xc6,0x39,0xac,0xd5,0xf4,0x99,0x77,0xad,0xa1,0xcb,0x8b,0xd6,0x27,0xaf,0x04,0x67,0x74,0x87,0x73,0x8d};
    static std::uint8_t product50[64]      = {0x0c,0x11,0x7e,0xce,0x16,0x7b,0x01,0x4f,0x25,0x1e,0x45,0x5e,0x98,0x59,0x32,0xb8,0xf7,0xf2,0x6b,0x1b,0x0c,0xd4,0xa6,0x0a,0xd3,0xa0,0x78,0x2c,0xfd,0x1f,0xb6,0x48,0xc2,0xd5,0x8a,0x66,0x31,0x67,0x70,0xfa,0x96,0x3d,0x4f,0xe2,0xbf,0xd4,0xb6,0x51,0xdd,0x38,0xf1,0x3b,0x10,0x94,0x49,0x94,0x26,0x6c,0x6b,0xd8,0xda,0xdd,0xfb,0xa9};
    uint256_from_bytes(multiplier, multiplier50);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product50, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier51[32]   = {0xd0,0x3c,0x4e,0x69,0x18,0x26,0x43,0xd0,0xc2,0x78,0x77,0x32,0xe3,0x0f,0x16,0xc5,0xc8,0x7a,0xe9,0x12,0xa5,0x00,0xdb,0x5b,0x79,0x72,0x7a,0x63,0x4b,0xea,0xed,0x0e};
    static std::uint8_t product51[64]      = {0xa9,0x62,0x0d,0x9f,0xa0,0x85,0xb5,0xff,0x28,0xdc,0xf4,0x5a,0xd8,0xaf,0x00,0x54,0x1a,0x4e,0x48,0x68,0xb5,0xd0,0x79,0x18,0xc6,0x89,0x0f,0x08,0xbd,0x8a,0x87,0x28,0xbc,0xa9,0x93,0x96,0x93,0x8e,0x07,0x0b,0xbb,0x7e,0xa8,0x51,0xbe,0x9b,0xd8,0x41,0x90,0x27,0xf8,0xeb,0x0f,0x50,0xf8,0x26,0x14,0xa0,0x2f,0x50,0x6d,0x1a,0xec,0xc4};
    uint256_from_bytes(multiplier, multiplier51);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product51, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier52[32]   = {0xbe,0x91,0x95,0x4a,0x1a,0xba,0xe1,0x04,0xe3,0x76,0xf1,0xaa,0xfa,0xbe,0x9d,0xf2,0x69,0x39,0x40,0x96,0x96,0xb3,0xdc,0xfb,0x06,0x16,0xc2,0xc5,0x53,0x30,0x5f,0xe2};
    static std::uint8_t product52[64]      = {0x8d,0xdc,0x6c,0x64,0x74,0xaf,0x06,0x47,0x29,0xf2,0x81,0x34,0x45,0x10,0x06,0xfa,0x7c,0xe1,0x04,0x62,0xbc,0x3c,0x7d,0x3e,0x31,0x9a,0x78,0xc8,0xf9,0x7e,0x6e,0x6a,0xd0,0x0e,0x18,0x00,0x7f,0x6e,0x6b,0xf5,0xe7,0x32,0x38,0xca,0x67,0xa1,0xb6,0xff,0x70,0x3e,0x8b,0xee,0x81,0xb4,0xb0,0x29,0x87,0xa6,0x81,0x24,0xa4,0xa9,0x83,0x84};
    uint256_from_bytes(multiplier, multiplier52);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product52, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier53[32]   = {0xe0,0xe3,0xc6,0x7d,0x2e,0x67,0x6f,0xd2,0x2c,0x18,0xa0,0xc0,0x26,0xae,0xb1,0xd0,0x84,0x0f,0xa7,0x20,0x29,0x16,0x46,0xd2,0xc1,0x91,0x50,0x27,0xba,0x17,0x66,0xae};
    static std::uint8_t product53[64]      = {0xc5,0x8f,0x66,0x04,0xad,0x1b,0x30,0x1e,0x76,0x4a,0xf2,0x6d,0x34,0xfc,0xcc,0xd8,0x64,0x7a,0x89,0x09,0x69,0x11,0x4e,0x24,0xb7,0xb7,0xbd,0x39,0x17,0xd6,0x10,0xaf,0x55,0x9a,0x20,0xca,0x06,0x5f,0xbc,0x20,0xb3,0x2d,0xfa,0xba,0x17,0xd5,0x06,0x1e,0xa3,0x3d,0xd2,0xb3,0x49,0x24,0x8f,0x45,0x87,0xb0,0x0c,0x5c,0x74,0x73,0x1e,0x44};
    uint256_from_bytes(multiplier, multiplier53);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product53, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier54[32]   = {0xab,0xc4,0xe7,0x71,0x7b,0x68,0x2a,0xb0,0xf1,0x0e,0x4f,0xad,0x65,0x08,0xd9,0x27,0xf4,0x3e,0x97,0x51,0x0e,0xa3,0x59,0x1d,0x17,0x55,0x02,0xed,0x41,0xde,0x23,0xd1};
    static std::uint8_t product54[64]      = {0x73,0x40,0xa4,0xa4,0xd1,0xe0,0x1f,0x8d,0xeb,0x78,0x83,0x01,0x07,0x6f,0xf0,0xa7,0x73,0xf6,0x6c,0x4c,0x82,0x96,0xfc,0x20,0x64,0x7a,0xb0,0xa1,0x45,0x5e,0x37,0xb8,0x6a,0xd3,0x5d,0x92,0x7f,0x5b,0xde,0x65,0xc2,0xc4,0x41,0x3e,0x57,0xd0,0x95,0x80,0x92,0xd1,0x69,0x5d,0x6c,0xcd,0xa8,0x37,0xd5,0x9a,0x23,0xec,0x45,0x7e,0xd0,0xa1};
    uint256_from_bytes(multiplier, multiplier54);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product54, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier55[32]   = {0x7a,0x6d,0xbf,0x33,0x26,0x92,0x46,0xb2,0xab,0x43,0x3d,0xa5,0xd9,0x6a,0x4c,0x98,0x8a,0xaa,0xcd,0xc7,0x32,0xa9,0x5f,0xb8,0x9a,0x0c,0x8a,0xd0,0x3d,0xd0,0xe5,0xf2};
    static std::uint8_t product55[64]      = {0x3a,0x8c,0xc9,0x49,0x21,0x1f,0xa1,0xb9,0x28,0xf8,0x75,0x54,0xe7,0x66,0x01,0x62,0xcc,0x39,0xe4,0xd1,0x3c,0x02,0xe3,0x54,0xff,0xed,0x7b,0xc1,0xf3,0x13,0x99,0xbb,0x49,0x03,0x40,0xb9,0x66,0xc6,0x5b,0xa6,0x7c,0x02,0xc0,0x40,0x37,0xbc,0x35,0xb6,0xb5,0x4b,0x7a,0xb7,0xe1,0xa2,0x74,0x26,0x70,0xfb,0xc9,0x4b,0xcb,0xca,0xd8,0xc4};
    uint256_from_bytes(multiplier, multiplier55);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product55, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier56[32]   = {0x40,0x30,0xbb,0x42,0xed,0x9a,0x49,0x07,0x0e,0x57,0x61,0xa3,0x95,0x53,0x24,0x6e,0x1f,0x1f,0xb8,0x64,0xfa,0xf5,0x3c,0xbd,0xec,0x40,0x8c,0x7d,0x44,0x1f,0xe2,0x0a};
    static std::uint8_t product56[64]      = {0x10,0x18,0x66,0xe8,0x38,0xe1,0x16,0xfd,0xb0,0x96,0x10,0x60,0x77,0x94,0xf8,0x2f,0x29,0x83,0x1a,0x70,0xbd,0x4a,0x44,0x93,0x56,0x6d,0xb0,0xa6,0xa2,0x97,0x53,0x70,0x72,0xaf,0xf5,0x8d,0x13,0xff,0x1f,0xd4,0x00,0x57,0xe4,0x8d,0xb6,0x0a,0xf6,0x70,0xbc,0x46,0xde,0x85,0x39,0x82,0x8b,0x45,0xed,0x7e,0xa1,0xd1,0xd6,0x01,0xa8,0x64};
    uint256_from_bytes(multiplier, multiplier56);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product56, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier57[32]   = {0x11,0xf8,0xff,0xa9,0x38,0xc8,0x15,0xc7,0xd0,0x06,0x4c,0x5d,0x5d,0x1a,0x0c,0x4e,0x39,0xb8,0xf6,0x9c,0x57,0xad,0x81,0xc8,0x86,0x66,0x71,0x11,0xd5,0xdf,0x39,0xe2};
    static std::uint8_t product57[64]      = {0x01,0x43,0x04,0x24,0xd0,0xbb,0x25,0x89,0x5c,0xec,0xda,0x7f,0x04,0xc6,0xda,0x2f,0x52,0x1b,0xa2,0x27,0x1e,0x81,0x53,0x07,0x42,0x39,0x65,0x72,0xfb,0xab,0xef,0xe4,0x64,0x66,0x07,0xd8,0x01,0x3e,0x56,0xc7,0x9e,0x36,0x36,0xa1,0x56,0x90,0x5e,0xfb,0xfa,0x39,0xb9,0x41,0xf4,0xa1,0x13,0xa7,0xe3,0x84,0x6c,0xfb,0xf8,0xd2,0x6b,0x84};
    uint256_from_bytes(multiplier, multiplier57);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product57, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier58[32]   = {0xb5,0x4f,0x72,0x84,0x82,0xf1,0xa3,0x8c,0x61,0xbb,0x57,0xa5,0x7f,0x59,0xa6,0x9c,0xaf,0xd7,0xd2,0xbb,0x6f,0xb7,0x5c,0xf1,0xb7,0x52,0x21,0x3d,0x80,0x4a,0x75,0xd4};
    static std::uint8_t product58[64]      = {0x80,0x69,0x70,0x97,0x42,0x2c,0xcb,0x9d,0xf4,0xab,0x39,0x8f,0xab,0x89,0x80,0x34,0x48,0xf8,0x08,0x19,0x88,0x08,0x6b,0xda,0x79,0x63,0xf2,0x57,0xdd,0xa8,0xc1,0x70,0x08,0xb2,0xa1,0x95,0xe9,0x2f,0x70,0x6e,0xaa,0xce,0x6a,0x85,0x4c,0x7b,0x3b,0x19,0xe7,0x2b,0x40,0x3a,0x9b,0x1b,0xc7,0x2a,0x29,0xf7,0x5a,0x84,0x54,0xcb,0x77,0x90};
    uint256_from_bytes(multiplier, multiplier58);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product58, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier59[32]   = {0x07,0x91,0x68,0x1d,0x33,0x43,0x87,0x47,0xfd,0xac,0x4f,0x6e,0x83,0x89,0x4b,0x8b,0x11,0x6b,0xc0,0x37,0x09,0x20,0xbd,0x3c,0xfe,0x80,0xa2,0x64,0x93,0x89,0x61,0xa4};
    static std::uint8_t product59[64]      = {0x00,0x39,0x46,0x48,0xb4,0x39,0x80,0xe0,0xb4,0xe7,0xe7,0xac,0x46,0x34,0xbf,0x34,0x91,0xf3,0xf1,0x36,0x3c,0x22,0x8a,0x84,0xa6,0xa1,0x31,0xd1,0x66,0x5c,0xc0,0xae,0x8d,0x4b,0xbf,0x65,0xea,0x4a,0x6b,0x51,0xc1,0x38,0xe0,0x20,0x9f,0x7e,0x22,0x52,0xc3,0x32,0xa3,0x8e,0x53,0xed,0x86,0x40,0x8b,0xee,0xe7,0xfb,0xfe,0xc5,0xb1,0x10};
    uint256_from_bytes(multiplier, multiplier59);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product59, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier60[32]   = {0x2c,0x18,0xf1,0x2e,0xc7,0xa5,0xe0,0x8d,0x75,0xbd,0x8a,0x2e,0x23,0xf9,0x63,0x4a,0x2c,0xeb,0x34,0x89,0x2b,0xbf,0x13,0x0e,0x87,0x2d,0x19,0x80,0x5e,0x60,0xcb,0x56};
    static std::uint8_t product60[64]      = {0x07,0x98,0x95,0x56,0x30,0x9f,0x90,0xbd,0x67,0x19,0x94,0x26,0x1b,0xab,0x50,0x93,0x0e,0x14,0x77,0xa6,0xdb,0xb8,0xa3,0x52,0x57,0xe9,0x89,0x0b,0x62,0x3a,0xc6,0x60,0xe3,0xc8,0xb7,0x70,0x20,0xeb,0x6f,0xae,0x51,0x2d,0x9b,0x0e,0xc3,0xc8,0x13,0xd0,0x25,0x72,0x5b,0xae,0x5c,0x4e,0x98,0xb1,0x9b,0x89,0x5b,0xec,0x4a,0x01,0x80,0xe4};
    uint256_from_bytes(multiplier, multiplier60);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product60, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier61[32]   = {0x8b,0x69,0x32,0x48,0x13,0x11,0x08,0x89,0xb5,0x9d,0xc0,0x09,0xdd,0xaf,0x9f,0xb7,0x22,0x17,0xc3,0xd3,0x83,0x1a,0x1a,0x28,0x61,0xf4,0xa5,0x58,0x67,0x82,0xcd,0x85};
    static std::uint8_t product61[64]      = {0x4b,0xeb,0x67,0xd4,0x8d,0xb4,0x5e,0xfb,0xee,0x86,0x6a,0xc0,0x9a,0x1c,0xe0,0x89,0xe8,0x55,0x44,0xb0,0x7e,0xb6,0x2a,0x8a,0x44,0x5a,0xa9,0x76,0xfd,0xb7,0xbb,0x81,0x50,0xab,0x0f,0xc1,0xf9,0x4e,0xb8,0x60,0xd6,0xa4,0x77,0x1b,0x1b,0xd2,0x20,0xd8,0xac,0x07,0x3b,0xe5,0x61,0x64,0xc2,0x9c,0x80,0x3d,0x41,0xa6,0x66,0x12,0x47,0x19};
    uint256_from_bytes(multiplier, multiplier61);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product61, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier62[32]   = {0x8b,0x66,0x26,0x34,0x42,0x4e,0xfe,0x85,0x30,0xcf,0x65,0x28,0xef,0x6b,0x0a,0xbb,0x4d,0xeb,0x27,0x81,0xc6,0x37,0x53,0x8e,0x7f,0x80,0xa6,0x43,0x59,0xac,0x2b,0x8b};
    static std::uint8_t product62[64]      = {0x4b,0xe8,0x16,0x3f,0x37,0x5a,0x2d,0xb1,0xe9,0xf7,0xe1,0x55,0x3a,0x47,0x87,0x5b,0x0c,0x7b,0x47,0xdc,0x46,0xb6,0xd3,0xe4,0x9d,0x45,0xd3,0xb3,0xeb,0xeb,0x02,0xe7,0xcc,0xef,0xee,0x69,0xf8,0x15,0xbf,0x24,0xd4,0xa2,0x9d,0xf1,0x4a,0xc4,0x43,0x05,0x21,0xaa,0x1b,0xe6,0x5b,0x44,0x59,0x96,0xcd,0x00,0x38,0xd3,0x30,0x2f,0xfd,0x79};
    uint256_from_bytes(multiplier, multiplier62);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product62, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier63[32]   = {0xdd,0xe9,0x40,0xe1,0x5e,0xaa,0xd4,0x69,0x37,0xc2,0x06,0xec,0x21,0x7a,0x05,0x17,0xe2,0x76,0x55,0x54,0xa5,0x09,0x47,0xc3,0x0a,0xe9,0x44,0xdf,0xc0,0x80,0x5a,0xe0};
    static std::uint8_t product63[64]      = {0xc0,0x5c,0x8e,0x8c,0x48,0x22,0xbb,0x71,0x47,0x4c,0x61,0xf5,0x63,0x16,0xd3,0x17,0x1c,0x7b,0x38,0xec,0x88,0xb7,0x41,0x18,0xd1,0x2f,0xbf,0xc8,0x9a,0x4c,0x63,0x21,0x5d,0xb4,0x74,0xf6,0x33,0x82,0xd5,0x4e,0xbd,0x1f,0x3d,0x3a,0x22,0xfc,0x2f,0x89,0x20,0xff,0x78,0xc1,0x86,0x90,0xc3,0xd4,0x0c,0x66,0x1a,0xeb,0x00,0x42,0x44,0x00};
    uint256_from_bytes(multiplier, multiplier63);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product63, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier64[32]   = {0x3d,0xb9,0xf8,0x4d,0x42,0x0e,0x94,0x7a,0xd2,0x9b,0xc8,0xbc,0x34,0xb7,0x04,0xe4,0x7d,0x8e,0x73,0x55,0xf7,0x54,0xce,0x22,0xcd,0xc0,0x20,0x85,0x18,0x81,0xd5,0x51};
    static std::uint8_t product64[64]      = {0x0e,0xe2,0x27,0x6d,0xa1,0xfa,0x33,0x22,0x2f,0x61,0x72,0x26,0x3f,0xec,0x6b,0x30,0xcf,0x44,0x06,0x92,0xde,0xe4,0x94,0x1d,0x28,0xcf,0x4a,0x91,0x3e,0xc8,0xaf,0xb0,0x4b,0x0b,0xe2,0x76,0xdf,0x57,0x68,0xf4,0x29,0x94,0x87,0xd3,0xf9,0xfb,0x73,0xbb,0x59,0x19,0x27,0xb1,0xb5,0xf9,0x43,0x3a,0xa2,0x14,0x80,0x01,0xdd,0x61,0xe3,0xa1};
    uint256_from_bytes(multiplier, multiplier64);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product64, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier65[32]   = {0x45,0xfa,0x28,0x69,0x0f,0x4c,0x5a,0x6d,0x6a,0x7b,0x6f,0x93,0xb9,0xd1,0x3f,0x82,0x28,0xb0,0x71,0xef,0x08,0x05,0x5d,0x24,0xc4,0x10,0x8d,0x33,0x3f,0x1d,0x02,0x17};
    static std::uint8_t product65[64]      = {0x13,0x20,0xce,0x3b,0x95,0xd2,0x09,0xc5,0x02,0xe8,0xeb,0xa2,0x1e,0x34,0x38,0x2c,0x38,0xfd,0x8b,0x92,0xf6,0xe2,0x6e,0xe3,0x91,0x43,0x5c,0xa7,0xad,0x8b,0x53,0xd1,0x46,0xd4,0xd6,0xbf,0x49,0x5f,0x92,0x78,0xdc,0xbf,0x6c,0x76,0xf7,0x5e,0x9a,0x81,0xfc,0xfc,0xc7,0xc2,0xc5,0x81,0x19,0x13,0xa4,0x4b,0x75,0x7a,0xcb,0x3a,0x5e,0x11};
    uint256_from_bytes(multiplier, multiplier65);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product65, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier66[32]   = {0x9e,0x93,0xbb,0x7e,0xa6,0xfd,0x49,0x07,0xd7,0x34,0x9b,0xe9,0x58,0x48,0x31,0x0a,0x11,0x94,0x99,0xf6,0x2b,0x64,0x2b,0x68,0xa0,0x84,0x34,0xf7,0xe9,0x6f,0x69,0xf2};
    static std::uint8_t product66[64]      = {0x62,0x3a,0xb0,0xb1,0x32,0xe6,0xb3,0xa6,0x63,0x98,0xe4,0x4d,0x63,0xf1,0xf1,0x45,0x62,0x63,0xbc,0x64,0xba,0x22,0x15,0x99,0x67,0xf3,0x85,0xdf,0x84,0x8f,0xd9,0xe5,0x19,0xa5,0x9c,0xc4,0xef,0x18,0xae,0xf9,0xfe,0x01,0x4b,0x60,0xa3,0x75,0xe3,0x0c,0x56,0x88,0x86,0x0f,0xb7,0x97,0x06,0xdd,0x4e,0x74,0xc0,0x53,0x8f,0xb4,0x68,0xc4};
    uint256_from_bytes(multiplier, multiplier66);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product66, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier67[32]   = {0x40,0x9e,0x38,0x80,0x0f,0x4e,0x7a,0x50,0x4b,0xf1,0x05,0x9d,0xa5,0xe0,0x42,0x25,0x2a,0xaa,0x96,0x8c,0x2c,0x93,0x8a,0x93,0xfd,0x9a,0x86,0xd1,0x43,0xf2,0xbe,0x2b};
    static std::uint8_t product67[64]      = {0x10,0x4f,0x7e,0x09,0xd2,0x32,0x68,0xc8,0xc5,0xfd,0xfc,0x3b,0x51,0x48,0x9f,0x35,0x64,0x6e,0x9a,0xed,0x3e,0xc2,0xad,0x21,0x8e,0x81,0x7f,0xb4,0xd8,0x48,0x30,0x8a,0x64,0x02,0xbf,0x88,0xd5,0x1f,0x16,0xd7,0x09,0x69,0x31,0x66,0x86,0xd9,0xfa,0x82,0x0d,0x31,0x1a,0x83,0x06,0x42,0x0b,0x81,0xed,0x34,0x7b,0xec,0x98,0x8f,0xdb,0x39};
    uint256_from_bytes(multiplier, multiplier67);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product67, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier68[32]   = {0x30,0xd4,0x77,0x9e,0xd6,0xf9,0x95,0xb4,0x27,0xeb,0x86,0xf7,0x00,0xe0,0x29,0x6f,0x0d,0xfa,0xc7,0x95,0xa1,0x07,0xfe,0x6d,0x01,0x3a,0xd0,0x8f,0x85,0x51,0xd4,0x40};
    static std::uint8_t product68[64]      = {0x09,0x50,0x5d,0x31,0xe7,0x96,0xb3,0xed,0x9b,0x22,0xf1,0xd0,0x2a,0x60,0x61,0x95,0x96,0xe6,0xfd,0xcb,0xd7,0x16,0x9a,0x6f,0xbc,0xc8,0x02,0x8c,0x71,0x66,0xd9,0x14,0x32,0x33,0x80,0x7a,0x45,0xfa,0x60,0x88,0x43,0xbf,0xc8,0xfd,0x0f,0xe1,0xb3,0x9e,0x25,0xba,0xb3,0xdc,0x4e,0x5a,0x54,0x57,0xdc,0xc1,0x40,0x32,0x80,0x7a,0x10,0x00};
    uint256_from_bytes(multiplier, multiplier68);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product68, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier69[32]   = {0x99,0x2c,0x9e,0xfb,0x34,0x27,0xcf,0x03,0x27,0xdc,0xf3,0x65,0x7b,0xd0,0x3c,0x7f,0xcf,0xa6,0xb4,0xef,0x42,0xc9,0x6c,0x97,0x89,0xba,0x8b,0xc0,0x0a,0x4e,0x8c,0x9b};
    static std::uint8_t product69[64]      = {0x5b,0xa6,0x5d,0xcf,0x4d,0x6c,0x8e,0x01,0x62,0xf3,0xd6,0x91,0xe3,0x26,0x08,0x70,0x11,0x62,0x42,0x05,0x55,0xe7,0x09,0x62,0x08,0x47,0x81,0xad,0x49,0x3e,0xd3,0x0b,0xf3,0x15,0xa5,0xf1,0x73,0xb1,0xfd,0x4a,0xcb,0x5e,0xbf,0x77,0x9d,0x52,0x3b,0x04,0x5a,0x5d,0x48,0x04,0x11,0x13,0xce,0xbc,0xfa,0x29,0x75,0x96,0x17,0xad,0xe5,0xd9};
    uint256_from_bytes(multiplier, multiplier69);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product69, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier70[32]   = {0xbf,0xf5,0xb6,0x48,0x56,0x92,0x48,0x76,0x38,0x24,0xe6,0x05,0x50,0xde,0xd9,0x9d,0xc2,0x5a,0xb6,0xd6,0x06,0xbd,0x71,0x9e,0xea,0x05,0x63,0x34,0xa8,0x1b,0x97,0x4c};
    static std::uint8_t product70[64]      = {0x8f,0xf0,0x91,0xd6,0x59,0x6e,0xeb,0xa7,0xe8,0xa5,0xfc,0x76,0x69,0xbd,0xd0,0x0e,0xca,0xdd,0x44,0x49,0x94,0xa4,0x88,0x81,0x39,0x4c,0x1c,0xe7,0x4e,0x11,0x67,0xee,0xde,0xbb,0x7f,0x63,0x28,0x34,0xf9,0x12,0x78,0x62,0x49,0x0f,0xc4,0x12,0xa4,0xd7,0x44,0x7b,0x51,0xc6,0x1d,0xaa,0xa0,0x54,0xe9,0x96,0x78,0x6d,0x03,0x72,0xbe,0x90};
    uint256_from_bytes(multiplier, multiplier70);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product70, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier71[32]   = {0x0b,0x9f,0xdb,0xf9,0x41,0xef,0xcc,0x80,0xfc,0xb9,0x7a,0x77,0xdc,0xa1,0xf2,0xee,0x05,0xcc,0x49,0x02,0xaa,0xbd,0xac,0x81,0x2c,0xbb,0xa3,0xba,0x05,0x85,0x9c,0x4c};
    static std::uint8_t product71[64]      = {0x00,0x87,0x20,0xba,0x68,0x4e,0xec,0xf4,0xbb,0x4e,0x08,0xb6,0x62,0xbf,0x32,0xfd,0x58,0xd7,0xf5,0xb9,0x22,0xfe,0x02,0x46,0x0a,0x70,0xb1,0x4f,0x96,0x98,0x32,0x5e,0x8e,0xcd,0x2c,0x79,0xce,0xc3,0xc1,0xa2,0xdb,0xc7,0xe8,0x49,0xbc,0xe8,0x10,0x37,0x6b,0x49,0x66,0xc3,0x5f,0x46,0x0d,0xb8,0xa2,0x56,0x64,0x46,0xbe,0x64,0xb6,0x90};
    uint256_from_bytes(multiplier, multiplier71);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product71, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier72[32]   = {0xb2,0xdc,0xdb,0xbd,0xdf,0x8c,0x0b,0x14,0x6d,0x6e,0xb7,0x0e,0xd4,0xe5,0x7a,0x8e,0x31,0x53,0x50,0xa7,0x65,0xc4,0xcb,0xcd,0x75,0xee,0x07,0x71,0x6b,0x27,0x02,0x65};
    static std::uint8_t product72[64]      = {0x7c,0xf7,0xe0,0x1e,0x75,0xd5,0x61,0x68,0xe6,0x3c,0xa4,0x29,0xf9,0xb4,0x0c,0x0c,0x36,0x72,0xe0,0x98,0x01,0x09,0x21,0xda,0x2a,0x50,0x38,0xdb,0xf0,0x49,0xe5,0xd6,0x74,0x96,0x87,0x31,0xb8,0x8c,0xd8,0x26,0x28,0xfe,0x1b,0xd1,0x51,0xef,0xd3,0x7c,0xdf,0x74,0x57,0x1a,0x59,0xfa,0x4e,0x96,0xad,0x37,0x45,0x1c,0x28,0xcb,0xbb,0xd9};
    uint256_from_bytes(multiplier, multiplier72);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product72, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier73[32]   = {0x4d,0x80,0xf4,0xac,0x9f,0x08,0x49,0x18,0xfd,0x35,0xd2,0xb2,0x1e,0x07,0xa2,0x3c,0x92,0x37,0x59,0xa8,0xa8,0x8e,0xc7,0xad,0x04,0x83,0x1e,0xf6,0x38,0x4e,0x94,0x00};
    static std::uint8_t product73[64]      = {0x17,0x76,0xd4,0x25,0x6e,0x23,0x87,0xd0,0x02,0x94,0xbd,0xe6,0x63,0x1d,0x39,0xc1,0x27,0x30,0xdb,0xb3,0x73,0x3b,0x85,0x73,0xb8,0x0d,0x22,0x0e,0x9f,0xd6,0xe3,0xc5,0x85,0xa8,0x25,0xc2,0xb7,0xd0,0xee,0x82,0x0e,0x1b,0x07,0x40,0x63,0x66,0x94,0xf0,0x98,0x86,0xd9,0xde,0xd9,0xca,0xbf,0x0e,0x26,0x16,0xe8,0xde,0x85,0x90,0x00,0x00};
    uint256_from_bytes(multiplier, multiplier73);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product73, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier74[32]   = {0xbc,0x73,0x50,0x33,0x4a,0x56,0x72,0xc0,0x9c,0xef,0x3a,0xe2,0x02,0xc8,0x97,0xc5,0x3b,0x7c,0xdf,0x2b,0x0f,0xb3,0x29,0xc7,0x64,0x58,0x8b,0xc5,0x9c,0x4d,0xdd,0xc8};
    static std::uint8_t product74[64]      = {0x8a,0xb9,0x91,0xbc,0x7c,0x63,0xda,0xf2,0xbb,0x4c,0x8f,0xc7,0x8e,0xd7,0xb2,0x63,0x96,0x4e,0x7b,0x10,0xc4,0xe3,0x6b,0x5b,0x79,0xd7,0x0d,0xfe,0xf7,0xe7,0x3c,0x34,0xb2,0x6e,0xd8,0x36,0x45,0x7d,0x68,0xa0,0x49,0x23,0xcf,0x13,0x5c,0x1f,0xfd,0xd1,0x58,0xb8,0x8b,0x2e,0x4e,0x11,0x58,0x03,0x37,0x9d,0x83,0xca,0xea,0x72,0xec,0x40};
    uint256_from_bytes(multiplier, multiplier74);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product74, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier75[32]   = {0xdf,0x4b,0xa6,0xf4,0x3a,0xf0,0x51,0x47,0x29,0x78,0xcd,0xac,0x46,0xc2,0x35,0xa9,0x6f,0x79,0x0d,0xc2,0xbc,0x17,0x7e,0x02,0x47,0x38,0xb7,0x94,0x85,0x77,0x8e,0x72};
    static std::uint8_t product75[64]      = {0xc2,0xc4,0xe3,0x38,0xbe,0xaa,0xdb,0xd9,0xab,0x07,0xc2,0xf7,0x1d,0x41,0xe7,0x2d,0x8e,0x3f,0xf0,0x22,0xff,0xb2,0xac,0xb2,0x12,0xd9,0x6a,0xbf,0x1d,0x96,0x9c,0xe3,0x88,0x6c,0x74,0xa7,0xd3,0xf4,0xef,0xd8,0xf5,0x2b,0xc6,0x61,0x3b,0x66,0xc9,0xac,0x17,0x90,0xa1,0x94,0x05,0x3a,0xd4,0x15,0x13,0x59,0x21,0xa8,0x31,0x3e,0xaa,0xc4};
    uint256_from_bytes(multiplier, multiplier75);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product75, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier76[32]   = {0x3c,0x97,0xcf,0x6a,0x1e,0x08,0x5c,0xc6,0x5f,0x86,0x28,0xb5,0xfb,0xd5,0x89,0xef,0x77,0xad,0xaa,0xa1,0xde,0x9c,0xad,0x6d,0x19,0xe9,0x6a,0x78,0x53,0x55,0x39,0xb7};
    static std::uint8_t product76[64]      = {0x0e,0x57,0x83,0x40,0x15,0x50,0x21,0xe8,0xd7,0x47,0x2c,0x1f,0xd2,0x13,0xca,0xd6,0x61,0x54,0x7d,0x6a,0x9f,0x70,0x4d,0x74,0xf2,0xf3,0x75,0x6c,0xfd,0x75,0x1b,0xd1,0x9a,0x5e,0x3d,0xed,0x71,0xe6,0xcc,0xf7,0xb8,0x15,0x5a,0x69,0x1d,0xec,0x45,0x37,0x25,0xa7,0xba,0xdc,0x5d,0x32,0xaf,0xcf,0x9b,0xf0,0x07,0x5c,0x0a,0x89,0x00,0xd1};
    uint256_from_bytes(multiplier, multiplier76);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product76, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier77[32]   = {0x56,0x3a,0x45,0xbf,0x8d,0x28,0x9d,0x98,0x0b,0xcf,0xcd,0x27,0x23,0x86,0xe6,0x2f,0x44,0x66,0x90,0xd1,0x3a,0xaf,0x02,0xd5,0xde,0xa5,0xe8,0x9e,0x53,0xda,0xeb,0xd6};
    static std::uint8_t product77[64]      = {0x1d,0x0b,0x34,0x20,0x60,0xa4,0x11,0xb5,0x66,0x39,0xdb,0x4a,0x03,0xd0,0x67,0x0d,0xed,0x0f,0xb5,0x41,0xfa,0xbf,0x7d,0x79,0xdb,0xa3,0x09,0x2a,0x44,0x31,0x59,0xdf,0x37,0x0f,0xd8,0xbb,0x38,0x6c,0xfc,0xda,0x45,0x2e,0xb6,0x17,0x06,0xcf,0xcf,0x8f,0x73,0x1f,0x67,0x56,0xa5,0x76,0xed,0x3f,0x93,0x02,0xac,0x4b,0x45,0xba,0x96,0xe4};
    uint256_from_bytes(multiplier, multiplier77);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product77, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier78[32]   = {0x61,0x9b,0x82,0xac,0xb1,0x7f,0x0b,0x22,0x69,0xd2,0xba,0xf3,0xf7,0xb7,0x17,0x58,0x91,0x7b,0x3b,0xb1,0x15,0x32,0x54,0x45,0xcb,0xd6,0xb2,0x59,0x03,0x22,0x61,0x2b};
    static std::uint8_t product78[64]      = {0x25,0x37,0x37,0x7e,0x5e,0x55,0x0f,0x0b,0x94,0xf4,0xad,0x05,0x21,0x28,0x16,0x25,0x73,0xa1,0x02,0x17,0xae,0x66,0x75,0x21,0x16,0xf0,0xf9,0xf7,0x37,0x9e,0xf4,0x98,0x71,0xe2,0xfa,0x7c,0x08,0x79,0x76,0xe1,0xa0,0x25,0x78,0x95,0xc1,0x32,0xdd,0x20,0xf2,0x03,0xcd,0xc7,0x17,0x22,0x44,0x11,0xa2,0xf5,0x2e,0xca,0xf6,0x4d,0x9d,0x39};
    uint256_from_bytes(multiplier, multiplier78);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product78, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier79[32]   = {0xa4,0x4f,0x68,0xef,0x24,0x89,0x30,0x8b,0xaf,0x60,0xa1,0xf6,0x51,0x4b,0x8d,0xe4,0x76,0x30,0x1d,0x0f,0x4d,0x43,0x41,0xb7,0xaf,0x23,0xfa,0xf3,0x02,0xb9,0x83,0xe2};
    static std::uint8_t product79[64]      = {0x69,0x75,0xd7,0x14,0x55,0x6b,0x7f,0xf3,0xa3,0xbb,0x0f,0xa3,0xd0,0x3f,0x17,0x5e,0x41,0x1c,0xec,0x30,0xaf,0x42,0x5b,0x0e,0xc0,0x6c,0x6e,0xb5,0x03,0x85,0x5d,0x35,0x5a,0x57,0x57,0x23,0x06,0x7f,0xd5,0x8e,0x42,0xfd,0x1b,0x9c,0x45,0x3c,0x7d,0x55,0xd3,0xe8,0x13,0xe3,0xe8,0xab,0x3a,0x25,0x8d,0x99,0x33,0x8b,0x68,0x95,0x13,0x84};
    uint256_from_bytes(multiplier, multiplier79);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product79, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier80[32]   = {0xc2,0x26,0x34,0x3b,0xe2,0xb4,0x1c,0xef,0x9e,0x39,0x2c,0x80,0xcf,0x11,0x60,0x13,0x06,0x1d,0xd4,0x5b,0xc2,0xdc,0xa1,0x7b,0x24,0x35,0x6e,0xce,0x84,0x1f,0x1d,0xf6};
    static std::uint8_t product80[64]      = {0x93,0x3d,0xec,0xde,0x50,0x08,0xab,0x6f,0x36,0x7a,0xd0,0xf6,0x60,0x1b,0x64,0x23,0x30,0xfa,0xcd,0x8a,0x08,0x4e,0x69,0xc6,0x93,0xe3,0x9d,0xb3,0xc6,0x47,0x69,0xda,0x86,0x12,0xe2,0x5b,0xe8,0x04,0xf1,0x03,0xd9,0x52,0x54,0x0a,0x5c,0xa4,0x7f,0x2c,0x42,0x84,0x4a,0xbb,0x97,0x07,0xcb,0xd7,0x3b,0xdf,0xba,0x95,0xf5,0x15,0xa8,0x64};
    uint256_from_bytes(multiplier, multiplier80);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product80, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier81[32]   = {0x67,0x2c,0xb4,0xa5,0x4f,0x3e,0x61,0xb6,0xc4,0xdf,0x2e,0xa6,0x5d,0x8e,0xeb,0xfe,0x81,0x68,0x0e,0x8b,0xbd,0x5f,0xfb,0x92,0xf1,0xd2,0x53,0x90,0x35,0x25,0xc1,0x9c};
    static std::uint8_t product81[64]      = {0x29,0x95,0x01,0x2b,0x9e,0x10,0x52,0x41,0xa1,0x99,0xce,0x37,0xd1,0x1a,0x5f,0xa0,0x6e,0x22,0xc3,0xdc,0x5d,0xd0,0xf9,0x4b,0xa6,0x0e,0x50,0x5e,0xec,0x0b,0x8f,0x61,0x89,0xff,0xcd,0x40,0x5b,0xa8,0x60,0x4c,0x5a,0xa4,0xb3,0x2f,0x67,0x0f,0xdd,0xce,0x7a,0xa0,0x48,0x25,0x6a,0x6f,0xda,0x1b,0xac,0xfd,0x9f,0x3c,0x21,0x84,0x97,0x10};
    uint256_from_bytes(multiplier, multiplier81);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product81, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier82[32]   = {0x4c,0xd9,0x49,0x1f,0xbe,0xc8,0x52,0xc4,0x67,0x4c,0xf1,0x6c,0x18,0x87,0xd2,0x19,0xb0,0xfe,0xf4,0x17,0xf6,0x2c,0x2d,0x81,0x32,0xbb,0x67,0x77,0xab,0x44,0xca,0x4f};
    static std::uint8_t product82[64]      = {0x17,0x11,0xbb,0xd7,0xe5,0xfb,0x7f,0x7e,0xf0,0x32,0xd5,0xe1,0x55,0x1e,0x60,0x9e,0x26,0xd6,0xd9,0x0a,0x84,0xc8,0x17,0x11,0xd7,0xa2,0xf6,0x83,0x6c,0xab,0xd2,0x53,0xc4,0xf9,0xe6,0x2a,0x16,0x04,0x7b,0x4e,0xf8,0x13,0x42,0xa6,0xb0,0x8a,0x90,0x67,0x98,0x5e,0x1d,0x13,0x3b,0x28,0x42,0xe6,0x72,0xbe,0xa0,0x33,0xa3,0xd8,0xc4,0x61};
    uint256_from_bytes(multiplier, multiplier82);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product82, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier83[32]   = {0xb3,0xe0,0x67,0x55,0xb8,0xe7,0x0b,0xf2,0x46,0xe6,0xf6,0xab,0x7c,0x1f,0x69,0x01,0xaf,0x65,0x95,0x13,0x1f,0xa6,0xc2,0x64,0xe6,0xb8,0x48,0x26,0x87,0x2b,0x37,0x2e};
    static std::uint8_t product83[64]      = {0x7e,0x63,0x95,0x36,0xe0,0x4c,0xc6,0x87,0xf1,0xba,0xe6,0xc7,0x41,0x41,0x9e,0x5b,0x76,0xfd,0x76,0x49,0x14,0x6c,0x71,0x02,0x64,0x2a,0xc2,0x4b,0xc9,0xe6,0x9f,0x45,0x1e,0x74,0x84,0x0f,0x11,0x5a,0x26,0x40,0xe1,0x59,0x03,0xdd,0xeb,0xa2,0x64,0xe2,0x10,0xe7,0xe9,0x80,0xd3,0xa6,0x7b,0x0a,0xb1,0x5c,0xdd,0x26,0x19,0x58,0xcc,0x44};
    uint256_from_bytes(multiplier, multiplier83);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product83, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier84[32]   = {0xb0,0x8d,0x9c,0x06,0xf0,0x24,0x22,0xff,0x04,0x95,0xbf,0xc1,0xd9,0x78,0x12,0x39,0x14,0xf0,0xf5,0xb7,0x44,0x3b,0x6a,0xbe,0xb7,0xeb,0x69,0xc3,0x4a,0x69,0xa5,0xe3};
    static std::uint8_t product84[64]      = {0x79,0xc3,0x04,0xde,0xc8,0xee,0xac,0xc9,0x60,0xd5,0x2c,0xe2,0x84,0x62,0xb2,0x5e,0x67,0x21,0xa2,0xf7,0x6f,0xe8,0x9f,0x5f,0xae,0xb7,0xdc,0x9e,0xa4,0x58,0x1a,0x6a,0xfc,0x65,0x70,0xa2,0xd1,0x02,0xf8,0x91,0x93,0xcd,0x31,0x1a,0x68,0x1d,0x29,0xd2,0x14,0xe5,0x36,0x8f,0x8d,0x73,0xaa,0x1a,0x35,0x6a,0x2d,0x52,0xbb,0xb4,0x67,0x49};
    uint256_from_bytes(multiplier, multiplier84);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product84, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier85[32]   = {0xdb,0x9c,0x7f,0x10,0xaa,0x34,0x48,0x91,0x06,0x7b,0xb7,0xeb,0xcc,0xaf,0xed,0x84,0x7c,0x7b,0x95,0x01,0xd0,0xb5,0xc0,0x4c,0x7d,0xf8,0x52,0x59,0x81,0x84,0x3d,0x95};
    static std::uint8_t product85[64]      = {0xbc,0x65,0x21,0x11,0x9e,0x96,0x6d,0xd6,0x29,0x8a,0x05,0x13,0x53,0xa2,0x41,0xb0,0x1d,0x84,0x1f,0x37,0x78,0xf5,0xf4,0x0e,0x89,0x62,0x11,0x2a,0x3f,0x36,0x02,0xdd,0x88,0x3a,0x80,0xae,0x7e,0x2f,0x0d,0x05,0xb0,0x50,0x91,0xc3,0xc0,0xb3,0x44,0x9f,0xe1,0xe1,0x8e,0xf1,0x87,0xf9,0x9b,0x16,0xd9,0x9c,0xcf,0xf9,0xba,0x78,0x58,0xb9};
    uint256_from_bytes(multiplier, multiplier85);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product85, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier86[32]   = {0x2d,0xc7,0xf0,0x44,0xae,0xd4,0x66,0x6b,0x7a,0xce,0xee,0x31,0x58,0x05,0xed,0xfd,0x8f,0x62,0xe6,0x52,0xdf,0xf1,0x09,0xdd,0x39,0x08,0x15,0x60,0x38,0x22,0xb1,0xf6};
    static std::uint8_t product86[64]      = {0x08,0x2f,0xe6,0x9f,0x91,0xbf,0x54,0x74,0x9c,0x8b,0x08,0x44,0xcc,0x22,0x83,0xa7,0x65,0x15,0xb7,0x4f,0x3a,0x62,0xac,0xcd,0x5c,0x36,0x5b,0x06,0xc9,0xa6,0xaf,0xfa,0xce,0x79,0xdf,0x83,0xd8,0xd9,0xf2,0xf7,0x99,0x1e,0x54,0x67,0x2d,0xec,0x53,0xc3,0x59,0x78,0x72,0xcf,0x32,0x62,0x71,0x86,0x82,0xe7,0x07,0x0f,0x61,0x0e,0x18,0x64};
    uint256_from_bytes(multiplier, multiplier86);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product86, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier87[32]   = {0x41,0x12,0x6a,0xf6,0xfb,0xc1,0xf4,0x79,0x9d,0xa9,0x5d,0x3a,0x3c,0xbf,0xb7,0x62,0x27,0x8d,0xc5,0xac,0x34,0xa5,0xcb,0xac,0x19,0x5d,0xf5,0x0a,0x05,0x81,0x28,0xc4};
    static std::uint8_t product87[64]      = {0x10,0x8a,0x5b,0xa4,0xa3,0x45,0x5c,0x31,0x91,0xf6,0xa5,0xcc,0xf5,0xbf,0x30,0xd1,0x30,0x0f,0x23,0xa4,0x30,0xd6,0xf0,0x51,0x4a,0xbf,0xd0,0x52,0xce,0x17,0x33,0x4c,0x03,0xbb,0x5d,0x16,0x8d,0x1f,0x0b,0x01,0x69,0x1c,0x78,0xc5,0x57,0xee,0xcd,0x49,0xda,0xbe,0xa6,0xf8,0x51,0xc5,0x08,0x1b,0x8c,0xa4,0xa4,0x11,0xc4,0x05,0xd6,0x10};
    uint256_from_bytes(multiplier, multiplier87);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product87, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier88[32]   = {0x02,0x80,0x0f,0xb6,0x74,0xd2,0x8b,0x1d,0x47,0x96,0xd1,0xc0,0x95,0x53,0x0a,0x7f,0x37,0xbb,0x72,0xb0,0x4f,0x90,0x37,0xd6,0x4d,0xf8,0x6c,0xef,0x5f,0x03,0xa7,0xad};
    static std::uint8_t product88[64]      = {0x00,0x06,0x40,0x4e,0x91,0x3f,0x00,0x72,0x8f,0x60,0xa9,0x59,0x4a,0x74,0x5f,0x26,0x44,0xa4,0x65,0x66,0x79,0x54,0x75,0xc0,0x20,0x4d,0x8f,0xcc,0xdf,0x66,0x1e,0x44,0xb9,0x28,0x77,0xdc,0xc8,0xcb,0x12,0x46,0x98,0x29,0x43,0x8a,0x43,0x70,0x10,0x68,0xae,0xee,0x25,0x1b,0x12,0x13,0xcd,0x2c,0x92,0xc0,0xc3,0x85,0xc1,0xe1,0x2a,0xe9};
    uint256_from_bytes(multiplier, multiplier88);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product88, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier89[32]   = {0x20,0xa3,0x77,0x8b,0x17,0xba,0x30,0x09,0x15,0xb8,0x04,0x4e,0x5d,0x81,0x78,0x7d,0xb5,0x8f,0xf4,0x7c,0x4f,0x12,0x53,0x7c,0x2d,0xcf,0x8f,0x5c,0x42,0x91,0x3b,0x71};
    static std::uint8_t product89[64]      = {0x04,0x29,0x46,0x44,0x38,0xe1,0x5e,0xbd,0x50,0x0b,0x41,0x83,0x35,0x1f,0x01,0xaa,0xa7,0x29,0x73,0x17,0x43,0x55,0xd9,0x8b,0x9b,0x0f,0x9f,0xf7,0x5e,0x6e,0x0a,0x14,0xd4,0x56,0xf2,0x31,0x07,0xfc,0xaf,0xf2,0x6c,0x11,0x71,0xfc,0x51,0xf4,0xc6,0x89,0xa2,0x89,0x51,0xce,0x5a,0x03,0xc4,0xda,0x04,0xd8,0x2c,0x42,0xa7,0xcf,0x47,0xe1};
    uint256_from_bytes(multiplier, multiplier89);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product89, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier90[32]   = {0x99,0xc5,0x35,0xb8,0xe6,0xd7,0x2c,0x9c,0x9b,0x78,0xd8,0xc7,0xd3,0x77,0x06,0x9b,0xf2,0x6b,0x53,0x15,0xd9,0xb4,0x29,0x2a,0xf0,0x2b,0x96,0x9f,0x66,0x65,0xbb,0xbf};
    static std::uint8_t product90[64]      = {0x5c,0x5d,0x52,0x22,0xbd,0xc6,0x8f,0x9f,0x98,0xce,0x0d,0xa1,0x63,0xfa,0x97,0xa8,0x6b,0x74,0xfa,0xa0,0xca,0x62,0xc9,0x69,0xbb,0x12,0xf5,0x57,0xc4,0x16,0xaa,0x7a,0x81,0xd4,0xa3,0xaa,0x7f,0x77,0x99,0xa7,0xb2,0x3b,0xa9,0x67,0xd1,0x64,0xba,0x9e,0x83,0xb7,0x5b,0xa0,0xd4,0x47,0x1e,0x1e,0xc5,0x82,0x45,0x4b,0xe2,0x66,0x98,0x81};
    uint256_from_bytes(multiplier, multiplier90);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product90, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier91[32]   = {0xf0,0xae,0x05,0x5b,0x2c,0xc8,0x2d,0x29,0x88,0xc5,0xfd,0x91,0xf9,0xab,0x17,0xeb,0xb5,0xd2,0xd0,0x4b,0x35,0x6e,0x84,0xfa,0x60,0x16,0xc2,0x91,0xa4,0x3b,0x8f,0x46};
    static std::uint8_t product91[64]      = {0xe2,0x46,0xc0,0x56,0x3c,0x04,0xe5,0x03,0xf4,0xd2,0x4f,0x82,0x3f,0x1b,0x90,0x4f,0xbd,0x75,0x14,0x6f,0x87,0x8b,0xdf,0x02,0x67,0x79,0x59,0xd5,0x39,0xf7,0x00,0xb5,0x64,0x4e,0xe1,0xee,0xea,0x76,0xd8,0x0a,0x8f,0xd6,0xde,0x92,0x77,0x53,0x1d,0x21,0xda,0xe4,0xc9,0x4b,0x8c,0x51,0xfa,0x2e,0xda,0x02,0xc2,0xb9,0x0a,0x73,0x47,0x24};
    uint256_from_bytes(multiplier, multiplier91);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product91, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier92[32]   = {0xe1,0x35,0x69,0x2f,0x56,0x13,0xbd,0x91,0x34,0x7d,0xfd,0xdf,0x6d,0x03,0xda,0xe4,0x17,0x4e,0x22,0xe1,0xf0,0x1f,0xd9,0xfc,0x9a,0xfb,0xf8,0xff,0x45,0xb5,0xbf,0x99};
    static std::uint8_t product92[64]      = {0xc6,0x1e,0xee,0x09,0xee,0x20,0x34,0xc2,0xa6,0x17,0x31,0xb1,0xbb,0xda,0x94,0xf9,0x1b,0x24,0x2b,0x63,0xda,0x47,0xad,0x4c,0x7e,0x6f,0x7d,0xfa,0x8a,0x36,0x89,0x05,0xab,0x92,0xe9,0x8b,0x8b,0xba,0xc8,0xc9,0x07,0xe8,0xa3,0x93,0x9c,0x2c,0xb2,0xd8,0xaa,0x2a,0x32,0x89,0xfa,0x51,0x89,0xbd,0xe0,0x4d,0x9d,0x1e,0xf7,0xbf,0xa9,0x71};
    uint256_from_bytes(multiplier, multiplier92);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product92, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier93[32]   = {0x7f,0x66,0x30,0xb4,0xdd,0xb0,0x04,0x46,0xfb,0x75,0xd5,0x99,0xea,0x37,0x5d,0x83,0xea,0x22,0x08,0xe3,0x8e,0xd6,0x93,0x91,0x34,0x1f,0x54,0xb7,0x76,0x28,0xfd,0x3e};
    static std::uint8_t product93[64]      = {0x3f,0x66,0x8d,0x1e,0x4d,0x59,0x9f,0x6c,0x57,0x29,0x4e,0x5b,0x2a,0xad,0x2b,0x89,0x24,0x7c,0xdb,0x6b,0xcb,0x46,0xa8,0xd9,0x4c,0xb0,0xc0,0x42,0x55,0x4e,0x52,0xc7,0x03,0x60,0x17,0x4a,0x19,0xc8,0xca,0xab,0x16,0xda,0x39,0xd1,0x49,0xd6,0x3a,0x9f,0xf4,0x31,0x69,0x33,0x41,0x64,0x42,0x0f,0x90,0x58,0x8e,0xa9,0x45,0xe3,0x9b,0x04};
    uint256_from_bytes(multiplier, multiplier93);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product93, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier94[32]   = {0x53,0xd2,0x17,0x3c,0x3f,0x70,0xb6,0x00,0x50,0x47,0x80,0xfb,0xa6,0x66,0x6c,0x3b,0x9d,0x48,0xa0,0x72,0x31,0x9e,0x63,0x42,0xe3,0xb3,0x2e,0xcf,0xcb,0x63,0x2d,0x41};
    static std::uint8_t product94[64]      = {0x1b,0x71,0xe7,0x7b,0x32,0x17,0x0c,0x82,0xd9,0xd4,0x1c,0xb9,0x2e,0xa2,0xfa,0x47,0x1d,0xeb,0x2d,0x79,0xd0,0x70,0xe7,0x0d,0x3e,0x8d,0x86,0xae,0x9d,0x65,0x05,0x93,0x37,0xd8,0x5f,0x13,0x32,0xc9,0xf4,0x68,0xc0,0xe7,0x3a,0xf8,0x0c,0x5d,0xa7,0x3e,0x68,0xf0,0xb0,0x85,0x54,0x37,0x40,0x38,0xbf,0x22,0xfb,0x4f,0x1e,0x45,0xea,0x81};
    uint256_from_bytes(multiplier, multiplier94);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product94, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier95[32]   = {0xdd,0xe3,0xe6,0x15,0xcc,0xb1,0x02,0x4b,0x84,0x8b,0x44,0x51,0xfb,0x6e,0x6b,0xe5,0xb9,0x0e,0xb6,0xbb,0x14,0x4d,0xc7,0x78,0x9d,0x44,0x60,0x8e,0xf8,0x53,0x40,0xf3};
    static std::uint8_t product95[64]      = {0xc0,0x53,0x46,0x23,0x7c,0xdd,0xcd,0x89,0xbd,0x9a,0x2b,0x8b,0x3a,0xcd,0x93,0x2b,0xe2,0x48,0xf8,0xa4,0x0b,0x1f,0x29,0x96,0x65,0x98,0x9d,0x0f,0x95,0x67,0x16,0x2b,0xa0,0x23,0x52,0x78,0x33,0xe8,0x87,0xe9,0xc1,0x4a,0x4d,0xb4,0xd0,0x5b,0x33,0x3a,0x06,0x32,0x88,0x0a,0x14,0x2a,0x41,0xcb,0x6d,0x0b,0xb6,0x7d,0xfe,0x0c,0x66,0xa9};
    uint256_from_bytes(multiplier, multiplier95);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product95, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier96[32]   = {0x12,0x21,0xdb,0xd8,0x60,0x0a,0x8b,0x10,0xcc,0xbc,0x55,0x84,0x93,0x86,0x5f,0x9c,0x0c,0x5d,0xda,0x45,0x11,0x48,0x50,0xc9,0x01,0xe4,0xc7,0x98,0x51,0xbd,0x44,0x2f};
    static std::uint8_t product96[64]      = {0x01,0x48,0xc7,0x64,0xd8,0x16,0x29,0x7a,0x76,0xe0,0x97,0xf4,0x2b,0x76,0x90,0x80,0x4f,0x74,0x61,0x35,0x4e,0x8e,0x08,0x75,0x21,0x70,0x54,0x50,0x70,0x34,0xbc,0xe9,0xdc,0x4f,0xb6,0x11,0x0e,0x6f,0xa5,0x2e,0x09,0xbe,0x28,0xe3,0xa4,0xe1,0xd2,0xb7,0xd0,0xda,0x21,0x24,0x91,0xd5,0xaf,0x2d,0x3c,0x93,0x5a,0xe3,0x7d,0x8f,0x00,0xa1};
    uint256_from_bytes(multiplier, multiplier96);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product96, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier97[32]   = {0x3a,0x0c,0x2a,0x37,0xed,0x49,0x22,0x9e,0x31,0xe2,0x0f,0x26,0x2f,0x0c,0xcc,0x3a,0xb6,0xe8,0x79,0x81,0x1c,0xd9,0x14,0x8b,0x9f,0x45,0x42,0x13,0x55,0x09,0x7b,0x09};
    static std::uint8_t product97[64]      = {0x0d,0x29,0x83,0xb5,0x53,0xb9,0xc8,0x9e,0xbe,0x28,0x63,0x64,0x00,0x44,0xa9,0x91,0x2a,0x93,0x32,0x96,0xcd,0x75,0x8f,0x35,0x45,0xa0,0xc7,0x0a,0x77,0x95,0xe5,0x96,0x29,0x85,0x5f,0x7a,0x0d,0xe4,0x5d,0x91,0xef,0xd3,0xd6,0x5a,0x18,0xa1,0xd8,0xf9,0xe0,0x2c,0x9f,0x27,0x13,0xe2,0x9b,0x06,0x1f,0xf2,0x33,0x63,0xdb,0xc3,0xa6,0x51};
    uint256_from_bytes(multiplier, multiplier97);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product97, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier98[32]   = {0xfc,0x8c,0x40,0xf5,0x9d,0x19,0x31,0xa7,0xa7,0xe7,0xa4,0xf0,0x7a,0xc1,0xa6,0xde,0xc3,0xfe,0xae,0xd6,0x4a,0x86,0x94,0x9a,0x04,0x2e,0x9d,0x87,0x84,0x3b,0xa4,0x7a};
    static std::uint8_t product98[64]      = {0xf9,0x24,0x6c,0xba,0xaa,0x69,0x27,0x83,0x0d,0x64,0x7a,0x53,0x6c,0xdf,0xfd,0xa1,0x38,0xa3,0x5b,0x32,0x8c,0xdd,0x1b,0x6c,0x30,0x8e,0xfe,0xbf,0x5d,0x32,0x8c,0x23,0x42,0x6a,0x4c,0xb8,0x4d,0x73,0xde,0x05,0xe4,0xf3,0x1a,0x4d,0x53,0x0e,0x1a,0x34,0x96,0x01,0x72,0xd7,0xff,0x6b,0xd5,0x48,0xce,0xca,0xac,0x2f,0x09,0xe8,0x8a,0x24};
    uint256_from_bytes(multiplier, multiplier98);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product98, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }

    static std::uint8_t multiplier99[32]   = {0x41,0x7f,0x18,0xa0,0x7e,0x73,0xcd,0x12,0x5c,0x0d,0x68,0x93,0xb5,0x4e,0x18,0x05,0x32,0xa8,0xe3,0x9e,0x33,0x92,0x8f,0x4b,0x52,0x07,0xcb,0xd4,0xc6,0xe5,0xbf,0xb8};
    static std::uint8_t product99[64]      = {0x10,0xc1,0xc9,0x9a,0xf1,0xd2,0xc1,0x5c,0xd0,0xa0,0x1e,0xde,0x4e,0x60,0x46,0x0b,0xa6,0xa7,0xb3,0xf8,0x62,0xf8,0x22,0xff,0x8e,0x32,0x70,0x05,0x5f,0xb2,0x0a,0x0c,0x0e,0x2d,0xc6,0x2c,0x22,0x75,0x8f,0xd5,0xae,0x12,0x81,0x53,0x5b,0xeb,0xa4,0xe9,0x9d,0x9d,0x83,0x44,0x4c,0x07,0x19,0x7c,0xc1,0x2b,0x8b,0x81,0x2e,0xc4,0x14,0x40};
    uint256_from_bytes(multiplier, multiplier99);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product99, product_data, 64) != 0)
    {
        throw std::runtime_error("err in x64::uint256_mul");
    }
}
#else
void test_uint256_x64_sqr()
{
}
#endif