#if defined(CPU_FLAG_MOVBE) && defined(CPU_FLAG_BMI2)
#include <gmlib/number/internal/uint256_x64.h>
#include <stdexcept>
#include <cstring>

using namespace number::internal::x64;

void test_uint256_x64_mul_carry_uint64()
{
    uint256_t     multiplier, product;
    std::uint64_t carry;
    std::uint8_t  product_data[32];

    static std::uint8_t  multiplier0[32]  = {0x6d,0x05,0x11,0xfb,0x35,0x8e,0x91,0xc0,0x41,0xce,0x40,0xf0,0x5b,0x12,0x12,0x46,0x9f,0xd0,0x90,0xb2,0xd2,0x0d,0xc0,0xb6,0x53,0x02,0x96,0x02,0xc9,0xea,0x92,0x9a};
    static std::uint64_t multiplicand0    = 0x1cfed0e533b7c2dc;
    static std::uint8_t  product0[32]     = {0xd1,0x22,0xf2,0x9c,0xb9,0x37,0xcb,0x65,0x29,0xfc,0xc2,0xea,0xa3,0x3c,0xaa,0x12,0xad,0x6c,0xed,0x97,0x84,0xc7,0x15,0xa6,0x98,0xdd,0x5d,0x0e,0xc2,0xc4,0xb0,0x58};
    static std::uint64_t carry0           = 0xc5911f50b4630d0;
    uint256_from_bytes(multiplier, multiplier0);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand0);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product0, product_data, 32) != 0 && carry0 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier1[32]  = {0xea,0xc0,0x7b,0x06,0x31,0x5d,0x71,0x3c,0xaa,0x35,0x66,0x86,0xe9,0xf0,0xc1,0x6e,0x59,0x34,0x19,0x8d,0xbd,0x40,0xd6,0x99,0x23,0x8b,0x66,0x46,0x79,0x32,0x06,0xf8};
    static std::uint64_t multiplicand1    = 0x437fc76dbee1f330;
    static std::uint8_t  product1[32]     = {0x27,0x66,0x78,0xa7,0xa8,0x3e,0xa4,0x53,0x71,0x7f,0x9c,0x61,0x8d,0xd5,0xff,0xea,0x5b,0xc2,0x52,0x3b,0xfa,0x5e,0xd8,0xbd,0x08,0xdb,0x77,0xfd,0x65,0xf6,0xb6,0x80};
    static std::uint64_t carry1           = 0x3de58c8fe99e317c;
    uint256_from_bytes(multiplier, multiplier1);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand1);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product1, product_data, 32) != 0 && carry1 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier2[32]  = {0x36,0xf0,0x5d,0x7e,0xd6,0x3f,0x06,0xe7,0xb9,0x3b,0x70,0x4e,0x37,0x79,0x63,0x88,0xea,0x7e,0x40,0xb4,0x31,0xe6,0xe6,0x0b,0x34,0xd9,0x29,0x6c,0x5a,0xad,0x23,0x58};
    static std::uint64_t multiplicand2    = 0xef4a331c27298e1e;
    static std::uint8_t  product2[32]     = {0x62,0x2a,0x2e,0x20,0x0f,0xd2,0x4b,0x26,0x6c,0xd7,0xbd,0x22,0x5d,0x76,0x5d,0x5a,0xbd,0xcf,0x1d,0x05,0xa6,0x7c,0xb0,0xad,0x93,0x02,0x40,0xbb,0xba,0xfc,0xf4,0x50};
    static std::uint64_t carry2           = 0x335a53bc5e00cd75;
    uint256_from_bytes(multiplier, multiplier2);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand2);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product2, product_data, 32) != 0 && carry2 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier3[32]  = {0xbe,0x6b,0xb5,0x23,0x93,0x94,0x53,0x1b,0xcc,0xac,0x72,0x52,0x0a,0xd9,0x14,0x3c,0x00,0xe3,0xe0,0x6b,0x84,0x5d,0x91,0xbc,0xf3,0x60,0x2e,0xf0,0x8a,0x8f,0x2a,0xdc};
    static std::uint64_t multiplicand3    = 0x4e7ab0a4f11ce006;
    static std::uint8_t  product3[32]     = {0x9a,0x9c,0x95,0xf6,0xa8,0x63,0xf3,0xdb,0x8b,0x1a,0x15,0x3b,0xd8,0x08,0xe0,0x41,0x53,0x6a,0x75,0x47,0x7e,0x3c,0x02,0xbc,0x18,0x1a,0x36,0xd2,0x50,0xeb,0x81,0x28};
    static std::uint64_t carry3           = 0x3a6013e9e6cce633;
    uint256_from_bytes(multiplier, multiplier3);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand3);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product3, product_data, 32) != 0 && carry3 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier4[32]  = {0x0b,0x14,0x8d,0xfe,0x82,0x15,0x74,0x81,0xc2,0x45,0x29,0x88,0xce,0x25,0x88,0xa5,0x80,0x9a,0xb0,0xaa,0xf1,0x97,0xc7,0x04,0x82,0x29,0x38,0x75,0x85,0x13,0x62,0xcf};
    static std::uint64_t multiplicand4    = 0xc2cae7d0f7429006;
    static std::uint8_t  product4[32]     = {0x4e,0xa6,0x2d,0xdb,0x0c,0xc5,0xd5,0x8f,0xc4,0x00,0x5b,0x23,0xe0,0x90,0x26,0x07,0x36,0x44,0xbc,0x7a,0x41,0x44,0x24,0x29,0xa1,0xaa,0x82,0x21,0x38,0x66,0xc0,0xda};
    static std::uint64_t carry4           = 0x86e5bdb80eea3ec;
    uint256_from_bytes(multiplier, multiplier4);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand4);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product4, product_data, 32) != 0 && carry4 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier5[32]  = {0x1e,0x12,0xda,0x15,0x0f,0xa3,0x34,0x3e,0xe3,0xf1,0xab,0x13,0x60,0x84,0xa6,0xeb,0x79,0x6f,0xb0,0x82,0x4d,0x9e,0x14,0x0c,0x7d,0xa8,0x14,0xdb,0xca,0x45,0x5a,0xaa};
    static std::uint64_t multiplicand5    = 0xf6d780d599d3a9ab;
    static std::uint8_t  product5[32]     = {0xcb,0x09,0x95,0xc9,0x9f,0x35,0x49,0x1b,0x7a,0x4d,0xd4,0xcf,0xb0,0xa9,0xe4,0x41,0xaa,0xb4,0x58,0xfa,0x81,0x75,0x6e,0xac,0xeb,0xe5,0xa1,0x23,0x39,0x4b,0xc9,0x8e};
    static std::uint64_t carry5           = 0x1cff6e87e983136b;
    uint256_from_bytes(multiplier, multiplier5);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand5);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product5, product_data, 32) != 0 && carry5 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier6[32]  = {0x48,0x48,0x40,0xf4,0x9d,0x15,0xf0,0x2e,0xef,0xd7,0x6e,0x13,0x44,0x8a,0x6d,0x2e,0xfd,0xbc,0x61,0x64,0x05,0x5f,0xd2,0x83,0x22,0x3c,0xcc,0xbe,0xff,0xd8,0xb0,0x10};
    static std::uint64_t multiplicand6    = 0x406e7353c51baa25;
    static std::uint8_t  product6[32]     = {0x3d,0x65,0x25,0xdb,0x5f,0xe4,0x5c,0x4b,0x3a,0x90,0x16,0x6e,0x3f,0xdf,0x7b,0xbf,0x09,0x1f,0xdf,0x55,0xa9,0x8a,0x31,0xa3,0xd6,0xff,0x6e,0x07,0xc0,0xec,0x12,0x50};
    static std::uint64_t carry6           = 0x12313fd92ca356fe;
    uint256_from_bytes(multiplier, multiplier6);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand6);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product6, product_data, 32) != 0 && carry6 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier7[32]  = {0x0c,0xff,0xff,0x75,0x63,0x39,0x80,0xf9,0x5b,0xae,0xe8,0x52,0xe5,0x4e,0xe2,0xc7,0x42,0x52,0x6e,0x5e,0xec,0x1d,0x90,0x41,0x4d,0x47,0xe5,0xde,0xf9,0x51,0x3d,0xf2};
    static std::uint64_t multiplicand7    = 0x56442b1e1c789954;
    static std::uint8_t  product7[32]     = {0x29,0xfd,0xe4,0x02,0x56,0x70,0x04,0x61,0xe2,0xb9,0x3e,0x7e,0x4e,0xcf,0x21,0xd4,0x09,0x55,0x69,0xda,0x00,0xff,0x5b,0xdb,0x14,0xf8,0x59,0x62,0xde,0x1d,0xf5,0x68};
    static std::uint64_t carry7           = 0x4617601d1de73c0;
    uint256_from_bytes(multiplier, multiplier7);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand7);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product7, product_data, 32) != 0 && carry7 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier8[32]  = {0x47,0x56,0x66,0x02,0x93,0x93,0x34,0x48,0x58,0x64,0x1a,0x09,0xb8,0x23,0x3a,0x50,0x62,0x5b,0x6e,0x2e,0x44,0xd4,0x04,0xa3,0xcd,0x40,0xa0,0x4e,0x57,0xb4,0x01,0xbe};
    static std::uint64_t multiplicand8    = 0xbdb7b595ff017bde;
    static std::uint8_t  product8[32]     = {0x18,0x8f,0x93,0x2c,0xfa,0xaa,0xd1,0x9d,0xa4,0x95,0xa5,0x27,0xb7,0xdc,0x38,0xa6,0xf4,0x46,0x2f,0xa6,0x52,0xe3,0x2f,0x2a,0x8a,0x8d,0xa7,0x19,0xce,0xad,0xcc,0xc4};
    static std::uint64_t carry8           = 0x34ddfaacb543d722;
    uint256_from_bytes(multiplier, multiplier8);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand8);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product8, product_data, 32) != 0 && carry8 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier9[32]  = {0x41,0xdf,0x97,0xa8,0x6a,0x69,0x05,0x6f,0x88,0xe4,0xe7,0xf2,0xee,0x27,0x68,0xa7,0xf8,0x5b,0x6b,0xda,0x91,0x9f,0xa7,0xb2,0xfe,0xf5,0x81,0x30,0xe9,0xd6,0x87,0x7e};
    static std::uint64_t multiplicand9    = 0x1c689121939d0cdc;
    static std::uint8_t  product9[32]     = {0x6a,0x8c,0x50,0x86,0xd9,0x23,0xda,0x81,0x07,0x15,0xed,0x74,0xa9,0xfd,0xf1,0xd9,0x46,0x74,0x59,0x38,0x03,0x82,0xa9,0x3f,0x68,0xe4,0xbe,0x9b,0x74,0xfc,0x58,0x48};
    static std::uint64_t carry9           = 0x74f5cc450c375c2;
    uint256_from_bytes(multiplier, multiplier9);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand9);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product9, product_data, 32) != 0 && carry9 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier10[32]  = {0xf6,0x6b,0x56,0x15,0xbd,0xa1,0xdb,0x63,0x69,0x58,0x40,0x42,0xd6,0xdc,0x53,0x91,0xbf,0xab,0x96,0x6c,0xac,0xfa,0x05,0xfc,0xa4,0x49,0x5f,0x86,0x5b,0xc0,0x02,0x2e};
    static std::uint64_t multiplicand10    = 0x90375cb3b551bf7a;
    static std::uint8_t  product10[32]     = {0xf0,0xf7,0x15,0xa5,0x9c,0xc6,0x7f,0x9f,0xfd,0x47,0xc3,0x3a,0x66,0xaa,0x91,0x57,0xfe,0x59,0xd2,0x60,0xd5,0xd2,0x00,0x1f,0xc1,0x8a,0x9b,0xf1,0x31,0xaf,0x5b,0xec};
    static std::uint64_t carry10           = 0x8ad1aab747dc5eaa;
    uint256_from_bytes(multiplier, multiplier10);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand10);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product10, product_data, 32) != 0 && carry10 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier11[32]  = {0x0f,0xc7,0x4b,0x13,0xf6,0x88,0x4b,0x0f,0x07,0x65,0x2e,0x92,0xb0,0x81,0x47,0xab,0x9b,0x62,0x99,0x8c,0x52,0x24,0x0c,0x0b,0x39,0x06,0x13,0x3e,0x6b,0xc7,0x37,0x28};
    static std::uint64_t multiplicand11    = 0x68a513a08cb75d94;
    static std::uint8_t  product11[32]     = {0xca,0x07,0x52,0xa7,0xa7,0xcb,0xc0,0x65,0x5d,0xa6,0xd3,0x40,0x7e,0x41,0xbe,0x09,0x7c,0xd5,0xc2,0x4c,0x2e,0xaa,0x2e,0xe4,0x03,0x73,0x3b,0xcf,0xfb,0xcd,0x6b,0x20};
    static std::uint64_t carry11           = 0x67323292fd2f666;
    uint256_from_bytes(multiplier, multiplier11);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand11);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product11, product_data, 32) != 0 && carry11 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier12[32]  = {0xe3,0x22,0x0e,0x24,0xf9,0xa5,0x3b,0xc4,0x3e,0x48,0xc1,0xb3,0x2b,0xbd,0x04,0xc8,0xcc,0xf2,0x83,0x56,0x0c,0xb4,0xfc,0x6f,0x8b,0x9e,0x4c,0x1a,0x44,0x6f,0x1a,0x3d};
    static std::uint64_t multiplicand12    = 0xa14352924eae9a46;
    static std::uint8_t  product12[32]     = {0xd5,0xed,0x23,0x89,0x47,0x6f,0x14,0x45,0x12,0x4d,0x45,0x78,0x27,0x60,0xe8,0x50,0xd9,0xc1,0x3f,0xba,0xae,0x44,0xda,0xbf,0xfa,0x80,0x7a,0xa5,0xf7,0x9f,0xde,0xae};
    static std::uint64_t carry12           = 0x8f142611ac717437;
    uint256_from_bytes(multiplier, multiplier12);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand12);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product12, product_data, 32) != 0 && carry12 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier13[32]  = {0x2b,0x83,0xf2,0xef,0x7d,0xbf,0xa4,0x5b,0x95,0x1c,0x90,0xe9,0xba,0xfc,0xa8,0xde,0xd6,0x5e,0xd3,0xb2,0x81,0x8b,0x5d,0xfc,0xa2,0x3c,0x5c,0xcc,0x33,0x58,0x3d,0x9d};
    static std::uint64_t multiplicand13    = 0xe8c38464cb3c910b;
    static std::uint8_t  product13[32]     = {0x94,0x9d,0x6b,0x82,0x45,0x68,0x10,0x35,0xca,0x24,0xe1,0xbe,0x15,0x4a,0x9f,0xf3,0x17,0xe8,0x56,0xa7,0x1a,0x95,0xa3,0xc5,0x9a,0x8e,0xac,0xb9,0x1f,0x7c,0x92,0xbf};
    static std::uint64_t carry13           = 0x2790d02c41bcc589;
    uint256_from_bytes(multiplier, multiplier13);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand13);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product13, product_data, 32) != 0 && carry13 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier14[32]  = {0xaf,0xbc,0x44,0x6c,0x42,0x9c,0x9f,0x4d,0x27,0x7c,0xc5,0xe4,0x3c,0x41,0xfb,0x3d,0xea,0xb3,0x62,0xef,0x0a,0x45,0xa4,0x3d,0x6e,0xbe,0x4a,0xd9,0x6c,0xce,0x7a,0x2d};
    static std::uint64_t multiplicand14    = 0x4c1bb9693035124d;
    static std::uint8_t  product14[32]     = {0xc5,0x8f,0xa6,0xa1,0x7c,0xd4,0xf4,0x9f,0xb0,0xd3,0x37,0xf2,0xaf,0xab,0x3a,0x62,0x9b,0xef,0xae,0x59,0xe3,0x59,0xec,0x8d,0x09,0xa3,0xac,0x28,0xfa,0x02,0xe9,0x89};
    static std::uint64_t carry14           = 0x343eec729df38db8;
    uint256_from_bytes(multiplier, multiplier14);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand14);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product14, product_data, 32) != 0 && carry14 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier15[32]  = {0x3b,0x2e,0x7e,0xeb,0x07,0x35,0xf5,0x9f,0xf0,0xcb,0xd9,0x56,0xba,0x1c,0xf9,0xef,0x9d,0x4b,0x3d,0x9e,0x4b,0xce,0x53,0x24,0x0f,0xb5,0xd5,0xd3,0xc6,0x1c,0xea,0x7c};
    static std::uint64_t multiplicand15    = 0x7ff8739b2779990c;
    static std::uint8_t  product15[32]     = {0x41,0xa1,0x02,0x8e,0xfd,0x03,0x32,0x0c,0xc1,0xc6,0x13,0x43,0xf0,0x24,0xf1,0x35,0x98,0xb8,0xb9,0x09,0x0e,0x63,0x71,0x28,0x5a,0x90,0x4f,0xcc,0x4a,0x1b,0x19,0xd0};
    static std::uint64_t carry15           = 0x1d9580bb4d8d5f5c;
    uint256_from_bytes(multiplier, multiplier15);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand15);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product15, product_data, 32) != 0 && carry15 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier16[32]  = {0xda,0x40,0xc6,0xe3,0xed,0xec,0x38,0x31,0xe0,0xd6,0x54,0xa6,0xbe,0xd9,0xad,0xfe,0xb5,0xa9,0x9c,0xae,0x11,0xef,0xd8,0x7a,0x79,0xdf,0x2e,0xe6,0xcd,0xbc,0x9a,0x67};
    static std::uint64_t multiplicand16    = 0xa4078948d8a96a10;
    static std::uint8_t  product16[32]     = {0xe5,0x87,0x22,0x8e,0xef,0x12,0x25,0x94,0x79,0x3b,0xdc,0xd2,0x7e,0xe0,0xbd,0x1a,0xab,0x40,0xd1,0x1c,0x89,0x4a,0x2a,0x1c,0xbb,0xd0,0xff,0x5d,0xc9,0xb7,0x4c,0x70};
    static std::uint64_t carry16           = 0x8bd7ec3a3a05d6e3;
    uint256_from_bytes(multiplier, multiplier16);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand16);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product16, product_data, 32) != 0 && carry16 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier17[32]  = {0x85,0xb5,0xd5,0x3c,0xc6,0x5f,0x39,0x43,0x35,0x69,0x87,0x0f,0x67,0x79,0x73,0xaa,0x88,0x7b,0xda,0xf2,0x9b,0xc8,0xcf,0xa9,0x64,0xaa,0x84,0x52,0x93,0x3a,0xc0,0x23};
    static std::uint64_t multiplicand17    = 0x1ec15ec9f3efb033;
    static std::uint8_t  product17[32]     = {0x2d,0x95,0x1f,0x82,0x8d,0xf8,0x97,0x09,0xed,0xde,0x3a,0x6e,0x1b,0x47,0x3d,0xae,0x7e,0xfe,0x96,0x0c,0xd7,0x72,0xc3,0x74,0x53,0xda,0x0f,0x61,0x52,0x79,0x56,0xf9};
    static std::uint64_t carry17           = 0x10104e95218a3e41;
    uint256_from_bytes(multiplier, multiplier17);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand17);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product17, product_data, 32) != 0 && carry17 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier18[32]  = {0x1f,0x9c,0x80,0x39,0x4d,0x6f,0xc4,0xc4,0x74,0xc7,0xf4,0xa9,0x44,0x3d,0x0d,0x86,0x04,0x1d,0xa8,0x23,0x96,0x3d,0xd4,0xdb,0xe0,0xf1,0x42,0x34,0x80,0xae,0xf9,0x30};
    static std::uint64_t multiplicand18    = 0x3be93c950cb350f6;
    static std::uint8_t  product18[32]     = {0x42,0x0b,0x72,0xba,0xa8,0x3d,0xc0,0xc0,0xee,0xc8,0x70,0x02,0xf8,0x7a,0x56,0xf1,0xcd,0xcf,0x66,0xe5,0xa9,0x9a,0x22,0xc8,0x12,0x32,0x7d,0xa0,0xd2,0x92,0x74,0x20};
    static std::uint64_t carry18           = 0x765de78feb5c703;
    uint256_from_bytes(multiplier, multiplier18);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand18);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product18, product_data, 32) != 0 && carry18 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier19[32]  = {0x3c,0x06,0x42,0xac,0xde,0x2c,0x15,0x26,0x01,0x1c,0x40,0x8c,0xff,0x0c,0x09,0xe1,0x7d,0x41,0x74,0x63,0x0e,0x36,0x1f,0xd5,0xce,0x20,0x1e,0xf8,0xac,0x4e,0x53,0x29};
    static std::uint64_t multiplicand19    = 0x9d776f5323d1253;
    static std::uint8_t  product19[32]     = {0x98,0x32,0x01,0x2e,0xd9,0x39,0xb3,0xb2,0x20,0xf6,0xdb,0x0b,0x34,0xc5,0x92,0x2b,0x18,0x10,0xea,0xec,0x95,0xe9,0x78,0xa1,0x53,0x39,0x5d,0xe2,0x32,0x02,0xd8,0x4b};
    static std::uint64_t carry19           = 0x24ebd7e737f2c6c;
    uint256_from_bytes(multiplier, multiplier19);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand19);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product19, product_data, 32) != 0 && carry19 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier20[32]  = {0x88,0xbd,0xca,0x8c,0x45,0xc8,0x33,0x3b,0x48,0x2b,0xff,0x44,0xfa,0x8c,0x3d,0x46,0x4c,0x01,0xcc,0x92,0xa2,0xb9,0xab,0xfd,0x39,0xd6,0xb2,0xd5,0x53,0x2a,0x46,0x4e};
    static std::uint64_t multiplicand20    = 0x974477f7cfe5d686;
    static std::uint8_t  product20[32]     = {0xcd,0xdb,0xb1,0x45,0x39,0x39,0x23,0x8a,0x59,0x02,0xd8,0xd8,0x08,0xbb,0x91,0x3f,0x37,0x2c,0x02,0xa9,0xee,0x3e,0xc8,0xbc,0xca,0x22,0x9a,0x1a,0xd4,0xac,0x00,0xd4};
    static std::uint64_t carry20           = 0x50cc84f721bd7c50;
    uint256_from_bytes(multiplier, multiplier20);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand20);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product20, product_data, 32) != 0 && carry20 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier21[32]  = {0xbe,0xec,0x48,0x65,0x7a,0x18,0x30,0xcd,0x8b,0x82,0xcd,0x5b,0xc4,0x3c,0xdd,0x49,0x3f,0xff,0xba,0x4f,0x8e,0xdb,0x17,0x67,0xf9,0xbe,0x05,0xea,0x9d,0x97,0xdb,0xc5};
    static std::uint64_t multiplicand21    = 0x267b9aa6a0c355e9;
    static std::uint8_t  product21[32]     = {0x79,0x35,0x72,0x5d,0x3c,0x8e,0x5f,0x07,0x3e,0x10,0x28,0xdd,0xd0,0xff,0x22,0x6b,0xe8,0xac,0xa9,0x31,0x80,0x5d,0x0e,0x84,0xea,0x73,0x40,0xa2,0x62,0x3e,0x6f,0x4d};
    static std::uint64_t carry21           = 0x1cb3419c418a996a;
    uint256_from_bytes(multiplier, multiplier21);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand21);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product21, product_data, 32) != 0 && carry21 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier22[32]  = {0x36,0x63,0x79,0xf9,0x50,0x75,0xf8,0x45,0x1b,0x9d,0xaa,0x2f,0x84,0x8e,0x93,0x37,0x9a,0xde,0x08,0xf2,0xc1,0xa2,0x30,0x78,0x58,0xe9,0x4f,0x7c,0xbc,0xc2,0x39,0x96};
    static std::uint64_t multiplicand22    = 0x2ea31d53147b9dae;
    static std::uint8_t  product22[32]     = {0x00,0xd3,0xea,0x61,0x6f,0x46,0x4b,0x9c,0xcc,0xdb,0x2d,0x26,0x4b,0x5e,0xc0,0xc5,0x55,0xd8,0x8c,0x64,0x0c,0xb8,0xaf,0x79,0x46,0x02,0x0d,0xfe,0xcc,0x66,0x21,0xf4};
    static std::uint64_t carry22           = 0x9e8877c619f407f;
    uint256_from_bytes(multiplier, multiplier22);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand22);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product22, product_data, 32) != 0 && carry22 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier23[32]  = {0x8c,0x68,0x5c,0x9f,0x2a,0x36,0x9b,0xf2,0xbe,0x34,0x6e,0xb4,0x19,0xe3,0x2c,0xc8,0xcc,0x3e,0x4f,0x4c,0x94,0xad,0xd9,0xd5,0x0e,0x29,0x52,0x02,0x97,0x3e,0x5a,0x7f};
    static std::uint64_t multiplicand23    = 0xf9b9be18d8368a4d;
    static std::uint8_t  product23[32]     = {0x9c,0xcb,0xdf,0x38,0xc4,0x96,0xd6,0xd6,0x7d,0x94,0xf4,0x67,0x4d,0xcf,0x2e,0x95,0xfa,0xcd,0x27,0xc2,0xee,0x53,0xc7,0x34,0x66,0x95,0x51,0xb9,0x59,0x53,0xae,0x33};
    static std::uint64_t carry23           = 0x88f761c4d431676a;
    uint256_from_bytes(multiplier, multiplier23);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand23);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product23, product_data, 32) != 0 && carry23 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier24[32]  = {0xa4,0xfc,0x1d,0x3a,0x89,0x81,0x52,0xf8,0x7b,0xa3,0x0d,0x92,0x5b,0xd3,0x91,0x28,0xa5,0x2c,0x9a,0x2b,0x59,0xdd,0xf0,0x6f,0xf2,0xf4,0xf3,0x4a,0x08,0xfa,0xea,0xaf};
    static std::uint64_t multiplicand24    = 0x99e95c0c930d68a8;
    static std::uint8_t  product24[32]     = {0xbc,0x2f,0x5f,0x14,0xe3,0xcc,0x8e,0x8a,0xda,0x78,0xea,0x72,0xeb,0x62,0x03,0x97,0xf3,0x9c,0xd1,0x32,0xba,0x2f,0x67,0xa3,0x99,0xe1,0x29,0xf0,0x3b,0xe4,0x1a,0xd8};
    static std::uint64_t carry24           = 0x633112414b8d427c;
    uint256_from_bytes(multiplier, multiplier24);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand24);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product24, product_data, 32) != 0 && carry24 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier25[32]  = {0x2b,0x1b,0x88,0x64,0x72,0x29,0xf2,0xd2,0x77,0x4f,0xf9,0xf4,0x7b,0x05,0x39,0x92,0x22,0x9d,0x86,0x59,0xc8,0x13,0x09,0x2c,0xe8,0x79,0x7c,0x8e,0x8f,0xd9,0xf3,0x45};
    static std::uint64_t multiplicand25    = 0x57930c08ea7a1fd7;
    static std::uint8_t  product25[32]     = {0xd7,0xf4,0x9b,0x2b,0x26,0x67,0x11,0xc4,0x49,0xee,0xfd,0xa3,0x16,0x69,0x4b,0x07,0xea,0x0c,0x9f,0x7a,0xb0,0x61,0x39,0xa3,0x79,0x60,0x7b,0x89,0x35,0x62,0xa9,0xf3};
    static std::uint64_t carry25           = 0xebf1e303f368340;
    uint256_from_bytes(multiplier, multiplier25);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand25);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product25, product_data, 32) != 0 && carry25 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier26[32]  = {0x82,0x25,0xdd,0x54,0x58,0xd1,0x9d,0x64,0x0d,0x38,0x61,0x79,0x05,0x46,0x3f,0xd3,0xdf,0x9b,0x80,0xea,0x31,0xa5,0xac,0xcd,0x79,0x50,0x20,0x85,0xc1,0x73,0x17,0xb0};
    static std::uint64_t multiplicand26    = 0x9fe9b5fee3feaea2;
    static std::uint8_t  product26[32]     = {0x35,0x5f,0x55,0xc1,0x6a,0xe5,0x6c,0x0e,0x4c,0x3a,0xb1,0x61,0xe1,0xc1,0xb9,0x3e,0x0f,0x54,0xd5,0x52,0x5e,0x1d,0xd0,0xc5,0x49,0x2f,0x6c,0xf3,0x35,0x8e,0x9d,0x60};
    static std::uint64_t carry26           = 0x514c55742fe651a1;
    uint256_from_bytes(multiplier, multiplier26);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand26);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product26, product_data, 32) != 0 && carry26 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier27[32]  = {0xb2,0xaa,0x1f,0xce,0xb4,0xb5,0x40,0x02,0x89,0x31,0xc8,0x77,0xf8,0x13,0x18,0x0c,0xe8,0xeb,0x6b,0xa7,0x7c,0xa2,0x80,0x61,0x47,0x65,0x80,0xf1,0xb9,0x5f,0x06,0x77};
    static std::uint64_t multiplicand27    = 0x85cb0c4668cf540c;
    static std::uint8_t  product27[32]     = {0xdf,0xd0,0x58,0x4b,0xdf,0x4f,0x10,0xe6,0x1b,0x7e,0x4c,0x4a,0xb0,0xd4,0xe2,0x52,0x4b,0x1a,0xcf,0xb9,0x9a,0x30,0xda,0xf1,0x35,0x7b,0x33,0x28,0x70,0xcc,0x59,0x94};
    static std::uint64_t carry27           = 0x5d6017feb9f3a81c;
    uint256_from_bytes(multiplier, multiplier27);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand27);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product27, product_data, 32) != 0 && carry27 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier28[32]  = {0x14,0x41,0xbb,0x30,0x7e,0xed,0xa6,0x79,0xbb,0xb0,0xd7,0x3f,0xa3,0xf0,0x22,0x49,0x18,0x7e,0x7b,0xb8,0xbe,0xbf,0xa8,0x88,0xa9,0x33,0x17,0x36,0xcb,0xb7,0x1b,0xa2};
    static std::uint64_t multiplicand28    = 0x32e86b08c52c96ee;
    static std::uint8_t  product28[32]     = {0xc7,0xc9,0xda,0xf7,0xd2,0x07,0x3d,0x02,0xeb,0x7b,0xe5,0x31,0x18,0x18,0xa1,0x5c,0xce,0xf3,0x3e,0xfb,0x26,0x5f,0x2a,0x08,0xfa,0x5e,0x2f,0x1b,0x18,0x44,0x9c,0x9c};
    static std::uint64_t carry28           = 0x4073a9947a2acbd;
    uint256_from_bytes(multiplier, multiplier28);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand28);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product28, product_data, 32) != 0 && carry28 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier29[32]  = {0x3c,0x89,0x41,0x22,0xbd,0xf3,0x84,0x1a,0xf2,0x93,0xb5,0x4a,0xb4,0xf6,0x64,0xe1,0x75,0xaf,0xb6,0x2f,0x0c,0x0a,0x54,0xa2,0x94,0x30,0x10,0x98,0xee,0x1e,0x97,0x61};
    static std::uint64_t multiplicand29    = 0x5daa50a16aa02f7e;
    static std::uint8_t  product29[32]     = {0x2a,0x54,0x3c,0x92,0x2b,0x4a,0xc7,0xfc,0x74,0x8f,0xf4,0x32,0xb4,0x7d,0x61,0xc9,0x98,0x10,0x02,0x5e,0xd5,0x11,0x7e,0x09,0x88,0xd7,0x40,0xca,0x97,0x79,0x50,0xbe};
    static std::uint64_t carry29           = 0x162622dfeff722e5;
    uint256_from_bytes(multiplier, multiplier29);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand29);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product29, product_data, 32) != 0 && carry29 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier30[32]  = {0x59,0x27,0xa5,0x93,0x7a,0xef,0xc9,0x94,0xb2,0xc5,0x06,0xeb,0x3a,0xd1,0x7f,0x72,0x19,0x30,0xaa,0x96,0xc5,0x2c,0x48,0x60,0x7f,0x08,0x66,0xb0,0x25,0x40,0x57,0x92};
    static std::uint64_t multiplicand30    = 0xa166758078a63d4d;
    static std::uint8_t  product30[32]     = {0xa7,0x55,0xf3,0x89,0xa7,0xc4,0x7f,0x72,0x29,0x4f,0xfc,0x97,0x5c,0x8c,0x47,0x80,0xd0,0x09,0x09,0x35,0x12,0x6d,0x3a,0xaf,0x1c,0x0a,0xaf,0xa0,0xc1,0xe4,0x20,0xea};
    static std::uint64_t carry30           = 0x38359dd9959774e9;
    uint256_from_bytes(multiplier, multiplier30);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand30);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product30, product_data, 32) != 0 && carry30 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier31[32]  = {0x70,0xce,0x5c,0x11,0xce,0xf9,0x01,0x23,0xb6,0x04,0x89,0xa8,0xd5,0x12,0x5d,0xf2,0x38,0x15,0x69,0x95,0xfe,0xf0,0x8f,0xfa,0x8e,0xd4,0xbd,0x6f,0x87,0xfd,0x2d,0x17};
    static std::uint64_t multiplicand31    = 0xdce4c40f98297bed;
    static std::uint8_t  product31[32]     = {0x60,0xb6,0x34,0x47,0x77,0xff,0xf0,0x18,0x5a,0xd1,0xe5,0x56,0x91,0x01,0xdd,0x44,0xda,0x2c,0xc8,0xac,0x3d,0x85,0x0c,0x05,0xbc,0x6a,0x51,0x42,0x6a,0xbb,0xcb,0x4b};
    static std::uint64_t carry31           = 0x6156254e2b5c2894;
    uint256_from_bytes(multiplier, multiplier31);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand31);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product31, product_data, 32) != 0 && carry31 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier32[32]  = {0xef,0x77,0xaa,0x92,0xc0,0xdf,0xc4,0x98,0x44,0xef,0xd9,0x94,0x92,0xad,0x85,0x72,0x5e,0xa2,0x7b,0x62,0x0d,0x4b,0x72,0xb5,0x59,0x96,0xfb,0xc8,0xe2,0xb0,0xc6,0x16};
    static std::uint64_t multiplicand32    = 0xda3b822badc54f1e;
    static std::uint8_t  product32[32]     = {0x6e,0x26,0x65,0xe9,0xe2,0x93,0xb9,0xcb,0xd5,0x90,0x26,0x2b,0x0e,0x58,0x63,0x4f,0xda,0x90,0x83,0x55,0x7a,0xe5,0x76,0x84,0xd5,0x86,0xd9,0x16,0x6a,0xc6,0x00,0x94};
    static std::uint64_t carry32           = 0xcc239198e8559cf1;
    uint256_from_bytes(multiplier, multiplier32);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand32);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product32, product_data, 32) != 0 && carry32 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier33[32]  = {0x07,0x02,0x42,0x2e,0x53,0x66,0x04,0x9d,0xc5,0xe7,0x44,0x63,0x52,0xe2,0x9d,0x49,0x6d,0x07,0x1b,0x87,0xa3,0xb7,0x72,0x88,0x8c,0x08,0x88,0xe4,0x2b,0x6d,0x1e,0x07};
    static std::uint64_t multiplicand33    = 0xf571c4f7a3a96ffd;
    static std::uint8_t  product33[32]     = {0xb2,0x9e,0x70,0x82,0x69,0xa6,0x5c,0xcc,0x6b,0x60,0x8f,0xa6,0x5b,0x8a,0x05,0xdd,0x04,0xb8,0xee,0xcd,0x53,0x94,0xa4,0xc2,0x23,0x6d,0xb2,0x3b,0x82,0x7a,0xb5,0xeb};
    static std::uint64_t carry33           = 0x6b846ba0e97d8b1;
    uint256_from_bytes(multiplier, multiplier33);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand33);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product33, product_data, 32) != 0 && carry33 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier34[32]  = {0x3e,0xfb,0xee,0xbc,0xdf,0xc3,0x3c,0x08,0x6d,0x93,0x1c,0x35,0x37,0x4a,0xa2,0x98,0x4b,0x6b,0x8f,0x59,0xf1,0xea,0x25,0xd7,0x7d,0xcb,0x77,0xdb,0x6c,0xf0,0x97,0x24};
    static std::uint64_t multiplicand34    = 0x56915b0ef320e7d0;
    static std::uint8_t  product34[32]     = {0x19,0xba,0x74,0xf8,0x9e,0xa6,0x91,0x58,0x9f,0x97,0x93,0x03,0xed,0x09,0x8c,0x8e,0xeb,0x30,0x67,0x91,0xec,0x59,0x22,0x92,0x40,0x94,0x6f,0x17,0xac,0x5c,0x49,0x40};
    static std::uint64_t carry34           = 0x154c654ce79bc1c2;
    uint256_from_bytes(multiplier, multiplier34);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand34);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product34, product_data, 32) != 0 && carry34 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier35[32]  = {0xb8,0xb6,0xd6,0xc5,0xf3,0x1a,0x00,0x78,0x83,0xcb,0xe7,0x8d,0xa3,0xe1,0xcc,0xe8,0xe7,0x61,0x68,0x03,0xa4,0x7b,0x56,0xd3,0x6c,0x51,0xe4,0x05,0xd4,0xe3,0x6c,0x08};
    static std::uint64_t multiplicand35    = 0x8fff0b4cb550a29f;
    static std::uint8_t  product35[32]     = {0x93,0x9d,0x83,0x22,0x74,0x68,0x1c,0x28,0xf5,0x63,0x09,0x54,0xe6,0x2e,0x99,0x90,0x25,0x34,0x03,0xa4,0xe4,0x0a,0x81,0x6d,0x87,0xa0,0x0d,0x2a,0x8e,0x1d,0x28,0xf8};
    static std::uint64_t carry35           = 0x67e6283fb64e65b3;
    uint256_from_bytes(multiplier, multiplier35);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand35);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product35, product_data, 32) != 0 && carry35 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier36[32]  = {0xbe,0x38,0x79,0xcc,0x73,0x07,0x33,0x42,0x13,0x4c,0x41,0x58,0xa9,0xe8,0x64,0x43,0x33,0x39,0x2d,0x83,0x09,0x49,0x6a,0x3c,0x75,0xc1,0xc6,0x96,0x77,0xd2,0xb5,0xcb};
    static std::uint64_t multiplicand36    = 0x25279f1cb0786ddc;
    static std::uint8_t  product36[32]     = {0x94,0xca,0x32,0x90,0x9d,0x3e,0x57,0xca,0x8c,0x0f,0x17,0xdb,0x25,0xf1,0x7c,0x4a,0x52,0x90,0xd8,0xfc,0xd6,0x66,0x57,0xb6,0x3f,0xdf,0xb9,0x48,0x77,0xa3,0xa9,0x74};
    static std::uint64_t carry36           = 0x1b9b9a6f7fb92e26;
    uint256_from_bytes(multiplier, multiplier36);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand36);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product36, product_data, 32) != 0 && carry36 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier37[32]  = {0xf0,0xe4,0xb8,0x00,0x41,0xfe,0x50,0x64,0x22,0xf8,0xa7,0x3d,0x83,0xdb,0x8b,0xb5,0xfb,0xef,0x89,0x2c,0xdd,0xbd,0x73,0x2c,0xc6,0xcd,0xea,0x89,0x54,0xce,0x46,0xc2};
    static std::uint64_t multiplicand37    = 0xb3bbd7584b661fa1;
    static std::uint8_t  product37[32]     = {0x98,0x18,0xb1,0x65,0xb1,0xe1,0x72,0x39,0xc5,0xaa,0xde,0x17,0xd7,0xac,0xbc,0x28,0x05,0xa9,0xf4,0x0f,0x06,0x8c,0x88,0x93,0x5f,0x82,0x9b,0x3e,0x57,0x97,0xfe,0x02};
    static std::uint64_t carry37           = 0xa920ae5dc26f994a;
    uint256_from_bytes(multiplier, multiplier37);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand37);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product37, product_data, 32) != 0 && carry37 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier38[32]  = {0x15,0xb8,0xba,0xf7,0x2d,0x95,0xed,0xed,0x5e,0xa6,0x66,0x94,0xf5,0x95,0x82,0xf2,0x7d,0x47,0xe2,0xdb,0x16,0x85,0xb3,0x90,0x5e,0x26,0x0a,0xb7,0x78,0xbe,0x8d,0x86};
    static std::uint64_t multiplicand38    = 0x70edae913fd49bee;
    static std::uint8_t  product38[32]     = {0x8b,0xa7,0xa6,0xd2,0x74,0xa1,0x5e,0x07,0x64,0x98,0x25,0x84,0xa5,0x83,0xbf,0x63,0xce,0xc7,0xbe,0xe6,0x7e,0x41,0x99,0xad,0x23,0xaf,0x2c,0x34,0xcd,0xcf,0xb4,0x94};
    static std::uint64_t carry38           = 0x994fca11ce7331a;
    uint256_from_bytes(multiplier, multiplier38);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand38);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product38, product_data, 32) != 0 && carry38 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier39[32]  = {0x53,0x58,0x81,0x5d,0xbc,0x6c,0xa2,0xfa,0x82,0xb0,0xe0,0xd1,0xf7,0x94,0x72,0xf5,0x80,0x3b,0x3f,0x37,0x6a,0x46,0xac,0xbf,0x3a,0x10,0xf1,0xeb,0x6f,0xfa,0xa7,0x1f};
    static std::uint64_t multiplicand39    = 0xd91600566948456f;
    static std::uint8_t  product39[32]     = {0x79,0xb1,0xd2,0xc1,0xc5,0x6b,0x20,0x8a,0xd7,0x8d,0x73,0xd2,0xde,0xbe,0xa8,0xb8,0xb8,0x4c,0x9c,0x2a,0x03,0xa6,0x15,0xd9,0x9b,0x90,0xcb,0xb8,0xd4,0x71,0xd1,0x71};
    static std::uint64_t carry39           = 0x46ad2f5fb4c89188;
    uint256_from_bytes(multiplier, multiplier39);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand39);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product39, product_data, 32) != 0 && carry39 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier40[32]  = {0xd5,0xdb,0xbe,0x8a,0x8f,0x3f,0x95,0xe1,0xc7,0xf7,0xa1,0x0a,0xfc,0x6c,0xa1,0xc2,0x87,0x41,0xc0,0x2f,0x28,0x82,0x97,0x6a,0xe5,0x2e,0x15,0x72,0xe4,0x68,0x85,0x18};
    static std::uint64_t multiplicand40    = 0x7b94f828c63d5518;
    static std::uint8_t  product40[32]     = {0xb1,0x6a,0xe9,0x29,0x66,0x86,0x1f,0xe6,0x7f,0xaa,0x6c,0x9d,0x54,0x09,0xb7,0x51,0x84,0x8c,0x2e,0xc4,0xf8,0x63,0xdc,0x48,0x2d,0x9e,0x78,0x34,0x64,0xb5,0x72,0x40};
    static std::uint64_t carry40           = 0x673d06e5ab759003;
    uint256_from_bytes(multiplier, multiplier40);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand40);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product40, product_data, 32) != 0 && carry40 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier41[32]  = {0x8c,0x12,0x86,0x93,0x52,0x19,0x4f,0xbb,0xaa,0x96,0x05,0x27,0x6e,0xde,0xe3,0xb5,0xb3,0xad,0x17,0xd9,0x22,0x67,0x62,0x7d,0xbb,0x20,0xe8,0xbb,0x52,0x7e,0xd6,0xc4};
    static std::uint64_t multiplicand41    = 0x5780d4ac38ef70aa;
    static std::uint8_t  product41[32]     = {0xc0,0x84,0x42,0xef,0xe8,0xab,0x6d,0x94,0x07,0x2f,0x11,0x1e,0x40,0xe1,0x7d,0xa0,0x83,0x1a,0x9c,0x4b,0x89,0x99,0x28,0x93,0x5f,0xac,0xdf,0x91,0xa7,0x2c,0x5e,0x28};
    static std::uint64_t carry41           = 0x2fe0c95ced9b2219;
    uint256_from_bytes(multiplier, multiplier41);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand41);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product41, product_data, 32) != 0 && carry41 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier42[32]  = {0x34,0xc6,0x9a,0x7f,0xb2,0xda,0x85,0xe2,0x14,0x99,0x7f,0xf0,0xa3,0x3e,0x9e,0xc6,0x21,0x29,0x92,0xd5,0xbf,0x1a,0xe5,0x2a,0xa0,0xfe,0xfb,0x1b,0xea,0x8f,0x3f,0x35};
    static std::uint64_t multiplicand42    = 0x85cad400ba89ba56;
    static std::uint8_t  product42[32]     = {0x8d,0x39,0x64,0xb6,0xda,0x47,0x69,0x1a,0xd3,0xf5,0x84,0xde,0x99,0x10,0x05,0x20,0x78,0xf2,0x3f,0x88,0x27,0x29,0xff,0x4f,0x0b,0xa1,0x22,0x62,0x35,0x68,0xbd,0xce};
    static std::uint64_t carry42           = 0x1b94feaedf15190c;
    uint256_from_bytes(multiplier, multiplier42);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand42);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product42, product_data, 32) != 0 && carry42 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier43[32]  = {0x9e,0x8c,0x5a,0x6f,0xb0,0x7b,0xef,0x3a,0xc8,0x44,0xf7,0xfb,0x11,0x27,0x9b,0x8d,0xa0,0x15,0x0a,0x63,0xe5,0xf4,0x37,0x5f,0xc0,0x86,0xeb,0xeb,0x9e,0xc9,0x77,0xc1};
    static std::uint64_t multiplicand43    = 0xcb51a7297d655da3;
    static std::uint8_t  product43[32]     = {0x92,0xc6,0x04,0x75,0x18,0xa7,0xb2,0xc2,0x1a,0xff,0xd8,0xad,0xb3,0xdf,0x2b,0xe5,0x0a,0x11,0x1d,0x3b,0x12,0x5f,0x5e,0x5c,0x84,0x8e,0xe9,0x93,0xc6,0xed,0x5c,0xe3};
    static std::uint64_t carry43           = 0x7debdda66f6bc574;
    uint256_from_bytes(multiplier, multiplier43);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand43);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product43, product_data, 32) != 0 && carry43 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier44[32]  = {0x89,0x3a,0xde,0x77,0x97,0xf1,0x8b,0xaf,0x27,0x9f,0x3e,0x16,0x33,0xdb,0x5f,0x60,0x6f,0xf4,0x2e,0x01,0x47,0x97,0xdb,0xce,0xd1,0x67,0xa0,0x69,0x9f,0xfb,0x57,0xa2};
    static std::uint64_t multiplicand44    = 0x38f02d0b2c49bc4e;
    static std::uint8_t  product44[32]     = {0x4b,0x56,0x39,0x45,0x5f,0xd9,0x08,0x23,0xd6,0x73,0x22,0x99,0xd1,0x10,0x50,0x39,0xd9,0xb7,0x41,0xfc,0x44,0x53,0xcd,0x61,0x73,0x12,0x81,0x5d,0x28,0x21,0xab,0x5c};
    static std::uint64_t carry44           = 0x1e85a0000fbb82d1;
    uint256_from_bytes(multiplier, multiplier44);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand44);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product44, product_data, 32) != 0 && carry44 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier45[32]  = {0xa9,0xfa,0x1c,0x94,0x95,0x52,0xdd,0x2d,0x4e,0xaa,0x33,0x55,0xc0,0xb8,0x50,0x73,0xee,0xab,0x84,0x03,0x6b,0xe3,0xe1,0x8f,0x44,0xea,0x14,0xb7,0xe5,0x42,0x8d,0xf2};
    static std::uint64_t multiplicand45    = 0xb7b0b52e82d2dea9;
    static std::uint8_t  product45[32]     = {0xde,0x42,0xd0,0x56,0xf1,0x37,0x5d,0xb5,0x50,0x67,0x0e,0xa6,0x49,0x60,0xbe,0x0b,0x51,0x7c,0xe0,0x81,0x35,0x95,0x7b,0x3e,0xb2,0x76,0x9e,0x5f,0x64,0x8b,0x90,0xc2};
    static std::uint64_t carry45           = 0x79f71eae94e81adf;
    uint256_from_bytes(multiplier, multiplier45);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand45);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product45, product_data, 32) != 0 && carry45 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier46[32]  = {0xd1,0x71,0x2f,0x48,0x64,0xab,0x1c,0x36,0x0b,0x12,0xea,0x35,0xc9,0xc9,0x02,0xce,0xa7,0xd3,0xd6,0x9e,0x74,0xdb,0x97,0xef,0x53,0x83,0xe7,0x5e,0x9e,0x79,0xcb,0x3c};
    static std::uint64_t multiplicand46    = 0xa703f16028f82189;
    static std::uint8_t  product46[32]     = {0x36,0x1b,0xd1,0x96,0x7f,0x22,0xb4,0x96,0x67,0xdf,0xea,0xf1,0x26,0xed,0x19,0x19,0x3e,0x76,0x1a,0x2e,0x5a,0xc3,0xd2,0x74,0x3a,0x8a,0x44,0x4e,0xc4,0x80,0x7f,0x1c};
    static std::uint64_t carry46           = 0x88a40fa600fe5fcc;
    uint256_from_bytes(multiplier, multiplier46);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand46);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product46, product_data, 32) != 0 && carry46 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier47[32]  = {0x14,0x08,0xee,0x48,0x00,0x80,0x71,0xc3,0x82,0x61,0xef,0xfc,0xfb,0x87,0xc4,0x93,0x31,0xa0,0x20,0xc7,0xf0,0xe1,0x90,0x57,0x01,0x7f,0x5f,0x95,0x4b,0x82,0x1c,0xdb};
    static std::uint64_t multiplicand47    = 0x5682c4896dbff75b;
    static std::uint8_t  product47[32]     = {0x3b,0xee,0xea,0x27,0xd7,0xec,0x83,0x7e,0x6f,0xc9,0xc1,0xb3,0xb6,0x1e,0xd2,0x16,0xdc,0x31,0xbb,0xbc,0x02,0x86,0x1d,0x93,0x8e,0xf8,0xdf,0x7c,0x27,0x7c,0x8e,0xd9};
    static std::uint64_t carry47           = 0x6c53bf6c888dfd6;
    uint256_from_bytes(multiplier, multiplier47);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand47);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product47, product_data, 32) != 0 && carry47 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier48[32]  = {0xa4,0x8f,0x21,0x09,0xfb,0xc9,0x7a,0x5d,0xe0,0x59,0xd9,0xe0,0x68,0x70,0xb3,0x94,0x86,0x28,0x6c,0x61,0x58,0x61,0x6f,0x1d,0x78,0x99,0xd4,0x1c,0x46,0x1f,0xec,0x67};
    static std::uint64_t multiplicand48    = 0x217a3d00ef848836;
    static std::uint8_t  product48[32]     = {0x87,0xc6,0x11,0x5c,0x0d,0xb0,0x05,0x78,0x7c,0xc7,0xc7,0xc9,0xfd,0x9d,0x92,0x71,0x81,0xe0,0x6f,0xd9,0x98,0x6d,0x2a,0x06,0x78,0x98,0x44,0x61,0xce,0x6e,0x95,0xba};
    static std::uint64_t carry48           = 0x158506aebd0d28fd;
    uint256_from_bytes(multiplier, multiplier48);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand48);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product48, product_data, 32) != 0 && carry48 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier49[32]  = {0x0d,0x98,0x95,0xd5,0x1e,0x9c,0xa7,0x42,0x94,0x91,0xe2,0x4b,0xe8,0x16,0x02,0x52,0x04,0x63,0x94,0xa1,0xb5,0x7d,0x8a,0xd9,0xa5,0xc8,0xf8,0xf7,0x85,0x5a,0xf6,0x2f};
    static std::uint64_t multiplicand49    = 0xf7f9d32136eb50b4;
    static std::uint8_t  product49[32]     = {0xba,0x5c,0xcb,0xc5,0xcc,0xf4,0x46,0x9d,0x3e,0xaf,0xc6,0x0b,0xba,0x27,0x65,0x50,0xac,0x78,0x92,0x57,0x34,0xf4,0xcc,0xab,0x16,0xce,0x7b,0x33,0x18,0x08,0xc9,0x0c};
    static std::uint64_t carry49           = 0xd2b7d30e3e89369;
    uint256_from_bytes(multiplier, multiplier49);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand49);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product49, product_data, 32) != 0 && carry49 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier50[32]  = {0xd8,0x18,0x2e,0xda,0x0f,0x40,0xcc,0xb5,0x17,0x41,0x77,0x5d,0x38,0x9b,0x02,0xb4,0x9e,0xc9,0xec,0xbb,0x45,0xee,0xf7,0x59,0xbf,0xdc,0x76,0x0f,0x24,0x5f,0xdc,0x81};
    static std::uint64_t multiplicand50    = 0xd1a440b510fc72e0;
    static std::uint8_t  product50[32]     = {0x91,0x9e,0x84,0x6a,0x69,0xa2,0x42,0x49,0xcb,0x5c,0x02,0x8f,0xce,0x93,0xd1,0x3c,0x83,0xbf,0x87,0xbc,0x76,0x5d,0xdc,0x98,0x79,0x32,0xfe,0xcc,0xa3,0x0e,0x62,0xe0};
    static std::uint64_t carry50           = 0xb0f6645ced4bec53;
    uint256_from_bytes(multiplier, multiplier50);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand50);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product50, product_data, 32) != 0 && carry50 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier51[32]  = {0xf8,0x00,0x50,0xf0,0x31,0x1e,0x40,0x23,0xda,0x64,0xb0,0x08,0xb4,0xbd,0x24,0x77,0x20,0x91,0x4c,0x27,0xbd,0x72,0x0f,0x2b,0x29,0xf3,0x06,0xa4,0x72,0x7e,0xa6,0x58};
    static std::uint64_t multiplicand51    = 0xc3d67aff622c88cd;
    static std::uint8_t  product51[32]     = {0xe4,0x5c,0xac,0x3c,0x76,0x33,0x25,0x1e,0x5c,0x01,0x0e,0x1b,0xb3,0x52,0xbf,0x97,0x31,0x0a,0x2f,0x13,0xd8,0xcb,0x7d,0x1c,0x48,0x39,0x79,0x9d,0x3e,0xe9,0xf4,0x78};
    static std::uint64_t carry51           = 0xbdb805122c31745e;
    uint256_from_bytes(multiplier, multiplier51);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand51);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product51, product_data, 32) != 0 && carry51 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier52[32]  = {0x36,0x24,0x8a,0x4f,0x32,0x3f,0x0a,0xfe,0x0a,0xe7,0xc9,0xa3,0xe2,0x9c,0x41,0x85,0x4f,0x25,0x29,0x51,0x02,0xf4,0x66,0x48,0xb2,0x2e,0xe2,0x02,0x0f,0xc1,0xea,0x3c};
    static std::uint64_t multiplicand52    = 0xf150768dad6b5857;
    static std::uint8_t  product52[32]     = {0x9d,0x76,0x99,0x2c,0x28,0xe8,0xc6,0x75,0x39,0x27,0x6c,0x98,0x18,0x70,0x62,0x9c,0x5d,0xe7,0xf2,0x68,0x36,0x7d,0xd0,0xca,0x45,0xa7,0xd0,0x81,0x76,0x7f,0x3a,0x64};
    static std::uint64_t carry52           = 0x33096ab2959b2140;
    uint256_from_bytes(multiplier, multiplier52);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand52);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product52, product_data, 32) != 0 && carry52 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier53[32]  = {0x33,0x5a,0x9e,0xf2,0xed,0x28,0xee,0xdf,0x3e,0x22,0x8f,0x0c,0x12,0xd0,0x04,0xd2,0x63,0x76,0x6f,0x4f,0x5c,0xff,0xd2,0x89,0x78,0x6a,0x56,0xb4,0x2a,0x54,0xa7,0x48};
    static std::uint64_t multiplicand53    = 0xf9196848ae80ad39;
    static std::uint8_t  product53[32]     = {0x0f,0x0a,0x83,0xb8,0xdd,0xb3,0xe9,0x3e,0xd2,0xf0,0x8a,0x19,0x53,0x1b,0xef,0xcc,0x22,0x83,0x0b,0xd4,0x10,0xb7,0x4f,0xed,0x24,0xec,0x0e,0xff,0x35,0xe4,0xe7,0x08};
    static std::uint64_t carry53           = 0x31f83d5f3376c61a;
    uint256_from_bytes(multiplier, multiplier53);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand53);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product53, product_data, 32) != 0 && carry53 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier54[32]  = {0xa2,0xed,0x25,0x01,0x2b,0xab,0xe7,0xc1,0x44,0x84,0xe9,0x31,0x40,0xbc,0x9f,0x33,0x58,0x97,0x8f,0x4f,0xf1,0x7a,0x3c,0xdc,0x2c,0x62,0xfe,0x80,0x45,0x76,0x63,0x17};
    static std::uint64_t multiplicand54    = 0xa7fa4cbe5d0b9111;
    static std::uint8_t  product54[32]     = {0x00,0x72,0x72,0x17,0x9b,0x15,0x0b,0xe5,0xc0,0xbb,0x78,0xc8,0x7a,0xb7,0x2d,0x42,0x80,0x28,0x09,0xba,0x6a,0xc7,0xa6,0x8c,0x06,0x36,0xeb,0x04,0x47,0xf9,0x9b,0x87};
    static std::uint64_t carry54           = 0x6ae7ff9174d71cda;
    uint256_from_bytes(multiplier, multiplier54);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand54);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product54, product_data, 32) != 0 && carry54 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier55[32]  = {0x91,0x49,0xdd,0xb1,0x01,0x3f,0xd9,0x6b,0x61,0xd6,0x46,0x44,0x2b,0xf9,0xd7,0x2d,0xf7,0x4f,0x91,0x84,0xf3,0xea,0xc3,0xd4,0x9b,0x0b,0xf9,0x00,0xaf,0x74,0x48,0xad};
    static std::uint64_t multiplicand55    = 0xf1f0e2be995611aa;
    static std::uint8_t  product55[32]     = {0xdd,0x16,0x28,0x1e,0x1d,0xc2,0x33,0xff,0xc0,0x72,0x52,0xc1,0xef,0x3c,0xa3,0x1a,0xe2,0x58,0x5f,0xb3,0x25,0x83,0xc6,0x27,0xb0,0x3a,0x81,0x01,0x0b,0x29,0xbf,0xe2};
    static std::uint64_t carry55           = 0x894f3fa2d9ad1258;
    uint256_from_bytes(multiplier, multiplier55);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand55);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product55, product_data, 32) != 0 && carry55 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier56[32]  = {0xf5,0x1e,0xbd,0x68,0x08,0xc8,0xb3,0xbb,0xa5,0x3a,0x17,0x85,0x77,0x28,0x27,0x6c,0xf6,0x0f,0x8f,0xe1,0xd9,0x06,0x1f,0x5c,0x0b,0x1a,0x65,0xa8,0x32,0x99,0xbf,0x60};
    static std::uint64_t multiplicand56    = 0x1d3ee31fcdc44232;
    static std::uint8_t  product56[32]     = {0xf0,0x5c,0x02,0x23,0xaa,0x3a,0x1a,0x92,0x0f,0x19,0x22,0x8d,0x17,0x38,0x95,0xac,0xd0,0xef,0x7b,0xc3,0x1b,0x72,0x9e,0x9b,0x2d,0x39,0x60,0x7b,0xea,0xde,0x20,0xc0};
    static std::uint64_t carry56           = 0x1c00b25f5de294f1;
    uint256_from_bytes(multiplier, multiplier56);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand56);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product56, product_data, 32) != 0 && carry56 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier57[32]  = {0x25,0xe9,0x1b,0xa3,0x82,0x55,0x49,0xd7,0xa0,0x17,0x0f,0xee,0x1a,0x0d,0x76,0x4d,0x60,0x42,0x99,0xe7,0xf7,0x6b,0x5d,0x4b,0x7d,0x7d,0x08,0x46,0x91,0xf6,0x24,0x22};
    static std::uint64_t multiplicand57    = 0xb93cc5c694544d24;
    static std::uint8_t  product57[32]     = {0x9c,0x1c,0x5e,0xc1,0x3c,0x3c,0x7c,0x1a,0x7b,0x5e,0xeb,0xe1,0xab,0xa1,0x1e,0x0e,0x94,0x05,0xaf,0x71,0x8d,0x92,0x13,0xe0,0x1c,0xc2,0xb1,0xc7,0x12,0xa3,0x4e,0xc8};
    static std::uint64_t carry57           = 0x1b6e74e56e09a200;
    uint256_from_bytes(multiplier, multiplier57);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand57);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product57, product_data, 32) != 0 && carry57 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier58[32]  = {0x54,0x42,0x10,0x45,0xd9,0x5f,0xb4,0x01,0x2e,0x3e,0xa5,0x77,0x3e,0xc5,0x22,0x73,0x2a,0x76,0x9c,0x34,0xd1,0x4c,0x58,0x85,0x80,0xb8,0x4a,0x50,0xf2,0xee,0xd8,0x35};
    static std::uint64_t multiplicand58    = 0x92b37147dd137eb5;
    static std::uint8_t  product58[32]     = {0xa9,0xc1,0x24,0xc8,0x5a,0xdc,0x35,0x5a,0xf2,0x65,0x3f,0x47,0xdc,0xaf,0x1b,0xe1,0x5f,0x5a,0x77,0x87,0x8d,0xa4,0x5d,0x92,0x51,0x56,0xf6,0xe0,0x1e,0x37,0xf3,0x79};
    static std::uint64_t carry58           = 0x3048bcc207145d8d;
    uint256_from_bytes(multiplier, multiplier58);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand58);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product58, product_data, 32) != 0 && carry58 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier59[32]  = {0x04,0xc3,0x1d,0x8c,0xcc,0xef,0xb5,0xe8,0x7e,0xb8,0xaa,0x1e,0xf4,0xdb,0x14,0xca,0x57,0xe8,0x5d,0x20,0x5b,0xd8,0x79,0x67,0x36,0x9e,0x64,0x83,0x3f,0xb1,0x38,0x0e};
    static std::uint64_t multiplicand59    = 0x62d0a4b53ab948f4;
    static std::uint8_t  product59[32]     = {0xee,0xe4,0x62,0x01,0xd9,0xcb,0x1b,0xf0,0x7d,0xf9,0x23,0x39,0xed,0x32,0xf6,0xad,0x89,0x74,0x3f,0xc0,0x89,0xd5,0xd6,0x05,0x72,0x19,0x7e,0xad,0x3a,0xcb,0x5d,0x58};
    static std::uint64_t carry59           = 0x1d692e846d4054a;
    uint256_from_bytes(multiplier, multiplier59);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand59);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product59, product_data, 32) != 0 && carry59 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier60[32]  = {0xda,0x3b,0xa0,0xe1,0xf0,0x48,0x01,0x98,0xd8,0x72,0x9b,0x4d,0x44,0x41,0x14,0xc9,0x45,0x42,0xec,0xa8,0x7f,0xde,0xdf,0x63,0xc4,0xa9,0x9d,0xb7,0x51,0x4d,0x75,0x83};
    static std::uint64_t multiplicand60    = 0x3bffa5c6a01a87d0;
    static std::uint8_t  product60[32]     = {0x61,0x44,0x09,0x45,0xab,0x95,0x6a,0x67,0x31,0xb3,0xc0,0xe3,0xf4,0x2d,0x44,0xfd,0xf9,0x45,0x7d,0xd0,0x3f,0x1d,0x12,0xfe,0xe0,0x8d,0xce,0x73,0xb7,0x35,0x8f,0x70};
    static std::uint64_t carry60           = 0x3325accb14bae118;
    uint256_from_bytes(multiplier, multiplier60);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand60);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product60, product_data, 32) != 0 && carry60 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier61[32]  = {0xb9,0x85,0xa9,0xb4,0xc6,0xe5,0xa0,0x59,0x75,0x03,0x6c,0x86,0x98,0x39,0x9c,0x24,0x42,0x81,0x9e,0xa1,0x9f,0xa0,0xf9,0x5e,0xaa,0x05,0xd7,0xd1,0x22,0x20,0x55,0xe5};
    static std::uint64_t multiplicand61    = 0xe920893123289fda;
    static std::uint8_t  product61[32]     = {0xa7,0x1c,0x93,0x39,0x93,0x37,0x1f,0xc4,0x9d,0xd0,0x40,0x9f,0xca,0xfc,0xeb,0x93,0x0d,0xd3,0x61,0x49,0xcf,0xd0,0x70,0x24,0xba,0x24,0x6a,0xe9,0xdf,0xaa,0x60,0x02};
    static std::uint64_t carry61           = 0xa8f23b96e381cc9e;
    uint256_from_bytes(multiplier, multiplier61);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand61);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product61, product_data, 32) != 0 && carry61 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier62[32]  = {0x08,0x5d,0x9f,0xf9,0xc2,0x94,0xb0,0x89,0xbd,0x82,0xd7,0x9d,0xef,0xcd,0x67,0x18,0x77,0x5a,0xd9,0x38,0xa0,0x59,0xa4,0x8d,0xdf,0x70,0x8b,0x14,0x53,0xbd,0xdd,0xa8};
    static std::uint64_t multiplicand62    = 0x9417f1363f885371;
    static std::uint8_t  product62[32]     = {0x03,0x42,0x21,0xa3,0x9c,0x16,0xea,0xef,0xd8,0x29,0x59,0x38,0x30,0xe8,0x90,0x4d,0x7d,0xd0,0xe5,0xe4,0x81,0x2f,0xcb,0x68,0x72,0xfd,0x1a,0xf9,0x9e,0xec,0x4f,0x28};
    static std::uint64_t carry62           = 0x4d6e8c7ad5bcf1e;
    uint256_from_bytes(multiplier, multiplier62);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand62);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product62, product_data, 32) != 0 && carry62 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier63[32]  = {0xfa,0xd5,0x13,0x86,0x6f,0xec,0x5a,0xa7,0x7a,0xf7,0xc5,0xb9,0x5d,0x1b,0xb0,0x8e,0xcc,0xcb,0xb0,0xbe,0x22,0x32,0xa1,0x7e,0x1b,0x74,0xbc,0xfd,0x18,0xea,0x53,0x1e};
    static std::uint64_t multiplicand63    = 0xf02e661e9ca85a07;
    static std::uint8_t  product63[32]     = {0x18,0x50,0x02,0xe2,0x24,0x96,0xc2,0x37,0xb9,0xea,0xe5,0x31,0x54,0xda,0xa1,0xae,0x7b,0xff,0x84,0xba,0x87,0x77,0x0d,0x7d,0x63,0xe0,0xfb,0x9e,0xe3,0x50,0xd1,0xd2};
    static std::uint64_t carry63           = 0xeb5538a66f5457bf;
    uint256_from_bytes(multiplier, multiplier63);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand63);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product63, product_data, 32) != 0 && carry63 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier64[32]  = {0xc8,0xfe,0x2a,0xe4,0xa4,0x62,0xfe,0x8d,0x03,0xec,0x35,0x7c,0x62,0xa7,0xce,0xb1,0x0c,0xb1,0xa7,0xce,0xd2,0x49,0x5e,0x23,0x57,0x19,0xb9,0x11,0xb9,0x80,0xa8,0x5d};
    static std::uint64_t multiplicand64    = 0x5c6f7228ebdec031;
    static std::uint8_t  product64[32]     = {0xff,0x5f,0x46,0xfd,0x97,0xdc,0x8c,0x46,0xdc,0x58,0x9b,0xb5,0xb0,0x0f,0x4e,0x1d,0x18,0x42,0x66,0x50,0x08,0x08,0x25,0xf3,0x6c,0xc8,0x68,0x2c,0x5f,0x8b,0xf9,0xcd};
    static std::uint64_t carry64           = 0x4892d74014379402;
    uint256_from_bytes(multiplier, multiplier64);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand64);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product64, product_data, 32) != 0 && carry64 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier65[32]  = {0xe4,0xfd,0x19,0xfd,0x89,0x36,0x24,0xce,0x3f,0xa3,0xda,0x57,0x8b,0x2b,0x7c,0xbf,0x3b,0xef,0xc3,0xfc,0x3d,0xf8,0x47,0x59,0xd0,0x87,0x5d,0x03,0x65,0x5b,0x70,0xee};
    static std::uint64_t multiplicand65    = 0x8251ea21035d16ae;
    static std::uint8_t  product65[32]     = {0x5d,0x2c,0x8b,0xb2,0x37,0xb5,0x10,0x56,0xf4,0x24,0x98,0x8b,0xe0,0xc8,0x52,0x7a,0x9c,0xb4,0x52,0x0d,0x31,0xf8,0x27,0x98,0x6f,0xbc,0x82,0x3d,0x90,0x51,0x35,0xc4};
    static std::uint64_t carry65           = 0x7491ccb4da4a3d76;
    uint256_from_bytes(multiplier, multiplier65);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand65);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product65, product_data, 32) != 0 && carry65 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier66[32]  = {0x22,0x92,0x73,0x9a,0xca,0x26,0x01,0xbb,0x96,0x33,0xe8,0x10,0xf9,0xc4,0xd8,0x28,0x6d,0x09,0x18,0xe7,0xc0,0x07,0x80,0x32,0xbe,0xdd,0x2f,0xe5,0xbe,0xd6,0xf8,0x2c};
    static std::uint64_t multiplicand66    = 0xfe8c417f89d231d4;
    static std::uint8_t  product66[32]     = {0x55,0x79,0xa8,0xd1,0xef,0xd7,0xaa,0xd2,0xfb,0xd2,0xd0,0x71,0x6e,0x00,0xb6,0x2a,0x1d,0x91,0xd7,0x8d,0xc5,0x66,0x90,0xdb,0x44,0xa6,0x84,0xc4,0x4f,0x9d,0xf0,0x70};
    static std::uint64_t carry66           = 0x22603fa335d6ac5a;
    uint256_from_bytes(multiplier, multiplier66);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand66);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product66, product_data, 32) != 0 && carry66 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier67[32]  = {0xc9,0xc2,0x2a,0xba,0x39,0x7a,0xc0,0xe5,0xfb,0x2e,0xe8,0x90,0x55,0xdf,0x2a,0x8f,0xd8,0x3d,0xe7,0xb9,0x37,0xc7,0x99,0x3c,0x6d,0x8b,0x75,0xe2,0xb1,0xf3,0x6b,0xec};
    static std::uint64_t multiplicand67    = 0x8a680e9635c105c;
    static std::uint8_t  product67[32]     = {0xf9,0xc1,0x05,0xd2,0xf9,0x35,0x99,0x7c,0x6d,0xe6,0x93,0x52,0x8b,0x3a,0xdb,0xc0,0x4d,0xc1,0x28,0xec,0xea,0xd1,0xc8,0xca,0x25,0x50,0xd8,0x9a,0x37,0x09,0x88,0xd0};
    static std::uint64_t carry67           = 0x6d14ad68bf1c10d;
    uint256_from_bytes(multiplier, multiplier67);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand67);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product67, product_data, 32) != 0 && carry67 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier68[32]  = {0x72,0x21,0xec,0xd4,0x0b,0x3a,0x71,0x48,0xbc,0x17,0x17,0x7f,0xd0,0x5d,0x05,0x70,0x1f,0x28,0x0a,0x51,0xb0,0x63,0x33,0xbb,0x5e,0x5e,0xc1,0x4d,0xc9,0xbc,0xc5,0xa9};
    static std::uint64_t multiplicand68    = 0xbe88d53aa08cc993;
    static std::uint8_t  product68[32]     = {0x8d,0x24,0x64,0x05,0xeb,0x2a,0xda,0x89,0x94,0x1f,0xb9,0x84,0x37,0x70,0xdb,0x8e,0x13,0x1b,0x9a,0xc2,0x37,0x62,0x71,0xc8,0x1f,0xd1,0xc7,0x1f,0xc7,0x03,0x31,0x0b};
    static std::uint64_t carry68           = 0x54f22edb8e4b64f2;
    uint256_from_bytes(multiplier, multiplier68);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand68);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product68, product_data, 32) != 0 && carry68 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier69[32]  = {0xb8,0xb3,0x12,0x44,0x1c,0xa8,0x49,0xbf,0x43,0x34,0x05,0xa2,0xe3,0x26,0x47,0xb2,0xd8,0xda,0xec,0x12,0x90,0xfe,0xcb,0xf1,0xeb,0xf8,0xc0,0x1b,0xb5,0x5a,0xac,0x0e};
    static std::uint64_t multiplicand69    = 0x2deae7735173a561;
    static std::uint8_t  product69[32]     = {0xea,0x12,0x3a,0x4f,0xe2,0xc0,0xbc,0xab,0x9e,0xe0,0x90,0xa1,0x8b,0x7e,0x3f,0x80,0x2f,0x6c,0x80,0x39,0x41,0xa0,0xeb,0x7f,0xd1,0xae,0xba,0xd8,0xe0,0x8a,0x37,0x4e};
    static std::uint64_t carry69           = 0x2120f4e173fc89c8;
    uint256_from_bytes(multiplier, multiplier69);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand69);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product69, product_data, 32) != 0 && carry69 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier70[32]  = {0x2a,0x4a,0x55,0xb1,0x01,0x9d,0x29,0x8e,0xd7,0x3a,0x5e,0x90,0x41,0x37,0xd3,0xf4,0x56,0xd7,0x82,0xa4,0xc4,0x3e,0x13,0x36,0x04,0xfe,0x5d,0x2d,0x13,0xcf,0x96,0x84};
    static std::uint64_t multiplicand70    = 0x17b4adcd0eed9507;
    static std::uint8_t  product70[32]     = {0xfc,0x92,0xd6,0xeb,0x0c,0x6d,0xcd,0x45,0x3a,0x4b,0x3f,0xcb,0xb4,0x30,0xb6,0xd1,0x39,0x52,0xcc,0x18,0xb1,0x4b,0x27,0xee,0xbf,0xc3,0x35,0xe0,0xed,0x7b,0xf1,0x9c};
    static std::uint64_t carry70           = 0x3ea86ad4380ce31;
    uint256_from_bytes(multiplier, multiplier70);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand70);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product70, product_data, 32) != 0 && carry70 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier71[32]  = {0xe3,0x25,0xa8,0xe9,0xf4,0x88,0xee,0xd4,0x44,0x88,0x13,0xc6,0xbd,0x57,0xf4,0x5c,0xb5,0x45,0x0f,0xcb,0x39,0x38,0x00,0x8c,0x9a,0x2e,0x1c,0x76,0x5e,0x0c,0xc6,0x01};
    static std::uint64_t multiplicand71    = 0x1b0d733dc08ec7fb;
    static std::uint8_t  product71[32]     = {0x71,0x52,0xe9,0xe9,0x4d,0x6c,0x1f,0x5b,0xcf,0x98,0x3b,0xcb,0x8b,0x78,0xdd,0xfd,0x3d,0x9f,0x2f,0x50,0xc5,0xaa,0x04,0x9d,0xe2,0x92,0x4b,0xfd,0xb8,0xfe,0xe9,0xfb};
    static std::uint64_t carry71           = 0x1800e7faf66123c1;
    uint256_from_bytes(multiplier, multiplier71);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand71);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product71, product_data, 32) != 0 && carry71 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier72[32]  = {0x3c,0x78,0xe9,0xe6,0x1e,0xd2,0xa2,0xf2,0x4d,0x52,0x1a,0xb7,0x4f,0x79,0x00,0xa7,0x26,0x67,0xc9,0xcf,0x36,0x57,0x61,0x0b,0xb4,0x0f,0xae,0x2b,0x25,0x2b,0x19,0x5d};
    static std::uint64_t multiplicand72    = 0xff76895e6e99ebfd;
    static std::uint8_t  product72[32]     = {0xef,0x3c,0x41,0x6d,0x8e,0xe3,0x06,0x41,0x40,0x73,0xf1,0x80,0xe6,0x55,0xb6,0x4c,0xfb,0xca,0x31,0xf6,0xb5,0xae,0x1b,0xee,0x04,0x66,0x8c,0x90,0x6a,0x75,0x6f,0xe9};
    static std::uint64_t carry72           = 0x3c58712b0c785ee7;
    uint256_from_bytes(multiplier, multiplier72);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand72);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product72, product_data, 32) != 0 && carry72 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier73[32]  = {0x66,0x40,0x03,0xdf,0x9f,0x52,0x6b,0x9e,0x46,0xfd,0xe4,0x56,0x13,0xc7,0xbc,0x4c,0x28,0x6d,0xd6,0x51,0x67,0x8b,0xb9,0xf4,0x1d,0x1d,0x58,0xc8,0xf0,0x83,0xbe,0xf4};
    static std::uint64_t multiplicand73    = 0x97859b95ccbd282c;
    static std::uint8_t  product73[32]     = {0x89,0xe6,0x04,0xa1,0x48,0xd1,0x10,0x9b,0x3c,0x4c,0xf5,0xad,0xb5,0x40,0xe0,0xa1,0xab,0xe3,0xd0,0xd5,0xce,0x97,0xfc,0x94,0x24,0xfd,0x15,0x90,0x56,0x9e,0xf1,0xf0};
    static std::uint64_t carry73           = 0x3c851faf81889a4f;
    uint256_from_bytes(multiplier, multiplier73);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand73);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product73, product_data, 32) != 0 && carry73 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier74[32]  = {0xc5,0xfc,0xa3,0x98,0x9e,0xfd,0xfb,0x34,0x1f,0x71,0x88,0x52,0x8d,0x4f,0x90,0xd4,0xfb,0x18,0x20,0x54,0xdb,0x69,0x55,0xb6,0x2c,0xc9,0xdc,0xf2,0xfa,0xc8,0x27,0x3b};
    static std::uint64_t multiplicand74    = 0x6ffb1e6ff8804b5c;
    static std::uint8_t  product74[32]     = {0x6a,0x5b,0x21,0x7b,0x08,0xce,0x15,0xef,0xa4,0x13,0x51,0x9a,0x07,0x59,0x20,0x6f,0x2e,0xe1,0x2e,0x70,0x1c,0xd5,0x11,0x90,0x55,0xf0,0xcd,0x74,0x88,0xec,0x62,0x34};
    static std::uint64_t carry74           = 0x569ac12dc77acbd5;
    uint256_from_bytes(multiplier, multiplier74);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand74);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product74, product_data, 32) != 0 && carry74 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier75[32]  = {0x4a,0x6e,0x06,0x9f,0x8e,0xf1,0xb8,0xc6,0x27,0xab,0xe8,0x7c,0x19,0xc9,0x5c,0x1b,0x53,0x1d,0xf9,0xb3,0xb3,0x26,0xf9,0x05,0xb0,0x5b,0x9b,0x22,0x24,0xec,0x22,0x03};
    static std::uint64_t multiplicand75    = 0x768bc48f2ffa6eaa;
    static std::uint8_t  product75[32]     = {0x0b,0x57,0xa2,0xeb,0xd2,0xff,0xd8,0x0c,0x35,0x20,0x2d,0x50,0x66,0x4e,0xe1,0x76,0xa9,0x62,0x94,0x89,0x90,0x51,0x8a,0xba,0x81,0x2f,0x65,0x0e,0xbf,0x59,0xdf,0xfe};
    static std::uint64_t carry75           = 0x227759f10300e7d3;
    uint256_from_bytes(multiplier, multiplier75);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand75);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product75, product_data, 32) != 0 && carry75 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier76[32]  = {0xf9,0xaf,0x02,0xb4,0x6e,0x73,0x6b,0xd3,0x9c,0x89,0x48,0x99,0xf0,0x64,0x5a,0x67,0x3d,0x11,0xf9,0x2a,0x60,0x8a,0xb6,0x63,0x68,0xb1,0x63,0x70,0x63,0x65,0x8f,0x41};
    static std::uint64_t multiplicand76    = 0x436812ed56e86c04;
    static std::uint8_t  product76[32]     = {0x5a,0xde,0x41,0xec,0x94,0x4d,0xe5,0xfe,0x39,0x39,0x1c,0x84,0xd1,0x6c,0x86,0x79,0xd2,0x42,0xa8,0xd9,0xeb,0x42,0x2d,0xab,0xb6,0x77,0x5b,0x07,0x0e,0xed,0xa9,0x04};
    static std::uint64_t carry76           = 0x41be4f441c2ebfc7;
    uint256_from_bytes(multiplier, multiplier76);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand76);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product76, product_data, 32) != 0 && carry76 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier77[32]  = {0xd1,0x8c,0x15,0x63,0xbd,0x30,0x8b,0x36,0x53,0xf5,0xc8,0x24,0x38,0x90,0xb1,0xa0,0x1a,0xa0,0x61,0xc1,0xde,0xf0,0xd4,0x31,0x37,0x0d,0x60,0x30,0x87,0x87,0x9a,0xf2};
    static std::uint64_t multiplicand77    = 0xf1ad8f1616c20c55;
    static std::uint8_t  product77[32]     = {0x85,0x0b,0xbf,0xd0,0x1d,0xad,0x64,0x23,0xa0,0x37,0x20,0xa3,0x61,0x44,0x84,0x0c,0x83,0x38,0xb6,0x22,0x3c,0x33,0x40,0xb4,0xe5,0x1e,0x11,0x57,0x92,0xad,0xca,0x5a};
    static std::uint64_t carry77           = 0xc5d2f0ecae1efa33;
    uint256_from_bytes(multiplier, multiplier77);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand77);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product77, product_data, 32) != 0 && carry77 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier78[32]  = {0xc1,0x17,0x7c,0x51,0xf5,0x87,0xf9,0xc8,0x3f,0x77,0xa3,0x30,0x7a,0xa2,0xd2,0xa7,0x8b,0x53,0x8b,0xaf,0x31,0xbb,0xfd,0x7c,0xc1,0x11,0xd2,0x1e,0x5c,0x6f,0x1d,0x21};
    static std::uint64_t multiplicand78    = 0xe1957b969fb87000;
    static std::uint8_t  product78[32]     = {0x1c,0xd0,0x72,0x2d,0xa7,0x22,0xed,0x5a,0xb1,0xfe,0xef,0x06,0xc2,0xdd,0x86,0x84,0x69,0x2a,0xa8,0x39,0x97,0xca,0x94,0x41,0x2e,0x77,0xa7,0xbb,0x0b,0x76,0x70,0x00};
    static std::uint64_t carry78           = 0xaa2664274977573e;
    uint256_from_bytes(multiplier, multiplier78);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand78);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product78, product_data, 32) != 0 && carry78 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier79[32]  = {0x49,0xf8,0xee,0x4e,0x72,0x0c,0x97,0xf3,0x86,0xe8,0x23,0x1e,0x5c,0xda,0xed,0x6b,0x46,0x82,0x20,0x50,0xa1,0xa0,0xb5,0x9f,0xcd,0x27,0x6e,0x5f,0xcc,0xb1,0xf1,0xfa};
    static std::uint64_t multiplicand79    = 0x31d4b478845401e6;
    static std::uint8_t  product79[32]     = {0xd6,0x5c,0xef,0x60,0x4b,0xcd,0x0a,0xdc,0xe5,0x6e,0x09,0xb4,0x3c,0x9a,0x68,0x4e,0xca,0x79,0x2f,0x64,0x76,0xeb,0x1e,0xbb,0x64,0x6b,0xaa,0x36,0xe7,0xd9,0x60,0x9c};
    static std::uint64_t carry79           = 0xe661be837465994;
    uint256_from_bytes(multiplier, multiplier79);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand79);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product79, product_data, 32) != 0 && carry79 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier80[32]  = {0x91,0x63,0xd0,0xfd,0xdd,0x38,0xce,0x8d,0x11,0xbc,0x67,0x83,0x38,0x98,0x94,0x39,0x3a,0x8e,0xdf,0x05,0xd4,0xbb,0x39,0x85,0x84,0xee,0x0f,0x96,0x50,0xbc,0x8e,0x1f};
    static std::uint64_t multiplicand80    = 0xe32f925bd878025;
    static std::uint8_t  product80[32]     = {0xd6,0xc1,0x91,0xd9,0xa8,0x9b,0xd3,0xf3,0xe5,0x92,0x66,0x7c,0x30,0xec,0x17,0x04,0x33,0xa5,0xb8,0x59,0x4b,0xb6,0x77,0xa9,0xf5,0x9d,0xe2,0xee,0xc7,0xa9,0x0a,0x7b};
    static std::uint64_t carry80           = 0x810686c390616f6;
    uint256_from_bytes(multiplier, multiplier80);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand80);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product80, product_data, 32) != 0 && carry80 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier81[32]  = {0x5f,0x0e,0xc6,0x0a,0xa8,0xdf,0x0d,0xfe,0x28,0x66,0xfb,0x4f,0xeb,0x7b,0x60,0x82,0x71,0xc8,0xf8,0x6f,0x58,0x72,0xaa,0xd3,0xfd,0xd3,0x9c,0xf7,0x65,0xc0,0xf4,0x4a};
    static std::uint64_t multiplicand81    = 0x80554c8929f0f58f;
    static std::uint8_t  product81[32]     = {0xec,0xef,0xb6,0xc8,0x38,0xba,0x84,0x54,0x71,0x8f,0x07,0xa9,0xb3,0x4b,0x51,0x4a,0xb9,0xf4,0x0f,0x40,0xb9,0xcc,0xde,0xad,0xef,0x03,0x72,0x32,0x5f,0xf3,0x47,0x56};
    static std::uint64_t carry81           = 0x2fa70f58673f95a4;
    uint256_from_bytes(multiplier, multiplier81);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand81);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product81, product_data, 32) != 0 && carry81 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier82[32]  = {0x68,0x70,0xf0,0x21,0x24,0x7d,0xeb,0xc5,0x2e,0xce,0xd8,0xc2,0xad,0xd7,0x3c,0x81,0xae,0xe2,0xde,0x3b,0xc9,0x74,0x4b,0xf8,0xf2,0x01,0xcb,0xb7,0x27,0xda,0xae,0x1f};
    static std::uint64_t multiplicand82    = 0x8015043f8f86bc44;
    static std::uint8_t  product82[32]     = {0xc4,0x53,0xed,0xd1,0x98,0x21,0xbd,0xa3,0x7e,0x21,0x77,0x36,0x0f,0x1c,0xe0,0x27,0xe1,0x85,0xaf,0x2f,0x9d,0xc0,0x48,0x47,0x8d,0x4a,0xf7,0x46,0xa3,0x2f,0x04,0x3c};
    static std::uint64_t carry82           = 0x34410b0ff7109eff;
    uint256_from_bytes(multiplier, multiplier82);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand82);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product82, product_data, 32) != 0 && carry82 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier83[32]  = {0xb7,0xd6,0xed,0x65,0xe0,0xf1,0x92,0xf6,0x29,0x2e,0xf7,0x3f,0xc5,0xcb,0x85,0x5a,0x32,0x15,0x0d,0xf5,0x5c,0x59,0xe6,0xf9,0xad,0x6f,0xa5,0xd7,0x29,0xc3,0x6b,0xb2};
    static std::uint64_t multiplicand83    = 0x60902f69b530ec31;
    static std::uint8_t  product83[32]     = {0x75,0x1b,0x95,0xbb,0xdc,0xb1,0xaf,0xa8,0xf4,0x33,0x6b,0x42,0x86,0x0e,0x62,0x07,0x06,0xf5,0xbe,0x80,0xff,0x82,0x23,0x17,0xae,0x2c,0xf2,0x7a,0x31,0x0f,0xb5,0x12};
    static std::uint64_t carry83           = 0x455823f81c8449d7;
    uint256_from_bytes(multiplier, multiplier83);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand83);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product83, product_data, 32) != 0 && carry83 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier84[32]  = {0xc5,0x92,0x68,0x84,0x5b,0x2a,0x6c,0x73,0xcd,0xd5,0x73,0x58,0xf1,0x0c,0x5c,0xbf,0xf6,0x4f,0xe2,0xf9,0x76,0x70,0xbc,0x20,0x4e,0xec,0x27,0x09,0x9e,0xab,0x98,0xa7};
    static std::uint64_t multiplicand84    = 0x9aefc9692c1f4ac7;
    static std::uint8_t  product84[32]     = {0xec,0x34,0xcf,0xca,0x5f,0xe2,0x03,0x44,0x99,0xbf,0x76,0x80,0xe5,0x1f,0x7f,0xd6,0x15,0xdc,0x89,0x50,0x02,0x6e,0xa5,0xca,0xc7,0x70,0x90,0xdb,0x21,0xbc,0xef,0xd1};
    static std::uint64_t carry84           = 0x779322005192bc1d;
    uint256_from_bytes(multiplier, multiplier84);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand84);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product84, product_data, 32) != 0 && carry84 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier85[32]  = {0x94,0x06,0xfe,0xba,0xc8,0xeb,0x3e,0xeb,0x47,0x49,0xad,0xdd,0x5f,0xb8,0xaa,0x24,0xbc,0xae,0x01,0x69,0x99,0x0d,0xb1,0xfb,0xb6,0x21,0x70,0x33,0xa6,0x72,0xb2,0x39};
    static std::uint64_t multiplicand85    = 0xbec8dc716ac891ac;
    static std::uint8_t  product85[32]     = {0x64,0xba,0xa8,0xda,0xba,0xf3,0x90,0x88,0x43,0x07,0xac,0x06,0x57,0x61,0xb0,0x04,0x59,0x67,0xfd,0x0e,0xfc,0x25,0x5d,0x94,0xee,0x9b,0xd2,0x8a,0xa2,0x8a,0x07,0x4c};
    static std::uint64_t carry85           = 0x6e5155fd3ac964c4;
    uint256_from_bytes(multiplier, multiplier85);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand85);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product85, product_data, 32) != 0 && carry85 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier86[32]  = {0x26,0xaa,0x1b,0x3f,0xde,0x91,0xaa,0x98,0x24,0xd9,0x3c,0x22,0xa1,0x3e,0xef,0x80,0xcd,0x2a,0x28,0x72,0x32,0x4f,0x1d,0x59,0xdd,0xb4,0x39,0xfc,0xbd,0x9b,0x0a,0xa9};
    static std::uint64_t multiplicand86    = 0x1cceb09243657c87;
    static std::uint8_t  product86[32]     = {0x3f,0x2b,0x8b,0x17,0x97,0xda,0xc9,0xf8,0x7c,0x2f,0x6b,0xbb,0xbe,0xf4,0x61,0x1a,0xfc,0xe7,0xd5,0x86,0x9a,0x2f,0x01,0x7b,0x06,0x35,0xa6,0x76,0x85,0x99,0x7b,0x1f};
    static std::uint64_t carry86           = 0x459d287f3aa545e;
    uint256_from_bytes(multiplier, multiplier86);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand86);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product86, product_data, 32) != 0 && carry86 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier87[32]  = {0x56,0x82,0xd5,0x89,0xcb,0xe7,0x73,0x89,0x55,0x3f,0xb1,0xdc,0x51,0xcb,0x37,0xf8,0xe3,0x1a,0xcb,0xc1,0xe8,0xbb,0x9e,0x43,0x69,0x4b,0x9e,0x36,0x7e,0x5f,0x23,0xba};
    static std::uint64_t multiplicand87    = 0xaf68a8b8f3d4d691;
    static std::uint8_t  product87[32]     = {0x44,0x84,0x08,0xf3,0xf2,0x3e,0xde,0x79,0xfb,0x00,0xb0,0xae,0xf4,0x6b,0xc4,0xed,0x9c,0x13,0xc9,0x67,0x8a,0x0a,0xd2,0x2c,0x86,0x8e,0xdd,0xe4,0x3f,0xc8,0xb8,0x5a};
    static std::uint64_t carry87           = 0x3b46ce244ef01469;
    uint256_from_bytes(multiplier, multiplier87);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand87);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product87, product_data, 32) != 0 && carry87 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier88[32]  = {0x8e,0x4a,0x46,0xd0,0x98,0xd4,0x34,0xb6,0xd5,0xcb,0xcd,0xfe,0x5a,0x97,0x2f,0x8d,0x82,0xf8,0x66,0x4b,0x4f,0x39,0x57,0xa9,0x37,0x3a,0x75,0xb0,0x05,0xdd,0x33,0x7d};
    static std::uint64_t multiplicand88    = 0x46ec534d5e85f4f0;
    static std::uint8_t  product88[32]     = {0xef,0x8c,0x7b,0x58,0xe4,0x04,0xde,0xf4,0xe5,0xf8,0xf8,0xcc,0x84,0xa3,0x9c,0x47,0xd7,0x5b,0x05,0xf7,0xcb,0x1d,0xfb,0xb5,0x66,0x0a,0x63,0x08,0xfa,0x64,0x69,0x30};
    static std::uint64_t carry88           = 0x276baa2367ed9310;
    uint256_from_bytes(multiplier, multiplier88);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand88);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product88, product_data, 32) != 0 && carry88 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier89[32]  = {0xfb,0xbb,0x07,0x77,0x9d,0xed,0xc2,0x72,0xa8,0xb3,0xbc,0x05,0xcd,0x3b,0x60,0x32,0x0b,0x20,0x7f,0x1e,0xec,0x7c,0x78,0x0e,0xa8,0x27,0xab,0xe9,0x8e,0x77,0xb4,0x80};
    static std::uint64_t multiplicand89    = 0x62a1ad1b84b21963;
    static std::uint8_t  product89[32]     = {0xfe,0xd4,0xde,0x5f,0x56,0xe0,0xec,0x34,0xf1,0xb9,0xff,0x11,0xc6,0x33,0x42,0xe4,0xfb,0x45,0x4c,0x71,0xb6,0x89,0x9f,0x9b,0x4d,0x16,0x9c,0x09,0x49,0xeb,0x4d,0x80};
    static std::uint64_t carry89           = 0x60fc93b3eff08729;
    uint256_from_bytes(multiplier, multiplier89);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand89);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product89, product_data, 32) != 0 && carry89 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier90[32]  = {0x05,0xc0,0x7e,0xb7,0x89,0x7f,0x58,0xbb,0x2a,0x2e,0xff,0xe1,0xa1,0x7f,0x39,0xe5,0x0e,0xa8,0xad,0x0c,0x5d,0x5f,0x98,0x19,0xf5,0x5c,0x42,0x24,0x72,0x02,0xea,0xc6};
    static std::uint64_t multiplicand90    = 0x7f17098f5cfff548;
    static std::uint8_t  product90[32]     = {0x20,0xa4,0x44,0x24,0x54,0xf7,0x7a,0xa6,0x54,0xd8,0xe1,0x04,0xf7,0x5b,0xa0,0xe4,0x6d,0xb9,0x8d,0xf2,0xe8,0x2e,0x18,0xe2,0x64,0x32,0x33,0x3d,0xde,0xbb,0x85,0xb0};
    static std::uint64_t carry90           = 0x2db035f6cc5b19c;
    uint256_from_bytes(multiplier, multiplier90);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand90);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product90, product_data, 32) != 0 && carry90 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier91[32]  = {0x33,0x9b,0x44,0xc8,0xc9,0x64,0xa5,0x3e,0x5f,0xe1,0x17,0x77,0x0b,0x89,0x63,0xb0,0x0b,0x1b,0x8c,0x4b,0xde,0xce,0x00,0x56,0x65,0xb5,0xa6,0x48,0x4b,0x6b,0x8b,0xff};
    static std::uint64_t multiplicand91    = 0xe600e3b149d26dbb;
    static std::uint8_t  product91[32]     = {0x04,0x18,0x6e,0x53,0x24,0x2f,0x51,0xd3,0x09,0xb9,0x3e,0x9d,0x2c,0x02,0x19,0x40,0xe6,0xbd,0x57,0xaf,0xb9,0x4b,0xf6,0x7b,0x44,0xcb,0xb0,0x5f,0x70,0x58,0xd6,0x45};
    static std::uint64_t carry91           = 0x2e5dadb2d02ab7f8;
    uint256_from_bytes(multiplier, multiplier91);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand91);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product91, product_data, 32) != 0 && carry91 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier92[32]  = {0x6c,0x01,0x73,0x38,0x83,0xea,0xf2,0x3c,0x55,0x08,0x75,0x95,0xe3,0x3e,0x7d,0x56,0x79,0xc5,0x49,0x5d,0xf5,0x3c,0xbf,0xea,0x2a,0xf2,0x01,0xbe,0xda,0x86,0x3c,0x94};
    static std::uint64_t multiplicand92    = 0x1b818757cb63b3a8;
    static std::uint8_t  product92[32]     = {0x6b,0xef,0x54,0x47,0xc9,0xb2,0xd9,0x0b,0x81,0xae,0xc4,0x91,0x2a,0x98,0xb7,0x79,0x84,0xf2,0xba,0x2b,0x8b,0x0d,0xb3,0xcd,0x9a,0x45,0x2e,0x4a,0x0d,0xaf,0x3d,0x20};
    static std::uint64_t carry92           = 0xb9accfbd3746d6f;
    uint256_from_bytes(multiplier, multiplier92);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand92);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product92, product_data, 32) != 0 && carry92 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier93[32]  = {0xd7,0xa4,0x45,0x00,0xa6,0xce,0x58,0xa1,0x1f,0x0f,0x0a,0xf4,0xb1,0x12,0x4c,0x02,0xe9,0xcf,0x54,0x6f,0xe8,0x0d,0x7f,0x4e,0x52,0xaa,0xa5,0xcd,0xe1,0x88,0xb1,0x32};
    static std::uint64_t multiplicand93    = 0xf550c77c44372edd;
    static std::uint8_t  product93[32]     = {0xc4,0x93,0x9c,0xc8,0x41,0xa8,0x7e,0x72,0x66,0x2e,0xe5,0xf0,0x28,0x4c,0xc5,0x24,0x98,0xed,0x23,0x39,0x73,0x09,0xb6,0x83,0x0f,0xd3,0x96,0xe9,0x9c,0x95,0xf4,0x2a};
    static std::uint64_t carry93           = 0xcea441688e82a761;
    uint256_from_bytes(multiplier, multiplier93);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand93);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product93, product_data, 32) != 0 && carry93 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier94[32]  = {0x89,0x31,0x2d,0x70,0x9e,0x38,0xcd,0xff,0xcc,0xee,0x28,0x8e,0x69,0x4d,0x0b,0x6a,0xcf,0xfb,0x46,0x48,0x2a,0x0f,0x73,0xd0,0xc0,0xb2,0xd0,0x13,0x27,0x88,0x66,0x0b};
    static std::uint64_t multiplicand94    = 0xff0ba6614295135f;
    static std::uint8_t  product94[32]     = {0x7b,0x2e,0xea,0x25,0x74,0xa2,0x16,0x21,0xc9,0xc7,0x96,0x96,0x9f,0x01,0x9f,0x16,0x36,0x2d,0x8a,0xbf,0xf7,0x63,0x8d,0xe2,0x97,0x76,0x9b,0xe8,0x05,0x97,0xaf,0x15};
    static std::uint64_t carry94           = 0x88ae3a8a2439319f;
    uint256_from_bytes(multiplier, multiplier94);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand94);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product94, product_data, 32) != 0 && carry94 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier95[32]  = {0x77,0x5d,0x7a,0xd3,0xd8,0x27,0xa1,0xf8,0x77,0x56,0x57,0x2e,0x7b,0x44,0x44,0x51,0x31,0xfc,0xf0,0x7f,0xf9,0x57,0xbb,0x3f,0xd8,0x0b,0x49,0xec,0xfc,0x2b,0x09,0x9f};
    static std::uint64_t multiplicand95    = 0x17ba77aed22e7ad3;
    static std::uint8_t  product95[32]     = {0x20,0x70,0x98,0x85,0xbc,0x73,0xbc,0x52,0xbf,0xd2,0x61,0x2b,0xcd,0x84,0x78,0xee,0xfa,0x17,0xea,0x56,0x6f,0x1e,0x54,0xad,0xcf,0x38,0xef,0x32,0x82,0xa0,0xb4,0x0d};
    static std::uint64_t carry95           = 0xb1057c23df8eca3;
    uint256_from_bytes(multiplier, multiplier95);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand95);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product95, product_data, 32) != 0 && carry95 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier96[32]  = {0xb8,0x44,0xa4,0xcb,0xca,0xc3,0xc5,0xdf,0x59,0x45,0x25,0x0a,0x1d,0xc7,0x03,0x9b,0x0b,0x81,0x9c,0x23,0xc9,0xe4,0xd8,0x31,0xf0,0xb0,0x2c,0xc4,0x27,0xa9,0x37,0x12};
    static std::uint64_t multiplicand96    = 0xd0e0eeca78791eac;
    static std::uint8_t  product96[32]     = {0xe1,0x33,0x47,0xcb,0xbf,0x2d,0x1c,0x4c,0xf9,0xef,0xcc,0x59,0xfc,0x98,0xda,0xce,0x4d,0xc1,0x8f,0xe8,0x50,0x02,0x54,0x78,0xe3,0x63,0x51,0x6f,0xf1,0xa7,0x1c,0x18};
    static std::uint64_t carry96           = 0x9659add755275727;
    uint256_from_bytes(multiplier, multiplier96);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand96);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product96, product_data, 32) != 0 && carry96 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier97[32]  = {0x97,0xec,0x2c,0x13,0x1e,0xe3,0xc2,0x5c,0x7e,0xf9,0x28,0x8e,0x97,0xa0,0x1f,0x4a,0xa8,0x5f,0xe4,0xaa,0x84,0xec,0x37,0x0e,0x7c,0x56,0x98,0xe5,0x14,0xde,0x17,0x56};
    static std::uint64_t multiplicand97    = 0x339af2f206b73011;
    static std::uint8_t  product97[32]     = {0x2d,0x50,0x1e,0xdc,0x3a,0x85,0x19,0xb1,0xe1,0x09,0x1e,0x13,0x8d,0xaf,0x0f,0x59,0x93,0x14,0x80,0x2d,0xd3,0xa3,0x2b,0x4b,0x00,0x67,0x95,0xba,0xb9,0x99,0xac,0xb6};
    static std::uint64_t carry97           = 0x1ea00107358ff164;
    uint256_from_bytes(multiplier, multiplier97);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand97);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product97, product_data, 32) != 0 && carry97 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier98[32]  = {0xb8,0xe9,0x63,0x2a,0x22,0x50,0xc4,0x8a,0x32,0xc3,0x30,0xbe,0x01,0x08,0xc6,0x5c,0x5c,0x51,0x08,0x08,0x07,0x3d,0x6b,0xa8,0xea,0x33,0xac,0x8d,0xa8,0x25,0x63,0xb4};
    static std::uint64_t multiplicand98    = 0x586bf96d89ee31e8;
    static std::uint8_t  product98[32]     = {0xcf,0xca,0x79,0x93,0x63,0xc0,0x3a,0x44,0xfe,0x6d,0xee,0x72,0xb2,0x59,0x00,0x24,0xd2,0x49,0x34,0x02,0x99,0x7c,0xac,0x0d,0xdf,0xab,0x5a,0x51,0x8f,0x4f,0xcf,0x20};
    static std::uint64_t carry98           = 0x3fde37cd0edc42ba;
    uint256_from_bytes(multiplier, multiplier98);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand98);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product98, product_data, 32) != 0 && carry98 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }

    static std::uint8_t  multiplier99[32]  = {0x07,0x4a,0xe0,0x06,0x4f,0x5f,0x91,0xb5,0xd2,0x6c,0xb7,0xe8,0x17,0x54,0x93,0x4f,0x7d,0x45,0xa5,0xff,0x52,0x34,0xa2,0xb3,0x55,0x25,0x59,0x37,0x72,0xb3,0xc9,0x5b};
    static std::uint64_t multiplicand99    = 0xd91fc7e4f1f60005;
    static std::uint8_t  product99[32]     = {0x1b,0x04,0x5d,0xb1,0xa9,0x59,0x1f,0x1b,0x10,0xc2,0xd3,0xcd,0x14,0xa2,0xb5,0x56,0x2a,0x57,0x10,0xc9,0x72,0x12,0x01,0x61,0x06,0xa8,0x49,0x73,0x65,0xf4,0xee,0xc7};
    static std::uint64_t carry99           = 0x62f5fa833c48b41;
    uint256_from_bytes(multiplier, multiplier99);
    carry = uint256_mul_carry_uint64(product, multiplier, multiplicand99);
    uint256_to_bytes(product_data, product);
    if (std::memcmp(product99, product_data, 32) != 0 && carry99 != carry)
    {
        throw std::runtime_error("err in x64::uint256_mul_carry_uint64");
    }
}
#else
void test_uint256_x64_mul_carry_uint64()
{
}
#endif