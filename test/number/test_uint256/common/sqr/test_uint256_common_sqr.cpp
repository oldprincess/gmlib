#include <gmlib/number/internal/uint256_common.h>
#include <stdexcept>
#include <cstring>

using namespace number::internal::common;

void test_uint256_common_sqr()
{
    uint256_t    multiplier, product[2];
    std::uint8_t product_data[64];

    static std::uint8_t multiplier0[32]   = {0x37,0x97,0xf7,0x1a,0xf2,0xfa,0x4a,0xe6,0xff,0x00,0x6b,0xa2,0xc4,0x0f,0xa2,0xe1,0xd8,0x04,0xa8,0xad,0x2b,0x4c,0xf3,0xd5,0x98,0xb8,0x9d,0x66,0x6e,0x11,0x03,0xc5};
    static std::uint8_t product0[64]      = {0x0c,0x12,0xa6,0x63,0x04,0xb7,0x33,0x28,0xdc,0x12,0x22,0x10,0xa1,0x3d,0x2a,0x02,0x96,0x4d,0x91,0x6f,0x26,0xf3,0x26,0xdc,0x22,0x2e,0x9f,0xd1,0xec,0x90,0x55,0xbf,0x6e,0x07,0x7b,0xf2,0x2e,0x65,0xe2,0x64,0x00,0xb5,0xe0,0x03,0x09,0x2f,0x2c,0xb9,0x7d,0x06,0xdb,0x14,0x27,0x29,0x7c,0xbe,0x1e,0xb1,0x43,0x5a,0xcc,0x38,0x35,0x99};
    uint256_from_bytes(multiplier, multiplier0);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product0, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier1[32]   = {0x26,0x05,0x79,0xf4,0xe2,0x2f,0x5d,0xcc,0x53,0xc4,0x26,0x00,0x28,0x9b,0xc7,0x8c,0xa8,0x5a,0x0e,0xdc,0xff,0x48,0x62,0xef,0x61,0xe2,0xc7,0x49,0x62,0x20,0x63,0xed};
    static std::uint8_t product1[64]      = {0x05,0xa5,0xa0,0x52,0xb0,0xd0,0x4d,0xc3,0x0b,0xa7,0x20,0x00,0xf9,0x2f,0x99,0x14,0x94,0x74,0x15,0x6c,0x14,0x83,0x00,0x96,0x6e,0x5c,0xd4,0x80,0xfb,0x7e,0x18,0xd9,0x4c,0xfe,0x98,0x42,0x03,0x2b,0xb1,0x97,0xa0,0x8f,0x59,0xfe,0xed,0xa0,0xcf,0x5f,0x5b,0x73,0x52,0xb2,0x75,0x5d,0x01,0x07,0x7f,0xe4,0x43,0xc4,0x96,0x41,0x29,0x69};
    uint256_from_bytes(multiplier, multiplier1);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product1, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier2[32]   = {0x6f,0xb7,0x42,0xde,0x0b,0xce,0x0f,0x1c,0x5a,0xb4,0xf3,0x86,0xf8,0x38,0x62,0xde,0x4d,0x8e,0x35,0xd9,0x79,0x0c,0xab,0x69,0x1f,0x21,0x2a,0x28,0x05,0xc3,0x91,0x8f};
    static std::uint8_t product2[64]      = {0x30,0xc0,0x6f,0x2d,0x39,0x28,0xd0,0x62,0xea,0xea,0xc8,0xfe,0x97,0xf1,0x9a,0x58,0x68,0xa9,0x72,0x8c,0xce,0xa6,0x82,0xc4,0xde,0x01,0xcf,0x00,0xd9,0xef,0x22,0xa3,0x0f,0x3a,0x8d,0x06,0x9d,0xfb,0xa7,0xdc,0xff,0xac,0xa3,0x07,0xb6,0xcb,0xe4,0x7c,0xe4,0xf8,0x7d,0x66,0x68,0xf2,0x73,0x20,0x21,0xdf,0xa1,0xc6,0xa8,0x9d,0x4d,0xe1};
    uint256_from_bytes(multiplier, multiplier2);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product2, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier3[32]   = {0xf5,0x98,0xdd,0xba,0x86,0xe8,0x25,0xa7,0x3f,0xca,0xdc,0x8b,0x7f,0x46,0xaa,0xd5,0x93,0x04,0x66,0x99,0x30,0xba,0xde,0xc2,0x80,0xca,0xfd,0x14,0x44,0x61,0x86,0xc4};
    static std::uint8_t product3[64]      = {0xeb,0x9d,0xf3,0xaf,0x13,0xc4,0x20,0x93,0xf8,0x27,0x60,0x25,0x36,0x4b,0x7f,0xa3,0x53,0x10,0x34,0xcf,0x70,0x1a,0x85,0xed,0x52,0xc3,0x0d,0x62,0x37,0xf8,0x1f,0x6c,0xdf,0xbd,0xfd,0x1c,0x59,0x57,0x78,0x7d,0xfb,0xd4,0x74,0x7d,0xc4,0xb4,0x8f,0xb7,0xa0,0x91,0x8d,0xe2,0xc0,0xea,0xb2,0x80,0x33,0x30,0x6b,0x5f,0x87,0x79,0xc6,0x10};
    uint256_from_bytes(multiplier, multiplier3);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product3, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier4[32]   = {0xf1,0x8e,0xce,0xdd,0x54,0x4f,0x1c,0xd8,0x21,0x1c,0x8a,0x44,0x8e,0x09,0xc6,0xe6,0xe2,0x50,0x12,0x61,0x66,0x9c,0x70,0xef,0x6b,0xc4,0xdb,0x14,0xa6,0xe7,0xcc,0x93};
    static std::uint8_t product4[64]      = {0xe3,0xee,0x31,0x26,0xdd,0x6f,0x6f,0x1c,0xec,0xe4,0x1d,0xd2,0x37,0xa8,0x32,0x5c,0xcd,0x71,0x98,0x71,0xb4,0x66,0xd3,0x03,0x08,0x44,0x69,0x1a,0x6c,0xc5,0xff,0x80,0xe3,0x03,0x84,0xef,0x36,0x85,0xbc,0xe3,0xee,0x90,0xe0,0xab,0x4c,0x62,0x14,0x0c,0x99,0x1b,0x1e,0x0a,0x65,0x9a,0x49,0xa9,0x3c,0x24,0xe8,0x29,0x78,0xc4,0x9c,0x69};
    uint256_from_bytes(multiplier, multiplier4);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product4, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier5[32]   = {0x59,0x92,0x2e,0x57,0x95,0xcd,0x29,0xe3,0x87,0x29,0x9b,0x6c,0xb2,0xce,0x56,0xf6,0x94,0x49,0xf2,0x6d,0x4b,0xc5,0x24,0xf9,0x49,0x4f,0x16,0x1b,0x54,0xc3,0xe8,0xd1};
    static std::uint8_t product5[64]      = {0x1f,0x56,0xf7,0xb1,0xca,0x73,0x1c,0xf0,0xdf,0xa9,0xcd,0xee,0xa7,0x09,0xb3,0x0a,0x17,0x06,0x34,0x39,0x2d,0xd0,0x0a,0x01,0x26,0x50,0x26,0x79,0xf3,0x55,0xd1,0xbc,0x09,0x70,0x1b,0x87,0x8a,0xc5,0xd8,0x21,0x08,0x06,0x61,0xe8,0x03,0xff,0x74,0x2a,0xfa,0xfb,0x89,0xf5,0x03,0x5e,0x6f,0xbf,0x8c,0x66,0x2e,0xcb,0xaa,0x21,0x7a,0xa1};
    uint256_from_bytes(multiplier, multiplier5);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product5, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier6[32]   = {0x50,0x37,0x41,0x77,0xce,0xdc,0x90,0x82,0xf3,0x79,0x50,0x91,0x12,0xe7,0x99,0x89,0xed,0x17,0xa0,0x4e,0xf9,0x18,0xa6,0xec,0x23,0xb1,0x80,0x9c,0xf7,0x61,0x32,0x6e};
    static std::uint8_t product6[64]      = {0x19,0x22,0x94,0xd8,0x13,0x82,0xcc,0x35,0xea,0x09,0x00,0x78,0xb2,0x56,0xbd,0x03,0xf9,0xe9,0x37,0x2e,0xf3,0xf4,0xc0,0xb1,0x92,0xa1,0x57,0xfb,0x01,0x5f,0x1d,0x1f,0x53,0x64,0xb3,0x36,0x30,0xde,0xa6,0xd2,0xcf,0xf6,0x32,0x71,0xe4,0x8d,0x8b,0x08,0x77,0xbc,0x67,0xd3,0x9e,0x8b,0xa2,0xa1,0x70,0x0c,0x2a,0x47,0x85,0x4b,0x27,0x44};
    uint256_from_bytes(multiplier, multiplier6);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product6, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier7[32]   = {0xc1,0xfd,0x8e,0xf6,0x66,0x33,0xcf,0x6f,0xaf,0x03,0xdf,0xb9,0x2a,0x7f,0x87,0x67,0x7b,0x2b,0xc4,0xa6,0x09,0x16,0x9f,0x3f,0x4f,0x78,0xe0,0x00,0x8f,0xa1,0x78,0x95};
    static std::uint8_t product7[64]      = {0x93,0x00,0x4c,0xb3,0x68,0xf6,0x67,0xb8,0x77,0x23,0xa9,0x93,0x5b,0xc2,0x4c,0xd3,0x04,0x04,0xca,0x7b,0xfb,0x10,0x65,0x2a,0x52,0x93,0x1f,0x18,0x43,0x12,0x75,0x39,0x34,0x3c,0x90,0xef,0x14,0x5b,0x45,0x52,0x13,0x4b,0x1d,0xea,0x90,0x72,0xd1,0x94,0x1c,0xb7,0x59,0x7b,0x96,0x0b,0xba,0x7d,0xe5,0x4a,0x8a,0x8f,0x5a,0x36,0x06,0xb9};
    uint256_from_bytes(multiplier, multiplier7);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product7, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier8[32]   = {0x70,0x39,0xed,0x8d,0x63,0x71,0xfe,0x40,0x5d,0xc8,0x7f,0xb3,0x4c,0x6d,0x1c,0xf1,0x4f,0x53,0x09,0x8d,0x0e,0x07,0x53,0x98,0xf5,0x17,0x21,0x61,0x0a,0x9f,0x36,0x13};
    static std::uint8_t product8[64]      = {0x31,0x32,0xbc,0xf7,0x5c,0x69,0x1f,0x73,0x4d,0xaf,0xd0,0xfa,0x85,0xe5,0xd0,0xfc,0x8e,0x0f,0x75,0xdb,0xc8,0x00,0x01,0x72,0xd4,0x12,0x8d,0xd3,0xe7,0xfd,0x26,0x67,0x4d,0x5e,0x6f,0xba,0x4e,0xd4,0x1d,0xf9,0x42,0xf2,0xf7,0xf7,0xb5,0x8d,0x2f,0x43,0x15,0xba,0xbd,0xa7,0xa5,0x49,0x58,0x32,0x2e,0x72,0xb3,0xa3,0xb3,0x06,0x05,0x69};
    uint256_from_bytes(multiplier, multiplier8);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product8, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier9[32]   = {0xe4,0xa0,0x41,0x84,0x97,0x03,0x01,0x34,0x8b,0xd5,0x75,0x97,0x02,0x81,0x5b,0xb8,0xd7,0xee,0x9d,0xad,0xd6,0x30,0xc1,0xe8,0x2f,0x0a,0xa6,0x8b,0x61,0x0a,0x0c,0xff};
    static std::uint8_t product9[64]      = {0xcc,0x2d,0xd9,0x06,0x23,0x7e,0xb7,0x42,0xb5,0x8d,0x7c,0xef,0x97,0x44,0x0b,0xad,0xda,0x2c,0x83,0xb1,0xb5,0x52,0xc0,0xff,0x84,0x3d,0x7c,0x04,0xac,0xe8,0x8c,0x9f,0x99,0x16,0x24,0xff,0x85,0x11,0xc3,0x38,0xf5,0x72,0xa5,0x07,0x9e,0x18,0xb2,0x6e,0xcd,0x3c,0x76,0xae,0xda,0x4e,0x5f,0x7a,0x34,0x79,0x6f,0x28,0x42,0x94,0xe6,0x01};
    uint256_from_bytes(multiplier, multiplier9);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product9, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier10[32]   = {0x53,0xed,0x9a,0xba,0x69,0x98,0x86,0xea,0x43,0x7d,0x2a,0x70,0xbb,0x46,0x35,0x44,0xba,0xf4,0x8c,0xea,0x28,0x74,0x24,0xec,0x2e,0xfa,0x94,0x07,0xd9,0x39,0x79,0x25};
    static std::uint8_t product10[64]      = {0x1b,0x83,0xee,0xdc,0xbb,0x25,0x3a,0xae,0xd5,0x08,0x7e,0x6e,0xff,0xc2,0x7a,0x23,0x27,0x21,0x2b,0x99,0x9e,0xef,0x78,0xd2,0xad,0xb0,0xb9,0x71,0xa5,0x75,0x98,0x0c,0xfd,0x47,0x3a,0x65,0x7e,0x86,0x89,0x06,0x55,0xd2,0xcb,0x10,0x55,0x96,0xa3,0xa6,0x67,0x5a,0xe7,0x9e,0x4c,0x8f,0xc3,0x69,0xf5,0xcd,0xe4,0x4d,0xe5,0xcd,0xff,0x59};
    uint256_from_bytes(multiplier, multiplier10);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product10, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier11[32]   = {0xbc,0x36,0x60,0x1a,0xbc,0x9a,0x01,0x53,0xf9,0x60,0x68,0x23,0x04,0x78,0xde,0xb7,0xb3,0x97,0x12,0xc4,0xff,0x73,0xbe,0xe1,0xda,0x9f,0x87,0x16,0x80,0xbd,0x5c,0xa2};
    static std::uint8_t product11[64]      = {0x8a,0x5f,0xe8,0xb3,0xf4,0x5d,0xd3,0x2a,0x40,0xec,0x9c,0x4f,0x42,0x56,0x39,0x02,0x75,0xd0,0x0f,0x79,0x0b,0x4c,0x18,0xf9,0x54,0x98,0x7c,0xe6,0x78,0x83,0xc8,0xa4,0x35,0x8f,0x52,0xc7,0x71,0x3b,0x8c,0xdf,0xb9,0x2e,0x90,0x77,0x69,0xe6,0x5d,0x52,0x9c,0x6e,0x7a,0xde,0xc0,0x68,0x77,0x83,0x12,0x38,0xb0,0x8b,0xe8,0xb8,0xd6,0x84};
    uint256_from_bytes(multiplier, multiplier11);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product11, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier12[32]   = {0x1c,0xaf,0x95,0x8e,0xaf,0x15,0xc3,0x5d,0xc5,0xaa,0x6e,0x78,0x9b,0x98,0xdc,0x0a,0x3d,0xe0,0xc7,0x66,0xc9,0x1a,0x8f,0x98,0xab,0x37,0x53,0x94,0xf3,0x83,0xaa,0x55};
    static std::uint8_t product12[64]      = {0x03,0x36,0xe1,0x25,0x06,0xbf,0x89,0xd3,0xa6,0xc0,0x2e,0x40,0xef,0x52,0x8c,0x85,0x80,0x86,0x10,0x65,0xf5,0xe2,0x57,0x43,0xfb,0x83,0xa8,0x42,0xb5,0x1d,0x01,0xb4,0x74,0xd9,0xfd,0xdb,0x47,0xf1,0x27,0xa4,0xcb,0x9a,0x61,0x39,0x73,0x26,0x0c,0x53,0xca,0xb8,0xb8,0x80,0x5a,0x85,0xaf,0xa2,0x96,0xd9,0x49,0x5d,0x22,0x53,0x00,0x39};
    uint256_from_bytes(multiplier, multiplier12);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product12, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier13[32]   = {0x1a,0x9e,0x67,0x8d,0xc1,0x05,0x44,0xea,0x7e,0xc4,0x3e,0x52,0x79,0x0f,0x73,0x49,0x3e,0xe9,0x35,0x5f,0x7e,0x2c,0xcc,0x74,0x0e,0x47,0xe1,0x9e,0x57,0xfc,0x34,0x61};
    static std::uint8_t product13[64]      = {0x02,0xc4,0x8f,0x0c,0xc8,0x12,0xb4,0x51,0x21,0xff,0xe5,0x3c,0x93,0x91,0xda,0x88,0x01,0x60,0x7f,0x51,0x61,0x2e,0xe0,0xcf,0xd9,0xc4,0x74,0x78,0x9e,0x4a,0x9d,0x56,0xea,0x33,0x05,0xf6,0xc7,0x7e,0x10,0x4c,0xe3,0x2a,0xef,0xd7,0x85,0x1f,0x31,0xe8,0xfe,0x00,0x50,0xd5,0x6b,0xae,0x2c,0x21,0xb7,0x6e,0x8d,0xcd,0x17,0xaf,0x8c,0xc1};
    uint256_from_bytes(multiplier, multiplier13);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product13, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier14[32]   = {0xf6,0x78,0x02,0xdd,0x7f,0x9f,0x1e,0x82,0x36,0x2e,0x52,0xc4,0xa7,0xcf,0xba,0xfc,0x0b,0x62,0x6b,0x27,0x9a,0x3a,0xdf,0x9d,0x4f,0x8a,0x7a,0xc1,0x06,0x05,0x96,0xa2};
    static std::uint8_t product14[64]      = {0xed,0x4a,0xdd,0xc4,0x60,0xf5,0xa9,0x72,0xef,0x07,0xcb,0x55,0xeb,0x4a,0x92,0xdc,0x8a,0x72,0xe3,0x7a,0x0a,0x8c,0xa7,0x12,0x34,0x09,0x70,0x4a,0x4b,0xc1,0x46,0xeb,0x47,0xc6,0x15,0x07,0x02,0x42,0x82,0x3f,0xbf,0x5a,0xf1,0xf6,0xdb,0x49,0xe7,0xaf,0x86,0xca,0x61,0x09,0xfd,0x5f,0x7a,0xf9,0xca,0xcb,0xcb,0x72,0xd2,0xf6,0x3e,0x84};
    uint256_from_bytes(multiplier, multiplier14);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product14, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier15[32]   = {0x07,0x37,0x15,0x63,0x3a,0x70,0xf8,0xe1,0xdc,0xd9,0x5d,0xa3,0x94,0xa2,0xc1,0x67,0xd2,0x7f,0xa0,0xb2,0x1c,0xdb,0x5a,0xa8,0x89,0x69,0x08,0xc3,0xc1,0x82,0x98,0xf1};
    static std::uint8_t product15[64]      = {0x00,0x34,0x0f,0x05,0x9f,0x9e,0xb8,0x34,0x14,0xad,0xb8,0x12,0xb7,0x90,0x27,0x35,0x9a,0x41,0xb5,0x8a,0x75,0x45,0x07,0x64,0x48,0xf7,0x4d,0x56,0x24,0x14,0x96,0x4d,0xb8,0x36,0x0d,0x23,0x73,0xad,0xc2,0x07,0xfb,0x82,0x1c,0xd6,0x31,0xf4,0x9b,0xbb,0xca,0xf0,0x51,0x81,0xe9,0x47,0x86,0xeb,0xf0,0x7c,0x3c,0x61,0x12,0x23,0x12,0xe1};
    uint256_from_bytes(multiplier, multiplier15);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product15, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier16[32]   = {0xd4,0x8b,0x44,0x73,0xef,0xa1,0xce,0x97,0x82,0x8d,0xf7,0xf0,0x3e,0x71,0xec,0x64,0x26,0x03,0x9c,0x4e,0xec,0xcc,0xed,0x49,0x92,0x2c,0x3d,0x9e,0x56,0x75,0x9b,0xf4};
    static std::uint8_t product16[64]      = {0xb0,0x76,0xf5,0x23,0x6d,0x18,0x03,0xb0,0x6a,0x32,0x88,0x50,0x44,0xa4,0x5d,0x8d,0x65,0x83,0xbc,0x1c,0xee,0x2b,0x7d,0x82,0xdf,0x55,0x97,0xf0,0x9d,0xad,0x6a,0xc6,0x94,0x19,0x74,0x2b,0x93,0xa8,0x99,0x93,0xd6,0x4d,0xeb,0xd4,0x60,0xf7,0x03,0x72,0xdb,0xff,0xd9,0xfb,0x56,0x95,0x6e,0x9a,0xce,0x92,0x03,0xff,0xdc,0x09,0x60,0x90};
    uint256_from_bytes(multiplier, multiplier16);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product16, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier17[32]   = {0x67,0x95,0xb7,0x5c,0xda,0x22,0x1d,0x8d,0xf2,0x93,0x0c,0xe5,0xff,0xeb,0xfc,0x6f,0x64,0xef,0xa2,0xe1,0x9f,0x45,0xbf,0xa9,0xaa,0x58,0x9b,0x23,0x20,0xfc,0xbc,0x9d};
    static std::uint8_t product17[64]      = {0x29,0xe9,0xd1,0x1b,0xac,0xf3,0x41,0x08,0xe9,0x13,0x01,0x44,0x4c,0x0e,0x3f,0xba,0x63,0x21,0x95,0x33,0x1f,0x31,0xdc,0xd7,0x55,0x42,0x95,0x63,0x1d,0x1c,0xc6,0x51,0x0f,0xce,0xf0,0xa1,0xdc,0xa3,0x9c,0x5f,0x2c,0xc6,0x8f,0x9d,0x90,0xc3,0x5e,0x04,0x85,0xdf,0x06,0xd3,0x0f,0xbf,0x34,0x50,0x45,0xb1,0xd9,0x99,0x20,0x0e,0xf8,0x49};
    uint256_from_bytes(multiplier, multiplier17);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product17, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier18[32]   = {0x4d,0x9d,0x87,0x02,0xf5,0x3f,0x69,0x28,0x5a,0x38,0x71,0x18,0x03,0x4c,0x69,0x50,0x4e,0xd8,0x5d,0x72,0x21,0x21,0x97,0x4f,0x55,0xa2,0xad,0x78,0x36,0xfe,0x85,0x78};
    static std::uint8_t product18[64]      = {0x17,0x88,0x24,0x26,0xa8,0x5d,0x13,0xba,0xe2,0x9d,0x40,0x08,0x43,0x57,0xab,0x8c,0x5e,0x89,0xdd,0x5e,0x85,0x59,0xc8,0xb8,0x72,0xb4,0x82,0xbd,0xbc,0xc1,0x33,0xc1,0xbf,0x01,0x02,0xb8,0xc6,0x1c,0xa0,0x1e,0x2a,0xe4,0x55,0x84,0x7b,0x12,0x4d,0x21,0xd9,0x04,0x2a,0x8b,0x61,0xb0,0x41,0x9a,0x36,0xb1,0xad,0xdb,0xbf,0xb5,0xe8,0x40};
    uint256_from_bytes(multiplier, multiplier18);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product18, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier19[32]   = {0x0e,0x40,0x91,0xed,0xb3,0xef,0x3a,0x85,0xc8,0xc5,0xe8,0xa9,0x32,0xbe,0x5a,0x53,0x3c,0x9e,0x3d,0xcc,0xf9,0x20,0x05,0x76,0x30,0x6b,0x99,0xfb,0x13,0x08,0x0d,0x45};
    static std::uint8_t product19[64]      = {0x00,0xcb,0x20,0x3f,0x49,0xb7,0x44,0x8f,0x8c,0x90,0x5c,0xf2,0x30,0x19,0x2f,0x9a,0xcc,0x6e,0x57,0xbd,0x20,0xc9,0x5e,0x16,0x0d,0x52,0x98,0x51,0xca,0x31,0x05,0x9b,0xb3,0x28,0x6d,0x63,0xb2,0x31,0xb2,0x4b,0x0b,0xb2,0xe7,0x7e,0x24,0x8a,0xb3,0x04,0xae,0x7c,0xbc,0xf7,0xa2,0xd3,0xee,0x4e,0xea,0xbe,0xb1,0x87,0x13,0x00,0x14,0x99};
    uint256_from_bytes(multiplier, multiplier19);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product19, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier20[32]   = {0x40,0xa1,0x01,0x26,0xb5,0xf1,0x84,0x57,0x96,0x66,0x1c,0x0a,0xa0,0x13,0x91,0x1b,0xc2,0x34,0xd8,0xe8,0xb5,0xf4,0xd1,0x70,0x76,0x4d,0xa7,0x5d,0xb4,0x01,0xa8,0x06};
    static std::uint8_t product20[64]      = {0x10,0x50,0xe5,0xd5,0xcd,0xaa,0xef,0x3a,0xa9,0x69,0x9c,0xa0,0x53,0xef,0x8a,0x8a,0xc4,0x00,0xe4,0x9b,0x82,0x05,0xf1,0xa0,0xe7,0x0d,0x70,0x6c,0x73,0x05,0xa1,0x21,0xdb,0x12,0x5b,0x81,0x39,0x90,0x0c,0xf3,0x36,0x09,0xed,0x64,0xb4,0xa9,0x7f,0x76,0x7a,0x09,0x45,0x61,0x7a,0xf8,0x04,0x4b,0x0c,0x9a,0x3c,0xa7,0x2e,0x53,0xe0,0x24};
    uint256_from_bytes(multiplier, multiplier20);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product20, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier21[32]   = {0xd1,0x7c,0x9d,0x78,0xc5,0xb8,0xea,0x88,0x55,0xd6,0xcb,0xc2,0xde,0xe5,0x41,0x16,0xa0,0xcd,0xdc,0xaa,0x6c,0x84,0xf4,0xc3,0xf1,0x52,0x46,0x36,0x88,0xc0,0xab,0xcb};
    static std::uint8_t product21[64]      = {0xab,0x6c,0xb5,0xc8,0x20,0xb4,0xd5,0x94,0x95,0xf9,0x18,0x6b,0x52,0xfb,0xce,0x5a,0xf9,0xed,0x05,0xfa,0x52,0x88,0x2b,0x3c,0x94,0x3b,0x0f,0x8f,0x0e,0x11,0x43,0x9b,0xb1,0xbc,0x77,0xa6,0xd5,0xaa,0x7b,0x7c,0x11,0x24,0x8b,0x41,0xf5,0x77,0xd5,0xc2,0x72,0x91,0x97,0xa7,0xca,0x04,0xec,0x8b,0x9c,0x54,0xc5,0x2d,0xd3,0xc8,0xd2,0xf9};
    uint256_from_bytes(multiplier, multiplier21);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product21, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier22[32]   = {0x06,0xd3,0xd5,0x71,0x78,0x1f,0xbc,0x51,0x98,0x63,0x5f,0x36,0x73,0xb0,0x0e,0x86,0x5a,0xda,0xa2,0xbb,0xf6,0xf6,0x39,0x68,0xce,0x77,0x8e,0x6b,0x41,0xed,0x75,0x16};
    static std::uint8_t product22[64]      = {0x00,0x2e,0x9d,0x4a,0xdc,0xa3,0x85,0x54,0x55,0x67,0xa8,0x5f,0x0a,0x81,0xa2,0xa3,0x30,0x69,0xde,0x19,0xce,0x9a,0x98,0x50,0x00,0xe8,0x21,0x91,0x74,0x5e,0x41,0xd8,0x43,0x56,0x0d,0x85,0x1d,0xd2,0x19,0xbb,0xf7,0xd4,0xe5,0xd0,0x7a,0xb0,0x74,0x3f,0x38,0x7c,0x13,0x12,0xf2,0x67,0x8b,0x25,0xdd,0xd2,0xba,0x1b,0x2c,0x49,0x1d,0xe4};
    uint256_from_bytes(multiplier, multiplier22);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product22, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier23[32]   = {0x87,0x2f,0xca,0x54,0x78,0x4f,0xa2,0x01,0x5d,0x8c,0x0e,0xab,0x6b,0xc6,0x8e,0x34,0x86,0x96,0x3e,0x22,0xaf,0xe3,0x48,0xfd,0x60,0x1b,0x03,0x88,0x65,0xa9,0x96,0x32};
    static std::uint8_t product23[64]      = {0x47,0x63,0x70,0x51,0x01,0xd1,0x93,0xd7,0xc5,0xa1,0x4a,0x13,0x44,0xbd,0xe8,0x10,0x92,0xa2,0xe2,0x74,0x91,0xa8,0xa9,0x90,0xca,0x47,0x3a,0x6a,0x0f,0x3c,0x0f,0xdb,0xb8,0xd7,0x40,0x2c,0xcf,0x3f,0x5d,0x49,0x88,0xa5,0x71,0xaa,0x0b,0x91,0x09,0x54,0x8a,0xbc,0x3d,0xa9,0x19,0x6c,0x1c,0x4d,0x54,0xa0,0x01,0xfb,0x1a,0x22,0xa1,0xc4};
    uint256_from_bytes(multiplier, multiplier23);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product23, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier24[32]   = {0xb6,0x62,0xb8,0xac,0x13,0xee,0x82,0xf6,0x90,0xc5,0x64,0x96,0x08,0xf5,0x84,0x01,0x41,0x39,0x0e,0x9c,0x76,0x25,0x1e,0x7e,0xde,0xb1,0xa7,0xb8,0x43,0x04,0x20,0x9e};
    static std::uint8_t product24[64]      = {0x81,0xf0,0x84,0xa6,0x95,0x4e,0x35,0x24,0x80,0xef,0x33,0x3d,0x00,0x64,0x9e,0xa0,0x25,0x0f,0xb4,0xd0,0x45,0xe6,0x0c,0x12,0x6e,0xe9,0x23,0xb8,0xd9,0xfd,0xfb,0x2e,0x83,0xd7,0x0d,0xee,0xbe,0x0a,0xd0,0xb9,0x77,0x66,0x30,0x66,0xf8,0xa3,0xd2,0x92,0xd7,0xe9,0x19,0x16,0xf4,0x4a,0xe3,0xde,0xec,0x84,0x30,0x43,0xbd,0x17,0xe1,0x84};
    uint256_from_bytes(multiplier, multiplier24);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product24, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier25[32]   = {0xf1,0xcd,0x07,0x9b,0x5b,0xc4,0x4f,0xc6,0xaf,0x90,0x86,0x00,0x56,0x43,0x74,0x8d,0xc8,0xf8,0xa0,0x05,0x88,0xf2,0x12,0xb4,0x6f,0x5d,0x46,0x16,0x9a,0x81,0xca,0xa9};
    static std::uint8_t product25[64]      = {0xe4,0x63,0xac,0x87,0xb1,0xd2,0x73,0xe8,0xd7,0xbd,0xe9,0x37,0x41,0x35,0x41,0xbc,0x72,0x09,0x52,0xdf,0x7f,0x41,0x1a,0x7b,0xbf,0x5d,0x11,0xf2,0x46,0xa4,0xed,0x57,0x23,0x50,0x9e,0x1d,0x50,0x48,0x4d,0x67,0x65,0xe2,0x92,0x48,0x96,0x63,0x11,0xf5,0x6e,0x32,0xf1,0x97,0xd8,0x21,0xf0,0x31,0xb3,0x2d,0xaa,0xad,0x32,0xc1,0x23,0x91};
    uint256_from_bytes(multiplier, multiplier25);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product25, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier26[32]   = {0x00,0xf6,0xed,0xa3,0xd2,0xc8,0xbc,0x3a,0x1b,0x1d,0x33,0x5c,0x54,0xf4,0x07,0x1d,0x0b,0x90,0x51,0x4c,0x63,0x59,0xf3,0x61,0x78,0x1e,0x8c,0xfb,0x32,0x7d,0xa2,0x84};
    static std::uint8_t product26[64]      = {0x00,0x00,0xee,0x2d,0x93,0x71,0xd6,0xe7,0x85,0x5d,0x56,0x87,0x47,0x67,0x4c,0xc4,0x9a,0xee,0x37,0x80,0x03,0xa3,0x45,0x10,0x83,0x19,0xe6,0x3c,0xc5,0xd6,0xa1,0x0a,0x86,0x59,0x5b,0xda,0xcc,0x2d,0x4c,0x67,0xbb,0x86,0x6a,0xe8,0x17,0x53,0xa3,0xbe,0x36,0xce,0xad,0x74,0xb5,0x5d,0x13,0x8b,0x4d,0x02,0x5f,0xfb,0xac,0x13,0x54,0x10};
    uint256_from_bytes(multiplier, multiplier26);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product26, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier27[32]   = {0x7c,0xfa,0x64,0x96,0x29,0x12,0x29,0xd5,0x89,0x4b,0x84,0x14,0x6d,0xfd,0xf1,0xa3,0x2d,0xc9,0x92,0xa3,0x31,0x99,0x3f,0x49,0xb7,0x79,0xa5,0xf4,0xd5,0x36,0x85,0xdf};
    static std::uint8_t product27[64]      = {0x3d,0x03,0x86,0x5a,0x14,0x97,0x78,0x2a,0xea,0x9f,0xfb,0xa1,0xf4,0xfb,0x2a,0xf6,0x61,0x24,0x68,0xba,0xc6,0xff,0x5c,0x9e,0x02,0xbb,0x24,0xcf,0x92,0x65,0xc9,0x0f,0x6e,0xe3,0xc3,0x7c,0x74,0xbb,0xd7,0x0a,0x27,0x50,0xa2,0x50,0xad,0xe2,0x2a,0x1a,0x71,0x22,0xdc,0x0a,0x27,0x65,0x21,0x1c,0xc8,0xe2,0x6d,0x79,0xd6,0x15,0x78,0x41};
    uint256_from_bytes(multiplier, multiplier27);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product27, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier28[32]   = {0xe1,0xe0,0x29,0x8d,0x33,0x71,0x7b,0xdb,0x66,0x3b,0x16,0x45,0xb5,0x04,0x63,0xb7,0xb4,0x19,0x5c,0x3f,0xce,0x69,0xa9,0xb0,0x2c,0x38,0x9d,0xc1,0x78,0xdb,0x4e,0xa6};
    static std::uint8_t product28[64]      = {0xc7,0x4b,0xcd,0x52,0xf2,0x46,0x0a,0xac,0x78,0xab,0xe4,0xa3,0x0a,0xbf,0xb7,0x0a,0x83,0xd2,0x38,0xca,0x15,0x90,0x3d,0xaf,0x69,0x15,0x7d,0x49,0x8b,0x95,0x16,0xc6,0xf7,0x6f,0xbb,0xb1,0xac,0xc7,0xf7,0x48,0xf9,0x26,0x9d,0xbb,0x1a,0xb7,0x02,0xce,0x45,0xdf,0xfa,0x85,0x4e,0xf6,0x73,0xaf,0xea,0xd2,0x87,0xe7,0x48,0x2d,0x93,0xa4};
    uint256_from_bytes(multiplier, multiplier28);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product28, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier29[32]   = {0xeb,0x19,0x8f,0x0a,0x68,0x14,0xa2,0x96,0x57,0x44,0x9c,0xdd,0xfb,0xf6,0x08,0x7a,0x35,0xa0,0x78,0x85,0x7d,0xcd,0xc1,0x78,0x42,0x9a,0x67,0x8f,0x6c,0x18,0x8a,0x42};
    static std::uint8_t product29[64]      = {0xd7,0xe7,0xef,0x2a,0x5b,0x0a,0xd7,0x3b,0x1f,0x26,0x72,0x67,0x9e,0x35,0x2b,0x5c,0xab,0x1c,0x09,0x6f,0xf3,0x3e,0x9e,0x79,0xec,0x20,0x7d,0xb1,0xe1,0xcc,0x57,0x21,0x4a,0xad,0x7b,0xd7,0x32,0x25,0xd3,0x2e,0xbe,0x14,0x39,0x47,0x5c,0x4b,0x40,0x88,0xb7,0x1b,0xf0,0xde,0xef,0x5c,0x90,0x06,0x0f,0xb8,0x48,0xbd,0xe7,0x0b,0x39,0x04};
    uint256_from_bytes(multiplier, multiplier29);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product29, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier30[32]   = {0x97,0x3d,0xe5,0xff,0x25,0xb2,0x89,0x49,0xad,0xd9,0x8b,0x25,0x74,0x06,0xd9,0xe9,0xbc,0x97,0x3b,0x1f,0x82,0xae,0xd6,0x94,0x52,0xe5,0x89,0xb0,0xe5,0xfb,0x7a,0x17};
    static std::uint8_t product30[64]      = {0x59,0x5a,0x14,0x4a,0x68,0xb3,0x0c,0xc7,0xe1,0x0b,0xe5,0xd4,0x89,0x64,0x2c,0x8c,0xc4,0x0f,0x17,0xdb,0x88,0xe0,0xc5,0x32,0xa6,0x29,0xfc,0xf1,0x5e,0x28,0xf5,0x4d,0x64,0x8c,0xb3,0xbc,0x57,0x92,0x62,0xf2,0xec,0xee,0xc9,0x78,0xb5,0x08,0xe9,0x19,0xf8,0xcf,0x04,0x7a,0xa2,0x06,0xfd,0x1b,0x5a,0x36,0x5d,0x15,0xc9,0x53,0xee,0x11};
    uint256_from_bytes(multiplier, multiplier30);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product30, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier31[32]   = {0x54,0x73,0x33,0xa5,0xaf,0xfa,0x3c,0x7f,0x0d,0x34,0xe7,0xcc,0x95,0x7a,0xde,0x7c,0xad,0x90,0xba,0x00,0xef,0xa6,0x7c,0x5c,0xb7,0xb1,0xff,0xa0,0x64,0x9e,0x48,0xb9};
    static std::uint8_t product31[64]      = {0x1b,0xdb,0xcd,0xbc,0x2c,0xc3,0xc1,0xdf,0xc0,0x75,0x44,0x00,0x88,0xf5,0x2d,0x2a,0xb2,0xb9,0xa1,0xa7,0xcd,0xf8,0xd1,0xaf,0xd1,0x2c,0xd6,0x6d,0x86,0x71,0x76,0x7c,0x16,0xec,0x62,0x1f,0x8c,0x22,0x3d,0xb7,0x64,0x17,0xfd,0x68,0x51,0x56,0x0b,0x77,0xd7,0x11,0xf1,0x0c,0x31,0x09,0xd8,0xc2,0x50,0x19,0x7f,0xee,0x61,0x04,0x95,0xb1};
    uint256_from_bytes(multiplier, multiplier31);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product31, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier32[32]   = {0x1a,0xee,0x88,0x9f,0x6e,0xd6,0xbc,0x0d,0x47,0x75,0x59,0xa3,0x07,0xff,0x06,0xa1,0x6c,0x28,0xde,0x22,0xfe,0x96,0x31,0x82,0xf5,0x04,0x67,0xb5,0xa1,0xad,0x02,0xf6};
    static std::uint8_t product32[64]      = {0x02,0xd5,0x52,0x02,0xb3,0xdf,0x7e,0x87,0x61,0xbd,0xa6,0x8d,0x95,0x85,0x0f,0x6a,0xac,0xe8,0x8c,0x6e,0x98,0xe0,0x3d,0xf1,0x0f,0x4f,0xf1,0x26,0x2f,0x13,0x44,0x1b,0x15,0x4a,0xcd,0xca,0x44,0xa5,0x7e,0x2d,0x58,0xee,0x47,0x1f,0x21,0x4b,0x96,0x62,0xe8,0x52,0x84,0xe9,0x1e,0x47,0x0b,0xe2,0x30,0xd3,0x36,0x82,0x6c,0x84,0xc4,0x64};
    uint256_from_bytes(multiplier, multiplier32);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product32, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier33[32]   = {0x60,0x43,0x86,0x9f,0xaa,0x77,0x32,0x71,0x4f,0x2d,0x49,0x96,0x6c,0x54,0xbf,0xbd,0x80,0x41,0x3d,0xe2,0x54,0x75,0x6c,0x86,0xca,0xae,0xf3,0x33,0xff,0x1c,0x61,0xb9};
    static std::uint8_t product33[64]      = {0x24,0x32,0xb6,0xc7,0x7e,0x38,0x2a,0x43,0x5d,0x13,0x37,0x07,0x85,0xb7,0x5d,0x58,0xa8,0x52,0x9a,0x36,0x3a,0xc4,0xca,0xf6,0x68,0xb0,0x7b,0xe2,0xcc,0xa9,0xe7,0xf9,0xc9,0xb5,0x24,0x0d,0x6f,0xd2,0x5c,0x06,0x94,0xad,0x15,0x08,0xd5,0xac,0x8c,0x2f,0x6e,0x65,0x8d,0xc3,0x4f,0x97,0xbb,0x58,0x50,0x89,0xb3,0x8a,0x13,0xc5,0xb7,0xb1};
    uint256_from_bytes(multiplier, multiplier33);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product33, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier34[32]   = {0xb5,0xfe,0xf3,0xf9,0xa1,0x9b,0x47,0x51,0xd0,0x5f,0x60,0xba,0x7d,0x5b,0x00,0xd6,0x0c,0xd9,0x83,0x8f,0x85,0x22,0xfd,0x56,0x2d,0x1d,0xcb,0x49,0xb8,0x1e,0xb9,0x2c};
    static std::uint8_t product34[64]      = {0x81,0x62,0x82,0xe8,0x0a,0x66,0x1f,0x33,0xc6,0x7b,0x18,0xac,0x6b,0x88,0x6b,0x6b,0x16,0xa9,0x1b,0xf7,0xfa,0x07,0xc9,0xd5,0xb5,0xae,0xea,0xa2,0x18,0xa3,0x2d,0x3b,0x13,0x8f,0x6f,0x60,0x50,0x54,0xc2,0x54,0xda,0x22,0xb9,0xe4,0xb2,0xb1,0x8d,0x21,0x05,0x1a,0x84,0x1c,0xf1,0x31,0xe4,0xda,0xab,0x95,0x90,0xf7,0x2c,0x40,0x9f,0x90};
    uint256_from_bytes(multiplier, multiplier34);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product34, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier35[32]   = {0x40,0x88,0xe0,0x66,0xd7,0xe3,0x90,0x35,0x9a,0xfb,0x26,0x43,0xf5,0xa9,0xf4,0x95,0xdb,0xaf,0xec,0x01,0xe6,0x9e,0x2f,0x6d,0x10,0xc3,0x91,0xd7,0x73,0x6b,0xb1,0x85};
    static std::uint8_t product35[64]      = {0x10,0x44,0xb9,0x62,0x9d,0xeb,0x4d,0x03,0x02,0x36,0xfe,0x6c,0xc0,0xc2,0x78,0x30,0x14,0x8d,0x19,0xf6,0xd9,0x60,0xee,0xff,0x03,0xe4,0x82,0xf3,0x05,0x7f,0xbb,0xe4,0xfe,0xd8,0x03,0x62,0x56,0x90,0x5b,0xc6,0x7b,0x27,0x02,0x09,0xe1,0x5b,0xf2,0x5b,0xf8,0x82,0xec,0x70,0x60,0xcd,0x13,0x96,0x22,0xa4,0xc6,0x31,0x5e,0x47,0x2f,0x19};
    uint256_from_bytes(multiplier, multiplier35);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product35, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier36[32]   = {0x77,0xa9,0x12,0xfa,0xbc,0xe0,0x22,0x5f,0xda,0x22,0xe7,0x12,0x8b,0x61,0x93,0x91,0xb1,0xac,0x66,0x2c,0xef,0x1b,0x03,0x1c,0x8b,0xf7,0x42,0xe5,0x26,0x09,0xfa,0xe7};
    static std::uint8_t product36[64]      = {0x37,0xee,0x9f,0x4f,0x2c,0x0d,0xf8,0x07,0x75,0x4d,0x09,0x84,0x3d,0x79,0x44,0x24,0xbf,0x32,0xb0,0xbf,0x51,0x20,0xbb,0x2b,0x3d,0x26,0x3f,0x2e,0xaa,0xdf,0xdb,0x89,0xb2,0xf6,0x40,0x48,0x07,0x0d,0x00,0x69,0xba,0x72,0x08,0x8c,0x68,0xba,0xea,0xa6,0x4b,0x51,0x6e,0x79,0xcb,0xc3,0x7e,0xfb,0x3c,0xa2,0xf4,0x26,0x2e,0x25,0xfc,0x71};
    uint256_from_bytes(multiplier, multiplier36);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product36, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier37[32]   = {0x69,0x5c,0x3a,0x30,0xee,0x69,0xe7,0x71,0xd8,0x06,0x50,0x85,0xca,0x12,0x5c,0x0c,0x9f,0x88,0x92,0x0d,0x7d,0x50,0x0f,0xa1,0xbe,0x65,0xf1,0x10,0x4a,0xf9,0xfb,0x57};
    static std::uint8_t product37[64]      = {0x2b,0x5c,0xc8,0xf6,0x03,0xf8,0x71,0x5b,0xff,0xa7,0xe9,0x52,0xd9,0x14,0xb7,0xd3,0x3f,0x32,0x06,0x07,0xe5,0xcb,0xd1,0x44,0x0f,0xad,0x05,0x04,0xa0,0x30,0x5d,0xa2,0xc2,0xaa,0xc6,0xe4,0x9e,0xcc,0x45,0x5a,0x48,0x03,0x2d,0x47,0x0e,0x10,0x40,0xc7,0x6d,0xfe,0x58,0x39,0xef,0x68,0x3d,0xf7,0x97,0x14,0xb2,0x49,0x32,0x01,0xb7,0x91};
    uint256_from_bytes(multiplier, multiplier37);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product37, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier38[32]   = {0x63,0x5b,0x45,0xb3,0x0e,0xd9,0xcf,0xd8,0x65,0x68,0xc5,0x26,0xe4,0xb7,0xc7,0xd2,0x4a,0x59,0x89,0x28,0x18,0x8b,0x69,0xa0,0xb3,0x25,0x18,0x1d,0xc5,0xf1,0x5f,0x68};
    static std::uint8_t product38[64]      = {0x26,0x8f,0xb8,0x73,0x1d,0xc3,0x08,0xda,0x51,0xc6,0xfc,0x4e,0x3a,0x0a,0x76,0xfc,0xd4,0x7c,0x2f,0x45,0x28,0x75,0x8a,0xeb,0xde,0x3b,0x73,0x47,0x09,0xeb,0xd9,0x18,0xe1,0x48,0x7a,0x08,0xf5,0xc6,0x63,0x16,0x2a,0xc6,0xa1,0xe9,0x55,0x3d,0x81,0x69,0x48,0xd0,0xcd,0x32,0x26,0x9a,0xed,0xc4,0xb7,0xb0,0x7d,0xfa,0xd5,0x5e,0x5a,0x40};
    uint256_from_bytes(multiplier, multiplier38);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product38, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier39[32]   = {0x40,0x99,0xae,0xdc,0xb8,0x43,0x1a,0xa4,0x36,0x5b,0xb0,0xc7,0x1a,0x65,0x6b,0xa1,0x2c,0x0c,0x7b,0x88,0x62,0xcf,0xb2,0x6e,0xed,0x54,0x96,0x02,0xfe,0xf7,0xcc,0x79};
    static std::uint8_t product39[64]      = {0x10,0x4d,0x33,0xb0,0xd7,0x66,0x96,0x50,0x63,0xa4,0x5e,0x01,0xef,0xf4,0xc7,0x9f,0x88,0x64,0x55,0x44,0x20,0x0f,0x3e,0x6e,0x9e,0xdd,0xff,0x97,0x33,0x3c,0x6a,0x80,0xfa,0xe4,0x96,0xcb,0x1a,0x54,0x52,0x41,0x50,0xa2,0x28,0x9f,0x47,0x80,0xb3,0xa7,0x1e,0x7e,0x62,0xb1,0x5a,0xef,0xa2,0x05,0x96,0xd5,0xa7,0x80,0x50,0xcf,0x11,0x31};
    uint256_from_bytes(multiplier, multiplier39);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product39, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier40[32]   = {0xa4,0xf3,0xcf,0x0b,0x8c,0x54,0x43,0x70,0x6e,0xb4,0x96,0xb6,0xc8,0x61,0xbb,0xd8,0x92,0xa0,0x46,0x5d,0x36,0xb8,0x7a,0x83,0x2a,0xee,0x57,0xc1,0x6f,0xe5,0xce,0x4f};
    static std::uint8_t product40[64]      = {0x6a,0x49,0x49,0x79,0x83,0x2c,0x0b,0xd5,0xb6,0x83,0x70,0x21,0x2b,0xa0,0x64,0xa9,0xc7,0x17,0xbb,0x7c,0xd0,0xf2,0xc6,0x48,0x56,0x99,0x3f,0x53,0x87,0x18,0x62,0x07,0x7f,0xc9,0x41,0x8b,0xfb,0xdf,0x6b,0xc4,0x43,0x1d,0x18,0x29,0xe2,0xf4,0xa5,0x64,0xdc,0x96,0x28,0x1a,0x35,0xdc,0xf4,0x0f,0xa2,0x87,0xdc,0x51,0x41,0x99,0x3c,0x61};
    uint256_from_bytes(multiplier, multiplier40);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product40, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier41[32]   = {0x01,0x35,0xbc,0xc3,0x84,0x3f,0x8d,0x00,0x56,0x58,0x19,0x60,0xe8,0x6e,0x87,0x77,0xe3,0x77,0xce,0x4c,0x17,0xed,0xff,0x2f,0xa1,0x1f,0xfe,0x83,0xdd,0x28,0x33,0xda};
    static std::uint8_t product41[64]      = {0x00,0x01,0x76,0xc1,0x3b,0x2d,0x00,0xfa,0x77,0x0b,0x57,0x31,0x40,0x4c,0xd2,0x7d,0x0d,0x3e,0x07,0x77,0x25,0x53,0x82,0xfa,0x73,0x61,0x21,0xae,0xb5,0x22,0x4c,0x36,0x56,0x2f,0x60,0x22,0x90,0x2a,0xa4,0x8a,0x0e,0xc3,0x6b,0xb0,0x5e,0x54,0x5f,0x0c,0x12,0x15,0xc0,0x53,0xf6,0xd9,0x65,0xc8,0x9f,0xe4,0x18,0xf2,0xa2,0xa0,0x95,0xa4};
    uint256_from_bytes(multiplier, multiplier41);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product41, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier42[32]   = {0xc9,0xa6,0x07,0x8b,0x88,0xdc,0x1d,0x45,0xea,0x3c,0x9e,0xd4,0x96,0x10,0xdb,0x10,0xd4,0x6a,0x15,0x20,0xc8,0xbc,0x5e,0x03,0x8f,0x2e,0xf3,0xef,0xb6,0x32,0xe1,0xe3};
    static std::uint8_t product42[64]      = {0x9e,0xd6,0x23,0x86,0xe6,0x18,0x10,0xf7,0xb2,0x4b,0x31,0x20,0x1a,0x41,0x1c,0x09,0x1d,0x7b,0x5d,0xaf,0xef,0xf4,0xd2,0xa0,0xa3,0x42,0x8a,0xb1,0x85,0x02,0x40,0x05,0x30,0x9e,0x3b,0x45,0xf3,0x14,0xe9,0x14,0x88,0x3a,0xa5,0x84,0x64,0xba,0x5d,0xc4,0xe8,0xda,0x10,0xfc,0x78,0x9f,0x46,0x51,0x15,0x17,0x1b,0x25,0xc7,0xfc,0xcf,0x49};
    uint256_from_bytes(multiplier, multiplier42);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product42, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier43[32]   = {0x63,0x92,0x27,0x06,0xad,0x00,0xb4,0xa4,0x84,0xb0,0x32,0x5c,0x96,0xe6,0x98,0x5d,0x3e,0x43,0x0f,0x3e,0xae,0xb6,0xdd,0xb0,0xa3,0x37,0x04,0x38,0xb2,0xbd,0xd4,0xd9};
    static std::uint8_t product43[64]      = {0x26,0xba,0x5d,0x9f,0xb3,0x5e,0xe9,0x68,0x12,0x44,0x2c,0x37,0xd0,0xba,0xf3,0x92,0x6f,0x0b,0x01,0x97,0xa1,0x1d,0x18,0x78,0xb9,0xf3,0x81,0x30,0xc7,0x22,0x8b,0x6e,0xb7,0xd7,0x98,0xe9,0x1d,0x25,0x98,0x01,0x23,0x99,0x09,0x77,0x4f,0x01,0xd8,0x2e,0x3d,0x11,0x88,0x22,0x2b,0x1b,0xb1,0x22,0x69,0xbe,0x6f,0xb1,0xbd,0x62,0x1f,0xf1};
    uint256_from_bytes(multiplier, multiplier43);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product43, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier44[32]   = {0x6d,0xb8,0xdc,0x4b,0x95,0x9e,0xa2,0x83,0xdc,0x16,0xae,0xc5,0x47,0x36,0x5c,0x69,0x05,0x64,0x10,0x06,0xfc,0x9f,0x14,0x16,0xe9,0xdb,0xb1,0x97,0x15,0x23,0xb6,0xe4};
    static std::uint8_t product44[64]      = {0x2f,0x06,0xf1,0x15,0xc7,0xa2,0x29,0xe7,0x90,0xaf,0x98,0x73,0xac,0x09,0x5c,0xbc,0x80,0x46,0x55,0x63,0xb5,0x77,0x13,0x8c,0xdd,0x9d,0xc1,0x8a,0x5d,0xb8,0xed,0x5f,0x2a,0x89,0x93,0x68,0x4f,0xf1,0x5f,0xfe,0x26,0x63,0x13,0xd4,0xc6,0xbd,0xa0,0xec,0xa5,0x17,0x6c,0x31,0x9e,0x1a,0x81,0x9b,0x46,0xdf,0xe9,0xf4,0xed,0x00,0xfb,0x10};
    uint256_from_bytes(multiplier, multiplier44);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product44, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier45[32]   = {0x35,0x84,0xab,0xc1,0x8b,0x0c,0x74,0x1b,0x83,0x5b,0x10,0x66,0x1b,0x15,0x65,0xff,0x86,0xd9,0x05,0x01,0x41,0xbf,0xc5,0xe3,0x60,0x49,0xb8,0x65,0x58,0x76,0xc1,0x7e};
    static std::uint8_t product45[64]      = {0x0b,0x30,0x33,0xdf,0xb6,0x66,0xaf,0x00,0xb8,0x2d,0x84,0x5b,0xdf,0x9c,0x12,0xc8,0x54,0x54,0x2d,0x56,0x3f,0x21,0xe9,0x08,0xce,0x0b,0x49,0xc4,0x25,0x0f,0x64,0x28,0x36,0xde,0x33,0xf1,0x8b,0x77,0x4f,0xa6,0x10,0x70,0x9c,0x1c,0xf3,0x49,0x70,0xf1,0x3e,0xff,0x1b,0xdb,0x0f,0x62,0x6d,0x96,0x7c,0x47,0xa9,0x89,0x92,0x67,0x3a,0x04};
    uint256_from_bytes(multiplier, multiplier45);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product45, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier46[32]   = {0x5e,0x0d,0x22,0x3f,0x9a,0xaa,0xcc,0xd8,0x93,0x31,0x8b,0x07,0x72,0xaf,0x0d,0x30,0x9a,0xfd,0x85,0x01,0xf3,0x11,0x9b,0x10,0xa6,0xae,0x20,0xff,0xbb,0x14,0xaa,0x36};
    static std::uint8_t product46[64]      = {0x22,0x8d,0xa5,0xd3,0x34,0xa0,0x18,0xaa,0xb6,0x03,0x9f,0x3c,0x76,0xef,0x96,0x79,0x44,0x1a,0xa9,0x7a,0x26,0x52,0x35,0xdf,0x50,0xa7,0x79,0x3a,0xec,0xb1,0xc0,0x4b,0x84,0xbd,0x1f,0xaa,0x7a,0xef,0x9c,0x39,0x89,0x0a,0x5e,0x7d,0xc3,0xa1,0xce,0xf6,0x53,0x21,0x9a,0x0c,0x0e,0x60,0xb5,0xd0,0xcf,0xd7,0xc9,0xe9,0xed,0x9b,0xc3,0x64};
    uint256_from_bytes(multiplier, multiplier46);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product46, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier47[32]   = {0x32,0x4b,0x19,0xa0,0xc5,0x63,0x5f,0x17,0xe1,0x98,0xbf,0xee,0x02,0x73,0xa8,0xb8,0x37,0x45,0x97,0x83,0x92,0xf9,0x15,0xec,0x01,0x3a,0xa8,0x96,0x02,0x23,0x40,0xba};
    static std::uint8_t product47[64]      = {0x09,0xe1,0x6c,0x0a,0xd3,0xdf,0x44,0xe3,0xc9,0x19,0x79,0x50,0xb3,0xd7,0x52,0xdc,0xe9,0x9d,0x59,0x42,0x01,0x7a,0xa3,0xaf,0xfc,0x13,0x9d,0x73,0x8c,0x14,0xdc,0x4c,0x06,0x47,0xac,0xc5,0xb7,0x65,0x84,0x13,0xc6,0x51,0x5f,0x61,0x09,0xd0,0xd6,0x69,0x88,0xc4,0xfc,0x73,0xca,0x74,0x54,0x1f,0x8e,0x90,0x8b,0xd5,0xab,0x39,0x87,0x24};
    uint256_from_bytes(multiplier, multiplier47);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product47, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier48[32]   = {0x59,0x48,0x0d,0xff,0xbf,0xed,0x30,0xb0,0xf0,0xb6,0xf5,0xe6,0xa9,0xdc,0xea,0xbe,0x79,0xd3,0x00,0x2e,0xd5,0xdf,0xae,0x4f,0x9b,0x18,0xd8,0xb1,0x7d,0x05,0xee,0x24};
    static std::uint8_t product48[64]      = {0x1f,0x23,0x2e,0x03,0xb4,0x12,0xda,0x44,0x6c,0x43,0x61,0x42,0x0d,0x64,0x00,0x85,0x4a,0x7a,0x92,0xa9,0x20,0x58,0xa1,0xd0,0x7c,0x3a,0x1c,0x3a,0xf0,0x9c,0x29,0xe9,0xcc,0xd1,0x95,0xb4,0x97,0xfa,0x9d,0x40,0xaf,0xb7,0x6f,0x3b,0x99,0x30,0xbd,0x95,0x42,0x9b,0x5f,0xdc,0x4a,0x32,0x87,0xbc,0x5f,0xde,0xd8,0x7a,0x52,0xee,0xf5,0x10};
    uint256_from_bytes(multiplier, multiplier48);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product48, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier49[32]   = {0x61,0x26,0x53,0xac,0xd7,0x95,0x34,0xd7,0x71,0x35,0x64,0x91,0x83,0x06,0x17,0x5a,0x2b,0x4e,0x03,0xd2,0xa5,0x4f,0x54,0xd7,0xed,0x1d,0xa3,0x58,0xfd,0x07,0x11,0x73};
    static std::uint8_t product49[64]      = {0x24,0xde,0x11,0x25,0xee,0x08,0x9a,0xd4,0x1a,0x0e,0xbc,0xb1,0x4d,0x4c,0xb4,0x5f,0xcc,0xfa,0xcb,0x2d,0xfd,0xf7,0xdc,0x96,0xd0,0xa5,0x7e,0x06,0x0e,0x76,0x49,0x7e,0x1c,0x80,0xe2,0x15,0xdc,0x03,0x81,0x05,0x68,0xb3,0x9d,0x32,0xa8,0x38,0x89,0x8b,0xab,0xc7,0x42,0xed,0xd7,0x2f,0xa2,0x38,0xd1,0x39,0x69,0xbf,0x43,0x7a,0x79,0xa9};
    uint256_from_bytes(multiplier, multiplier49);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product49, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier50[32]   = {0x3d,0x83,0x0c,0xff,0x0f,0x1a,0x70,0xbd,0x62,0x22,0x0f,0x45,0x71,0xf5,0x63,0xb3,0x0a,0x06,0x25,0xd5,0x10,0x22,0x67,0x7c,0x1b,0x66,0x07,0x7f,0x8e,0x12,0x71,0x9a};
    static std::uint8_t product50[64]      = {0x0e,0xc7,0xb7,0x47,0xda,0xe4,0xf6,0x53,0x34,0xb9,0x20,0x90,0xb4,0x48,0xb0,0x5c,0x7a,0xf3,0xe7,0xf2,0x3f,0x42,0x3d,0x06,0x33,0x96,0xb5,0x29,0x71,0x0c,0x92,0x86,0x23,0xb3,0x9c,0x36,0xab,0x2d,0x49,0x05,0x5c,0x5a,0x4c,0x3c,0xe7,0xac,0x8e,0xad,0xb2,0x32,0x2f,0x80,0xc8,0x05,0x4d,0x2c,0x4a,0x13,0x9a,0x27,0x04,0x11,0x50,0xa4};
    uint256_from_bytes(multiplier, multiplier50);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product50, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier51[32]   = {0x5a,0x86,0x49,0xdf,0x5b,0x63,0x9c,0x26,0x08,0x81,0x5a,0xb5,0x6b,0x68,0xdb,0x1b,0xee,0xcd,0x82,0x26,0x10,0x45,0x3f,0xa6,0x2b,0x28,0x51,0xc2,0xba,0x46,0xfc,0x89};
    static std::uint8_t product51[64]      = {0x20,0x02,0xb2,0x62,0x77,0x66,0xdb,0x11,0x5d,0x03,0x8e,0x14,0x4b,0x3e,0x95,0xb5,0x42,0xb4,0x26,0x2d,0x24,0xc8,0xef,0x1b,0xbe,0x5b,0xd6,0x83,0x1e,0x62,0x07,0x08,0xfd,0xed,0x89,0x53,0x7d,0x2e,0xa3,0xc3,0xc2,0xf3,0x02,0xbd,0x60,0x63,0x8c,0x32,0xd7,0x07,0xd8,0x8a,0xd7,0xbf,0xcc,0xb0,0xb7,0xc0,0xac,0x4a,0x28,0x0a,0x01,0x51};
    uint256_from_bytes(multiplier, multiplier51);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product51, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier52[32]   = {0x97,0xd5,0x64,0x34,0xe8,0x23,0x04,0x49,0x71,0x3c,0x74,0x4f,0x61,0x33,0x61,0x14,0xab,0xb4,0x60,0x0b,0x66,0xa6,0x40,0xab,0xd5,0xf5,0xcc,0x66,0xaa,0x66,0xf0,0x3c};
    static std::uint8_t product52[64]      = {0x5a,0x0d,0x6e,0x16,0x51,0x1c,0xf9,0x9e,0x41,0xde,0x5a,0xab,0xb5,0x94,0x8a,0x28,0xe7,0xc1,0x0b,0x45,0xcd,0x71,0xb6,0xd1,0xdb,0x53,0x69,0x17,0x16,0x88,0xc7,0x6e,0xc7,0xf5,0x59,0xaa,0x8a,0xe9,0xad,0xda,0x28,0x24,0xe0,0xbc,0x04,0x2c,0x6f,0xab,0x29,0xba,0x02,0x96,0x32,0xb8,0x2d,0xb3,0xf5,0x2b,0xf0,0x44,0x01,0x40,0x8e,0x10};
    uint256_from_bytes(multiplier, multiplier52);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product52, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier53[32]   = {0x8a,0x67,0xfd,0x53,0x17,0xf9,0x0f,0x18,0x5c,0xe9,0x4c,0xf4,0xf6,0xcf,0x98,0x1f,0x14,0x2f,0x8d,0xed,0xd2,0xd9,0xdf,0x4f,0xb6,0x90,0xf6,0xe1,0x12,0x01,0x23,0xf8};
    static std::uint8_t product53[64]      = {0x4a,0xd4,0x47,0x5b,0x69,0x63,0x27,0x0b,0x3f,0x5a,0xef,0x2a,0x27,0x95,0x08,0x9c,0xe5,0x6c,0xa9,0x49,0x0d,0x57,0x7d,0x6d,0x1a,0xcc,0x59,0x1f,0x20,0x38,0x34,0xfe,0x36,0x4a,0xe7,0xfe,0x01,0x1d,0x8b,0x43,0x6c,0xaf,0x53,0xe9,0x2b,0x54,0x5a,0x59,0x15,0xad,0x1b,0x87,0xa4,0xb1,0x77,0xf7,0xef,0x66,0x03,0x00,0x2c,0xfd,0xc0,0x40};
    uint256_from_bytes(multiplier, multiplier53);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product53, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier54[32]   = {0x6d,0xf6,0x24,0x9e,0x01,0x54,0x65,0x01,0x0d,0x85,0x8e,0xf0,0x03,0x10,0x79,0xfc,0xbd,0xe0,0x1a,0xf2,0xfc,0x60,0x7d,0x3b,0x2c,0xa4,0x1c,0x3c,0x07,0x94,0xc9,0xb9};
    static std::uint8_t product54[64]      = {0x2f,0x3b,0x87,0xd8,0xf2,0x09,0x3e,0x1a,0x64,0x20,0x76,0x1d,0xcb,0x97,0x9c,0x1c,0x42,0x26,0xe5,0x49,0x61,0x59,0x8c,0x02,0x14,0xab,0xa4,0x6e,0x1b,0x77,0x43,0xc8,0xee,0x9f,0x7f,0xd1,0x8f,0x6a,0x61,0x09,0xe0,0x97,0x90,0x4b,0x92,0x85,0xf9,0x6d,0xf6,0xfa,0x08,0x7b,0x20,0xf5,0xb0,0xfc,0x27,0x20,0x80,0x39,0xfa,0xdc,0x07,0xb1};
    uint256_from_bytes(multiplier, multiplier54);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product54, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier55[32]   = {0x3c,0xc5,0xb9,0x03,0x83,0x92,0xb8,0x8e,0x34,0x6c,0x79,0x99,0x73,0x5e,0x0f,0xa2,0xa6,0x47,0x5c,0xd0,0x40,0x49,0x75,0xfa,0xf3,0xdf,0xc8,0x74,0xb4,0x99,0xc0,0x17};
    static std::uint8_t product55[64]      = {0x0e,0x6d,0x47,0x6f,0xea,0xcb,0x5a,0x89,0x1b,0x3c,0xe0,0x05,0xa7,0x71,0xd2,0xf6,0xd6,0x0c,0x66,0x34,0x29,0x16,0x5c,0xc4,0x3a,0xb1,0xea,0xd7,0x70,0xd2,0xce,0x09,0x77,0x09,0xe1,0xa6,0x60,0x7d,0x15,0x7f,0xcd,0x3d,0xe3,0x19,0xfa,0x19,0x53,0xbc,0xd0,0x27,0x58,0x4c,0xba,0x23,0x48,0xd8,0xb8,0xf4,0x97,0x4f,0x83,0xa0,0x82,0x11};
    uint256_from_bytes(multiplier, multiplier55);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product55, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier56[32]   = {0xfd,0x9d,0x14,0xe8,0x56,0x69,0x48,0xc7,0x65,0x8e,0x6a,0xb5,0xe2,0xa9,0x65,0x58,0x48,0x16,0xcd,0x33,0x4c,0xa5,0xdf,0x6f,0x7f,0xf0,0x9f,0x95,0x98,0x6d,0x70,0x43};
    static std::uint8_t product56[64]      = {0xfb,0x3f,0xdb,0xb5,0xe1,0x7b,0x37,0x5a,0x92,0xac,0x09,0x13,0x78,0x66,0x6e,0x20,0xfc,0xda,0x9d,0x95,0x82,0x23,0xbb,0x3d,0xa6,0x9f,0x0a,0x7b,0x5c,0x59,0x63,0x13,0xea,0x41,0x4e,0x25,0x1e,0xc2,0x42,0x38,0xa4,0x0e,0x4f,0x29,0x93,0xe6,0x36,0x22,0xee,0xe3,0x24,0x37,0x60,0x0f,0xa1,0x71,0xb3,0x3a,0x0c,0x16,0x5a,0x48,0xb1,0x89};
    uint256_from_bytes(multiplier, multiplier56);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product56, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier57[32]   = {0x67,0x43,0x9a,0x3d,0xe8,0xa0,0xe0,0x2a,0xf2,0x2a,0x30,0x24,0x8e,0x91,0x18,0x92,0xcf,0x59,0x8a,0xc1,0x08,0xb8,0xe8,0x9b,0x34,0x0c,0x0c,0x30,0x70,0xef,0x6d,0x05};
    static std::uint8_t product57[64]      = {0x29,0xa7,0x77,0xf7,0xea,0x87,0xc3,0x72,0x23,0x1b,0x30,0x0b,0x98,0xc8,0xa9,0xa8,0x21,0xad,0xaf,0x52,0xf6,0x35,0x05,0xa7,0xc4,0x02,0x7c,0x4b,0x44,0x74,0xa3,0x9c,0xff,0x6a,0xc0,0x00,0x5e,0x94,0x5b,0xf2,0x2e,0x04,0xe0,0x51,0xee,0x88,0xdb,0xca,0xc1,0xfa,0x89,0x66,0x91,0xb7,0x82,0x8b,0x3e,0x4b,0xb9,0x31,0x1d,0xc3,0x42,0x19};
    uint256_from_bytes(multiplier, multiplier57);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product57, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier58[32]   = {0x27,0x81,0xfa,0xb5,0x42,0xe8,0x20,0xbb,0x1d,0x0f,0x5b,0x40,0x9d,0x12,0x63,0xa7,0x93,0x71,0xdc,0x3d,0xbb,0x14,0xcf,0xf9,0x1a,0xdd,0xfa,0x03,0x7a,0x8f,0x35,0xb7};
    static std::uint8_t product58[64]      = {0x06,0x18,0xdc,0x61,0xda,0x96,0xae,0xef,0x0d,0x16,0x37,0xfc,0x8f,0x3b,0x09,0xf5,0x89,0x19,0xa0,0xc5,0x35,0x99,0xe5,0x59,0x36,0x13,0xef,0xee,0xa7,0x22,0xd2,0x30,0x31,0xa6,0xe4,0xe5,0xf0,0x0f,0xc8,0x7b,0x27,0xe4,0x0c,0x5c,0xcc,0x92,0xb2,0xf6,0x88,0xac,0x52,0x4a,0x15,0x1d,0xed,0x95,0xb8,0xe7,0x7d,0x99,0x79,0xb7,0x48,0xd1};
    uint256_from_bytes(multiplier, multiplier58);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product58, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier59[32]   = {0x2d,0x75,0x59,0xd3,0x84,0x36,0x80,0x5c,0x07,0x24,0xb9,0x5e,0x75,0xe7,0xfd,0x0f,0x8f,0xbd,0x17,0x9b,0xc4,0x5e,0xc5,0x49,0x5c,0x5e,0x33,0x02,0x9c,0x4f,0x7e,0x7f};
    static std::uint8_t product59[64]      = {0x08,0x12,0x77,0x5f,0x97,0x56,0xc3,0xa2,0xca,0x01,0x45,0x61,0x43,0xc5,0x9f,0x97,0xec,0x89,0x8a,0xc8,0x21,0x60,0xa2,0xb0,0xd7,0x54,0x0e,0x25,0x02,0xda,0xe3,0x19,0x98,0xa6,0x85,0xfb,0xf6,0xd5,0x92,0x97,0x56,0xbb,0x4e,0x4e,0xa3,0x9b,0xc3,0x4c,0x79,0x57,0x77,0x40,0x3b,0xb7,0x92,0x08,0xaa,0x59,0x8e,0xd6,0x18,0xe3,0x43,0x01};
    uint256_from_bytes(multiplier, multiplier59);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product59, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier60[32]   = {0xbb,0x5c,0xa3,0xc3,0xff,0xad,0x54,0xd8,0x76,0x5f,0xd1,0x99,0x1d,0x43,0x23,0x88,0x37,0xd5,0x57,0x85,0xe2,0x17,0x50,0x80,0x9f,0x7e,0xfd,0xdb,0xbc,0xb2,0xf4,0x1c};
    static std::uint8_t product60[64]      = {0x89,0x20,0x78,0xc6,0x75,0x2a,0x2c,0x2f,0x73,0xfa,0xbd,0xf9,0xb6,0x31,0x0e,0x77,0xca,0x39,0x5c,0x06,0x75,0x2d,0x33,0x66,0xb2,0x7f,0x76,0x10,0x00,0xb5,0x0d,0x5b,0x8f,0x4f,0xf5,0xd6,0xb9,0x79,0x0b,0x35,0x5e,0x92,0xda,0x3b,0x1a,0xd0,0x92,0x5a,0xca,0x22,0xbc,0x43,0xac,0xfd,0xb6,0xf9,0x2f,0x54,0x53,0x89,0x7f,0xb5,0x63,0x10};
    uint256_from_bytes(multiplier, multiplier60);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product60, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier61[32]   = {0x83,0x0b,0x0a,0x57,0x8a,0x27,0xd6,0x59,0x14,0x24,0xad,0x2e,0x42,0x23,0x45,0xa5,0x6f,0xc9,0xb8,0xdc,0x10,0x73,0x4e,0x02,0x26,0x7b,0x30,0xe8,0xa1,0x29,0xc7,0xcd};
    static std::uint8_t product61[64]      = {0x43,0x14,0x4d,0x0f,0x7b,0x55,0x99,0x85,0xe4,0xa6,0xe3,0xcd,0xd4,0x73,0xd5,0x79,0xfa,0x10,0x00,0x97,0xc7,0xb0,0x7b,0xd8,0x9a,0x08,0x25,0xca,0xf9,0xda,0x16,0x76,0x48,0x53,0x57,0x4c,0xae,0xfa,0x2a,0xe2,0x56,0xb5,0xf9,0x6d,0xd1,0x3b,0x1e,0xe5,0x4b,0x99,0x70,0x80,0x35,0x51,0x60,0x7f,0x07,0x1a,0x97,0xb1,0x75,0x9a,0x5a,0x29};
    uint256_from_bytes(multiplier, multiplier61);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product61, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier62[32]   = {0x5f,0xd1,0xc6,0x4b,0xe0,0x96,0x42,0x1b,0x28,0x90,0x6a,0x56,0x5f,0x3e,0x60,0x1e,0x25,0x58,0xe0,0x37,0x99,0x00,0xb9,0xa2,0xdf,0x2a,0x4a,0x90,0xc1,0xc1,0x33,0xb3};
    static std::uint8_t product62[64]      = {0x23,0xdd,0x5d,0x11,0xb2,0x2d,0xb0,0x4d,0xe3,0xc7,0x75,0x43,0xf4,0xb6,0x00,0x3f,0x6b,0xc9,0x14,0x4b,0x2b,0xc1,0x24,0x95,0xda,0xf1,0xb5,0x23,0xf7,0xb9,0xc1,0xbf,0xad,0xa4,0x4c,0xe6,0x99,0x7d,0x6a,0x56,0xec,0xda,0x90,0x82,0x6c,0x50,0x24,0x49,0xff,0xfc,0xb2,0xd9,0x2a,0x04,0x51,0xe1,0x0e,0x9e,0x87,0x22,0xe4,0x56,0xcf,0x29};
    uint256_from_bytes(multiplier, multiplier62);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product62, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier63[32]   = {0x36,0xfe,0x19,0x48,0x04,0xc6,0x26,0x3f,0xf0,0x1e,0xa6,0x9b,0x0a,0xb3,0x98,0x40,0x65,0x30,0x76,0xd5,0xa1,0x10,0x14,0xf4,0x60,0x11,0xf9,0x6d,0x8a,0x09,0x2d,0x51};
    static std::uint8_t product63[64]      = {0x0b,0xd0,0x2e,0xe0,0x8f,0x6c,0x36,0x88,0x43,0x32,0x36,0x8a,0x42,0x14,0x6f,0xca,0x1d,0x2b,0x24,0x66,0x9b,0x89,0xbe,0x22,0x67,0x6c,0x48,0xe1,0xe8,0xf4,0x32,0x59,0x98,0x21,0xcb,0x9e,0x27,0x89,0x28,0xdb,0x38,0xe0,0x0f,0x4a,0x06,0x9f,0x9b,0x80,0x1c,0x06,0xf3,0xa5,0x57,0xcc,0x87,0x01,0x75,0x28,0x0e,0x29,0x8b,0xb7,0x93,0xa1};
    uint256_from_bytes(multiplier, multiplier63);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product63, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier64[32]   = {0x9e,0xed,0xa6,0x66,0x44,0xcb,0xde,0x28,0x84,0x5c,0x2d,0x6f,0x78,0x5e,0xf8,0x5a,0x40,0x95,0x57,0x19,0x36,0x85,0xbc,0xb7,0x9e,0x64,0x5c,0xeb,0x84,0xfc,0xd2,0xaa};
    static std::uint8_t product64[64]      = {0x62,0xaa,0x36,0x03,0xc2,0x6f,0xd1,0xc6,0xa3,0x75,0x5f,0x12,0x58,0xb8,0x0d,0xa3,0x1b,0x5c,0xf1,0xe7,0x52,0x1e,0xdf,0xee,0x41,0x3a,0xd5,0x40,0x05,0x67,0xac,0xf9,0x85,0x73,0x26,0xa4,0x0f,0x5d,0xb5,0x77,0xe0,0xab,0xb4,0x23,0x9a,0xea,0x11,0x61,0x31,0x3e,0x56,0xdd,0x85,0x64,0xf8,0xdd,0x91,0x7a,0xa7,0x0a,0xbc,0x0b,0x58,0xe4};
    uint256_from_bytes(multiplier, multiplier64);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product64, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier65[32]   = {0x90,0x4a,0xef,0x17,0x0b,0x29,0xbb,0xf1,0xfb,0x1d,0xbe,0xdb,0x16,0xeb,0xa1,0x02,0x03,0xa7,0xa6,0x93,0xa3,0xfb,0x78,0x65,0x1b,0xf9,0xd5,0xb7,0x43,0x30,0xa4,0x20};
    static std::uint8_t product65[64]      = {0x51,0x54,0x62,0xe9,0x05,0x2d,0x70,0x7b,0xd1,0x50,0xd9,0x3a,0x03,0x3a,0x1d,0x0b,0x9d,0x8d,0xc4,0x85,0xa5,0xb0,0x2b,0x52,0xa0,0x20,0x83,0xc4,0x54,0x54,0x76,0xe5,0x2a,0xf3,0x55,0x7c,0xe2,0x3b,0x0f,0x4c,0xf3,0x5d,0xd1,0x56,0x61,0x38,0xad,0xa2,0xe3,0xf0,0xc7,0xa1,0x4e,0x16,0xf1,0x7e,0x18,0x8a,0x64,0xe6,0xb5,0x39,0x04,0x00};
    uint256_from_bytes(multiplier, multiplier65);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product65, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier66[32]   = {0xb3,0x72,0xe8,0x1e,0xa3,0x01,0x0f,0x0d,0x7d,0xef,0x0c,0x0b,0xd6,0xe0,0x40,0x5b,0xbd,0xa9,0xd0,0x6d,0x35,0xa4,0x7d,0xd6,0x10,0x1d,0x80,0x29,0x23,0x9b,0x8c,0x82};
    static std::uint8_t product66[64]      = {0x7d,0xc9,0xe4,0x2e,0x65,0xb4,0x33,0x1a,0xcd,0x72,0xc8,0x56,0x60,0x41,0x3c,0xa3,0xa5,0x82,0xef,0x0d,0x14,0xec,0xef,0xd8,0xf4,0xd4,0xbc,0x1b,0x55,0x8a,0x2a,0x0e,0x5c,0x36,0x62,0x36,0xb3,0xec,0x22,0x9c,0x76,0x13,0xaf,0xce,0x0b,0x69,0x2d,0xc1,0x8d,0x5f,0x13,0x26,0xb7,0xc4,0x8a,0x5e,0x0e,0xbc,0xe8,0x92,0xfe,0x8a,0x72,0x04};
    uint256_from_bytes(multiplier, multiplier66);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product66, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier67[32]   = {0xed,0xec,0x4b,0xad,0x41,0xae,0x62,0xd8,0xbd,0x58,0xdd,0x3f,0x1f,0x11,0x54,0x63,0xc7,0x17,0x19,0x1b,0xd7,0xf5,0xb0,0xcf,0x6b,0x8b,0x42,0x70,0x7d,0xea,0xb2,0x4d};
    static std::uint8_t product67[64]      = {0xdd,0x1f,0x5e,0x3a,0x69,0x6c,0xf6,0x49,0x92,0xaa,0x42,0x5d,0x5c,0x98,0x8f,0x57,0x66,0x71,0x68,0xd5,0x9a,0x33,0x7f,0x37,0x61,0x82,0xa6,0xa6,0xae,0x45,0xdb,0x53,0xb3,0x26,0x33,0x55,0x98,0x9d,0xfb,0x29,0x9a,0x0d,0xb7,0xbe,0xc0,0xdb,0x8b,0x54,0xd8,0xb9,0xb5,0x4e,0x34,0xc1,0x58,0xcb,0x6c,0xd8,0xc0,0xa9,0xa2,0xf3,0x2b,0x29};
    uint256_from_bytes(multiplier, multiplier67);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product67, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier68[32]   = {0x50,0x61,0xa4,0xf2,0xdf,0xd7,0x44,0x63,0x57,0x93,0x81,0xad,0xe0,0x48,0xdc,0x7c,0x36,0xde,0x6b,0x5e,0xee,0xe4,0xf8,0x80,0x1b,0xaa,0x28,0xa6,0xb2,0x8a,0xbd,0x81};
    static std::uint8_t product68[64]      = {0x19,0x3d,0x2c,0x56,0x36,0x3c,0x41,0x17,0xb0,0x59,0xe1,0x04,0x86,0xae,0x77,0xe2,0x12,0x6a,0x86,0x14,0xb4,0xde,0xbf,0xf1,0xb9,0x83,0xe4,0x0e,0x9a,0x34,0x3a,0x6e,0x28,0x32,0x69,0xb7,0x1a,0x45,0x12,0x85,0x0c,0x3f,0x24,0xb4,0xf0,0xe8,0xd1,0x99,0xe8,0xd9,0xf6,0x85,0xf1,0x32,0x59,0x94,0x48,0xff,0x4e,0x04,0x3f,0x5b,0xbb,0x01};
    uint256_from_bytes(multiplier, multiplier68);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product68, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier69[32]   = {0xc1,0x2f,0x46,0x04,0x36,0x13,0x6b,0xa5,0x8a,0xad,0xa3,0xe7,0x08,0xdc,0xb5,0x5d,0x91,0xb5,0xb9,0x16,0x56,0xd5,0x28,0xda,0x7e,0xd4,0x22,0x18,0x5c,0x29,0x50,0xc1};
    static std::uint8_t product69[64]      = {0x91,0xc8,0x50,0x4d,0x22,0x3b,0x71,0x15,0x7c,0xc8,0xd4,0xca,0xd3,0x99,0x26,0x77,0xaa,0x24,0xd9,0x65,0xea,0x41,0x8b,0x28,0x6e,0x85,0x20,0xf0,0x45,0xed,0x0a,0xd2,0xe6,0x0b,0x94,0x93,0x0d,0xd4,0x88,0xfe,0xcd,0xfe,0x16,0xc6,0x41,0xd6,0x5d,0x8c,0x05,0xf7,0x21,0xd0,0x64,0x5f,0xa3,0x6c,0x1e,0x08,0x20,0xe5,0xaf,0x4b,0x31,0x81};
    uint256_from_bytes(multiplier, multiplier69);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product69, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier70[32]   = {0x3b,0xb9,0x71,0xe9,0x43,0xac,0xd8,0x6d,0xa8,0x97,0xbc,0x96,0x34,0x3b,0x02,0x14,0x2b,0x4e,0xbf,0x47,0xa6,0x2b,0x38,0x45,0x32,0xf2,0x82,0x2e,0xfd,0xac,0x79,0x9c};
    static std::uint8_t product70[64]      = {0x0d,0xef,0x00,0xd7,0x5b,0x05,0x3d,0xde,0x33,0xca,0x50,0xab,0x96,0x6f,0xc7,0xda,0x90,0x05,0x1e,0xd0,0x66,0x8e,0xc4,0xe7,0x00,0x71,0x2c,0x0b,0x2b,0x61,0x1a,0xde,0x8f,0xdb,0x13,0x67,0x28,0x1f,0xa9,0x19,0x46,0x7c,0xc5,0x36,0xb3,0x12,0x42,0x37,0xdc,0xc9,0x7f,0x14,0x1c,0xb8,0x89,0xf2,0x2b,0xcc,0x80,0xa1,0xfb,0x64,0xd7,0x10};
    uint256_from_bytes(multiplier, multiplier70);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product70, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier71[32]   = {0x42,0xad,0x93,0x2f,0x40,0xba,0x91,0x65,0xf6,0xd4,0x6b,0xa4,0x0f,0xa5,0x0f,0x9c,0x91,0xb7,0x2d,0x8a,0xbc,0xa7,0x24,0x50,0x9c,0xa8,0xc7,0x38,0x6a,0x5a,0x5b,0x66};
    static std::uint8_t product71[64]      = {0x11,0x5d,0xf5,0x94,0x9f,0xdc,0xfc,0x30,0x2e,0xef,0x70,0x2d,0x3f,0x95,0xbe,0x10,0xe9,0x0b,0xeb,0xdd,0x05,0xb3,0xeb,0x64,0xb1,0xb8,0x82,0x26,0x57,0x51,0x50,0x6c,0x4d,0x96,0xd5,0xab,0x5a,0x10,0x6e,0x1b,0x44,0x0c,0x0a,0x85,0xbd,0xdf,0x6d,0x7f,0x2e,0x92,0x61,0x57,0xc7,0xf4,0x47,0x83,0x73,0xaf,0x84,0x34,0xdc,0x59,0xac,0xa4};
    uint256_from_bytes(multiplier, multiplier71);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product71, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier72[32]   = {0x0f,0x36,0x10,0xed,0xc3,0xda,0x97,0x94,0xd3,0x60,0x8b,0x1e,0xe0,0x1d,0x2d,0xac,0x56,0x8a,0x12,0x82,0xfe,0x13,0x87,0xc2,0x1c,0x50,0x6b,0x95,0xbe,0x2e,0x02,0x74};
    static std::uint8_t product72[64]      = {0x00,0xe7,0x61,0x67,0x02,0x60,0xd3,0x4a,0xef,0x14,0x7e,0x96,0xfe,0xad,0x67,0x17,0x06,0xde,0x83,0x6e,0x12,0x2a,0xb3,0x6e,0x40,0x88,0xd8,0x72,0x2a,0x72,0xda,0x9a,0x66,0xf6,0x38,0x87,0x45,0xe9,0x88,0x9a,0xe6,0x77,0xda,0xfa,0x91,0xfc,0x70,0x6d,0x10,0x3d,0x03,0xd7,0x7d,0xf1,0x81,0xac,0x4d,0x64,0x26,0xf1,0x11,0xb6,0x04,0x90};
    uint256_from_bytes(multiplier, multiplier72);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product72, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier73[32]   = {0xe5,0xb2,0x30,0x39,0x97,0x46,0xa9,0xcc,0x7a,0xc7,0x7d,0x21,0x47,0x9f,0xcc,0x3f,0x07,0xdf,0x7f,0x54,0x87,0xbb,0xc7,0xc4,0xab,0xd7,0x46,0x28,0x20,0x3d,0x4a,0x58};
    static std::uint8_t product73[64]      = {0xce,0x18,0x46,0x4e,0x21,0xd0,0x6f,0xbb,0x2a,0x8c,0x5e,0x31,0x8d,0x77,0xc9,0x73,0x9a,0x37,0x2e,0x48,0x4c,0xee,0xfb,0xbc,0xb8,0x52,0x9a,0xff,0x3d,0x54,0x66,0x06,0x7f,0xc2,0xe1,0x13,0xa5,0x88,0xd7,0xe1,0x28,0x26,0x9a,0x12,0x60,0xf7,0xa9,0x39,0x61,0xfa,0xf4,0x04,0x99,0xb0,0xa6,0xf0,0x0b,0xae,0xbc,0xc2,0x83,0x86,0xfe,0x40};
    uint256_from_bytes(multiplier, multiplier73);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product73, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier74[32]   = {0xaf,0xa7,0x3b,0xee,0xd2,0xff,0x4e,0xd2,0xd8,0x08,0x21,0x55,0x8f,0xc7,0x28,0xfa,0x27,0x82,0xa9,0x04,0xb9,0x09,0xbe,0x2e,0x75,0x9e,0x9c,0xed,0xa3,0x50,0x5c,0x1e};
    static std::uint8_t product74[64]      = {0x78,0x86,0x11,0x2f,0xc4,0x18,0x4a,0xeb,0xc9,0x64,0x93,0xbb,0xf1,0x6c,0x2b,0x69,0x7b,0xe3,0x69,0x62,0x71,0x34,0x2a,0x23,0xef,0x6c,0xe6,0x6e,0xb8,0x7b,0x20,0x65,0xc7,0x4b,0x13,0x27,0x04,0xd4,0xdd,0x3e,0xc7,0xe5,0x7f,0xd5,0xc4,0x30,0xd0,0x50,0x51,0x55,0x9f,0x43,0x1c,0x89,0x29,0xce,0xdc,0x46,0x8e,0x13,0xe7,0xe5,0x93,0x84};
    uint256_from_bytes(multiplier, multiplier74);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product74, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier75[32]   = {0x96,0x67,0x39,0x3a,0xd6,0xd1,0x2e,0x73,0x55,0xb4,0x12,0x67,0x82,0x14,0x7a,0xa5,0x26,0xaa,0x6c,0x46,0x4b,0x52,0xfa,0xd0,0xee,0xa3,0xba,0x59,0xdd,0x4a,0x94,0x9d};
    static std::uint8_t product75[64]      = {0x58,0x5d,0x20,0xb0,0x0d,0xe1,0x3f,0xf1,0xba,0xf8,0xc9,0x7a,0xd5,0x8d,0xc0,0x96,0x37,0xad,0x63,0x30,0x22,0x51,0x10,0x0b,0x01,0x8d,0x1e,0x35,0xca,0xb0,0xbc,0x32,0x29,0x9e,0x2b,0x05,0xf8,0x99,0x57,0x34,0x4c,0xa8,0x95,0xed,0xe7,0x8c,0x8a,0x1a,0x68,0x68,0x62,0x2a,0x63,0x95,0x51,0x89,0x29,0x07,0x53,0x7b,0x53,0x09,0xe8,0x49};
    uint256_from_bytes(multiplier, multiplier75);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product75, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier76[32]   = {0x54,0xcd,0x25,0xab,0x79,0x6e,0xb7,0xc4,0xfa,0x72,0x04,0xcf,0xa2,0x5c,0x60,0x59,0x07,0x0b,0xe7,0x00,0x09,0x6b,0x94,0x50,0x43,0x93,0x9c,0x50,0xc3,0x1b,0xc4,0x33};
    static std::uint8_t product76[64]      = {0x1c,0x17,0x45,0x1d,0xe1,0xdc,0x27,0xe1,0x0a,0x76,0x38,0xea,0x26,0xbf,0x51,0xa6,0x36,0xdd,0x82,0x56,0x4d,0x68,0x97,0x52,0xcb,0x55,0x29,0x2b,0x7f,0x77,0x70,0xa7,0xec,0x97,0xaa,0x11,0x37,0xa9,0x21,0x82,0x49,0xe8,0xfe,0x0f,0x40,0x98,0x7a,0x5f,0x16,0x86,0xc4,0x02,0xcf,0x2a,0xb9,0xba,0x61,0xbe,0x17,0xc8,0xab,0x20,0x22,0x29};
    uint256_from_bytes(multiplier, multiplier76);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product76, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier77[32]   = {0x8e,0xe5,0x78,0x97,0x59,0xbb,0x47,0xaa,0xed,0xfe,0x6e,0x08,0xae,0x3f,0xbe,0x82,0x9c,0xa1,0x08,0x59,0x1c,0x8e,0xb0,0x3b,0x46,0xe0,0xcc,0x71,0x5d,0xdc,0x22,0x70};
    static std::uint8_t product77[64]      = {0x4f,0xc3,0x5f,0x78,0xdf,0x20,0x8a,0x2a,0x65,0x66,0x96,0xdc,0x67,0x67,0x43,0x57,0xeb,0x46,0xfa,0xa8,0x10,0x1c,0x4d,0x5e,0x06,0x44,0xf3,0x2a,0x40,0xde,0x7b,0xae,0xe4,0xe0,0x7b,0xb2,0x64,0xc8,0xde,0x1e,0xdb,0x20,0xa6,0x44,0xe2,0x78,0x2c,0x97,0x48,0xbd,0x0c,0x23,0x10,0x0f,0x63,0x7c,0x59,0xa2,0x95,0x30,0x95,0x21,0xf1,0x00};
    uint256_from_bytes(multiplier, multiplier77);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product77, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier78[32]   = {0x6a,0x98,0x0b,0xc7,0x84,0xdf,0x0a,0xfa,0xf0,0xca,0x13,0xd4,0x2b,0x1b,0xb9,0x4b,0xd1,0xe1,0x28,0x5a,0xf1,0x1f,0x7b,0xce,0x5e,0x8b,0xa2,0x7c,0x2f,0x42,0x80,0x65};
    static std::uint8_t product78[64]      = {0x2c,0x62,0x44,0x0f,0x37,0x81,0x3e,0xdf,0xdc,0x10,0xb0,0xdd,0xe1,0x7d,0xab,0x3a,0x89,0xac,0xcc,0x8b,0x5d,0x89,0xd3,0xcf,0x38,0xd0,0x75,0x4c,0x03,0x01,0x98,0xcb,0x80,0xd8,0xe8,0x52,0x9c,0x76,0xf2,0x68,0x34,0x64,0xab,0xe5,0x18,0x1f,0xae,0xc4,0x43,0x42,0x2b,0xa0,0x45,0x8f,0x41,0x1b,0x95,0x53,0xb2,0x43,0x8a,0x79,0x27,0xd9};
    uint256_from_bytes(multiplier, multiplier78);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product78, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier79[32]   = {0x5c,0x3a,0xe6,0x5c,0xaa,0xdd,0x18,0x2f,0x8f,0x28,0x51,0xea,0x1f,0x41,0x1f,0xbc,0x04,0x4e,0xfa,0x5f,0xf7,0xde,0x50,0x35,0x28,0x17,0x4a,0x25,0xbd,0xcd,0x61,0x78};
    static std::uint8_t product79[64]      = {0x21,0x3a,0x63,0x1f,0xcc,0x16,0xfa,0x21,0xac,0xdb,0x13,0xa2,0xab,0x40,0x34,0xd6,0xd0,0x13,0xde,0xe6,0xe2,0xcc,0x41,0x2e,0xa4,0x2c,0xa1,0x43,0x25,0x5e,0xf6,0x45,0x38,0xe0,0x87,0xe7,0x41,0xf6,0xbb,0xe1,0x6f,0x3b,0x8c,0xc6,0x75,0xea,0xc8,0xbc,0xc1,0xe7,0xcc,0xe5,0xc3,0xa7,0x7c,0x58,0x2a,0x00,0x73,0x60,0x6f,0x4c,0x28,0x40};
    uint256_from_bytes(multiplier, multiplier79);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product79, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier80[32]   = {0x4c,0x71,0x42,0x76,0x7b,0x9f,0x20,0xc5,0x90,0x3f,0xd9,0x0a,0x28,0x49,0xd5,0xc3,0xe8,0x38,0xec,0xea,0x41,0xf0,0xbe,0x6b,0x50,0xcf,0x90,0x27,0xc6,0x4a,0x5b,0xd7};
    static std::uint8_t product80[64]      = {0x16,0xd3,0x71,0x92,0x17,0x40,0xec,0x84,0x7b,0x59,0xa2,0x25,0x1b,0xe1,0x40,0xa4,0xe6,0x42,0x5a,0x31,0xe6,0x82,0x9b,0x05,0xbc,0x38,0x38,0x1f,0x5b,0xfb,0x18,0x77,0xd0,0x56,0x00,0xce,0xa7,0x12,0x9b,0xe0,0x15,0xab,0x76,0xd5,0x0e,0xa8,0x7a,0x2a,0xb5,0x99,0xc9,0x14,0xd1,0x09,0xd4,0xa2,0x91,0x42,0xf7,0x2b,0xcd,0x3e,0x8e,0x91};
    uint256_from_bytes(multiplier, multiplier80);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product80, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier81[32]   = {0xdc,0x0c,0x51,0xb6,0x62,0x69,0xe2,0xc0,0x82,0x30,0x43,0x19,0xe2,0x21,0x75,0xc8,0xa6,0xf4,0x31,0x8c,0x51,0x1f,0x52,0xca,0x35,0xa0,0x97,0xc9,0xa0,0x04,0xff,0x93};
    static std::uint8_t product81[64]      = {0xbd,0x25,0x2d,0x09,0x3c,0x54,0x23,0xdf,0x37,0xb0,0xa1,0x5d,0x9c,0x9c,0xb5,0x12,0x3b,0x50,0x53,0xf7,0xc4,0xae,0xe5,0x3d,0x8d,0xc9,0x10,0xfd,0xbd,0xc3,0xbd,0xa5,0xda,0x4b,0xe8,0x8b,0x7f,0xfd,0x04,0x7f,0x98,0xbb,0xb3,0x74,0x1c,0xa1,0x33,0x78,0xab,0x86,0x52,0x04,0x39,0x81,0x11,0xa0,0xe7,0x1e,0xfe,0x66,0xbb,0xbe,0x2e,0x69};
    uint256_from_bytes(multiplier, multiplier81);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product81, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier82[32]   = {0x2a,0x1f,0x05,0xca,0x61,0xff,0xf2,0x16,0xa3,0xe9,0x7f,0x8e,0xdd,0x0c,0xff,0xcc,0x87,0x4a,0xb4,0xe8,0xd5,0xaf,0x6a,0x7e,0xef,0xef,0x13,0xac,0x8e,0x2e,0x2f,0x1b};
    static std::uint8_t product82[64]      = {0x06,0xee,0x31,0xa8,0xcf,0x4d,0x3f,0x3e,0xdc,0x27,0x33,0xe2,0xe6,0xda,0xfc,0xe8,0xd6,0xce,0x61,0x25,0x2c,0x6a,0xb0,0x89,0xd2,0xcd,0x12,0x0c,0x3b,0x63,0xac,0xad,0xf3,0xab,0x81,0x9c,0xd2,0x68,0x7b,0xde,0x43,0x82,0xff,0xbc,0x17,0xcd,0x53,0x59,0x72,0x95,0x20,0x13,0x78,0x91,0x82,0x2e,0x96,0x6e,0x92,0xde,0xea,0x5e,0xec,0xd9};
    uint256_from_bytes(multiplier, multiplier82);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product82, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier83[32]   = {0x4c,0xea,0x72,0x9b,0x41,0x65,0xe5,0x2c,0xce,0x12,0x77,0x88,0x76,0xb1,0xf3,0xaa,0x55,0x9a,0x8b,0xb7,0xe3,0xd1,0x32,0x54,0xcc,0xdd,0x70,0xbd,0x34,0x70,0x9c,0x8d};
    static std::uint8_t product83[64]      = {0x17,0x1c,0x0a,0xc1,0xe5,0xf6,0xb2,0xc0,0x92,0x78,0x03,0x74,0xeb,0xee,0x1a,0xbe,0xf2,0xc2,0x01,0x1c,0x7e,0x07,0x6a,0xc4,0x43,0x0e,0x07,0xcf,0x33,0x78,0xa8,0x3f,0x5d,0x6d,0x03,0x94,0x85,0x6f,0xda,0x53,0xaf,0xac,0xe9,0xe6,0x26,0xe4,0x91,0xc8,0x73,0xe1,0xd4,0xf7,0x77,0x2d,0xee,0x30,0x05,0x72,0x79,0x54,0xa3,0x1c,0x25,0xa9};
    uint256_from_bytes(multiplier, multiplier83);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product83, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier84[32]   = {0xd6,0xcf,0xf4,0x3a,0x2d,0xc0,0xce,0xfe,0x78,0x94,0x89,0x87,0xfd,0xd6,0x8e,0x98,0x8b,0xbe,0xa0,0x14,0x4e,0x66,0xf7,0x57,0x70,0x96,0x19,0x8f,0x63,0x90,0x97,0xd7};
    static std::uint8_t product84[64]      = {0xb4,0x40,0x55,0x3e,0x23,0x93,0x4c,0x50,0x7f,0x3f,0x91,0x4c,0x2b,0x40,0x63,0x0c,0x51,0x7d,0xa6,0xe2,0xdd,0xbe,0xc4,0x36,0x93,0xb5,0xaa,0x35,0x06,0x42,0x9e,0x9b,0xd4,0xdf,0x72,0x9c,0xbf,0x5d,0xa5,0x3a,0x6a,0x10,0xea,0x71,0xa5,0x3b,0xe6,0x00,0x45,0x53,0xad,0x4e,0x22,0x50,0x9a,0x32,0xaf,0xde,0xc7,0x4d,0x75,0xef,0x56,0x91};
    uint256_from_bytes(multiplier, multiplier84);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product84, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier85[32]   = {0xba,0x43,0xd7,0x7e,0x74,0x88,0x2b,0x1e,0x35,0xfb,0x56,0xd7,0x5f,0x88,0xc3,0x62,0xa8,0xac,0x8a,0xaa,0x53,0x69,0xd8,0x52,0x58,0x6c,0xa9,0xc7,0xcb,0x87,0xba,0xaa};
    static std::uint8_t product85[64]      = {0x87,0x86,0xa7,0x1e,0x42,0xec,0x84,0x22,0x1b,0xc4,0x5b,0xaa,0xf3,0x1e,0x47,0x6d,0xfa,0x6f,0x3f,0xeb,0xdd,0xd9,0xf4,0xc3,0x74,0xad,0x2c,0x7f,0x6c,0x3c,0xbf,0xa5,0x71,0xf2,0x45,0xcf,0x20,0xf8,0x56,0x41,0x2b,0xa0,0x6e,0xea,0xa1,0x90,0x7d,0x41,0x90,0x7a,0xf8,0x75,0xd6,0x80,0xe6,0x69,0xa2,0xb9,0x32,0x4c,0x03,0x67,0x78,0xe4};
    uint256_from_bytes(multiplier, multiplier85);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product85, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier86[32]   = {0xff,0xcc,0x4b,0xec,0x25,0x50,0x28,0x1c,0xe7,0xed,0xb0,0x16,0x35,0x80,0x3d,0x8a,0xc2,0x2e,0x09,0x32,0x8f,0xbb,0x2b,0xb9,0x73,0x23,0x53,0x3c,0x58,0x24,0x83,0x0a};
    static std::uint8_t product86[64]      = {0xff,0x98,0xa2,0x49,0x89,0x35,0x5f,0x5b,0x4c,0xd8,0x51,0x7f,0x38,0xc9,0x20,0x7a,0x9a,0xfa,0xbd,0x4a,0x52,0x1f,0x11,0x50,0xf8,0xf1,0x3d,0x82,0xba,0xfd,0x68,0x38,0x0f,0xcc,0xaa,0x31,0x78,0x9b,0x60,0x11,0x9f,0x99,0xb4,0xa2,0x87,0xc5,0x4f,0xe5,0xbe,0x80,0xc8,0x20,0x5a,0x27,0xd7,0x8b,0xed,0x2b,0x07,0xfb,0xfd,0xe3,0x3c,0x64};
    uint256_from_bytes(multiplier, multiplier86);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product86, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier87[32]   = {0x23,0x8c,0x1e,0xeb,0xba,0x2f,0x7c,0x90,0x62,0xe8,0x01,0xb0,0xda,0x33,0xf7,0x9c,0x7c,0xdb,0xed,0x71,0xa5,0x93,0xfb,0xe4,0x67,0x7d,0x23,0xca,0x3b,0xdf,0x3b,0xdc};
    static std::uint8_t product87[64]      = {0x04,0xef,0x9d,0x26,0x4a,0x78,0xb8,0xb2,0x34,0xc1,0x30,0x4c,0xf4,0xcb,0x11,0x46,0x2f,0x9d,0x4a,0xd4,0x29,0xd9,0xdc,0xa2,0x41,0x39,0x61,0xb1,0xaf,0xf6,0x90,0x45,0xc0,0x48,0x04,0x67,0x31,0x69,0x11,0x9b,0x21,0x75,0x9b,0xae,0x2b,0x8c,0x12,0x03,0x6a,0xaa,0xf7,0x5b,0x70,0x59,0x0e,0x2d,0x11,0x81,0x47,0x70,0xbf,0x47,0x25,0x10};
    uint256_from_bytes(multiplier, multiplier87);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product87, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier88[32]   = {0x9d,0x3b,0xcf,0x49,0xa5,0x14,0x99,0x3b,0xe3,0x02,0x45,0xa5,0xc6,0x63,0x80,0x0f,0xd5,0x80,0xe2,0x62,0x58,0x44,0x9f,0x89,0x2c,0x57,0x44,0x3a,0xcc,0x19,0x8d,0x84};
    static std::uint8_t product88[64]      = {0x60,0x92,0x6a,0x39,0x88,0x45,0x89,0x98,0xf6,0x0d,0x38,0xee,0x13,0x62,0x55,0xce,0x38,0x41,0xaf,0x19,0x1f,0x34,0xcd,0x90,0xc5,0xd4,0x08,0xd3,0xe1,0x4a,0x97,0x7b,0x6b,0xba,0xcf,0x1b,0xcb,0x64,0x91,0x36,0x06,0x8c,0xe8,0x02,0xa9,0x18,0x7d,0xbe,0x1c,0xd1,0x95,0x97,0xc7,0x92,0x3b,0x3a,0x41,0x32,0xfb,0xe7,0x52,0x02,0xac,0x10};
    uint256_from_bytes(multiplier, multiplier88);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product88, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier89[32]   = {0xdc,0x9d,0x36,0x9a,0x47,0x0d,0x89,0xd9,0x18,0x49,0xe5,0x30,0x70,0x14,0x66,0x55,0xf2,0x0f,0xa9,0x71,0x08,0x3b,0xf7,0x8b,0xf6,0xf5,0x73,0xd8,0x19,0x2f,0x52,0x5a};
    static std::uint8_t product89[64]      = {0xbe,0x1e,0x96,0x65,0x2e,0xff,0xde,0x7b,0x7c,0x30,0xbf,0x2c,0x79,0x64,0x3f,0x34,0x1d,0x26,0x3b,0x2d,0x72,0x0e,0xe7,0x5b,0xa2,0xe0,0xf9,0xc1,0x13,0x81,0x4d,0x2f,0x44,0xc1,0x9a,0xff,0x5a,0xc7,0x48,0x61,0xcc,0xde,0x81,0xb3,0x11,0x02,0xf8,0x7d,0x2e,0x8f,0x8b,0xa8,0x80,0x3c,0x1d,0x9f,0x9e,0x96,0x1a,0xb4,0xeb,0x89,0xc7,0xa4};
    uint256_from_bytes(multiplier, multiplier89);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product89, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier90[32]   = {0xdd,0x4f,0x60,0x0a,0x7b,0x6a,0x43,0xc7,0xb3,0x5b,0xea,0x00,0x14,0xef,0xd9,0x6e,0x2f,0xe6,0x31,0x34,0xef,0xb0,0x86,0x8b,0x7a,0x97,0xaf,0x46,0xfa,0x30,0x0b,0x50};
    static std::uint8_t product90[64]      = {0xbf,0x52,0x24,0x6e,0x83,0x95,0x81,0x9a,0x33,0x8f,0xc0,0x1b,0x9c,0x8e,0x5f,0xca,0x45,0xbf,0xf4,0x72,0x80,0x9b,0x4a,0x4c,0xb4,0xc4,0xc3,0x0b,0x4f,0xef,0x2f,0x65,0x0b,0x6f,0xa4,0xcd,0xad,0x99,0xc7,0x55,0x6b,0xf4,0xfa,0x12,0xab,0x5d,0x06,0x04,0x6b,0x42,0x81,0x9c,0xce,0x37,0x16,0x11,0x0e,0x9f,0x6e,0xdc,0x7e,0x7f,0xf9,0x00};
    uint256_from_bytes(multiplier, multiplier90);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product90, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier91[32]   = {0xb7,0x80,0x74,0x63,0x4a,0x2e,0x61,0x4f,0x64,0x26,0x5e,0xda,0x08,0xf6,0xf5,0xfc,0x26,0xf6,0x8d,0x55,0x4e,0x87,0x2d,0x99,0x64,0xdf,0xc0,0x50,0xdc,0x40,0x69,0xbf};
    static std::uint8_t product91[64]      = {0x83,0x88,0xe6,0xda,0x8c,0x42,0x9f,0x3d,0x4e,0x21,0x10,0xcd,0xd1,0xe8,0x6e,0x8b,0x68,0x11,0xfd,0x20,0x5d,0x34,0x4c,0xc1,0xcb,0xad,0xf7,0x26,0x26,0x4d,0x88,0xc7,0x37,0xa5,0x55,0x23,0x60,0xba,0x00,0x75,0xe2,0xaf,0x47,0xbb,0xc0,0xe5,0x00,0x17,0xa6,0xa6,0x0b,0x1b,0x9f,0x08,0xfb,0x0e,0x77,0x21,0x5d,0x55,0x53,0x2e,0x3c,0x81};
    uint256_from_bytes(multiplier, multiplier91);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product91, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier92[32]   = {0x9f,0x13,0x17,0x14,0x63,0xd0,0x4e,0xcf,0x0b,0x2a,0x4f,0x67,0xcc,0x40,0x29,0x9a,0x9d,0x3e,0xd3,0x10,0x7d,0x72,0xde,0xd6,0x5a,0xba,0x97,0x3d,0x2f,0x5c,0x39,0x9f};
    static std::uint8_t product92[64]      = {0x62,0xd8,0xb8,0x17,0xc3,0x18,0x3e,0x60,0x10,0x3a,0x81,0xba,0x5d,0x58,0xc4,0x8b,0xd5,0xb9,0x86,0x81,0x58,0x3e,0xa0,0xf2,0x6f,0x10,0xe2,0x18,0x27,0xfd,0xa6,0x8a,0x6e,0x64,0x48,0xb2,0x5d,0x80,0x5a,0xeb,0xcb,0x3c,0x1e,0x12,0x84,0xc1,0x93,0x14,0xc2,0xb0,0x3f,0x0e,0xdd,0x4b,0x00,0xd9,0xed,0xbc,0x06,0x27,0xd9,0x40,0x30,0xc1};
    uint256_from_bytes(multiplier, multiplier92);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product92, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier93[32]   = {0xb6,0xfb,0x58,0xa0,0x6d,0x4f,0xd6,0xb5,0xdd,0x07,0xcb,0xf5,0x03,0x45,0x9a,0xec,0x2e,0x61,0x36,0x5c,0x75,0xfc,0x15,0x35,0x08,0x04,0x80,0x08,0xb8,0x2f,0x72,0xd1};
    static std::uint8_t product93[64]      = {0x82,0xca,0x58,0xcb,0x04,0xb2,0x8f,0x89,0x54,0xfd,0x04,0x51,0x0f,0x9e,0x64,0x83,0x69,0x74,0xfe,0x3c,0x6e,0x33,0x7f,0xf2,0x14,0xec,0x35,0xab,0x17,0x50,0xc5,0xe4,0xcb,0x41,0xe1,0x5c,0x1f,0x47,0x23,0xd6,0xd5,0x45,0xe0,0x83,0x85,0xd3,0x1e,0xb9,0x9d,0x91,0x68,0x7d,0xed,0xc5,0x45,0xae,0x20,0xd4,0x6a,0xe7,0xcc,0x3c,0xce,0xa1};
    uint256_from_bytes(multiplier, multiplier93);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product93, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier94[32]   = {0x29,0x56,0x91,0x3f,0x2c,0xdf,0xa8,0x8e,0x2b,0x4c,0x2d,0x3b,0x7a,0xf7,0xa4,0x73,0xb3,0x5b,0x1c,0x47,0xa9,0x12,0xbd,0x96,0xe0,0x68,0x52,0x6f,0x72,0xa2,0x67,0x7d};
    static std::uint8_t product94[64]      = {0x06,0xac,0xd7,0xcc,0x25,0x3a,0x6a,0xaf,0x44,0x47,0x26,0x09,0x01,0xa2,0x1b,0xad,0xe6,0x75,0xfb,0x9c,0x09,0x98,0xf3,0xaa,0x18,0x61,0x64,0x7a,0xa3,0x17,0x55,0x1f,0xc8,0x16,0x68,0x0c,0xfc,0xce,0xf1,0xfd,0x0b,0xbd,0xd8,0x90,0x15,0x11,0x45,0x2a,0x03,0x4d,0x2f,0x73,0xd8,0x68,0xc7,0x7f,0x7c,0x06,0xdd,0x98,0x78,0x09,0xd3,0x09};
    uint256_from_bytes(multiplier, multiplier94);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product94, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier95[32]   = {0xa6,0xc6,0x74,0x46,0x89,0xd1,0x3f,0x4a,0xa6,0x0a,0xbe,0xcc,0x82,0x0a,0xe0,0x13,0xaf,0xda,0xd2,0xc6,0x57,0xf0,0x7b,0xa1,0x02,0xe0,0x35,0x03,0x6a,0xff,0x42,0x77};
    static std::uint8_t product95[64]      = {0x6c,0xa5,0xf8,0xa3,0x8c,0xa8,0x8e,0x18,0x00,0xca,0xac,0x23,0x35,0x09,0x62,0x5d,0x40,0x75,0x11,0xb1,0xe9,0x4f,0xf9,0x2c,0x96,0x2e,0x1e,0x0f,0xa3,0xff,0x8d,0x67,0x3b,0xc1,0xdd,0xb1,0x42,0xc2,0x94,0x0a,0xba,0xf4,0x30,0xe7,0x5c,0xf4,0xd8,0x8d,0xfa,0xb0,0x66,0x2c,0x3e,0xb1,0x99,0xc5,0x8c,0x79,0x36,0x5a,0x06,0x53,0x93,0x51};
    uint256_from_bytes(multiplier, multiplier95);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product95, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier96[32]   = {0x46,0xa3,0xca,0x1e,0x5c,0x95,0xe7,0x58,0x01,0x91,0x12,0x64,0x8f,0xe2,0xc6,0x0b,0x58,0x5d,0x09,0x0a,0xab,0x92,0xd3,0xc2,0x29,0xaf,0x70,0x70,0x41,0x76,0x2f,0x4b};
    static std::uint8_t product96[64]      = {0x13,0x7d,0xfb,0x53,0x9c,0xdf,0xcf,0x1f,0x20,0xa2,0x85,0xf4,0x18,0x68,0x4a,0xe6,0x93,0xe0,0xcb,0x02,0x5f,0xe3,0x2a,0x49,0xaa,0x18,0x13,0x2b,0x95,0xbb,0xaf,0xbc,0x88,0xdc,0x27,0xca,0x50,0x0e,0x12,0x08,0x57,0x5c,0xfe,0xfb,0xce,0x3b,0x22,0x7f,0xf8,0x94,0xa6,0x23,0x0c,0x75,0x14,0xe7,0x70,0x12,0x3c,0x33,0xb7,0xe0,0x9f,0xf9};
    uint256_from_bytes(multiplier, multiplier96);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product96, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier97[32]   = {0x61,0xa0,0xf3,0x50,0x65,0x5e,0xb5,0x37,0x0b,0xad,0x5a,0x8b,0xad,0xb4,0x65,0x39,0x21,0xe2,0x94,0xc0,0xfe,0x58,0xc0,0x3a,0xa2,0x18,0x63,0x29,0xaf,0xf6,0x91,0xc0};
    static std::uint8_t product97[64]      = {0x25,0x3b,0x5d,0x93,0xf8,0x92,0x35,0x67,0x8b,0x03,0x97,0xe8,0x72,0x63,0xd8,0x5e,0xb8,0xb4,0x79,0x28,0x2d,0x15,0x49,0x31,0x4f,0xba,0xde,0x44,0xd7,0x62,0x5d,0x63,0xfd,0x9a,0x70,0x17,0x30,0x38,0x97,0x72,0xce,0xb3,0xe3,0xdb,0x9f,0x53,0x70,0x87,0x35,0xa5,0x39,0x66,0x4b,0x48,0x5e,0x94,0xde,0xa8,0x38,0x40,0xef,0xfb,0x10,0x00};
    uint256_from_bytes(multiplier, multiplier97);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product97, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier98[32]   = {0x61,0xf1,0x42,0x8e,0x1a,0x70,0xcb,0x98,0x55,0xa5,0xa2,0x8f,0x85,0xf2,0x2c,0x74,0x84,0x46,0xe6,0xd1,0xde,0xa6,0x15,0x21,0x97,0x67,0xe1,0x24,0x82,0xd2,0x91,0x7b};
    static std::uint8_t product98[64]      = {0x25,0x78,0xb7,0xce,0x10,0xe4,0xd7,0x2c,0x46,0x90,0x4b,0x42,0xf9,0xe9,0x98,0x5f,0x5d,0x26,0xa4,0xca,0xe5,0xa2,0x83,0x1a,0x19,0x30,0x4d,0x05,0xc5,0x47,0x3a,0x11,0x3f,0x59,0xa0,0x01,0xdc,0x6f,0xbc,0x08,0x4f,0xb8,0x2d,0x08,0x1e,0x55,0x15,0xc9,0x1c,0x01,0x2a,0xdc,0x49,0x62,0x8f,0xf1,0x5c,0xc7,0xa9,0x8b,0xec,0x78,0x91,0x19};
    uint256_from_bytes(multiplier, multiplier98);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product98, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }

    static std::uint8_t multiplier99[32]   = {0xc5,0x02,0x95,0x93,0xd1,0x27,0xed,0xdc,0x64,0x25,0x49,0x20,0x84,0xda,0xc4,0x4a,0xf6,0xef,0xda,0xa3,0x30,0x86,0x33,0x76,0xde,0x6a,0x1b,0xab,0x71,0xc0,0xa8,0x87};
    static std::uint8_t product99[64]      = {0x97,0x9c,0xfa,0x3c,0x2d,0x9c,0x1f,0x87,0x43,0x32,0xe3,0x6b,0xcc,0x99,0xcf,0x72,0x5e,0x74,0x6f,0x64,0x9c,0xc6,0x49,0xd4,0xda,0x65,0x08,0x00,0x51,0xb8,0x98,0xd6,0x73,0xc3,0xf0,0x41,0x71,0xee,0x8f,0xd1,0x6b,0x75,0xdc,0x16,0x9c,0x89,0x3e,0xfe,0x6e,0xa5,0xe2,0x24,0xf4,0x57,0x1b,0x19,0x81,0x45,0x44,0x1e,0x67,0x71,0x77,0x31};
    uint256_from_bytes(multiplier, multiplier99);
    uint256_sqr(product[0], multiplier);
    uint256_to_bytes(product_data + 32, product[0]);
    uint256_to_bytes(product_data, product[1]);
    if (std::memcmp(product99, product_data, 64) != 0)
    {
        throw std::runtime_error("err in common::uint256_mul");
    }
}