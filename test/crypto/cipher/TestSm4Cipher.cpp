#include <gmlib/crypto/cipher/Sm4Cipher.h>
#include <stdio.h>
#include <string.h>
#include <stdexcept>

static uint8_t user_key[16] = {
    0x04, 0xb5, 0xf0, 0x47, 0x03, 0xe2, 0x02, 0x5f,
    0x5d, 0x08, 0x46, 0xc8, 0x0a, 0x68, 0x19, 0xa0,
};

static uint8_t pt[] = {
    0x13, 0xf1, 0xdb, 0xd4, 0x4e, 0x92, 0x3a, 0x83, 0xd0, 0x23, 0x29, 0x7d,
    0xb0, 0x72, 0x59, 0x22, 0x12, 0x9f, 0x6f, 0xff, 0xc1, 0x85, 0x11, 0xde,
    0x69, 0xcf, 0xca, 0x6f, 0x9a, 0xf5, 0xdc, 0x42, 0xcf, 0x85, 0x56, 0x0a,
    0x54, 0x42, 0xdd, 0x96, 0x36, 0x6b, 0x80, 0x22, 0x6d, 0x23, 0x19, 0x36,
    0xa4, 0x88, 0x3d, 0xc9, 0x7a, 0x46, 0x88, 0x4d, 0x6f, 0x2a, 0xd6, 0x83,
    0xc9, 0xbd, 0xa5, 0x29, 0x02, 0x20, 0xaa, 0xb3, 0x8c, 0xaa, 0xa2, 0x71,
    0x45, 0x0b, 0x23, 0x1b, 0x6b, 0x26, 0x7d, 0x8a, 0x37, 0x7d, 0x77, 0xb0,
    0xfd, 0xbb, 0x90, 0xaf, 0x98, 0xc5, 0xda, 0xdd, 0x18, 0x63, 0x0d, 0x02,
    0xe8, 0x7a, 0x07, 0x58, 0xe4, 0xda, 0x47, 0x7c, 0x24, 0xe2, 0x9a, 0x99,
    0xfd, 0xd8, 0x20, 0x4e, 0x8a, 0x77, 0xeb, 0x77, 0xbf, 0x47, 0x0b, 0x23,
    0xaf, 0xd1, 0x20, 0x4c, 0xc8, 0xfa, 0x8b, 0x71,
};

static uint8_t ct[] = {
    0x17, 0x4e, 0x2c, 0x91, 0x20, 0xf1, 0x08, 0x02, 0xec, 0x3e, 0x28, 0x79,
    0xe0, 0xd8, 0x7e, 0x60, 0x67, 0x35, 0x10, 0x06, 0x2b, 0x79, 0x79, 0xd8,
    0xe4, 0xc3, 0x88, 0x49, 0x9d, 0x7c, 0x32, 0x85, 0x94, 0x2c, 0xd2, 0x60,
    0x10, 0x99, 0x74, 0xf9, 0x41, 0x39, 0x71, 0x23, 0xfb, 0x98, 0x3d, 0x91,
    0xfe, 0xc3, 0x08, 0x5e, 0x20, 0x4c, 0xdc, 0x75, 0xcd, 0x72, 0x4c, 0x3c,
    0x9d, 0xdb, 0x9e, 0x88, 0x5a, 0xcb, 0x73, 0x14, 0x2b, 0xb1, 0xf9, 0x98,
    0x42, 0xa2, 0x34, 0x5d, 0x6f, 0xf3, 0xdd, 0xc2, 0xc5, 0x09, 0xe8, 0x74,
    0x20, 0xc3, 0xae, 0x87, 0x2b, 0x55, 0xca, 0x53, 0x78, 0xdb, 0x2e, 0x89,
    0x18, 0xb3, 0x91, 0x8b, 0xd5, 0x6c, 0x81, 0x46, 0x9f, 0x74, 0x96, 0x70,
    0xac, 0x53, 0x7b, 0x87, 0x34, 0x18, 0xff, 0x04, 0xd3, 0x62, 0x80, 0xef,
    0xdb, 0x04, 0xeb, 0x39, 0xe0, 0xe7, 0x03, 0xa2,
};

using namespace gmlib;
using namespace std;

void TestSm4Cipher()
{
    uint8_t buffer[sizeof(pt)];
    size_t  block_num = sizeof(pt) / Sm4Cipher::BLOCK_SIZE;
    size_t  size      = sizeof(pt);
    auto    cipher    = Sm4Cipher(user_key, Sm4Cipher::ENCRYPTION);
    cipher.crypt_blocks(buffer, pt, block_num);
    if (memcmp(buffer, ct, size) != 0)
    {
        throw std::exception("Error in Sm4Cipher Encryption Mode");
    }
    cipher.set_key(user_key, Sm4Cipher::DECRYPTION);
    cipher.crypt_blocks(buffer, ct, block_num);
    if (memcmp(buffer, pt, size) != 0)
    {
        throw std::exception("Error in Sm4Cipher Decryption Mode");
    }
}